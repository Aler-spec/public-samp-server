// Compilador: Zeex 3.10.8
// YSI 5.x
// MySQL R41-4
// Gamemode RPG-base do PetrickSchoba.
// Algumas/várias ideias, models e etc foram retiradas/replicadas do Advanced Roleplay.
// Várias funções, sistemas e afins foram retirados dos scripts: South Central, Sublime RP.it, LS-RP Replica, CA-RP, Next Generation Roleplay ...
// Bom uso!


//Bugs? Sempre tem bugs, a maioria dos sistemas nao foram testados, então..
//o mapeamento (dinâmico) não está incluso.

// - [ Includes ]
#include a_samp 					//SA-MP
#include a_mysql  					//BlueG
#include YSI_Data\y_iterate 		//Y_Less
#include streamer 					//Incognito
#include sscanf2  					//Y_Less
#include easyDialog 				//Emmet
#include eSelection  				//?
#include Pawn.RakNet 				//YourShadow
#include Pawn.CMD 					//YourShadow
#include attachment-fix				//Jelly23
#include tpi 						//Jelly23
#include discord-connector 			//maddinat0r
#include strlib 					//Slice
#include PreviewModelDialog 		//Gammix
//nao sei se os créditos estão corretos, w/e

#if defined MAX_VEHICLES
#undef MAX_VEHICLES
#define MAX_VEHICLES 	(2000)
#endif

#if defined MAX_PLAYERS
#undef MAX_PLAYERS
#define MAX_PLAYERS 	(200)
#endif
 
main() { }

native IsValidVehicle(vehicleid);

// - [ Cores ]
//LIGHT COLORS
#define COLOR_LIGHTBLUE 	(0x33CCFFFF)
#define COLOR_LEMON 		(0x33FF00FF)
#define COLOR_LIGHTGREEN 	(0xC5FFC2FF)
#define COLOR_LIGHTPINK 	(0xFFB7FFFF)
#define COLOR_LIGHTYELLOW 	(0xFFFF99FF)

//NORMAL COLORS
#define COLOR_WARNING 		(0xFF6347FF)
#define COLOR_PURPLE 		(0xC2A2DAFF)
#define COLOR_WHITE 		(0xFFFFFFFF)
#define COLOR_GREY 			(0xBFC0C2FF)
#define COLOR_GREEN 		(0x32CD32FF)
#define COLOR_ORANGE 		(0xFFA500FF)
#define COLOR_YELLOW 		(0xEBEB00FF)

//DARK COLORS
#define COLOR_DARKBLUE 		(0x2641FEFF)
#define COLOR_DARKYELLOW	(0xFFAE00FF)
#define COLOR_DARKGREEN		(0x33AA33FF)

//Chat
#define COLOR_CHAT1 		(0xE6E6E6E6)
#define COLOR_CHAT2 		(0xC8C8C8C8)
#define COLOR_CHAT3 		(0xAAAAAAAA)
#define COLOR_CHAT4 		(0x8C8C8C8C)

//Server
#define COLOR_RP1 			(0xCCE6E6FF)
#define COLOR_RP2 			(0xE2FFFFFF)
#define COLOR_SAMP 			(0xADC3E7FF)

// Rádio
#define COLOR_RADIO			(0xFFEC8BFF)

// Admin
#define COLOR_ADMIN			(0x8B96ABFF)

// - [ Define ]
//Local
#define MYSQL_USER 		"root"
#define MYSQL_PASS 		""
#define MYSQL_IP 		"localhost"
#define MYSQL_DB 		"rpserver"

//Servidor
#define SERVER_NAME 		"MeioTermo RP/G"
#define SERVER_GM_TEXT 		"RPG 0.0.0" //Trocar a cada atualização.
#define LAST_UPDATE			"X de XX de XXX" //Assim como a versão, alterar o dia também!
#define SERVER_HOSTNAME 	"hostname MeioTermo RP/G | [0.3.DL-R1]"
#define SERVER_SITE			"http://meiotermo.com.br"
#define SERVER_IP			"ip.meiotermo-rpg.com.br"
#define GMT_TIME			(-2)

#define this::%0(%1) 		forward %0(%1); public %0(%1)

#define MAX_TELEPORTES 			(100)		//Iterator
#define MAX_INVENTORY 			(20)
#define MAX_DROPPED_ITEMS 		(300)		//Iterator
#define MAX_ENTRANCES 			(40)		//Iterator
#define MAX_HOUSES 				(1500)		//Iterator
#define MAX_HOUSES_STORAGE 		(7)
#define MAX_HOUSES_WEAPON		(8)
#define MAX_CASAS_JOGADOR 		(3)
#define MAX_CARROS_JOGADOR 		(6)
#define MAX_CAR_INV_STORAGE 	(6)
#define MAX_GPS_LOCATIONS 		(10)
#define MAX_LISTED_ITEMS 		(10)
#define MAX_ATM_MACHINES 		(50)		//Iterator
#define MAX_OBJECTDATA 			(20000) 	//Iterator
#define MAX_3DTEXT_OBJECT		(400)	
#define MAX_SPEED_CAMERAS 		(100)		//Iterator
#define MAX_PLAYER_TICKETS 		(10)
#define MAX_REPORTS 			(150) 		//Iterator
#define MAX_VAULT 				(50)		//Iterator
#define MAX_VAULT_WEAPON 		(20)
#define MAX_CRATES 				(20)		//Iterator
#define MAX_WH 					(10)		//Iterator
#define MAX_BARRIES 			(100)		//Iterator
#define MAX_SECURITY_CAM 		(100)		//Iterator
#define MAX_GATES 				(50)		//Iterator
#define MAX_ITEM_PLAYER 		(10)
#define MAX_BUSINESS_PRODUCT	(20)
#define MAX_BUSINESS 			(100)		//Iterator
#define MAX_BUSINESS_PLAYER 	(2)
#define MAX_PUMP 				(100)		//Iterator
#define MAX_INDUSTRY 			(50)		//Iterator
#define MAX_INDUSTRY_PRODUCT	(20)
#define MAX_TRASHCANS 			(200)		//Iterator
#define MAX_TRASH_VEHICLE 		(50)
#define MAX_CHOPSHOP			(20)		//Iterator
#define MAX_GROUPS				(100)		//Iterator
#define MAX_FAMILIES 			(30)		//Iterator
#define MAX_INDEX_OBJECT		(15)
#define MAX_SEWER				(40)		//Iterator
#define MAX_PLAYER_DAMAGE		(100)
#define MAX_TOWERS				(10)		//Iterator
#define MAX_COMPLEX				(50)		//Iterator

//Sistema de páginas
#define MAX_PAGE_AD 			(10)
#define MAX_PAGE_FURNITURE 		(50)
#define MAX_PAGE_LOG 			(30)

#define ADMIN_Moderator 		(1)
#define ADMIN_GameAdmin1 		(2)
#define ADMIN_GameAdmin2 		(3)
#define ADMIN_GameAdmin3 		(4)
#define ADMIN_HeadStaff 		(5)
#define ADMIN_LeadStaff 		(1000)
#define ADMIN_Management 		(1337)

#define EMPREGO_Nenhum 			(0)
#define EMPREGO_Taxista 		(1)
#define EMPREGO_Caminhoneiro	(2)
#define EMPREGO_Mecanico 		(3)
#define EMPREGO_Lixeiro 		(4)
#define EMPREGO_LadraoCarros	(5)
#define EMPREGO_Advogado 		(6)
#define EMPREGO_Pescador		(7)
#define EMPREGO_Arquiteto		(8)

#define JogadorOff 					"Jogador ID informado é inválido ou está desconectado."
#define AdminError					"Você não possui acesso administrativo suficiente ou não está em modo trabalho."

#define FACTION_GOV 			(1)
#define FACTION_POLICE 			(2)
#define FACTION_MEDIC 			(3)
#define FACTION_GANGSTER		(4)
#define FACTION_MOTOCLUB 		(5)
#define FACTION_CARTEL 			(6)
#define MAX_FACTIONS 			(50)		//Iterator

#define MAX_ARREST_POINTS 		(10)		//Iterator

#define MODEL_SELECTION_SKINS 			(1)
#define MODEL_SELECTION_ADD_SKIN 		(2)
#define MODEL_SELECTION_FACTION_SKIN 	(3)
#define MODEL_SELECTION_BUY_SKIN 		(4)

#define SPAWN_CIVIL_X 		(1742.7780)
#define SPAWN_CIVIL_Y 		(-1861.3672)
#define SPAWN_CIVIL_Z 		(13.5776)

#define DEALERSHIP_X		(1703.0704)
#define DEALERSHIP_Y		(-1470.5320)
#define DEALERSHIP_Z		(13.5469)

#define BLACKMARKET_NUMBER	(3245987)

#define REFUND_MONEY		(1)
#define REFUND_WEAPON		(2)
#define REFUND_VEHICLE		(3)
#define REFUND_LSD			(4)
#define REFUND_COCAINE		(5)
#define REFUND_MARIJUANA	(6)
#define REFUND_GUNPART		(7)

#define ENTRANCE_TYPE_BANK		(1)
#define ENTRANCE_TYPE_CITYHALL	(2)
#define ENTRANCE_TYPE_GYM		(3)
#define ENTRANCE_TYPE_DMV		(4)
#define ENTRANCE_TYPE_POLICE	(5)
#define ENTRANCE_TYPE_HOSPITAL	(6)

#define VEHICLE_TYPE_CAR        (1)
#define VEHICLE_TYPE_AIRPLANE   (2)
#define VEHICLE_TYPE_TRUCK      (3)
#define VEHICLE_TYPE_BOAT       (4)
#define VEHICLE_TYPE_TRAILER    (5)
#define VEHICLE_TYPE_BIKE       (6)
#define VEHICLE_TYPE_SPECIAL    (7)

//Defines de dialogs
#define DIALOG_BUY_ITEMS 			"Bones e chapéus\nCapacetes\nToucas e bandanas\nÓculos\nBolsas\nRelógios"
#define DIALOG_BUY_FURNITURE 		"{FFFF00}Buscar mobília por nome\n{FFFFFF}Móveis\nConforto\nDecoração\nEletrônicos e Eletrodomésticos\nCozinha\nBanheiro\nArmazenamento\nOutros\nEspeciais"
#define DIALOG_LIST_TEXTURE 		">> Remover textura\nConcreto\nMadeira\nOutros"
#define DIALOG_LIST_VEHICLES 		"Conversíveis\nLow Riders\nOff Roads\nIndustriais e Pesados\nEsportivos\nClássicos\nStation Wagons\nMotocicletas\n{CD7F32}Helicópteros\nServiços públicos\nÚnicos"
#define DIALOG_VEHICLE_UPGRADES 	">> Localizador (Atual: %d)\n>> Seguro (Atual: %d)\n>> Trava (Atual: %d)\n>> XM Rádio (Atual: %d)\n>> ExpressWay"
#define DIALOG_MAIN_FURNITURE 		"Inventário de mobília\nComprar mobilia\nInformações\nResetar mobília\nPermissões"
#define DIALOG_MAIN_FURNITURE_NO 	"Inventário de mobília\nComprar mobilia\nInformações"
#define DIALOG_COLOR_LIST			">> Remover cor\n{E8ECF2}Branco\n{FF0000}Vermelho\n{FFFF00}Amarelo\n{FFFFFF}Preto\n{00FFFF}Azul\n{0000FF}Azul escuro\n{808080}Cinza\n{00FF00}Verde\n{004000}Verde escuro\n{008080}Ciano\n{400080}Roxo"

//AntiCheat
#define AC_WARN 				(0)
#define AC_KICK 				(1)
#define AC_BAN 					(2)

#define AC_FAKEKILL 			(0)
#define AC_SPEEDHACK_CAR 		(1)
#define AC_SPEEDHACK_ONFOOT 	(2)
#define AC_FLYHACK 				(3)
#define AC_JETPACK 				(4)
#define AC_ARMOR 				(5)
#define AC_HEALTH 				(6)
#define AC_WEAPONHACK 			(7)
#define AC_TELEPORTHACK 		(8)
#define AC_CRASHHACK 			(9)
#define AC_CARMODHACK 			(10)
#define AC_CARTROLLHACK			(11)
#define AC_AIRBREAK				(12)
#define AC_REPAIRHACK			(13)
#define AC_INVISIBLEHACK		(14)
#define AC_SILENTAIM			(15)
//Airbreak
#define MAX_FLAGGED_DETECTIONS	(3)
#define ONFOOT_DISTANCE			(75.0)
#define VEHICLE_DISTANCE		(50.0)

//KeyState
#define HOLDING(%0)		((newkeys & (%0)) == (%0))
#define RELEASED(%0) 	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define PRESSED(%0) 	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

//Car
#define BLOCK_NONE			(0)
#define LESS_DAMAGE_FIST	(1)
#define LESS_DAMAGE_MELEE	(2)
#define BLOCK_PHYSICAL		(3)

//Discord
#define DDCMD:%1(%2)	forward ddkmd_%1(%2); public ddkmd_%1(%2)

//Client Message
#define SendSyntaxMessage(%0,%1)		SendClientMessageEx(%0, COLOR_GREY, "USE: {FFFFFF}"%1)
#define SendWarningMessage(%0,%1)		SendClientMessageEx(%0, COLOR_WARNING, %1)
#define SendGreenMessage(%0,%1)			SendClientMessageEx(%0, COLOR_GREEN, %1)
#define SendServerMessage(%0,%1)		SendClientMessageEx(%0, COLOR_WHITE, "SERVER: "%1)
#define SendFormatMessage(%0,%1,%2,%3)	SendClientMessageEx(%0, %1, %2":{FFFFFF} "%3)
#define SendAdminAction(%0,%1)			SendClientMessageEx(%0, COLOR_WHITE, "* "%1)
//Togs
#define SendNewsMessage(%0,%1)			if(!PlayerData[%0][pTogNews]) SendClientMessageEx(%0, COLOR_ORANGE, "NEWS: "%1)
#define SendAdMessage(%0,%1)			if(!PlayerData[%0][pTogAd]) SendClientMessageEx(%0, COLOR_GREEN, %1)

//Bodyparts
#define BODY_PART_CHEST			(3)
#define BODY_PART_GROIN 		(4)
#define BODY_PART_LEFT_ARM 		(5)
#define BODY_PART_RIGHT_ARM 	(6)
#define BODY_PART_LEFT_LEG 		(7)
#define BODY_PART_RIGHT_LEG 	(8)
#define BODY_PART_HEAD 			(9)

//States
#define PLAYER_STATE_ALIVE		(1)
#define PLAYER_STATE_WOUNDED	(2)
#define PLAYER_STATE_DEAD		(3)

//Alterações de stocks
#define EditDynamicObject(%0,%1)		SetTimerEx("EditDynamicObjectEx", 1000, false, "dd", %0, %1)
#define DestroyDynamicObject(%0)		DestroyDynamicObjectEx(%0)

//sprintf
new stringsprintf[256];
#define sprintf(%0,%1)		(format(stringsprintf, sizeof(stringsprintf), %0, %1), stringsprintf)

//ROBBER
#define ROBBING_ATM			(1)
#define ROBBING_BUSINESS	(2)

//Dealership Textdraws Global
#define DEALERSHIP_TITLE				(1)
#define DEALERSHIP_INFO_TEXT			(2)
#define DEALERSHIP_EXTRA_TEXT			(3)
#define DEALERSHIP_BUYBOX_1				(4)
#define DEALERSHIP_BUYBOX_2				(5)
#define DEALERSHIP_BUY_TEXT				(6)
#define DEALERSHIP_CANCELBOX_1			(7)
#define DEALERSHIP_CANCELBOX_2			(8)
#define DEALERSHIP_CANCEL_TEXT			(9)
#define DEALERSHIP_INSURANCE_LEFT		(10)
#define DEALERSHIP_INSURANCE_RIGHT		(11)
#define DEALERSHIP_LOCK_LEFT			(12)
#define DEALERSHIP_LOCK_RIGHT			(13)
#define DEALERSHIP_LOCATOR_LEFT			(14)
#define DEALERSHIP_LOCATOR_RIGHT		(15)
#define DEALERSHIP_XMRADIO_LEFT			(16)
#define DEALERSHIP_XMRADIO_RIGHT		(17)
#define DEALERSHIP_COLOR1_LEFT			(18)
#define DEALERSHIP_COLOR1_RIGHT			(19)
#define DEALERSHIP_COLOR2_LEFT			(20)
#define DEALERSHIP_COLOR2_RIGHT			(21)
#define MAX_DEALERSHIP_GLOBAL			(22)
//Dealership Textdraws Player
#define DEALERSHIP_MODEL_PREVIEW		(1)
#define DEALERSHIP_COLOR1_PREVIEW		(2)
#define DEALERSHIP_COLOR2_PREVIEW		(3)
#define DEALERSHIP_EXTRA_CAR			(4)
#define DEALERSHIP_INFO_CAR				(5)
#define MAX_DEALERSHIP_PLAYER			(6)


//Static Const e New;
static const g_aVehicleName[][] = {
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

static const Float:g_aVehicleTopSpeed[] = {
	157.0, 147.0, 186.0, 110.0, 133.0, 164.0, 110.0, 148.0, 100.0, 158.0, 129.0, 221.0, 168.0, 110.0, 105.0, 192.0, 154.0, 270.0, 115.0, 149.0,
	145.0, 154.0, 140.0, 99.0,  135.0, 270.0, 173.0, 165.0, 157.0, 201.0, 190.0, 130.0, 94.0,  110.0, 167.0, 0.0,   149.0, 158.0, 142.0, 168.0,
	136.0, 145.0, 139.0, 126.0, 110.0, 164.0, 270.0, 270.0, 111.0, 0.0,   0.0,   193.0, 270.0, 60.0,  135.0, 157.0, 106.0, 95.0,  157.0, 136.0,
	270.0, 160.0, 111.0, 142.0, 145.0, 145.0, 147.0, 140.0, 144.0, 270.0, 157.0, 110.0, 190.0, 190.0, 149.0, 173.0, 270.0, 186.0, 117.0, 140.0,
	184.0, 73.0,  156.0, 122.0, 190.0, 99.0,  64.0,  270.0, 270.0, 139.0, 157.0, 149.0, 140.0, 270.0, 214.0, 176.0, 162.0, 270.0, 108.0, 123.0,
	140.0, 145.0, 216.0, 216.0, 173.0, 140.0, 179.0, 166.0, 108.0, 79.0,  101.0, 270.0, 270.0, 270.0, 120.0, 142.0, 157.0, 157.0, 164.0, 270.0,
	270.0, 160.0, 176.0, 151.0, 130.0, 160.0, 158.0, 149.0, 176.0, 149.0, 60.0,  70.0,  110.0, 167.0, 168.0, 158.0, 173.0, 0.0,   0.0,   270.0,
	149.0, 203.0, 164.0, 151.0, 150.0, 147.0, 149.0, 142.0, 270.0, 153.0, 145.0, 157.0, 121.0, 270.0, 144.0, 158.0, 113.0, 113.0, 156.0, 178.0,
	169.0, 154.0, 178.0, 270.0, 145.0, 165.0, 160.0, 173.0, 146.0, 0.0,   0.0,   93.0,  60.0,  110.0, 60.0,  158.0, 158.0, 270.0, 130.0, 158.0,
	153.0, 151.0, 136.0, 85.0,  0.0,   153.0, 142.0, 165.0, 108.0, 162.0, 0.0,   0.0,   270.0, 270.0, 130.0, 190.0, 175.0, 175.0, 175.0, 158.0,
	151.0, 110.0, 169.0, 171.0, 148.0, 152.0, 0.0,   0.0,   0.0,   108.0, 0.0,   0.0
};

static const g_aVehicleType[] = {
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_SPECIAL, 
	VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRAILER, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, 
	VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_TRAILER, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_BOAT, 
	VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_SPECIAL, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRPLANE, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_AIRPLANE, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRUCK, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_BIKE, 
	VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_BIKE, 
	VEHICLE_TYPE_BIKE, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_SPECIAL, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, 
	VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, 
	VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRAILER, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_AIRPLANE, 
	VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_CAR, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_TRAILER, VEHICLE_TYPE_CAR, VEHICLE_TYPE_BIKE, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_TRAILER, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_AIRPLANE, VEHICLE_TYPE_SPECIAL, VEHICLE_TYPE_BOAT, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, 
	VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_CAR, VEHICLE_TYPE_TRAILER, VEHICLE_TYPE_TRAILER, VEHICLE_TYPE_TRAILER, VEHICLE_TYPE_TRUCK, VEHICLE_TYPE_TRAILER, 
	VEHICLE_TYPE_TRAILER
};

new

PlayerText:TelaPreta1[MAX_PLAYERS],
PlayerText:TelaPreta2[MAX_PLAYERS],
Horas, Minutos, Segundos, Ano, Mes, Dia,
gov_TaxVault,

//VW Update
VW_Player_Update[MAX_PLAYERS],

//Velocimetro digital
PlayerText:Velocimetro[MAX_PLAYERS],

//MYSQL DATABASE
MySQL:this,

//Sistema de Tutorial
Tutorial_ID[MAX_PLAYERS],

//Listed Items
ListedOptions[MAX_PLAYERS][60],
//BlackMarket
BlackMarketHasBought[MAX_FACTIONS],

//3dTexts objetos
Text3D:TextoObjetos[MAX_PLAYERS][MAX_3DTEXT_OBJECT],
MostrandoTextsObjeto[MAX_PLAYERS],

//Sistema de Guerra
War_Gangsters,
War_GangstersTime,
War_GangstersTeams,

War_Cartel,
War_CartelTime,
War_CartelTeams,

War_Motoclub,
War_MotoclubTime,
War_MotoclubTeams,

War_Kills[MAX_FACTIONS],
War_Members[MAX_FACTIONS],

//GMX e shutdown
bool:serverGMX,
bool:serverShutdown,
serverShutdownTime,

//Portas e portões
CancelaLSPD,
bool:StatusCancelaLSPD,
PrisionDoor[3],
bool:StatusPrisionDoor[3],
PrisionCell[24],
bool:StatusPrisionCell[24],

//Double PC
doubleExp,

//Textdraws Scramble
PlayerText:Unscrambler_PTD[MAX_PLAYERS][7],

//Hitmark
Text:Hitmark,

//Discord
DCC_Channel:Discord_AdminChat,
DCC_Channel:Discord_SosLog,
DCC_Role:Staff_Team,
DCC_Guild:MeioTermo_Discord,

//Informativo na compra de mobília
PlayerText:Player_BuyInfo,
Text:Global_BuyInfo,

//Chat VIP
bool:serverchatVIP,

//CPs
cp_Dealership,
cp_GarageLSPD,
cp_GarageASGH,

//Portas Automatizadas
bool:Door_247Idlewood,
Area_247Idlewood,

//Daily Task
PlayerText:DailyText[MAX_PLAYERS][9],
Daily_Opened[MAX_PLAYERS],

//Iterators
Iterator:Vehicles<MAX_VEHICLES>,
Iterator:Objects<MAX_OBJECTDATA>,
Iterator:DItems<MAX_DROPPED_ITEMS>,
Iterator:Houses<MAX_HOUSES>,
Iterator:Reports<MAX_REPORTS>,
Iterator:Business<MAX_BUSINESS>,
Iterator:Teleports<MAX_TELEPORTES>,
Iterator:Entrances<MAX_ENTRANCES>,
Iterator:ATM<MAX_ATM_MACHINES>,
Iterator:SpeedCameras<MAX_SPEED_CAMERAS>,
Iterator:Vault<MAX_VAULT>,
Iterator:Crate<MAX_CRATES>,
Iterator:WeaponHouse<MAX_WH>,
Iterator:Barrier<MAX_BARRIES>,
Iterator:SecurityCam<MAX_SECURITY_CAM>,
Iterator:Gates<MAX_GATES>,
Iterator:Pumps<MAX_PUMP>,
Iterator:Industry<MAX_INDUSTRY>,
Iterator:Factions<MAX_FACTIONS>,
Iterator:Arrests<MAX_ARREST_POINTS>,
Iterator:Garbage<MAX_TRASHCANS>,
Iterator:Chopshop<MAX_CHOPSHOP>,
Iterator:Groups<MAX_GROUPS>,
Iterator:Families<MAX_FAMILIES>,
Iterator:Sewer<MAX_SEWER>,
Iterator:Towers<MAX_TOWERS>,
Iterator:Complex<MAX_COMPLEX>,

//Global String
sz_MiscString[3300],

//Dealership
PlayerText:d_pText[MAX_PLAYERS][MAX_DEALERSHIP_PLAYER],
Text:d_gText[MAX_DEALERSHIP_GLOBAL]
;

//Forwards (Zeex)
forward Float:GetPlayerSpeed(playerid);
forward Float:ReturnVehicleTopSpeed(modelid);
forward Float:GetXYInFrontOfPlayer(playerid, &Float:q, &Float:w, Float:distance);
forward PlayerText:ShowPlayerBox(playerid, color);

//static const's
static const Float:cellPositions[][] =
{
	{1205.69995117, -1328.09997559, 797.00000000, 1205.699951, -1326.500000, 797.000000},
	{1205.69995117, -1331.30004883, 797.00000000, 1205.699951, -1329.700073, 797.000000},
	{1205.69995117, -1331.30004883, 800.50000000, 1205.699951, -1329.700073, 800.500000},
	{1205.69995117, -1328.09997559, 800.50000000, 1205.699951, -1326.500000, 800.500000},
	{1215.30004883, -1328.09997559, 797.00000000, 1215.300048, -1326.500000, 797.000000},
	{1215.30004883, -1331.30004883, 797.00000000, 1215.300048, -1329.700073, 797.000000},
	{1215.30004883, -1331.30004883, 800.50000000, 1215.300048, -1329.700073, 800.500000},
	{1215.30004883, -1328.09997559, 800.50000000, 1215.300048, -1326.500000, 800.500000},
	{1215.30004883, -1334.50000000, 797.00000000, 1215.300048, -1332.900024, 797.000000},
	{1215.29980469, -1337.69921875, 797.00000000, 1215.299804, -1336.099243, 797.000000},
	{1215.30004883, -1340.90002441, 797.00000000, 1215.300048, -1339.300048, 797.000000},
	{1215.30004883, -1340.90002441, 800.50000000, 1215.300048, -1339.300048, 800.500000},
	{1215.30004883, -1337.69995117, 800.50000000, 1215.300048, -1336.099975, 800.500000},
	{1215.30004883, -1334.50000000, 800.50000000, 1215.300048, -1332.900024, 800.500000},
	{1205.69995117, -1334.50000000, 800.50000000, 1205.699951, -1332.900024, 800.500000},
	{1205.69995117, -1337.69995117, 800.50000000, 1205.699951, -1336.099975, 800.500000},
	{1205.69995117, -1340.90002441, 800.50000000, 1205.699951, -1339.300048, 800.500000},
	{1205.69995117, -1334.50000000, 797.00000000, 1205.699951, -1332.900024, 797.000000},
	{1205.69995117, -1337.69995117, 797.00000000, 1205.699951, -1336.099975, 797.000000},
	{1205.69995117, -1340.90002441, 797.00000000, 1205.699951, -1339.300048, 797.000000},
	{1215.30004883, -1344.09997559, 800.50000000, 1215.300048, -1342.500000, 800.500000},
	{1215.30004883, -1344.09997559, 797.00000000, 1215.300048, -1342.500000, 797.000000},
	{1205.69995117, -1344.09997559, 800.50000000, 1205.699951, -1342.500000, 800.500000},
	{1205.69995117, -1344.09997559, 797.00000000, 1205.699951, -1342.500000, 797.000000}
};

static const Float:cellSpawns[][] =
{
	{1203.1132, -1327.7273, 796.7505, 270.0000},
	{1203.1155, -1327.7273, 800.2859, 270.0000},
	{1203.3879, -1330.7003, 796.7505, 270.0000},
	{1203.6357, -1330.7050, 800.2859, 270.0000},
	{1203.2362, -1333.9489, 796.7505, 270.0000},
	{1203.4561, -1333.9528, 800.2859, 270.0000},
	{1203.6705, -1337.3608, 796.7505, 270.0000},
	{1203.8181, -1337.3634, 800.2859, 270.0000},
	{1203.5663, -1340.5317, 796.7505, 270.0000},
	{1203.6039, -1340.5325, 800.2859, 270.0000},
	{1203.6083, -1343.6737, 796.7505, 270.0000},
	{1204.0961, -1343.5482, 800.2859, 270.0000},
	{1217.6519, -1344.3740, 796.7456, 90.0000},
	{1217.5179, -1344.3721, 800.2859, 90.0000},
	{1217.6549, -1341.3425, 796.7456, 90.0000},
	{1217.5161, -1341.4125, 800.2859, 90.0000},
	{1217.5902, -1338.0251, 796.7456, 90.0000},
	{1217.5662, -1338.0247, 800.2859, 90.0000},
	{1217.5626, -1334.7852, 796.7456, 90.0000},
	{1217.5070, -1334.7842, 800.2859, 90.0000},
	{1217.6984, -1331.5767, 796.7456, 90.0000},
	{1217.4537, -1331.5715, 800.2859, 90.0000},
	{1217.5966, -1328.5653, 796.7456, 90.0000},
	{1217.4222, -1328.5616, 800.2859, 90.0000}
};

static const VehicleColorTableRGBA[256] =
{
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
	0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
	0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
	0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
	0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
	0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
	0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
	0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
	0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
	0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
	0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
	0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
	0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
	0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

//Spawns Estacionamento LS
static const Float:EstacionamentoLS[102][4] =
{
	{1558.6053, -1011.9867, 23.6837, 180.3591},
	{1563.2448, -1011.6046, 23.6861, 179.1140},
	{1567.7656, -1011.8675, 23.6893, 182.8108},
	{1572.3182, -1012.4882, 23.6850, 181.5016},
	{1576.5229, -1012.5456, 23.6848, 179.6763},
	{1581.2405, -1011.3043, 23.6855, 188.6698},
	{1585.9131, -1011.1285, 23.6868, 188.5573},
	{1590.5369, -1010.8283, 23.6827, 188.4452},
	{1594.8794, -1010.0588, 23.6849, 185.7837},
	{1599.4294, -1010.0367, 23.6863, 186.2812},
	{1604.3503, -1009.8138, 23.6854, 175.8933},
	{1609.1010, -1009.9586, 23.6847, 180.5178},
	{1613.2137, -1009.9754, 23.6844, 178.9959},
	{1617.8773, -1010.0197, 23.6791, 178.2558},
	{1623.5884, -1010.4215, 23.6779, 160.2193},
	{1627.7080, -1011.9404, 23.6775, 161.8563},
	{1631.9349, -1013.7352, 23.6778, 162.4823},
	{1636.1907, -1014.4645, 23.6769, 161.6898},
	{1640.4136, -1016.2851, 23.6786, 161.6340},
	{1644.7816, -1017.1004, 23.6787, 162.0227},
	{1651.7421, -1017.9848, 23.6811, 191.6806},
	{1656.0590, -1017.1838, 23.6784, 191.2519},
	{1660.4299, -1016.0136, 23.6781, 189.7537},
	{1664.5538, -1015.4698, 23.6755, 190.0316},
	{1674.0996, -1013.5332, 23.6773, 197.3204},
	{1678.5658, -1011.8318, 23.6764, 197.4923},
	{1683.0017, -1010.6952, 23.6824, 197.9096},
	{1687.2450, -1008.7952, 23.6881, 200.1391},
	{1691.5914, -1008.1461, 23.6852, 198.8396},
	{1695.5554, -1007.1212, 23.6851, 196.3552},
	{1703.5956, -1006.1968, 23.6850, 172.3083},
	{1708.1722, -1006.0032, 23.6921, 171.9955},
	{1712.7103, -1006.9301, 23.6933, 172.1885},
	{1716.9189, -1007.4974, 23.6939, 171.1502},
	{1721.3243, -1007.6669, 23.6944, 172.8385},
	{1726.5812, -1008.2863, 23.7061, 168.8479},
	{1730.7439, -1009.0583, 23.7194, 167.7287},
	{1735.2208, -1010.4670, 23.7330, 168.0639},
	{1739.8324, -1011.0768, 23.7406, 166.5064},
	{1744.0144, -1012.3096, 23.7405, 166.2935},
	{1748.3889, -1013.3686, 23.7422, 165.8162},
	{1752.8412, -1014.8087, 23.7396, 165.0658},
	{1757.1433, -1015.4368, 23.7394, 166.4457},
	{1761.5651, -1015.8441, 23.7398, 170.2472},
	{1761.7104, -1037.0709, 23.7419, 180.8818},
	{1757.3881, -1036.6013, 23.7404, 180.4908},
	{1753.0203, -1036.6217, 23.7405, 180.7798},
	{1748.2483, -1037.3627, 23.7368, 181.4294},
	{1744.0740, -1036.6410, 23.7399, 179.4510},
	{1712.2567, -1035.0615, 23.6937, 178.2129},
	{1707.9025, -1035.3386, 23.6913, 179.4540},
	{1703.3751, -1034.9789, 23.6833, 179.9241},
	{1698.8826, -1035.2009, 23.6856, 179.7645},
	{1694.3666, -1035.0172, 23.6863, 177.1928},
	{1689.7650, -1035.4626, 23.6880, 178.7241},
	{1685.3995, -1035.4102, 23.6853, 180.0377},
	{1680.9492, -1035.6808, 23.6848, 178.9332},
	{1659.0669, -1037.1559, 23.6750, 177.0632},
	{1654.4309, -1037.4585, 23.6757, 178.6287},
	{1649.7974, -1037.1450, 23.6789, 180.2413},
	{1645.3165, -1037.4984, 23.6781, 179.7576},
	{1640.9758, -1037.1617, 23.6779, 180.0722},
	{1636.2090, -1037.2861, 23.6785, 180.2972},
	{1631.9075, -1037.8418, 23.6788, 180.4801},
	{1627.3812, -1037.7015, 23.6787, 179.9539},
	{1542.3539, -1024.5029, 23.6850, 340.7388},
	{1546.9766, -1025.0681, 23.6866, 343.7274},
	{1551.4572, -1026.5533, 23.6867, 343.1194},
	{1555.7780, -1027.5206, 23.6853, 343.6340},
	{1560.0544, -1028.6686, 23.6875, 344.5568},
	{1564.4485, -1029.8346, 23.6897, 345.3850},
	{1570.7131, -1034.1688, 23.6913, 322.2646},
	{1573.6549, -1037.1194, 23.6906, 322.9273},
	{1577.9498, -1039.2762, 23.6851, 322.3505},
	{1581.9313, -1043.4105, 23.6869, 309.5982},
	{1584.8712, -1046.5850, 23.6859, 308.4395},
	{1587.1779, -1050.7488, 23.6845, 308.8708},
	{1590.1029, -1054.0276, 23.6850, 309.6241},
	{1592.7196, -1057.2646, 23.6861, 307.5814},
	{1627.3187, -1046.8212, 23.6761, 358.6966},
	{1631.5736, -1046.5991, 23.6778, 357.8122},
	{1636.0731, -1046.6119, 23.6763, 359.4105},
	{1640.3641, -1046.7013, 23.6765, 0.4764},
	{1644.9908, -1047.2643, 23.6770, 359.6273},
	{1649.6097, -1046.7935, 23.6762, 358.0623},
	{1654.1548, -1047.0492, 23.6794, 358.9868},
	{1658.6128, -1046.9305, 23.6770, 0.6468},
	{1680.6284, -1044.3273, 23.6770, 359.0131},
	{1685.0608, -1044.2871, 23.6856, 359.5258},
	{1689.7164, -1044.3191, 23.6863, 1.3707},
	{1694.2446, -1044.8362, 23.6866, 0.2732},
	{1698.6693, -1044.3149, 23.6871, 359.0311},
	{1703.4348, -1044.3723, 23.6864, 359.6255},
	{1707.5782, -1044.2448, 23.6844, 359.8374},
	{1712.0768, -1044.3138, 23.6844, 359.3724},
	{1712.2871, -1044.3234, 23.6853, 0.1898},
	{1743.4624, -1046.6372, 23.7407, 358.9775},
	{1748.2800, -1046.4945, 23.7387, 358.8152},
	{1752.9592, -1046.3652, 23.7389, 358.7269},
	{1757.3784, -1046.4761, 23.7408, 0.0996},
	{1761.8301, -1046.8575, 23.7403, 358.3971},
	{1793.9546, -1060.9047, 23.7468, 179.2513}
};

//Spawn random comprou carro na conce
static const Float:SpawnConce[3][4] = 
{
	{1701.3755, -1484.9603, 12.9258, 179.1448},
	{1701.4128, -1509.6169, 12.9278, 180.1535},
	{1701.4949, -1540.7787, 12.9226, 180.1535}
};

static const Float:FishingPoints[10][3] =
{
	{398.7133, -2087.6455, 7.8359},
	{403.8729, -2088.2146, 7.8359},
	{396.1899, -2087.9658, 7.8359},
	{391.2660, -2088.2329, 7.8359},
	{383.3914, -2088.0808, 7.8359},
	{375.1353, -2088.0698, 7.8359},
	{369.9028, -2088.2214, 7.8359},
	{367.2635, -2088.4761, 7.8359},
	{362.2270, -2088.5398, 7.8359},
	{354.4496, -2088.7729, 7.8359}
};

static const Float:Mailboxes[3][3] = 
{
	{1284.1885, -1360.1292, 13.5526},
	{1284.2228, -1310.4664, 13.5368},
	{1493.6993, -1770.8257, 18.7958}
};

//Enumeradores
enum complexData
{
	complexExists,
	complexID,
	complexName[64],
	Float:complexX,
	Float:complexY,
	Float:complexZ,
	Float:complexIntX,
	Float:complexIntY,
	Float:complexIntZ,
	complexLocked,
	complexVW,
	complexInterior,
	Text3D:complexLabel,
	complexPickup
}	new ComplexData[MAX_COMPLEX][complexData];

enum E_ROADBLOCKS
{
	e_roadName[32],
	e_roadItem,
	Float:e_roadRotX,
	Float:e_roadRotY,
	Float:e_roadRotZ,
	Float:e_roadZoom
}

static const g_aRoadBlocks[][E_ROADBLOCKS] = {
	{"Redutor de velocidade", 19425, 0.0, 0.0, -45.0, 1.0},
	{"Cone", -3000, 0.0, 0.0, -45.0, 1.0},
	{"Cavalete", -3001, 0.0, 0.0, 5.0, 0.7},
	{"Tambor", 1237, 0.0, 0.0, -45.0, 1.0},
	{"Parada obrigatória", 19966, 0.0, 0.0, 185.0, 1.0},
	{"Barreira de solo", 19467, 0.0, 0.0, -45.0, 1.0},
	{"Guardrail Direção Direita", 978, 0.0, 0.0, -45.0, 1.0},
	{"Guardrail Direção Esquerda", 979, 0.0, 0.0, -45.0, 1.0},
	{"Checkpoint a frente", -3002, 0.0, 0.0, 185.0, 1.0},
	{"Desvio", -3003, 0.0, 0.0, 185.0, 1.0},
	{"Desvio a direita", -3004, 0.0, 0.0, 185.0, 1.0},
	{"Desvio a esquerda", -3005, 0.0, 0.0, 185.0, 1.0},
	{"Faixa amarela", -3006, 0.0, 0.0, 5.0, 0.4}
};

enum boomboxData
{
	bool:boomboxPlaced,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
}	new BoomboxData[MAX_PLAYERS][boomboxData];

enum towerData
{
	bool:towerExists,
	towerID,
	Float:towerSignal,
	Float:towerX,
	Float:towerY,
	Float:towerZ,
	Float:towerRX,
	Float:towerRY,
	Float:towerRZ,
	towerObject,
	towerName[64]
}	new TowerData[MAX_TOWERS][towerData];

enum e_phoneList
{
	cellItem,
	cellName[12],
	cellPrice
}

static const g_aPhoneList[][e_phoneList] = 
{
	{18865, "Laranja", 100},
	{18866, "Azul claro", 100},
	{18867, "Vermelho", 100},
	{18868, "Preto", 100},
	{18869, "Rosa", 100},
	{18871, "Verde", 100},
	{18872, "Azul escuro", 100},
	{18873, "Amarelo", 100},
	{18874, "Branco", 100},
	{330, "Padrão", 40}
};

enum e_colorObject
{
	colorRGB[11],
	colorName[18]
}

static const g_aTextureColor[][e_colorObject] = 
{
	{"0xFFE8ECF2", "Branco"},
	{"0xFFFF0000", "Vermelho"},
	{"0xFFFFFF00", "Amarelo"},
	{"0xFF000000", "Preto"},
	{"0xFF00FFFF", "Azul"},
	{"0xFF0000FF", "Azul escuro"},
	{"0xFF808080", "Cinza"},
	{"0xFF00FF00", "Verde"},
	{"0xFF004000", "Verde escuro"},
	{"0xFF008080", "Ciano"},
	{"0xFF400080", "Roxo"}
};

enum sewerData
{
	sewerExists,
	sewerID,
	sewerName[32],
	Float:sewerX,
	Float:sewerY,
	Float:sewerZ,
	Float:sewerRX,
	Float:sewerRY,
	Float:sewerRZ,
	sewerObject
}	new SewerData[MAX_SEWER][sewerData];

enum damageData
{
	damageTaken,
	damageTime,
	damageWeapon,
	damageShooter,
	damageBodypart,
	damageArmor
}	new DamageData[MAX_PLAYERS][MAX_PLAYER_DAMAGE][damageData];

enum familyData
{
	familyExists,
	familyID,
	familyName[64],
	familyTag[10],
	familyRanks,
	familyExpiresAt,
	familyPlusRenew,
	familyWarned
}	new FamilyData[MAX_FAMILIES][familyData];
new FamilyRanks[MAX_FAMILIES][4][32];

enum e_Jobs
{
	s_J_ID,
	s_J_Name[32],
	s_J_Paycheck
}
static const g_aJobs[][e_Jobs] = 
{
	{0, "Nenhum", 0},
	{1, "Taxista", 250},
	{2, "Caminhoneiro", 250},
	{3, "Mecânico", 250},
	{4, "Lixeiro", 250},
	{5, "Ladrão de Carros", 250},
	{6, "Advogado", 250},
	{7, "Pescador", 250},
	{8, "Arquiteto", 250}
};

enum e_Weather
{
	s_W_ID,
	s_W_Name[32]
}
static const g_aWeatherName[][e_Weather] = 
{
	{0, "Céu azul"},
	{8, "Tempestade"},
	{19, "Tempestade de areia"},
	{17, "Clima quente"},
	{20, "Esverdeado"}
};

enum groupData
{
	groupExists,
	groupID,
	groupName[64],
	groupRanks,
	groupExpiresAt,
	groupRobPlace,
	groupRobStyle,
	groupRobOut
}	new GroupData[MAX_GROUPS][groupData];
new GroupRanks[MAX_GROUPS][4][32];

enum
{
	MISSION_NONE,
	DISMANTLING_CAR,
	DISMANTLING_DROPOFF
}

enum chopshopData
{
	chopshopExists,
	chopshopID,
	chopshopCarWanted[15],
	Float:chopshopX,
	Float:chopshopY,
	Float:chopshopZ,
	Float:chopshopRX,
	Float:chopshopRY,
	Float:chopshopRZ,
	chopshopObject
}	new ChopshopData[MAX_CHOPSHOP][chopshopData];

enum unscrambleData
{
	unscrambleWorld[60]	
}	
static const UnscrambleData[][unscrambleData] =
{
	{"Novo"},
	{"Hidraulico"},
	{"Nitro"},
	{"Volante"},
	{"Marcha"},
	{"Acelerar"},
	{"Motor"},
	{"Hodometro"},
	{"Facil"},
	{"Server"}
};

enum trashData
{
	trashExists,
	trashID,
	trashObject,
	Float:trashPos[3],
	Float:trashRot[3],
	trashQuantity,
	trashType
}	new TrashData[MAX_TRASHCANS][trashData];

enum acServer
{
	acType,
	acName[32],
	acAction
}

static const ServerAC[][acServer] = {

	{0, "Fakekill Hack", AC_WARN},
	{1, "Speedhack (Car)", AC_WARN},
	{2, "Speedhack (OnFoot)", AC_WARN},
	{3, "Flyhack", AC_WARN},
	{4, "Jetpack Hack", AC_WARN},
	{5, "Armor Hack", AC_WARN},
	{6, "Health Hack", AC_WARN},
	{7, "Weapon Hack", AC_WARN},
	{8, "Teleport Hack", AC_WARN},
	{9, "Crash Hack", AC_WARN},
	{10, "Carmod Hack", AC_WARN},
	{11, "CarTroll (God of Car)", AC_WARN},
	{12, "Airbreak", AC_WARN},
	{13, "Repair Hack", AC_WARN},
	{14, "Invisible Hack", AC_WARN},
	{15, "SilentAim Hack", AC_WARN}
};

enum acData
{
	acKicked,
	acTime,
	acHealthTime,
	acArmorTime,
	acLastDeath,
	acTeleportTime,
	Float:acTpX,
	Float:acTpY,
	Float:acTpZ,
	acTeleportSafe,
	acCTCar,
	acCTTime,
	acCTJack,
	Float:acAirbreakPos[3],
	acAirbreakUpdateTick,
	acAirbreakImmunity,
	acAirbreakLastDetect,
	acAirbreakDetections,
	acPlayerWarns

}	new ACData[MAX_PLAYERS][acData];

enum acVehicle
{
	acRepairSafe,
	acRepairTime
}	new ACVehicle[MAX_VEHICLES][acVehicle];

enum pumpData
{
	pumpID,
	pumpExists,
	pumpBusinessID,
	Float:pumpX,
	Float:pumpY,
	Float:pumpZ,
	Float:pumpRX,
	Float:pumpRY,
	Float:pumpRZ,
	Text3D:pumpText,
	pumpObject
}	new PumpData[MAX_PUMP][pumpData];

enum attachData
{
	attachID,
	attachExists,
	attachObject,
	attachIndex,
	attachBone,
	attachUsing,
	attachName[64],
	Float:attachX,
	Float:attachY,
	Float:attachZ,
	Float:attachRX,
	Float:attachRY,
	Float:attachRZ,
	Float:attachSX,
	Float:attachSY,
	Float:attachSZ
}	new AttachData[MAX_PLAYERS][MAX_ITEM_PLAYER][attachData];

enum E_BUYITEM
{
	E_Slot,
	E_ObjectID,
	E_Name[64],
	E_Price,
	E_Bone
}

static const g_aAttachItems[][E_BUYITEM] = 
{
	//Bonés / Chapéus
	{0, 18947, "Chapéu Bowler", 150, 2},
	{0, 19095, "Chapéu de cowboy marrom", 75, 2},
	{0, 19096, "Chapéu de cowboy preto", 75, 2},
	{0, 18941, "Boné preto", 70, 2},
	{0, 18942, "Boné branco", 70, 2},
	{0, 18943, "Boné verde", 70, 2},
	 
	//Capacetes
	{1, 18977, "Capacete vermelho", 150, 2},
	{1, 18978, "Capacete branco", 150, 2},
	{1, 18967, "Capacete de motoqueiro", 110, 2},
	{1, 19115, "Capacete de motoqueiro com caveira", 125, 2},
	 
	// Toucas e bandanas
	{2, 2053, "Touca preta grande", 60, 2},
	{2, 18921, "Touca preta pequena", 50, 2},
	{2, 19069, "Touca preta pequena 2", 55, 2},
	{2, 18893, "Bandana branca e vermelha", 40, 2},
	{2, 18896, "Bandana preta e branca", 50, 2},
	{2, 18919, "Bandana branca", 30, 2},
	{2, 18913, "Bandana preta", 30, 2},
	{2, 19801, "Balaclava preta", 60, 2},
	 
	// Óculos
	{3, 19033, "Óculos c/ lente escura", 40, 2},
	{3, 19006, "Óculos c/ lente vermelha", 50, 2},
	{3, 19007, "Óculos c/ lente laranja", 50, 2},
	{3, 19008, "Óculos c/ lente verde", 50, 2},
	{3, 19009, "Óculos c/ lente azul", 50, 2},
	{3, 19027, "Óculos de aviador", 70, 2},
	 
	// Bolsas
	{4, 2919, "Bolsa de viagem", 130, 6},
	{4, 19624, "Maleta rockstar", 110, 6},
	{4, 1210, "Maleta empresarial", 130, 6},
	 
	// Relógios
	{5, 19042, "Relógio de ouro", 500, 6},
	{5, 19040, "Relógio de prata", 230, 6},
	{5, 19041, "Relógio de bronze", 150, 6}
};

enum maskData
{
	maskNumber,
	maskOwner[24],
	maskBought[32]
}	new MaskData[MAX_PLAYERS][maskData];

enum gateData
{
	gateID,
	gateExists,
	Float:gatePos[3],
	Float:gateRPos[3],
	Float:gateAPos[3],
	Float:gateARPos[3],
	Float:gateSpeed,
	gateInterior,
	gateWorld,
	gateObject,
	gateModel,
	gatePassword,
	gateOpened
}	new GateData[MAX_GATES][gateData];

enum roadData
{
	roadCreated,
	roadPlayer,
	Float:roadPos[3],
	Float:roadRPos[3],
	roadObject
}	new RoadData[MAX_BARRIES][roadData];

enum whData
{
	whExists,
	whID,
	whFactionID,
	whGunparts,
	Float:whPos[3],
	whInterior,
	whWorld,
	whPickup,
	Text3D:wh3dtext
}	new WhData[MAX_WH][whData];

enum crateData
{
	crateID,
	crateExists,
	crateType,
	crateQuantity,
	Float:cratePos[4],
	crateInterior,
	crateWorld,
	crateObject
}	new CrateData[MAX_CRATES][crateData];

enum LOCALENTREGA_BM
{
	Float:BM_X,
	Float:BM_Y,
	Float:BM_Z,
	Float:BM_A,
	BM_DESC[128]
}

static const g_aCrateLocation[][LOCALENTREGA_BM] =
{
	{414.38312, 2530.80151, 18.17765, 180.80803, "dentro de uma casa no Aeroporto Abandonado."},
	{-267.90631, 2654.21655, 61.67790, 270.00000, "do lado de uma rampa feita de areia perto da galinha gigante em Las Payasadas."},
	{-1455.57349, 2572.93652, 54.82958, 0.00000, "próximo a uma árvore perto dos trailers em El Quebrados."},
	{-1047.65454, 1553.01855, 32.30830, 40.00000, "em uma casa de madeira à esquerda de Las Barrancas."},
	{1356.17810, 486.96567, 19.20273, 179.07474, "atrás de uma caçamba no posto de Montgomery."},
	{2238.97388, 69.99510, 25.47920, 360.00000, "em um beco próximo a ponte de madeira quebrada em Palomino Creek."},
	{-70.94479, -98.07837, 2.11326, 259.20007, "dentro de um armazém em Bluebarry Farms."},
	{-340.00549, 1548.86218, 74.55795, 0.00000, "dentro de um galpão perto do satelite de San Andreas."}
};

enum vaultData
{
	vaultExists,
	vaultID,
	vaultFactionID,
	vaultMoney,
	vaultMarijuana,
	vaultCocaine,
	vaultLSD,
	vaultWeapon[MAX_VAULT_WEAPON],
	vaultAmmo[MAX_VAULT_WEAPON],
	Float:vaultPos[3],
	Float:vaultRPos[3],
	vaultInterior,
	vaultWorld,
	vaultObject,
	Text3D:Vault3dtext
}	new VaultData[MAX_VAULT][vaultData];

enum reportData
{
	rExists,
	rType,
	rPlayer,
	rText[128],
	rGetTime
}	new ReportData[MAX_REPORTS][reportData];

enum arrestPoints
{
	arrestID,
	arrestExists,
	Float:arrestPos[3],
	arrestInterior,
	arrestWorld,
	Text3D:arrestText3D,
	arrestPickup,
	arrestType
}	new ArrestData[MAX_ARREST_POINTS][arrestPoints];

enum carStorage
{
	cItemID,
	cItemExists,
	cItemName[32],
	cItemModel,
	cItemQuantity
}	new CarStorage[MAX_VEHICLES][MAX_CAR_INV_STORAGE][carStorage];

enum factionData
{
	factionID,
	factionExists,
	factionName[64],
	factionColor,
	factionType,
	factionRanks,
	Float:factionLockerPos[6],
	factionLockerIntVW[2],
	factionSkins[28],
	factionWeapons[10],
	factionAmmo[10],
	Text3D:factionText,
	factionObject,
	Float:factionSpawn[3],
	factionSpawnIntVW[3],
	factionPaycheck[15]
}	new FactionData[MAX_FACTIONS][factionData];
new FactionRanks[MAX_FACTIONS][15][32];

enum ticketData
{
	ticketID,
	ticketExists,
	ticketFee,
	ticketDate[36],
	ticketReason[64]
}	new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];

enum speedData
{
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D
}	new SpeedData[MAX_SPEED_CAMERAS][speedData];

enum atmData
{
	atmID,
	atmExists,
	Float:atmPos[3],
	Float:atmRPos[3],
	atmInterior,
	atmWorld,
	atmObject,
	atmRobbed,
	atmBeingRobbed,
	atmMoney,
	atmTime
}	new ATMData[MAX_ATM_MACHINES][atmData];

enum cameraData
{
	cameraExists,
	cameraID,
	Float:cameraPos[3],
	Float:cameraRPos[3],
	cameraInterior,
	cameraWorld,
	cameraObject
}	new CameraData[MAX_SECURITY_CAM][cameraData];

enum objectData
{
	objectID, 
	objectExists,
	Float:objectPos[3],
	Float:objectRPos[3],
	objectInterior,
	objectWorld,
	objectObject,
	objectModel,
	objectEditing
}	new ObjectData[MAX_OBJECTDATA][objectData];

enum
{
	INVALID_QUERY_ID,
	QUERY_CHECK_ACCOUNT,
	QUERY_LOAD_INVENTORY,
	QUERY_LOAD_GPS,
	QUERY_PLAYER_LOGIN,
	QUERY_LOAD_TICKETS,
	QUERY_LOAD_MASK,
	QUERY_BANK_HISTORY,
	QUERY_LOAD_ATTACHS
}

enum houseStorage
{
	hItemID,
	hItemExists,
	hItemName[32],
	hItemModel,
	hItemQuantity
}	new HouseStorage[MAX_HOUSES][MAX_HOUSES_STORAGE][houseStorage];

enum furnitureData
{
	furnitureID,
	furnitureHouse,
	Float:furnitureX,
	Float:furnitureY,
	Float:furnitureZ,
	Float:furnitureRotX,
	Float:furnitureRotY,
	Float:furnitureRotZ,
	furnitureInterior,
	furnitureVW,
	furnitureName[128],
	furnitureOriginalName[128],
	furniturePrice,
	furnitureModel,
	furnitureOpened,
	Float:furnitureDoorZ
}

new FurnitureData[furnitureData];

enum E_BUYFURNITURES
{
	ftrCategory[64],
	ftrSubcategory[64],
	ftrModelID,
	ftrName[128],
	ftrPrice
}

static const g_aFurnitures[][E_BUYFURNITURES] =
{
	/*=============== [Móveis - Mesas] ===============*/
	{"Móveis", "Mesas", 2024, "Mesa de vidro", 500},
	{"Móveis", "Mesas", 1827, "Mesa redonda de vidro", 180},
	{"Móveis", "Mesas", 1281, "Mesa com guarda-sol", 100},
	{"Móveis", "Mesas", 1432, "Mesa com cadeiras 1", 120},
	{"Móveis", "Mesas", 1594, "Mesa com cadeiras 2", 200},
	{"Móveis", "Mesas", 2799, "Mesa com cadeiras 3", 300},
	{"Móveis", "Mesas", 1433, "Mesa de madeira 1", 150},
	{"Móveis", "Mesas", 1516, "Mesa de madeira 2", 150},
	{"Móveis", "Mesas", 2126, "Mesa de centro 1", 225},
	{"Móveis", "Mesas", 2319, "Mesa de centro 2", 300},
	{"Móveis", "Mesas", 2321, "Mesa de centro 3", 350},
	{"Móveis", "Mesas", 3393, "Mesa de escritório 1", 500},
	{"Móveis", "Mesas", 3391, "Mesa de escritório 2", 250},
	{"Móveis", "Mesas", 2357, "Mesa longa", 400},
	{"Móveis", "Mesas", 2311, "Mesa para TV 1", 350},
	{"Móveis", "Mesas", 2314, "Mesa para TV 2", 350},
	{"Móveis", "Mesas", 2313, "Mesa para TV 3", 400},
	{"Móveis", "Mesas", 2315, "Mesa para TV 4", 350},
	{"Móveis", "Mesas", 2368, "Mesa para TV 5", 500},
	{"Móveis", "Mesas", 2328, "Mesa pequena", 120},
	{"Móveis", "Mesas", 2323, "Mesa grande", 250},
	{"Móveis", "Mesas", 2112, "Mesa quadrada 1", 200},
	{"Móveis", "Mesas", 2117, "Mesa quadrada 2", 300},
	{"Móveis", "Mesas", 1968, "Mesa branca com cadeiras vermelhas", 200},
	{"Móveis", "Mesas", 1969, "Mesa branca com cadeiras rosas", 200},
	{"Móveis", "Mesas", 2188, "Mesa de poker", 200},

	/*=============== [Móveis - Balcões] ===============*/
	{"Móveis", "Balcões", 2169, "Escrivaninha", 320},
	{"Móveis", "Balcões", 2173, "Escrivaninha 2", 335},
	{"Móveis", "Balcões", 2205, "Escrivaninha 3", 330},
	{"Móveis", "Balcões", 1736, "Escrivaninha 4", 385},  
	{"Móveis", "Balcões", 2334, "Balcão de cozinha 1", 150},
	{"Móveis", "Balcões", 2335, "Balcão de cozinha 2", 150},
	{"Móveis", "Balcões", 2338, "Balcão de cozinha 3", 120},
	{"Móveis", "Balcões", 2336, "Balcão de cozinha com pia", 150},
	{"Móveis", "Balcões", 2424, "Balcão de cozinha 1", 150},
	{"Móveis", "Balcões", 2423, "Balcão de cozinha 2", 120},
	{"Móveis", "Balcões", 2441, "Balcão de cozinha 3", 150},
	{"Móveis", "Balcões", 2442, "Balcão de cozinha 4", 120},
	{"Móveis", "Balcões", 2708, "Prateleira", 140},
	{"Móveis", "Balcões", 11686, "Balcão de bar", 1400},

	/*=============== [Móveis - Armários] ===============*/
	{"Móveis", "Armários", 2573, "Armário e escrivaninha", 500},
	{"Móveis", "Armários", 2167, "Armário de escritório",235},
	{"Móveis", "Armários", 2445, "Armário em granito 1", 700},
	{"Móveis", "Armários", 2303, "Armário em granito 2", 600},

	/*=============== [Móveis - Cadeiras] ===============*/
	{"Móveis", "Cadeiras e Poltronas", 1663, "Cadeira de escritório 1", 120},
	{"Móveis", "Cadeiras e Poltronas", 1715, "Cadeira de escritório 2", 350},
	{"Móveis", "Cadeiras e Poltronas", 1704, "Poltrona de madeira 1", 250},
	{"Móveis", "Cadeiras e Poltronas", 1705, "Poltrona de madeira 2", 250},
	{"Móveis", "Cadeiras e Poltronas", 1708, "Poltrona preta", 250},
	{"Móveis", "Cadeiras e Poltronas", 1711, "Poltrona bege, precária", 100},
	{"Móveis", "Cadeiras e Poltronas", 1735, "Poltrona antiga", 170},
	{"Móveis", "Cadeiras e Poltronas", 1714, "Poltrona elegante 1", 350},
	{"Móveis", "Cadeiras e Poltronas", 1727, "Poltrona elegante 2", 500},
	{"Móveis", "Cadeiras e Poltronas", 1716, "Banquinho 1", 40},
	{"Móveis", "Cadeiras e Poltronas", 2125, "Banquinho 2", 40},
	{"Móveis", "Cadeiras e Poltronas", 2723, "Banquinho 3", 120},
	{"Móveis", "Cadeiras e Poltronas", 1720, "Cadeira de madeira almofadada 1", 220},
	{"Móveis", "Cadeiras e Poltronas", 2120, "Cadeira de madeira almofadada 2", 90},
	{"Móveis", "Cadeiras e Poltronas", 2124, "Cadeira almofadada 3", 150},
	{"Móveis", "Cadeiras e Poltronas", 2123, "Cadeira almofadada 3", 200},
	{"Móveis", "Cadeiras e Poltronas", 1721, "Cadeira de madeira cinza", 25},
	{"Móveis", "Cadeiras e Poltronas", 1739, "Cadeira de cozinha", 250},
	{"Móveis", "Cadeiras e Poltronas", 1806, "Cadeira azul de escritório", 85},
	{"Móveis", "Cadeiras e Poltronas", 2079, "Cadeira de cozinha 1 ", 100},
	{"Móveis", "Cadeiras e Poltronas", 2120, "Cadeira de cozinha 2", 120},
	{"Móveis", "Cadeiras e Poltronas", 1810, "Cadeira preta", 50},
	{"Móveis", "Cadeiras e Poltronas", 2121, "Cadeira vermelha", 65},
	{"Móveis", "Cadeiras e Poltronas", 1811, "Cadeira de madeira", 35},

	/*=============== [Conforto - Camas] ===============*/
	{"Conforto", "Camas", 1700, "Cama de casal 1", 255},
	{"Conforto", "Camas", 1701, "Cama de casal 2", 275},
	{"Conforto", "Camas", 1745, "Cama de casal 3", 270},
	{"Conforto", "Camas", 1794, "Cama de casal 4", 150},
	{"Conforto", "Camas", 1799, "Cama de casal 5", 225},
	{"Conforto", "Camas", 1796, "Cama de solteiro 1",  120},
	{"Conforto", "Camas", 1797, "Cama de solteiro 2", 210},
	{"Conforto", "Camas", 1798, "Cama de solteiro 3", 230},
	{"Conforto", "Camas", 1800, "Cama precária",  80},
	{"Conforto", "Camas", 2563, "Cama kit", 995},
	{"Conforto", "Camas", 1793, "Colchão",  100},

	/*=============== [Conforto - Sofás] ===============*/
	{"Conforto", "Sofás", 1713, "Sofá preto simples", 200},
	{"Conforto", "Sofás", 1726, "Sofá preto elegante", 700},
	{"Conforto", "Sofás", 1702, "Sofá de madeira almofadado 1", 270},
	{"Conforto", "Sofás", 1703, "Sofá de madeira almofadado 2", 270},
	{"Conforto", "Sofás", 1706, "Sofá de madeira almofadado 3", 230},
	{"Conforto", "Sofás", 1709, "Sofá precário 1", 150},
	{"Conforto", "Sofás", 1710, "Sofá precário 2", 130},
	{"Conforto", "Sofás", 1712, "Sofá precário 3", 100},
	{"Conforto", "Sofás", 1753, "Sofá de couro", 520},
	{"Conforto", "Sofás", 1756, "Sofá usado 1", 170},
	{"Conforto", "Sofás", 1757, "Sofá usado 2", 180},
	{"Conforto", "Sofás", 1760, "Sofá médio 1", 160},
	{"Conforto", "Sofás", 1761, "Sofá médio 2", 170},
	{"Conforto", "Sofás", 1768, "Sofá médio 3", 185},

	/*=============== [Decoração - Plantas] ===============*/
	{"Decoração", "Plantas", 625, "Planta com vaso 1", 5},
	{"Decoração", "Plantas", 630, "Planta com vaso 2", 5},
	{"Decoração", "Plantas", 644, "Planta com vaso 3", 5},
	{"Decoração", "Plantas", 2001, "Planta com vaso 4", 5},
	{"Decoração", "Plantas", 2241, "Planta com vaso 5", 5},

	/*=============== [Decoração - Pôsters e grafites] ===============*/
	{"Decoração", "Pôsters e Grafites", 18659, "Grafite groove", 10},
	{"Decoração", "Pôsters e Grafites", 18660, "Grafite seville families", 10},
	{"Decoração", "Pôsters e Grafites", 18661, "Grafite varrio aztecas", 10},
	{"Decoração", "Pôsters e Grafites", 18662, "Grafite kilo tray ballas", 10},
	{"Decoração", "Pôsters e Grafites", 18663, "Grafite san fierro rifa", 10},
	{"Decoração", "Pôsters e Grafites", 18664, "Grafite temple drive ballas", 10},
	{"Decoração", "Pôsters e Grafites", 18665, "Grafite vagos", 10},
	{"Decoração", "Pôsters e Grafites", 18666, "Grafite front yard ballas", 10},
	{"Decoração", "Pôsters e Grafites", 18667, "Grafite rollin heights ballas", 10},
	{"Decoração", "Pôsters e Grafites", 1529, "Grafite ballas-groove", 10},
	{"Decoração", "Pôsters e Grafites", 1530, "Grafite aztecas-groove", 10},
	{"Decoração", "Pôsters e Grafites", 1531, "Grafite aztecas-groove", 10},
	{"Decoração", "Pôsters e Grafites", 2695, "Poster de rapper", 40},
	{"Decoração", "Pôsters e Grafites", 2696, "Poster com um cachrro", 40},
	{"Decoração", "Pôsters e Grafites", 2691, "Poster com vários rappers", 40},
	{"Decoração", "Pôsters e Grafites", 2685, "Sinal verde", 10},
	{"Decoração", "Pôsters e Grafites", 2687, "Sinal de higiene igiene", 10},
	{"Decoração", "Pôsters e Grafites", 2684, "Atestado", 10},
	{"Decoração", "Pôsters e Grafites", 2662, "Poster 'bobo'", 10},
	{"Decoração", "Pôsters e Grafites", 2615, "Poster várias armas", 60},
	{"Decoração", "Pôsters e Grafites", 2580, "Poster XXX 1", 50},
	{"Decoração", "Pôsters e Grafites", 2587, "Poster XXX 2", 50},
	{"Decoração", "Pôsters e Grafites", 2588, "Poster XXX 3", 50},
	{"Decoração", "Pôsters e Grafites", 2667, "Menu buster", 30},
	{"Decoração", "Pôsters e Grafites", 2668, "Menu the full rack", 30},
	{"Decoração", "Pôsters e Grafites", 2666, "Menu doubled luxe", 30},
	{"Decoração", "Pôsters e Grafites", 2665, "Menu completo", 30},
	{"Decoração", "Pôsters e Grafites", 2599, "Sex shop poster", 30},

	/*=============== [Decoração - Tapetes] ===============*/
	{"Decoração", "Tapetes", 2833, "Tapete 1", 210},
	{"Decoração", "Tapetes", 2834, "Tapete 2", 180},
	{"Decoração", "Tapetes", 2835, "Tapete 3", 180},
	{"Decoração", "Tapetes", 2836, "Tapete 4", 180},
	{"Decoração", "Tapetes", 2841, "Tapete 5", 180},

	/*=============== [Decoração - Especiais] ===============*/
	{"Decoração", "Outros", 19320, "Abóbora de halloween", 10},
	{"Decoração", "Outros", 19076, "Árvore de natal", 50},
	{"Decoração", "Outros", 19619, "Porta de cofre", 1500},
	{"Decoração", "Outros", 19059, "Bola natalina 1", 10},
	{"Decoração", "Outros", 19060, "Bola natalina 2", 10},
	{"Decoração", "Outros", 19061, "Bola natalina 3", 10},
	{"Decoração", "Outros", 1510, "Cinzeiro 1", 20},
	{"Decoração", "Outros", 1665, "Cinzeiro 2", 30},

	/*=============== [Eletrônicos/Eletrodomésticos - Televisões] ===============*/
	{"Eletrônicos e Eletrodomésticos", "Televisões", 2344, "Controle remoto", 200},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 1429, "Televisão normal 1", 220},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 1518, "Televisão normal 2", 225},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 1750, "Televisão de baixa qualidade 1", 210},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 1752, "Televisão de baixa qualidade 2", 210},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 2224, "Televisão esférica", 650},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 1786, "Televisão grande", 435},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 19786, "Televisão LCD - grande", 750},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 19787, "Televisão LCD - pequena", 500},
	{"Eletrônicos e Eletrodomésticos", "Televisões", 2606, "Várias televisões", 900},

	/*=============== [Eletrônicos/Eletrodomésticos - Iluminação] ===============*/
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 2026, "Lustre 1", 100},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 2074, "Lustre 2", 100},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 921, "Lustre industrial", 150},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 2069, "Lâmpada 1", 215},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 2108, "Lâmpada 2", 220},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 2239, "Lâmpada 3", 225},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 2074, "Lâmpada 4", 135},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 1734, "Lâmpada 5", 140},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 1893, "Lâmpada 6", 145},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 16780, "Lâmpada com ventilador", 200},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 19826, "Interruptor 1", 100},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 19827, "Interruptor 2", 100},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 19828, "Interruptor 3", 100},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 19279, "Luz forte", 100},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 2105, "Lâmpada", 100},
	{"Eletrônicos e Eletrodomésticos", "Iluminação", 19806, "Lustre de luxo", 100},

	/*=============== [Eletrônicos/Eletrodomésticos - Artigos de Cozinha] ===============*/
	{"Eletrônicos e Eletrodomésticos", "Artigos de cozinha", 2153, "Geladeira branca e cinza", 200},
	{"Eletrônicos e Eletrodomésticos", "Artigos de cozinha", 2131, "Frigobar 1", 450},
	{"Eletrônicos e Eletrodomésticos", "Artigos de cozinha", 2452, "Frigobar 2", 1500},
	{"Eletrônicos e Eletrodomésticos", "Artigos de cozinha", 2531, "Frigobar 3", 750},
	{"Eletrônicos e Eletrodomésticos", "Artigos de cozinha", 2170, "Forno de cozinha 1", 230},
	{"Eletrônicos e Eletrodomésticos", "Artigos de cozinha", 19915, "Forno de cozinha 2", 100},
	{"Eletrônicos e Eletrodomésticos", "Artigos de cozinha", 2421, "Microondas", 345},

	/*=============== [Eletrônicos/Eletrodomésticos - DVD e aparelhos de áudio] ===============*/
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 1622, "Câmera", 2900},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 2332, "Cofre", 225},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 1719, "Console", 200},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 1782, "Leitor de DVD", 150},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 1783, "Leitor de DVD 2", 150},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 2229, "Stereo", 300},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 2231, "Stereo 2", 350},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 2232, "Stereo 3", 550},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 2202, "Fotocopiadora",300},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 2226, "Som stereo", 200},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 19807, "Telefone", 110},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 19808, "Teclado", 110},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 19610, "Microfone", 50},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 19609, "Bateria", 250},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 19893, "Laptop aperto", 190},
	{"Eletrônicos e Eletrodomésticos", "DVD's e Áudio", 19894, "Laptop fechado", 170},

	/*=============== [Cozinha - Talheres] ===============*/
	{"Cozinha", "Pratos e talheres", 2822, "Pilha de pratos", 5},
	{"Cozinha", "Pratos e talheres", 2829, "Pratos 1", 7},
	{"Cozinha", "Pratos e talheres", 2830, "Pratos 2", 7},
	{"Cozinha", "Pratos e talheres", 19584, "Panela 1", 30},
	{"Cozinha", "Pratos e talheres", 19585, "Panela 2", 35},
	{"Cozinha", "Pratos e talheres", 19586, "Espátula", 20},

	/*=============== [Cozinha - Kit 1] ===============*/
	{"Cozinha", "Kit de cozinha 1", 2013, "Cozinha 1 - pia", 100},
	{"Cozinha", "Kit de cozinha 1", 2014, "Cozinha 1 - armário central 1", 100},
	{"Cozinha", "Kit de cozinha 1", 2015, "Cozinha 1 - armário central 2", 100},
	{"Cozinha", "Kit de cozinha 1", 2016, "Cozinha 1 - armário lateral esquerdo", 100},
	{"Cozinha", "Kit de cozinha 1", 2017, "Cozinha 1 - fogão", 120},
	{"Cozinha", "Kit de cozinha 1", 2018, "Cozinha 1 - lavadoura", 120},
	{"Cozinha", "Kit de cozinha 1", 2019, "Cozinha 1 - armário lateral direito", 100},

	/*=============== [Cozinha - Kit 2] ===============*/
	{"Cozinha", "Kit de cozinha 2", 2127, "Cozinha 2 - armário duplo", 230},
	{"Cozinha", "Kit de cozinha 2", 2128, "Cozinha 2 - armário três gavetas", 230},
	{"Cozinha", "Kit de cozinha 2", 2129, "Cozinha 2 - armário", 230},
	{"Cozinha", "Kit de cozinha 2", 2130, "Cozinha 2 - pia", 230},

	/*=============== [Cozinha - Kit 3] ===============*/
	{"Cozinha", "Kit de cozinha 3", 2141, "Cozinha 3 - geladeira", 250},
	{"Cozinha", "Kit de cozinha 3", 2131, "Cozinha 3 - armário duplo", 320},
	{"Cozinha", "Kit de cozinha 3", 2132, "Cozinha 3 - pia", 300},
	{"Cozinha", "Kit de cozinha 3", 2133, "Cozinha 3 - armário quatro gavetas", 300},
	{"Cozinha", "Kit de cozinha 3", 2134, "Cozinha 3 - armário com gaveta", 300},

	/*=============== [Cozinha - Kit 4] ===============*/
	{"Cozinha", "Kit de cozinha 4", 2135, "Cozinha 4 - fogão", 450},
	{"Cozinha", "Kit de cozinha 4", 2136, "Cozinha 4 - pia", 450},
	{"Cozinha", "Kit de cozinha 4", 2137, "Cozinha 4 - armário três gavetas", 450},
	{"Cozinha", "Kit de cozinha 4", 2138, "Cozinha 4 - armário inferior", 450},
	{"Cozinha", "Kit de cozinha 4", 2139, "Cozinha 4 - armário em granito", 450},

	/*=============== [Cozinha - Kit 5] ===============*/
	{"Cozinha", "Kit de cozinha 5", 2142, "Cozinha 5 - armário", 120},
	{"Cozinha", "Kit de cozinha 5", 2143, "Cozinha 5 - fogão com balcão", 150},
	{"Cozinha", "Kit de cozinha 5", 2148, "Cozinha 5 - armário vazio", 250},

	/*=============== [Cozinha - Kit 6] ===============*/
	{"Cozinha", "Kit de cozinha 6", 2151, "Cozinha 6 - armário com porta", 360},
	{"Cozinha", "Kit de cozinha 6", 2152, "Cozinha 6 - armário duplo", 320},
	{"Cozinha", "Kit de cozinha 6", 2154, "Cozinha 6 - pia", 330},
	{"Cozinha", "Kit de cozinha 6", 2155, "Cozinha 6 - armário", 310},

	/*=============== [Cozinha - Diversos] ===============*/
	{"Cozinha", "Diversos", 1509, "Garrafa 1", 100},
	{"Cozinha", "Diversos", 1512, "Garrafa 2", 100},
	{"Cozinha", "Diversos", 1520, "Garrafa 3", 100},
	{"Cozinha", "Diversos", 1543, "Garrafa 4", 100},
	{"Cozinha", "Diversos", 1544, "Garrafa 5", 100},
	{"Cozinha", "Diversos", 2147, "Geladeira cinza", 120},
	{"Cozinha", "Diversos", 2150, "Pia cinza", 120},

	/*=============== [Banheiro] ===============*/
	{"Banheiro", "Pias", 2515, "Pia 1", 150},
	{"Banheiro", "Pias", 2518, "Pia 2", 100},
	{"Banheiro", "Pias", 2523, "Pia 3", 100},
	{"Banheiro", "Pias", 2524, "Pia 4", 100},
	{"Banheiro", "Banheiras", 2516, "Banheira 1", 250},
	{"Banheiro", "Banheiras", 2526, "Banheira 2", 250},
	{"Banheiro", "Chuveiros", 2520, "Chuveiro 1", 250},
	{"Banheiro", "Chuveiros", 2527, "Chuveiro 2", 300},
	{"Banheiro", "Chuveiros", 2517, "Chuveiro 3", 200},
	{"Banheiro", "Sanitário", 2602, "Mictório", 100},
	{"Banheiro", "Sanitário", 2514, "Vaso 1", 200},
	{"Banheiro", "Sanitário", 2528, "Vaso 2", 150},
	{"Banheiro", "Sanitário", 2521, "Vaso 3", 200},
	{"Banheiro", "Higiene", 19873, "Papel higiênico", 20},
	{"Banheiro", "Higiene", 19874, "Sabonete", 20},
	{"Banheiro", "Higiene", 2741, "Sabão líquido", 20},

	/*=============== [Armazenamento - Caixas] ===============*/
	{"Armazenamento", "Caixas", 1230, "Caixa 1", 20},
	{"Armazenamento", "Caixas", 926, "Caixa 2", 120},
	{"Armazenamento", "Caixas", 928, "Caixa 3", 20},
	{"Armazenamento", "Caixas", 1220, "Caixa 4", 20},
	{"Armazenamento", "Caixas", 1221, "Caixa 5", 20},
	{"Armazenamento", "Caixas", 2654, "Caixa de sapatos", 30},
	{"Armazenamento", "Caixas", 964,  "Caixa de ferro", 100},
	{"Armazenamento", "Caixas", 3630, "Caixa empilhada", 400},
	{"Armazenamento", "Caixas", 2972, "Caixa azul", 100},
	{"Armazenamento", "Caixas", 2973, "Duas caixas laranjas", 150},
	{"Armazenamento", "Caixas", 1271, "Caixote de madeira", 30},
	{"Armazenamento", "Caixas", 2040, "Caixote preto duplo", 30},
	{"Armazenamento", "Caixas", 2328, "Caixote pequeno", 30},
	{"Armazenamento", "Caixas", 1558, "Caixa com apoio inferior", 30},

	/*=============== [Armazenamento - Prateleiras] ===============*/
	{"Armazenamento", "Estantes e Prateleiras", 939, "Prateleiras com caixas 1", 120},
	{"Armazenamento", "Estantes e Prateleiras", 942, "Prateleiras com caixas 2", 120},
	{"Armazenamento", "Estantes e Prateleiras", 2385, "Prateleira de troféus", 230},
	{"Armazenamento", "Estantes e Prateleiras", 1742, "Estante de livros 1",260},
	{"Armazenamento", "Estantes e Prateleiras", 2161, "Estante de livros 2",250},

	/*=============== [Outros - Pacotes] ===============*/
	{"Outros", "Pacotes", 1580, "Pacote vermelho", 100},
	{"Outros", "Pacotes", 1576, "Pacote laranja", 100},
	{"Outros", "Pacotes", 1577, "Pacote amarelo", 100},
	{"Outros", "Pacotes", 1578, "Pacote verde", 100},

	/*=============== [Outros - Resíduos] ===============*/
	{"Outros", "Resíduos", 2060, "Saco de areia", 150},
	{"Outros", "Resíduos", 1650, "Galão de gasolina", 100},
	{"Outros", "Resíduos", 2840, "Embalagens de lanche", 3},
	{"Outros", "Resíduos", 2866, "Embalagens de comida", 5},
	{"Outros", "Resíduos", 2670, "Resíduos no chão 1", 20},
	{"Outros", "Resíduos", 2671, "Resíduos no chão 2", 20},
	{"Outros", "Resíduos", 2672, "Resíduos no chão 3", 20},
	{"Outros", "Resíduos", 2673, "Resíduos no chão 4", 20},
	{"Outros", "Resíduos", 2674, "Resíduos no chão 5", 20},
	{"Outros", "Resíduos", 2828, "Fotografias", 5},
	{"Outros", "Resíduos", 2827, "Pilha de revistas 1", 5},
	{"Outros", "Resíduos", 2826, "Pilha de revistas 2", 5},
	{"Outros", "Resíduos", 1485, "Charuto", 50},

	/*=============== [Outros - Misc] ===============*/
	{"Outros", "Miscellaneous", 19896, "Maço de cigarros 1", 2},
	{"Outros", "Miscellaneous", 19897, "Maço de cigarros 2", 2},
	{"Outros", "Miscellaneous", 19617, "Disco de ouro", 300},
	{"Outros", "Miscellaneous", 1550, "Saco de dinheiro", 50},
	{"Outros", "Miscellaneous", 19471, "Placa de venda", 50},
	{"Outros", "Miscellaneous", 11245, "Bandeira dos EUA", 30},
	{"Outros", "Miscellaneous", 19632, "Fogueira", 120},

	/*=============== [Especiais - Portas] ===============*/
	{"Especiais", "Portas", 1495, "Porta com grades", 245},
	{"Especiais", "Portas", 1498, "Porta branca", 180},
	{"Especiais", "Portas", 1535, "Porta bege", 270},
	{"Especiais", "Portas", 1557, "Porta decorada", 470},
	{"Especiais", "Portas", 1499, "Porta de metal", 350},
	{"Especiais", "Portas", 1504, "Porta vermelha", 500},
	{"Especiais", "Portas", 1567, "Porta listrada", 410},
	{"Especiais", "Portas", 2877, "Porta de madeira", 320},
	{"Especiais", "Portas", 1513, "Porta trecos de parede", 140}
};

enum L_TEXTURES
{
	ltSlot,
	ltName[64],
	ltMaterial,
	ltTXD[64],
	ltTName[64]
}

static const g_aTextures[][L_TEXTURES] = 
{
	//CONCRETO
	{0, "Pedra sabão", 13691, "bevcunto2_lahills", "stonewall3_la"},
	{0, "Pedra sabão 2", 13724, "docg01_lahills", "des_ranchwall1"},
	{0, "Concreto 1", 13725, "gravblok01_lahills", "airportwall_2_2"},
	{0, "Concreto 2", 13725, "gravblok01_lahills", "concretewall22_256"},
	{0, "Concreto 3", 13681, "lahillshilhs1e", "alleywall3"},
	{0, "Concreto de aeroporto", 10765, "airportgnd_sfse", "ws_airpt_concrete"},
	{0, "Concreto liso", 5422, "idlewood6_lae", "concretebigc256128"},
	{0, "Concreto mofado", 10765, "airportgnd_sfse", "sea_wall_temp"},
	{0, "Concreto branco", 16093, "a51_ext", "ws_whitewall2_bottom"},
	{0, "Concreto escuro", 4833, "airprtrunway_las", "dockwall1"},
	{0, "Concreto estrutural", 4600, "theatrelan2", "gm_labuld2_b"},
	{0, "Concreto talhado", 10041, "archybuild10", "bank_sfe5"},
	{0, "Branco creme", 18200, "w_town2cs_t", "mottled_creme_64HV"},
	{0, "Branco rosado", 8401, "vgshpground", "vegaspawnwall_128"},
	{0, "Branco simples", 8954, "vgsespras", "sf_spray1"},
	{0, "Marmore escuro", 3922, "bistro", "Bow_Abattoir_Conc2"},
	{0, "Piso granito branco", 10765, "airportgnd_sfse", "sf_pave2"},
	{0, "Bar 1", 10856, "bakerybit_sfse", "ws_altz_wall7"},
	{0, "Bar 2", 628, "beafron2_law2", "comptwall33"},
	{0, "Bar 3", 10051, "carimpound_sfe", "poundwall1_sfe"},
	{0, "Tijolo", 13710, "easthills_lahills", "sw_wallbrick_06"},
	{0, "Tijolo cinza simples", 4552, "ammu_lan2", "sl_lavicdtwall1"},
	{0, "Piso de banheiro", 12853, "cunte_gas01", "sw_floor1"},
	{0, "Paralelepípedo", 4821, "union_las" "crazypave"},
	{0, "Parede listrada azul", 6095, "shops01_law", "GB_chatwall03b"},
	{0, "Concreto branco", 13014, "sw_block04", "ws_whitewall2_bottom"},
	{0, "Concreto claro para parede", 3979, "civic01_lan", "sl_concretewall1"},
	{0, "Concreto escuro c/ faixa branca", 17925, "lae2fake_int", "ab_wall3"},
	{0, "Concreto escuro rachado", 3906, "libertyhi5", "walldirtyneward256128"},

	//MADEIRA
	{1, "Madeira lisa 1", 3881, "apsecurity_sfxrf", "CJ_WOOD1"},
	{1, "Madeira lisa 2", 6094, "canalsg_law", "ws_sheetwood_clean"},
	{1, "Madeira lisa 3", 13003, "ce_racestart", "sa_wood07_128"},
	{1, "Madeira lisa para chão 1", 3881, "apsecurity_sfxrf", "CJ_WOOD1"},
	{1, "Madeira lisa para chão 2", 13007, "sw_bankint", "woodfloor1"},
	{1, "Madeira escura 1", 5411, "idlewood6_detail", "beachwalkway"},
	{1, "Madeira escura 2", 11631, "mp_ranchcut", "CJ_SLATEDWOOD"},
	{1, "Madeira escura 3", 9554, "park_sfw", "sw_woodflloor"},
	{1, "Madeira velha", 13694, "lahillstxd1a", "plainwoodenfence1_256"},
	{1, "Madeira envelhecida", 3306, "cunte_house1", "ws_vic_wood1"},
	{1, "Madeira bruta", 16377, "des_byofficeint", "CJ_LIGHTWOOD"},
	{1, "Madeira branca", 1491, "int_doors", "CJ_W_wood"},
	{1, "Madeira alaranjada", 3922, "bistro", "DinerFloor"},
	{1, "Madeira vermelha", 10941, "silicon2_sfse", "woodboards2"},
	{1, "Madeira vertical branca", 12862, "sw_block03", "sw_woodwall1"},
	{1, "Madeira vertical clara", 17009, "truth_farm", "des_ghotwood1"},
	{1, "Madeira vertical escura", 16150, "ufo_bar", "sa_wood08_128"},
	{1, "Madeira lisa", 12954, "sw_furniture", "CJ_WOOD5"},
	{1, "Madeira para muro", 5411, "idlewood6_detail", "boardgate_law"},
	{1, "Madeira listrada para chão", 10433, "hashmarket1_sfs", "woodboards2"},
	{1, "Madeira lisa 4",  4849, "ground3_las", "floorboard256128"},
	{1, "Madeira lisa manchada", 10987, "coveredpath_sfs", "ws_sheetwood"},

	//Outros
	{2, "Metal 1", 16640, "a51", "a51_floorpanel1"},
	{2, "Metal 2", 9583, "bigshap_sfw", "shipfloor_sfw"},
	{2, "Buracos de bala", 13131, "cunte_blockammo", "dt_ammu_wall2"},
	{2, "Grama 1", 4550, "skyscr1_lan2", "Bow_church_grass_alt"},
	{2, "Grama 2", 13686, "cunte1_lahills", "forestfloor256"},
	{2, "Água", 8487, "ballyswater", "waterclear256"},
	{2, "Janela 1", 4550, "bskyscr1_lan2", "sl_dwntwndr1"},
	{2, "Janela 2", 4550, "skyscr1_lan2", "sl_dwntwnshpfrnt1"},
	{2, "Janela 3", 12862, "sw_block03", "sw_woodwall2"},
	{2, "Janela 4", 16146, "des_ufoinn", "newindow11128"},
	{2, "Janela 5", 13721, "mulhousclahills", "newindow13"},
	{2, "Janela 6", 16093, "a51_ext", "wilswin01_la"},
	{2, "Vidro 1 (Liso)", 5722, "sunrise01_lawn", "plainglass"},
	{2, "Vidro 2", 10948, "skyscrapper_sfs", "ws_airportwin2"}, 
	{2, "Vidro 3", 1649, "wglass", "carshowwin2"},
	{2, "Carpete", 8463, "vgseland", "triadcarpet"},
	{2, "Carpete vermelho", 8463, "vgseland", "triadcarpet2"},
	{2, "Carpete dourado", 8463, "vgseland", "tiadbuddhagold"},
	{2, "Porta", 3644, "inglewood01_lax", "compdoor1_LAe"},
	{2, "Porta pichada", 18200, "w_town2cs_t", "Bow_door_graffiti_128"},
	{2, "Porta rosa", 11490, "des_ranch", "ws_wood_doors1"},
	{2, "Grafite 1", 8399, "vgs_shops", "vegasclub02_128"},
	{2, "Grafite 2", 8399, "vgs_shops", "vegasclub01_128"}
};

enum houseData
{
	houseID,
	houseExists,
	houseOwner,
	houseOwnerName[24],
	housePrice,
	houseAddress[32],
	Float:housePos[4],
	Float:houseInt[4],
	houseInterior,
	houseVW,
	houseLocked,
	houseBreakDoor,
	houseMoney,
	housePickup,
	houseWeapon[MAX_HOUSES_WEAPON],
	houseAmmo[MAX_HOUSES_WEAPON],
	houseCP,
	houseFurnitureA1,
	houseFurnitureA2,
	houseComplex,
	houseExtVW,
	houseExtInterior
}	new HouseData[MAX_HOUSES][houseData];

enum locationData
{
	locationID,
	locationName[32],
	locationExists,
	Float:locationPos[3]	
}	new LocationData[MAX_PLAYERS][MAX_GPS_LOCATIONS][locationData];

enum entranceData
{
	entranceID,
	entranceExists,
	entranceType,
	entranceName[128],
	Float:entrancePos[3],
	Float:entranceExit[3],
	entranceInterior,
	entranceVW,
	entrancePickup,
	entranceCP
}	new EntranceData[MAX_ENTRANCES][entranceData];

enum inventoryData
{
	invID,
	invExists,
	invItem[32],
	invModel,
	invQuantity
}	new InventoryData[MAX_PLAYERS][MAX_INVENTORY][inventoryData];

enum e_InventoryItems
{
	e_InventoryItem[32],
	e_InventoryModel
}

static const g_aInventoryItems[][e_InventoryItems] = {
	{"Marijuana", 1578},
	{"Cocaína", 1575},
	{"LSD", 1577},
	{"Gunparts", 2040},
	{"Hamburguer Cozido", 2703},
	{"Pizza Cozida", 2702},
	{"Celular", 330},
	{"GPS", 18875},
	{"Spray", 365},
	{"Garrafa de Água", -1022},
	{"Refrigerante", -1023},
	{"Crowbar", 18634},
	{"Boombox", 2226},
	{"First Aid", 1580},
	{"Pizza Congelada", 2814},
	{"Hamburguer Congelado", 2768},
	{"Garrafa Vazia", 1484},
	{"Rádio Portátil", 18868},
	{"Bomba Caseira (item único)", 1654},
	{"Token (item único)", 19347},
	{"Parrot Key", 19347}
};

static const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

enum houseInteriors {
	eHouseIntName[39],	
	Float:eHouseX,
	Float:eHouseY,
	Float:eHouseZ,
	eHouseInterior
};

static const Float:arrHouseInteriors[76][houseInteriors] = {
	// Interior Name // Positions ( X, Y, Z) // Interior ID
	{"Ryder's House", 2468.8411,-1698.2228,1013.5078, 2},
	{"CJ's House", 2495.8916,-1692.5658,1014.7422, 3},
	{"Madd Dog Mansion", 1299.14, -794.77, 1084.00, 5},
	{"Safe House 1", 2233.6919,-1112.8107,1050.8828, 5},
	{"Safe House 2", 2196.8374,-1204.5576,1049.0234, 6},
	{"Safe House 3", 2317.5347,-1026.7506,1050.2178, 9},
	{"Safe House 4", 2259.4021,-1136.0243,1050.6403, 10},
	{"Burglary X1", 234.6087,1187.8195,1080.2578, 3},
	{"Burglary X2", 225.5707,1240.0643,1082.1406, 2},
	{"Burglary X3", 224.288,1289.1907,1082.1406, 1},
	{"Burglary X4", 226.2955,1114.3379,1080.9929, 5},
	{"Burglary Houses", 295.1391,1473.3719,1080.2578, 15},
	{"Motel Room", 446.3247,509.9662,1001.4195, 12},
	{"Pair Burglary", 446.626,1397.738,1084.3047, 2},
	{"Burglary X11", 226.8998,0.2832,1080.9960, 5},
	{"Burglary X12", 261.1165,1287.2197,1080.2578, 4},
	{"Michelle's Love Nest", 309.4319,311.6189,1003.3047, 4},
	{"Burglary X14", 24.3769,1341.1829,1084.375, 10},
	{"Burglary X13", 221.6766,1142.4962,1082.6094, 4},
	{"Unused House", 2323.7063,-1147.6509,1050.7101, 12},
	{"Millie's Room", 344.9984,307.1824,999.1557, 6},
	{"Burglary X15", -262.1759,1456.6158,1084.3672, 4},
	{"Burglary X16", 22.861,1404.9165,1084.4297, 5},
	{"Burglary X17", 140.3679,1367.8837,1083.8621, 5},
	{"House X18", 234.2826,1065.229,1084.2101, 6},
	{"House X19", -68.6652,1351.2054,1080.2109, 6},
	{"House X20", -283.4464,1470.8777,1084.3750, 15},
	{"Colonel Furhberger", 2807.4458,-1174.2394,1025.5703, 8},
	{"The Camel's Safehouse", 2218.0737,-1076.0438,1050.4844, 1},
	{"Verdant Bluffs House", 2365.1042,-1135.5898,1050.8826, 8},
	{"Burglary X21", -42.6339,1405.4767,1084.4297, 8},
	{"Willowfield House", 2282.8049,-1140.2722,1050.8984, 11},
	{"House X20", 82.9119,1322.4266,1083.8662, 9},
	{"Burglary X22", 260.7421,1238.2261,1084.2578, 9},
	{"Burglary X23", 266.5074,305.1129,999.1484, 2},
	{"Katie's Lovenest", 322.5014,303.6906,999.1484, 5},
	{"Barbara's Love nest", 244.0007,305.1925,999.1484, 1},
	{"2 Room house", -79.9946,1383.6224,1078.9551, 31},
	{"2 Room house", -48.6813,1458.5594,1085.6138, 32},
	{"3 Room house", 45.8230,1439.3848,1082.4120, 33},
	{"3 Room house & two story", 7.7352,1305.5529,1082.8309, 34},
	{"4 Room house & two story", 83.0262,1272.0321,1079.8889, 35},
	{"4 Room house & two story", 156.1810,1410.0399,1086.4325, 36},
	{"3 Room house", 290.0938,1501.9110,1078.4204, 37},
	{"3 Room house", 329.3018,1513.0538,1085.8153, 38},
	{"2 Room house", 390.3420,1505.7891,1080.1000, 39},
	{"3 Room house", 375.6336,1378.6558,1079.8022, 40},
	{"3 Room house", 448.2997,1353.9520,1082.2172, 41},
	{"4 Room house & 2 story", 509.6614,1354.2037,1076.7826, 42},
	{"3 Room house & strip", 745.1550,1412.4603,1102.4248, 43},
	{"2 Room house", 295.1123,1285.2213,1078.4471, 44},
	{"2 Room house", 191.4031,1289.0518,1082.1399, 45},
	{"2 Room house", 290.8754,1242.7247,1082.6812, 46},
	{"2 Room house", 243.8926,1145.7209,1081.1672, 47},
	{"3 Room house", 326.3264,1075.0138,1082.2539, 48},
	{"Richman house 5 rooms & 2 bathrooms", 199.0668,1110.8755,1083.2131, 49},
	{"Richman house 5 rooms & 2 bathrooms", 278.0414,1057.8622,1083.4532, 50},
	{"Richman house 5 rooms & 2 bathrooms", 263.3908,978.3224,1083.6885, 51},
	{"2 Room house (Small)", 2261.1729,-1121.2057,1048.8778, 52},
	{"1 Room house (Small)", 2284.8523,-1126.0591,1050.9229, 53},
	{"3 Room house", 2370.5198,-1094.9510,1049.6207, 54},
	{"1 Room house (Very Small)", 2313.5249,-1230.5092,1047.4082, 55},
	{"2 Room house (Small)", 2243.8323,-1028.6211,1047.7676, 56},
	{"3 Room house", 2272.7407,-1242.6433,1048.5969, 57},
	{"4 Room house", 2149.7512,-1216.9021,1049.1169, 58},
	{"2 Room house", 2364.4131,-1074.5464,1047.7673, 59},
	{"4 Room house (Rich man big)", 2373.5293,-1183.3539,1053.2129, 60},
	{"Only one room (TINY for las colinas)", 242.6487,323.0833,999.5914, 61},
	{"Only one room (TINY for las colinas)", 265.8597,321.4998,997.1435, 62},
	{"Only one room (TINY for las colinas)", 360.7979,304.2907,996.8972, 63},
	{"Only one room (TINY for las colinas)", 2189.3782,-1073.4175,1050.4823, 64},
	{"Only two rooms (TINY for las colinas)", 2254.9224,-1112.5403,1049.1305, 65},
	{"Only two rooms (TINY for las colinas)", 2297.7891,-1093.5774,1048.8734, 66},
	{"Warehouse 1", 1290.4106,1.9512,1001.0200, 18},
	{"Warehouse 2", 1412.1472,-2.2836,1000.9240, 1},
	{"Warehouse 3", 2135.2004,-2276.2814,20.6718, 0}
};

enum droppedItems
{
	droppedID,
	droppedItem[32],
	droppedPlayer[24],
	droppedModel,
	droppedQuantity,
	Float:droppedPos[3],
	droppedWeapon,
	droppedAmmo,
	droppedInt,
	droppedWorld,
	droppedObject
}	new DroppedItems[MAX_DROPPED_ITEMS][droppedItems];

enum 
{
	INVALID_INDUSTRY_PRODUCT,
	INDUSTRY_PRODUCT_MILK,
	INDUSTRY_PRODUCT_EGG,
	INDUSTRY_PRODUCT_MEAT,
	INDUSTRY_PRODUCT_COTTON,
	INDUSTRY_PRODUCT_PETROLEUM,
	INDUSTRY_PRODUCT_METAL,
	INDUSTRY_PRODUCT_FOOD,
	INDUSTRY_PRODUCT_CLOTHES,
	INDUSTRY_PRODUCT_RETAIL
}

enum
{
	INVALID_INDUSTRY_TYPE,
	INDUSTRY_PRIMARIA,
	INDUSTRY_SECUNDARIA
}

enum
{
	INVALID_SECTION,
	SECTION_PETROLEUM,
	SECTION_FARM,
	SECTION_METAL,
	SECTION_FOOD,
	SECTION_CLOTHES,
	SECTION_ELETRONIC,
	SECTION_EXPORT
}

enum industryData
{
	industryExists,
	industryID,
	industryType,
	industryName[128],
	industrySection,
	Float:industryX,
	Float:industryY,
	Float:industryZ,
	industryProduct[MAX_INDUSTRY_PRODUCT],
	industryProductPrice[MAX_INDUSTRY_PRODUCT],
	industryProductStock[MAX_INDUSTRY_PRODUCT],
	industryProductMaxStock[MAX_INDUSTRY_PRODUCT],
	industryBuying[MAX_INDUSTRY_PRODUCT],
	industryBuyingPrice[MAX_INDUSTRY_PRODUCT],
	industryBuyingStock[MAX_INDUSTRY_PRODUCT],
	industryBuyingMaxStock[MAX_INDUSTRY_PRODUCT],
	Text3D:industryText,
	industryPickup
}	new IndustryData[MAX_INDUSTRY][industryData];

enum 
{
	BUSINESS_INVALID,
	BUSINESS_FUEL,
	BUSINESS_247,
	BUSINESS_RESTAURANT,
	BUSINESS_CLOTHSHOP
}

enum
{
	PRODUCT_INVALID,
	PRODUCT_GPS,
	PRODUCT_MASK,
	PRODUCT_CELLPHONE,
	PRODUCT_PORTABLERADIO,
	PRODUCT_HAMBURGER,
	PRODUCT_SODA,
	PRODUCT_PIZZA,
	PRODUCT_WATER,
	PRODUCT_FUEL,
	PRODUCT_CLOTHES,
	PRODUCT_BOOMBOX
}

enum productData
{
	productID,
	productName[32],
	productItem
}

static const ProductData[][productData] = 
{
	{0, "Produto inválido", 0},
	{1, "GPS", 18875},
	{2, "Máscara", 0},
	{3, "Celular", 330},
	{4, "Rádio Portátil", 18868},
	{5, "Hamburguer Cozido", 2703},
	{6, "Refrigerante", -1023},
	{7, "Pizza Cozida", 2702},
	{8, "Garrafa de Água", -1022},
	{9, "Combustível", 0},
	{10, "Roupas", 0},
	{11, "Boombox", 2226}
};

enum businessData
{
	businessExists,
	businessID,
	businessOwnerName[24],
	businessOwnerID,
	businessName[128],
	businessType,
	businessPrice,
	businessVW,
	Float:businessX,
	Float:businessY,
	Float:businessZ,
	Float:businessIntX,
	Float:businessIntY,
	Float:businessIntZ,
	businessInterior,
	businessVault,
	businessProduct[MAX_BUSINESS_PRODUCT],
	businessProductPrice[MAX_BUSINESS_PRODUCT],
	businessStock,
	businessFuel,
	businessBuying,
	businessBuyingPrice,
	businessBuyingProduct,
	businessCP,
	businessPickup
}	new BusinessData[MAX_BUSINESS][businessData];

enum teleportData
{
	teleportExists,
	teleportID,
	teleportDesc[128],
	Float:teleportX,
	Float:teleportY,
	Float:teleportZ,
	teleportInterior,
	teleportWorld
}	new TeleportData[MAX_TELEPORTES][teleportData];

enum vehicleData
{
	vehicleID,
	vehicleOwnerName[24],
	vehicleOwnerID,
	vehiclePlate[14],
	vehicleLocked,
	vehicleParked,
	vehicleSeguro,
	vehicleLocator,
	vehicleTrava,
	vehicleXMRadio,
	Float:vehicleParkedPos[4],
	vehicleParkedVW,
	vehicleMod[14],
	vehicleColor[2],
	vehicleModel,
	vehiclePrice,
	Float:vehicleFuel,
	vehicleFaction,
	vehicleJob,
	Float:vehicleHealth,
	Float:vehicleMaxHealth,
	vehicleDamage[4],
	vehicleWeapon[35],
	vehicleAmmo[35],
	vehicleInteriorWeapon,
	vehicleInteriorAmmo,
	Float:vehicleMileage,
	Float:vehicleEngine,
	vehicleTweak,
	vehicleTweakTime,
	vehicleCooldown,
	vehicleDoorHealth,
	bool:vehiclePhysicalAttack,
	vehicleDoorEffect,
	Text3D:vehicleLabel,
	vehicleLocatorCD,
	vehicleExpressWay,
	vehicleExpressMoney,
	vehicleSiren,
	vehicleCrateSlot[25],
	vehicleObjectSlot[5],
	vehicleTrash,
	vehicleCallsign,
	Text3D:vehicleCallsignLabel
}	new VehicleData[MAX_VEHICLES][vehicleData];

enum tempData
{
	tempID,
	tempTracao[16],
	tempLocator,
	tempSeguro,
	tempTrava,
	tempXMRadio,
	tempColor1,
	tempColor2,
	tempPrice,
	tempPriceTotal,
	tempModel,
	tempProduct,
	tempHoldingProduct,
	tempHoldingTrash,
	tempTweak
}	new TempData[MAX_PLAYERS][tempData];

enum VS_BUYCARS
{
	d_Slot,
	d_Model,
	d_Price,
	d_Tracao[20]
}

static const g_aDealership[][VS_BUYCARS] =
{
	/* Conversiveis */
	{0, 555, 24000, "Traseira"}, // Windsor
	{0, 533, 31000, "Traseira"}, // Feltzer
	{0, 439, 33000, "Dianteira"}, // Stallion
	{0, 480, 49000, "Traseira"}, // Comet

	/* Low Riders */
	{1, 576, 14000, "Traseira"}, // Tornado
	{1, 575, 16000, "Traseira"}, // Broadway
	{1, 566, 17000, "Traseira"}, // Tahoma
	{1, 567, 19000, "Traseira"}, // Savanna
	{1, 412, 22000, "Traseira"}, // Voodoo
	{1, 536, 23000, "Traseira"}, // Blade
	{1, 534, 25000, "Traseira"}, // Remington
	{1, 535, 42000, "Traseira"}, // Slamvan

	/* Off road (4X4) */
	{2, 422, 15000, "Traseira"}, // Bobcat
	{2, 554, 19300, "Traseira"}, // Yosemite
	{2, 400, 31000, "Traseira"}, // Landstalker
	{2, 500, 32000, "Traseira"}, // Mesa
	{2, 489, 44000, "Traseira"}, // Rancher
	{2, 470, 47000, "Completa"}, // Patriot
	{2, 579, 60000, "Completa"}, // Huntley

	/* Industriais */
	{3, 478, 2400, "Traseira"}, // Walton
	{3, 543, 3100, "Traseira"}, // Sadler
	{3, 413, 6500, "Traseira"}, // Pony
	{3, 482, 13000, "Traseira"}, // Burrito
	{3, 414, 14500, "Completa"}, // Mule
	{3, 498, 16000, "Completa"}, // Benson
	{3, 456, 23000, "Completa"}, // Yankee
	{3, 403, 27000, "Completa"}, // Linerunner
	{3, 514, 32000, "Completa"}, // Tanker
	//{3, 455, 24000, "Completa"}, // Flatbed - Lenhador

	/* Esportivos */
	{4, 496, 33000, "Traseira"}, // Blista
	{4, 475, 37000, "Traseira"}, // Sabre
	{4, 558, 45000, "Traseira"}, // Uranus
	{4, 589, 53000, "Traseira"}, // Club
	{4, 565, 110000, "Traseira"}, // Flash
	{4, 402, 130000, "Traseira"}, // Buffalo
	{4, 559, 225000, "Traseira"}, // Jester
	{4, 562, 270000, "Traseira"}, // Elegy
	{4, 560, 422000, "Traseira"}, // Sultan
	{4, 429, 525000, "Traseira"}, // Banshee
	{4, 415, 560000, "Traseira"}, // Cheetah
	{4, 541, 850000, "Traseira"}, // Bullet
	//{4, 451, 1150000, "Traseira"}, // Turismo
	//{4, 477, 1000000, "Traseira"}, // ZR-350
	//{4, 603, 90000, "Traseira"}, // Phoenix

	/* Clássicos */
	{5, 410, 1200, "Traseira"}, // Manana
	{5, 436, 2100, "Traseira"}, // Previon
	{5, 527, 2700, "Traseira"}, // Cadrona
	{5, 526, 8000, "Traseira"}, // Fortune
	{5, 585, 9100, "Traseira"}, // Emperor
	{5, 547, 11000, "Traseira"}, // Primo
	{5, 542, 12000, "Traseira"}, // Clover
	{5, 466, 13000, "Traseira"}, // Glendale
	{5, 419, 14500, "Traseira"}, // Esperanto
	{5, 467, 18500, "Traseira"}, // Oceanic
	{5, 517, 19000, "Traseira"}, // Majestic
	{5, 405, 21000, "Traseira"}, // Sentinel
	{5, 550, 22000, "Traseira"}, // Sunrise
	{5, 540, 25000, "Traseira"}, // Vincent
	{5, 507, 26000, "Traseira"}, // Elegant
	{5, 529, 27000, "Traseira"}, // Willard
	{5, 516, 28700, "Traseira"}, // Nebula
	{5, 492, 29500, "Traseira"}, // Greenwood
	{5, 426, 45000, "Traseira"}, // Premier
	{5, 445, 47000, "Traseira"}, // Admiral
	{5, 580, 63000, "Traseira"}, // Stafford

	/* Station Wagons */
	{6, 418, 4000, "Traseira"}, // Moonbean
	{6, 479, 5100, "Traseira"}, // Regina
	{6, 458, 16000, "Traseira"}, // Solair
	{6, 561, 22000, "Traseira"}, // Stratum

	/* Motocicletas */
	{7, 463, 12000, "Traseira"}, // Freeway
	{7, 581, 31000, "Traseira"}, // BF-400
	{7, 461, 54000, "Traseira"}, // PCJ-600
	{7, 521, 60000, "Traseira"}, // FCR-900
	//{7, 468, 79000, "Traseira"}, // Sanchez

	/* Helicópteros (Apenas Prime) */
	{8, 487, 2500000, "N/A"}, // Maverick
	{8, 469, 2100000, "N/A"}, // Sparrow

	/* Serviço público */
	{9, 420, 7500, "Traseira"}, // Taxi
	{9, 438, 5000, "Traseira"}, // Cabbie

	/* Bikes */
	{10, 481, 500, "N/A"}, // BMX
	{10, 509, 400, "N/A"} // Bike
};

enum playerData
{
	pID,
	pLogged,
	pMoney,
	pAdmin,
	pSkin,
	pLevel,
	pEXP,
	pSex,
	pTutorial,
	pFlyLicense,
	pBoatLicense,
	pCarLicense,
	pFightStyle,
	bool:pAdminStatus,
	pBank,
	pSavings,
	pSpawn,
	pCellphone,
	pJailed,
	pJailTime,
	pWarns,
	pJob,
	pPaycheck,
	pTimePlayed,
	pVip,
	pVipTime,
	pInventoryItem,
	pEditingItem[32],
	pTaxiFee,
	pTaxiTime,
	pTaxiPlayer,
	pTaxiDuty,
	pTaxiCalled,
	pSelectedSlot,
	pStorageItem,
	pStorageSelect,
	pWeapon[13],
	pAmmo[13],
	pSpeedTime,
	pFactionOffer,
	pFactionOffered,
	pFaction,
	pFactionID,
	pFactionRank,
	pFactionEdit,
	pFactionMod,
	pOnDuty,
	pEntrance,
	pHouse,
	pBusiness,
	pComplex,
	pMechanicCalled,
	pSpectator,
	pBuyCar[sizeof(g_aDealership)],
	PlayerText:pTextdraw[7],
	pFooterTimer,
	pShowFooter,
	pBuyFurniture[sizeof(g_aFurnitures)],
	pFurnitureObject,
	pFurnitureCategory[32],
	pFurnitureSubCategory[64],
	pEditingMode,
	pLastLogin[32],
	Text3D:pNameTag,
	pEmergency,
	pCuffed,
	pDragged,
	pDraggedBy,
	pDragTimer,
	pTakeItems,
	pState,
	pDeathTime,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	pInterior,
	pWorld,
	pOnDutyBlock,
	pTied,
	pHarvesting,
	pReportTime,
	pOpeningCrate,
	pBlackMarket,
	pDrugUsed,
	pDrugTime,
	pCare,
	pCareTime,
	pRespawnTime,
	pHospital,
	pHospitalTime,
	pRadioSlot[4],
	pListedTextures[sizeof(g_aTextures)],
	pSelectedIndex,
	pDrivingTest,
	pTestStage,
	pTestCar,
	pTestWarns,
	pBeanBag,
	pStunned,
	pFreezeTimer,
	pCreateCar,
	pColor1Car,
	pColor2Car,
	pEditingCar,
	Float:pHealthCar,
	pIllegalDuty,
	pInWar,
	pBusinessSeller,
	pVehicleSeller,
	pHouseSeller,
	pDrugSeller,
	pWeaponSeller,
	pMechanicRepair,
	pMechanicEngine,
	pFixVehicle,
	pFixVehicleTimer,
	pLoopAnim,
	pMask,
	pMasked,
	pPage,
	pBuyItems[sizeof(g_aAttachItems)],
	pRefuelling,
	pRefuellingPrice,
	pRefuellingTimer,
	pLoginTries,
	pPMMuted,
	pCarrying,
	pLastUpdate,
	Float:pArmor,
	Float:pHealth,
	bool:pJustLoggedIn,
	pNameChange,
	pCustomPlate,
	pBlockFurniture,
	pBlockBuyVehicle,
	pBlockMoney,
	pMoneyBlocked,
	pLabel,
	Text3D:pLabelError,
	pFreezed,
	pMuted,
	pCrashed,
	pBreakinVehicle,
	pUnscrambling,
	pUnscrambleTime,
	pUnscrambleTimer,
	pUnscrambleID,
	pScrambleSuccess,
	pScrambleFailed,
	pInMission,
	pMissionTime,
	pMissionTarget[2],
	pMissionReward,
	pInsurance,
	bool:pDesync,
	pGroup,
	pGroupID,
	pGroupRank,
	bool:pTogNews,
	bool:pTogAdmin,
	bool:pTogFaction,
	bool:pTogAd,
	bool:pHitmark,
	bool:pTogHUD,
	bool:pTogPM,
	bool:pTogHitmark,
	pFamily,
	pFamilyID,
	pFamilyRank,
	pCreateFamily,
	pFamilyInvite,
	pFamilyOffer,
	pDamage,
	pLastDamage[2],
	pAdminHide,
	pLawyer,
	pLawyerBlock,
	pLawyerTime,
	bool:pFishing,
	pFishingWeight,
	pFishBait,
	pSpy,
	pCellphoneItem,
	pRobPlayer,	
	pThirst,
	pThirstTime,
	pHungry,
	pHungryTime,	
	pOWBusiness,
	pTaskID,
	pTaskQuantity,
	pRobbing,
	pRobbingID,
	pRobbingTime,
	pFactionSupply,
	pCarSiren,
	pBoombox,
	pLocation[32],
	pWaypoint,
	Float:pWaypointPos[3],
	pWarn1[64],
	pWarn2[64]
}	new PlayerData[MAX_PLAYERS][playerData];

enum InfoDesbugar
{
	Float:sAngulo,
	Float:sVida,
	Float:sColete,
	Float:sPosX,
	Float:sPosY,
	Float:sPosZ,
	sIDCarro,
	sMunicao[13],
	sArmas[13],
	sMundoVirtual,
	sInterior,
	sSincronizando,
	sNoVeiculo
}	new DesbugarJogador[MAX_PLAYERS][InfoDesbugar];

enum montarArmas
{
	montarID,
	montarMunicao,
	montarGP
}

static const MontarArmas[10][montarArmas] = 
{
	{4, 1, 1}, //Faca -> 700
	{16, 3, 3}, //Granadas -> 2.100
	{24, 100, 8}, //Desert -> 5.600
	{32, 200, 15}, //Tec9 10.500
	{28, 250, 15}, //Uzi -> 10.500
	{29, 250, 25}, //MP5 17.500
	{25, 50, 20}, //Shotgun -> 14.000		
	{30, 350, 36}, //AK47 25.200
	{31, 350, 31}, //M4 21.700	
	{34, 10, 150} //Sniper 105.000
};

static const Float:g_arrDrivingCheckpoints[][3] = 
{
	{1964.5239,-1961.4658,13.4189},
	{2028.8165,-1935.6707,13.0276},
	{2083.9648,-1891.0142,13.0962},
	{2085.9104,-1786.5538,13.0983},
	{2151.4973,-1754.8083,13.1053},
	{2219.1252,-1718.4622,13.0704},
	{2280.9202,-1661.2166,14.7515},
	{2344.9158,-1602.3333,22.0904},
	{2310.6184,-1562.7789,18.7273},
	{2162.1462,-1531.4523,2.0433},
	{1988.5886,-1496.4844,3.0916},
	{1839.1934,-1497.3762,3.8603},
	{1751.5309,-1439.5127,13.0766},
	{1655.2906,-1467.9265,13.1017},
	{1655.7842,-1562.1656,13.0980},
	{1640.7526,-1590.0358,13.1579},
	{1615.8367,-1624.9319,13.2624},
	{1607.6219,-1734.2384,13.0980},
	{1726.2842,-1734.6012,13.1023},
	{1840.7917,-1754.4752,13.0980},
	{1959.2872,-1765.4805,13.0979},
	{1959.5404,-1880.8290,13.0993},
	{1958.9489,-1970.9700,13.1371},
	{1984.2786,-1985.4701,13.2618}
};

//===================================================== Publics ==============================================/
new URL_SERVER[] = "http://xx/xxx/models";
public OnPlayerRequestDownload(playerid, type, crc)
{
	if(!IsPlayerConnected(playerid))
		return 0;

	if(!GetPVarInt(playerid, "Download_Files"))
	{
		SendWarningMessage(playerid, "Você não possui os arquivos necessários da versão 0.3.DL na pasta 'cache'.");
		SendServerMessage(playerid, "Por favor aguarde o download dos arquivos.");

		SetPVarInt(playerid, "Download_Files", 1);
	}

	new filename[64], filefound, url_final[256];

	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE)
		filefound = FindTextureFileNameFromCRC(crc, filename, sizeof(filename));
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE)
		filefound = FindModelFileNameFromCRC(crc, filename, sizeof(filename));

	if(filefound)
	{
		format(url_final, sizeof(url_final), "%s/%s", URL_SERVER, filename);
		RedirectDownload(playerid, url_final);
	}

	return 0;
}

public OnGameModeInit()
{
	//Printar status
	printf("Servidor ligado em %s na versão: %s", FormatFullTime(), SERVER_GM_TEXT);

	/*==================== Discord =============================*/
	//Canais
	MeioTermo_Discord = DCC_FindGuildById("x");
	Discord_AdminChat = DCC_FindChannelById("x");
	Discord_SosLog = DCC_FindChannelById("x");
	Staff_Team = DCC_FindRoleById("x");
	/*==========================================================*/

	SendRconCommand("rcon 0");

	this = mysql_connect(MYSQL_IP, MYSQL_USER, MYSQL_PASS, MYSQL_DB);
	if(mysql_errno(this))
	{
		print("* Não foi possível conectar ao MySQL, verifique as opções de entrada.");
	}
	else
	{
		print("* Conexão ao MySQL estabelecida com sucesso.\n\n\nIniciando carregamento...\n\n");
	}

	mysql_log(ERROR);

	//Sistema de Guerra
	War_Gangsters = false;
	War_Cartel = false;
	War_Motoclub = false;

	SetGameModeText(SERVER_GM_TEXT);

	new initializing[75];
	format(initializing, sizeof(initializing), "%.20s | Inicializando...", SERVER_HOSTNAME);
	SendRconCommand(initializing);
	
	new ano, mes, dia;

	SendRconCommand("language Brazilian Portuguese");    
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(0);
	ShowNameTags(0);
	SetDoubleXP(false);
	DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();

	//Global Variables
	serverchatVIP = true;
	Door_247Idlewood = false;
	Area_247Idlewood = CreateDynamicRectangle(1914.9871, -1786.0272, 1927.7637, -1766.6813, 0, 0);

	//System queries
	mysql_tquery(this, "UPDATE players SET Online = '0'", "");
	mysql_tquery(this, "UPDATE carros SET vehicleParked = '0' WHERE vehicleFaction = '0' AND vehicleJob = '-1' AND vehicleParked = '1'", "");
	mysql_tquery(this, "UPDATE mobilias SET furnitureObject = 0", "");
	mysql_tquery(this, "DELETE FROM advertisements", ""); //Clear advertisements table.

	mysql_tquery(this, "SELECT * FROM industry", "Industry_Load", "");	
	mysql_tquery(this, "SELECT * FROM business", "Business_Load", "");
	mysql_tquery(this, "SELECT * FROM itensdropados", "CarregarItensDropados", "");
	mysql_tquery(this, "SELECT * FROM entradas", "CarregarEntradas", "");
	mysql_tquery(this, "SELECT * FROM casas", "CarregarCasas", "");
	mysql_tquery(this, "SELECT * FROM atm", "CarregarATM", "");
	mysql_tquery(this, "SELECT * FROM radar", "CarregarRadar", "");
	mysql_tquery(this, "SELECT * FROM factions", "Faction_Load", "");
	mysql_tquery(this, "SELECT * FROM pontosdeprisao", "Arrest_Load", "");
	mysql_tquery(this, "SELECT * FROM server_config WHERE entry_id = '4'", "GOV_Load", "");
	mysql_tquery(this, "SELECT * FROM cofreorg", "Vault_Load", "");
	mysql_tquery(this, "SELECT * FROM caixas", "Crate_Load", "");
	mysql_tquery(this, "SELECT * FROM whorg", "WH_Load", "");
	mysql_tquery(this, "SELECT * FROM objetos", "Objects_Load", "");
	mysql_tquery(this, "SELECT * FROM cameras", "CarregarCameras", "");
	mysql_tquery(this, "SELECT * FROM portoes", "Gate_Load", "");
	mysql_tquery(this, "SELECT * FROM pumps", "Pump_Load", "");
	mysql_tquery(this, "SELECT * FROM teleportes", "Teleport_Load", "");
	mysql_tquery(this, "SELECT * FROM carros", "Vehicle_Load", "");	
	mysql_tquery(this, "SELECT * FROM trashcans", "TrashCan_Load", "");
	mysql_tquery(this, "SELECT * FROM chopshop", "Chopshop_Load");
	mysql_tquery(this, "SELECT * FROM group_rob", "Group_Load", "");
	mysql_tquery(this, "SELECT * FROM families", "Family_Load", "");
	mysql_tquery(this, "SELECT * FROM sewers", "Sewer_Load", "");
	mysql_tquery(this, "SELECT * FROM cellphone_towers", "Tower_Load", "");
	mysql_tquery(this, "SELECT * FROM complex", "Complex_Load", "");
	//<!-- anticheatload -->
	mysql_tquery(this, "SELECT * FROM `server_config` WHERE entry_id = '2'", "AC_Load", "");
	//<!-- dailytask -->
	getdate(ano, mes, dia);
	mysql_format(this, initializing, sizeof(initializing), "SELECT * FROM `server_config` WHERE entry_id = '3' AND active = '%d'", dia);
	mysql_tquery(this, initializing, "DailyTaskCheck", "d", dia);

	//Timers
	SetTimer("_1000mstimer", 1000, true);
	SetTimer("_350mstimer", 350, true);
	SetTimer("_500mstimer", 500, true);
	SetTimer("_100mstimer", 100, true);
	SetTimer("_tensecondstimer", 10 * 1000, true);
	SetTimer("_oneminutetimer", 6 * 10 * 1000, true);
	SetTimer("_threeminutetimer", 18 * 10 * 1000, true);

	//Streamer V.O
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 800);

	//-------------[ Os Models modificados 03DL ] --------//

	//-------------[ Os CreateObject ]---------------------//

	//-------------[ Os CreateDynamicObject ]-------------//
	#include "./modules/objetos.pwn"

	//-------------[ Os AddStaticPickup ]-------------//
	CreateDynamicPickup(1581, 23, -2032.8527, -117.4229, 1035.1719); 			//Licenças
	CreateDynamicPickup(1314, 23, 758.8973, -77.5249, 1000.6511); 				//Estilo de luta
	CreateDynamicPickup(1275, 23, 207.6581,-101.2142,1005.2578); 				//Binco - Comprar
	CreateDynamicPickup(1581, 23, 708.8866, 393.4151, 1023.5939); 				//Opções prefeitura
	CreateDynamicPickup(1274, 23, 2316.6211,-12.8576,26.7422); 					//Banco (dentro)
	CreateDynamicPickup(1239, 23, DEALERSHIP_X, DEALERSHIP_Y, DEALERSHIP_Z); 	//Concessionária
	CreateDynamicPickup(1239, 23, 1545.2993, -1609.5826, 13.3825, 0, 0); 		//Apreender Veiculo (LSPD)
	CreateDynamicPickup(1239, 23, 1550.2039, -1623.3818, 13.3825, 0, 0); 		//Resgatar Veiculo Apreendido
	CreateDynamicPickup(1239, 23, 1560.3861, -1694.6595, 5.8970, 498, 0);		//Reparar Veiculo (LSPD)
	CreateDynamicPickup(1239, 23, 2480.4985, 2356.7217, 4.2109, 498, 0); 		//Reparar Veiculo (SAE)
	CreateDynamicPickup(1239, 23, 2104.6741, -2021.8763, 13.5544, 0, 0); 		//Entregar Sacos de Lixo
	CreateDynamicPickup(1239, 23, 1395.1921, -23.0422, 1002.0010, 507, 1); 		// /curar do hosp
	CreateDynamicPickup(1239, 23, 359.9689, -2031.7002, 7.8359, 0, 0); 			//Comprar iscas
	CreateDynamicPickup(1239, 23, 1091.2458, -1506.0028, 15.7969, 0, 0);		//Anunciar(shopping)

	//-------------[ Os Text3D:Create3DTextLabel ]-------------//
	Create3DTextLabel("Licenças\n('F' para abrir o menu)", COLOR_RP2 , -2032.8527, -117.4229, 1035.1719, 10.0, 0, 0);
	Create3DTextLabel("Estilo de Luta\n('F' para abrir o menu)", COLOR_RP2 , 758.8973, -77.5249, 1000.6511, 10.0, 0, 0);
	Create3DTextLabel("City Hall\n('F' para abrir o menu)", COLOR_RP2, 708.8866, 393.4151, 1023.5939, 10.0, 12, 0);
	Create3DTextLabel("Banco\n('/banco')", COLOR_RP2, 2316.6211,-12.8576,26.7422, 10.0, 0, 0);
	Create3DTextLabel("Concessionária\n('/v')", COLOR_RP2, DEALERSHIP_X, DEALERSHIP_Y, DEALERSHIP_Z, 10.0, 0, 0);
	Create3DTextLabel("Ponto de Apreensão Veicular\n('/apreenderveiculo')", COLOR_RP2, 1545.2993, -1609.5826, 13.3825, 5.0, 0, 1);
	Create3DTextLabel("Consultar Veículo Apreendido\n('/consultar')", COLOR_RP2, 1550.2039, -1623.3818, 13.3825, 5.0, 0, 1);
	Create3DTextLabel("Reparo de Viaturas\n('/repararveiculo')", COLOR_RP2, 1560.3861, -1694.6595, 5.8970, 5.0, 498, 1);
	Create3DTextLabel("Reparo de Viaturas\n('/repararveiculo')", COLOR_RP2, 2480.4985, 2356.7217, 4.2109, 5.0, 498, 1);
	Create3DTextLabel("Lixão de Los Santos\n('/entregarlixo')", COLOR_RP2, 2104.6741, -2021.8763, 13.5544, 5.0, 0);
	Create3DTextLabel("Mercado de Peixes\n('/venderpeixes')", COLOR_WHITE, 2735.3303, -2466.1865, 13.6484, 5.0, 0);
	Create3DTextLabel("Venda de Acessórios\n('/comprar')", COLOR_WHITE, 1092.6448, -1477.6792, 15.7825, 5.0, 0);
	Create3DTextLabel("Venda de Celulares\n('/comprar')", COLOR_WHITE, 1163.3539, -1452.1426, 15.8016, 5.0, 0);
	Create3DTextLabel("Atendimento Hospitalar\n('/curar')", COLOR_WHITE, 1395.1921, -23.0422, 1002.0010, 2.5, 507);
	Create3DTextLabel("Mercado de Iscas\n('/comprar')", COLOR_WHITE, 359.9689, -2031.7002, 7.8359, 2.5, 0);
	Create3DTextLabel("Anunciar\n('/an')", COLOR_WHITE, 1091.2458,-1506.0028, 15.7969, 2.5, 0);

	//-------------[ Os Dynamic CP ]-------------//
	cp_Dealership = CreateDynamicCP(DEALERSHIP_X, DEALERSHIP_Y, DEALERSHIP_Z - 0.7, 1.0, 0, 0, -1, 1.7);
	cp_GarageLSPD = CreateDynamicCP(1583.3334, -1636.8772, 13.3901 - 0.7, 1.0, 0, 0, -1, 1.7);
	cp_GarageASGH = CreateDynamicCP(1173.8604, -1312.8894, 13.9848 - 0.7, 1.0, 0, 0, -1, 1.7);

	//---------[ LOOPS ]---------//

	//Mailboxes
	for(new i = 0; i < sizeof(Mailboxes); i++)
	{
		Create3DTextLabel("MailBox\n('F' para abrir o menu)", COLOR_WHITE, Mailboxes[i][0], Mailboxes[i][1], Mailboxes[i][2], 2.5, 0);
	}

	//---------[ MODULES ]---------//
	//Hallo_OnGameModeInit();
	Market_OnGameModeInit();
	TollBooth_CreateAreas();

	//Textdraws
	Hitmark_Create();
	BuyInfo_CreateGlobal();
	Phone_CreateGlobal();
	Dealership_CreateGlobal();

	return 1;
}

public OnGameModeExit()
{
	mysql_close(this);

	if(doubleExp)
	{
		SetDoubleXP(false);
	}

	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid))
		return 1;

	if(!PlayerData[playerid][pLogged])
	{
		AC_SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][pSkin], 0.0, 0.0, -5.0, 90.0, 0, 0, 0, 0, 0, 0);

		TogglePlayerSpectating(playerid, 1);

		SetTimerEx("IsPlayerRegistered", 300, 0, "d", playerid);
		SetTimerEx("RandomizeCameraToPlayer", 500, 0, "d", playerid);

		gettime(Horas, Minutos, Segundos);
		SetPlayerTime(playerid, Horas, Minutos);
	}

	return 1;
}

public OnPlayerConnect(playerid)
{
	Reset_OPC(playerid);

	//player checks
	ResetPlayerWeapons(playerid);
	PreloadAnims(playerid);

	//Textdraws
	CriarTextdraws(playerid);

	//WeaponSkills
	SetPlayerWeaponSkills(playerid, true);

	//RemoveObjects
	RemoveBuildings(playerid);

	//AntiNameTag
	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
		DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

	PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel("Loading name...", COLOR_RP2, 0.0, 0.0, 0.15, 15.0, playerid, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid));

	return 1;
}

this::IsPlayerRegistered(playerid)
{
	ClearPlayerChat(playerid, 20);

	if(!IsValidRoleplayName(ReturnName(playerid)))
	{
		SendWarningMessage(playerid, "Seu nome de usuário não corresponde com o formato Nome_Sobrenome.");
		return KickEx(playerid);
	}	

	if(GetPVarInt(playerid, "Download_Files") == 1)
	{
		SendServerMessage(playerid, "Download finalizado.");
		
		DeletePVar(playerid, "Download_Files");
	}

	new query[70];

	SetPlayerColorEx(playerid, COLOR_WHITE);

	mysql_format(this, query, sizeof(query), "SELECT UserID FROM `players` WHERE `Name` = '%e'", ReturnName(playerid));
	mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_CHECK_ACCOUNT);

	return 1;
}

this::RandomizeCameraToPlayer(playerid)
{
	new rand = random(6);

	switch(rand)
	{
		case 0://Gym
		{
			SetPlayerCameraPos(playerid, 2211.1460, -1748.3909, 29.3744);
			SetPlayerCameraLookAt(playerid, 2229.4968, -1722.0701, 13.5625);
		}
		case 1://Vinewood
		{
			SetPlayerCameraPos(playerid, 1377.0148, -857.0660, 86.6585);
			SetPlayerCameraLookAt(playerid, 1406.1576, -808.5210, 85.8961);
		}
		case 2://Fishing Pier
		{
			SetPlayerCameraPos(playerid, 423.3802, -2067.7915, 29.8605);
			SetPlayerCameraLookAt(playerid, 370.0804, -2087.8767, 7.8359);
		}
		case 3://All Saints
		{
			SetPlayerCameraPos(playerid, 1188.4574, -1309.2242, 13.5625+6.0);
			SetPlayerCameraLookAt(playerid, 1175.5581, -1324.7922, 18.1610);
		}
		case 4: //Casa - Disco voador
		{
			SetPlayerCameraPos(playerid, 1073.2290, -878.5027, 119.3921);
			SetPlayerCameraLookAt(playerid, 1159.3986, -798.1797, 105.5867);
		}
		case 5: //Unity
		{
			SetPlayerCameraPos(playerid, 1755.0413, -1824.8710, 20.2100);
			SetPlayerCameraLookAt(playerid, 1716.1129, -1880.0715, 22.0264);
		}
	}

	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	//Hallo_Reset(playerid);

	new string_wep[128], query[200];

	mysql_format(this, query, sizeof(query), "UPDATE `players` SET `Online` = '0' WHERE `UserID` = '%d'", PlayerData[playerid][pID]);
	mysql_tquery(this, query);
	
	switch(reason)
	{
		case 0:
		{
			if(PlayerData[playerid][pOnDuty])
			{
				for(new i = 0; i < 13; i++)
				{	
					format(string_wep, sizeof(string_wep), "%s%d|%d|", string_wep, PlayerData[playerid][pWeapon][i], PlayerData[playerid][pAmmo][i]);
				}

				mysql_format(this, query, sizeof(query), "INSERT INTO player_crashed (UserID, PlayerName, OnDuty, dutyWeapons, dutySkin) VALUES ('%d', '%e', '%d', '%e', '%d')",
					PlayerData[playerid][pID], ReturnName(playerid), PlayerData[playerid][pOnDuty], string_wep, GetPlayerSkinEx(playerid));
				mysql_tquery(this, query);
			}
			SendNearbyMessage(playerid, 35.0, COLOR_WHITE, "** %s Desconectou-se. (Perda de Conexão/Crash)", ReturnName(playerid, 0));
		
			PlayerData[playerid][pCrashed] = true;
		}
		case 1: 
		{
			SendNearbyMessage(playerid, 35.0, COLOR_WHITE, "** %s Desconectou-se.", ReturnName(playerid, 0));
		}
		case 2: 
		{
			SendNearbyMessage(playerid, 35.0, COLOR_WHITE, "** %s Desconectou-se. (Kickado/Banido)", ReturnName(playerid, 0));
		}
	}

	if(PlayerData[playerid][pOnDuty])
		ResetWeapons(playerid);

	Reset_OPD(playerid);

	PlayerData[playerid][pLogged] = false;

	return 1;
}

public OnPlayerSpawn(playerid)
{
	//Airbreak
	ACData[playerid][acAirbreakImmunity] = gettime() + 3;
	GetPlayerPos(playerid, ACData[playerid][acAirbreakPos][0], ACData[playerid][acAirbreakPos][1], ACData[playerid][acAirbreakPos][2]);

	SetPlayerTeam(playerid, 1);

	if(!GetPVarInt(playerid, "OnDuty_SkinID"))
	{
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	}
	else
	{
		SetPlayerSkin(playerid, GetPVarInt(playerid, "OnDuty_SkinID"));
	}

	SetWeapons(playerid);

	PlayerTextDrawHide(playerid, TelaPreta1[playerid]);
	PlayerTextDrawHide(playerid, TelaPreta2[playerid]);

	PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);

	if(TempData[playerid][tempHoldingProduct] != INVALID_INDUSTRY_PRODUCT)
		Carga_UnsetAttach(playerid);

	if(PlayerData[playerid][pState] == PLAYER_STATE_WOUNDED)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Você está gravemente ferido. (Poderá executar o comando /respawnhosp em breve)");
	}
	else if(PlayerData[playerid][pState] == PLAYER_STATE_DEAD)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Você está morto. (Poderá executar o comando /respawnhosp em breve)");
	}

	SetPlayerToRespawn(playerid);

	if(!PlayerData[playerid][pHealth])
	{
		SetScriptedHealth(playerid, 25);
	}
	else
	{	
		SetScriptedHealth(playerid, PlayerData[playerid][pHealth]);
	}

	SetScriptedArmour(playerid, PlayerData[playerid][pArmor]);

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(gettime() - ACData[playerid][acLastDeath] < 2)
	{
		if(killerid != INVALID_PLAYER_ID && playerid != INVALID_PLAYER_ID)
			return OnCheatDetected(playerid, ServerAC[AC_FAKEKILL][acName], ServerAC[AC_FAKEKILL][acAction]);
	}

	new breakin_id = PlayerData[playerid][pBreakinVehicle];

	if(breakin_id != INVALID_VEHICLE_ID && IsValidVehicle(breakin_id))
	{
		VehicleData[breakin_id][vehiclePhysicalAttack] = false;
		DestroyDynamic3DTextLabel(VehicleData[breakin_id][vehicleLabel]);
		VehicleData[breakin_id][vehicleCooldown] = false;
		PlayerData[playerid][pBreakinVehicle] = INVALID_VEHICLE_ID;
	}

	if(PlayerData[playerid][pState] != PLAYER_STATE_ALIVE)
	{
		if(PlayerData[playerid][pDrugUsed])
		{
			PlayerData[playerid][pDrugUsed]  = 0;
			PlayerData[playerid][pDrugTime] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "* O efeito atual da sua droga acabou.");
			SetPlayerWeather(playerid, 0);
		}

		PlayerData[playerid][pState] = PLAYER_STATE_ALIVE;
		PlayerData[playerid][pHospital] = 1;

		if(!PlayerData[playerid][pVip])
		{
			PlayerData[playerid][pHospitalTime] = 30;
		}
		else
		{
			PlayerData[playerid][pHospitalTime] = 13;
		}

		ResetarEstatisticas(playerid);
	}
	else
	{
		if(killerid == INVALID_PLAYER_ID && !PlayerData[playerid][pHospital])
		{
			GetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
			GetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

			PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

			OnPlayerDead(playerid, killerid, reason);

			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 1, 1, 1, 0, 1);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			if(PlayerData[playerid][pLoopAnim])
				PlayerData[playerid][pLoopAnim] = false;
		}
	}

	SetPlayerToSpawn(playerid);

	ACData[playerid][acAirbreakImmunity] = gettime() + 3;
	ACData[playerid][acLastDeath] = gettime();

	return 1;
}

this::OnPlayerWounded(playerid, killerid, reason)
{
	if(PlayerData[playerid][pState] == PLAYER_STATE_ALIVE)
	{
		if(PlayerData[playerid][pRobbing])
		{
			SendServerMessage(playerid, "Sua tentativa de roubo falhou por você estar gravemente ferido.");
			ResetPlayerRob(playerid);
		}

		/*if(GetPVarInt(playerid, "InHalloween"))
		{
			Hallo_Reset(playerid);
		}*/

		PlayerData[playerid][pState] = PLAYER_STATE_WOUNDED;
		PlayerData[playerid][pDeathTime] = gettime() + 180;
		SetScriptedHealth(playerid, 15.0);		
	
		ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 1, 1, 1, 0, 1);

		UpdateWeapons(playerid);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		SetPVarInt(playerid, "w_delaytofinish", gettime() + 5);

		if(PlayerData[playerid][pLoopAnim])
			PlayerData[playerid][pLoopAnim] = false;

		if(killerid != INVALID_PLAYER_ID)
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) deixou o jogador %s (uid: %d) brutalmente ferido.", FormatFullTime(), ReturnName(killerid), PlayerData[killerid][pID], ReturnName(playerid), PlayerData[playerid][pID]);
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) deixou %s (ID: %d) brutalmente ferido.", ReturnName(killerid, 0), killerid, ReturnName(playerid, 0), playerid);

			if(PlayerData[killerid][pInWar] && PlayerData[playerid][pInWar] && FactionData[PlayerData[killerid][pFaction]][factionType] == FactionData[PlayerData[playerid][pFaction]][factionType])
			{
				ResetWeapons(playerid);

				PlayerData[playerid][pInWar] = false;
				
				SendClientMessage(playerid, COLOR_WARNING, "Você foi eliminado da guerra. A partir de agora não está mais participando.");
				SendServerMessage(playerid, "Suas armas foram removidas.");
				
				PlayerData[playerid][pIllegalDuty] = false;
				SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
				
				if(PlayerData[killerid][pFaction] != PlayerData[playerid][pFaction])
					War_Kills[PlayerData[killerid][pFaction]]++;

				War_Members[PlayerData[playerid][pFaction]]--;

				if(War_Members[PlayerData[playerid][pFaction]] <= 0)
				{
					War_Kills[PlayerData[playerid][pFaction]] = 0;

					if(GetFactionType(playerid) == FACTION_GANGSTER)
					{
						War_GangstersTeams--;
						if(War_GangstersTeams == 1)
						{
							FinalizarGuerra(FACTION_GANGSTER);
						}
					}
					else if(GetFactionType(playerid) == FACTION_MOTOCLUB)
					{
						War_MotoclubTeams--;
						if(War_MotoclubTeams == 1)
						{
							FinalizarGuerra(FACTION_MOTOCLUB);
						}
					}
					else if(GetFactionType(playerid) == FACTION_CARTEL)
					{
						War_CartelTeams--;
						if(War_CartelTeams == 1)
						{
							FinalizarGuerra(FACTION_CARTEL);
						}
					}
				}
			}
		}
	}

	return 1;
}

this::OnPlayerDead(playerid, killerid, reason)
{
	if(PlayerData[playerid][pState] != PLAYER_STATE_ALIVE && PlayerData[playerid][pState] != PLAYER_STATE_WOUNDED)
		return 0;

	SendDeathMessage(killerid, playerid, reason);

	/*if(GetPVarInt(playerid, "InHalloween"))
	{
		Hallo_Reset(playerid);
	}*/

	if(PlayerData[playerid][pRobbing])
	{
		SendServerMessage(playerid, "Sua tentativa de roubo falhou por você estar morto.");
		ResetPlayerRob(playerid);
	}

	PlayerData[playerid][pState] = PLAYER_STATE_DEAD;

	ResetWeapons(playerid);

	SendWarningMessage(playerid, "Você morreu e poderá executar o comando /respawnhosp em breve.");

	PlayerData[playerid][pDeathTime] = gettime() + 60;
	SetScriptedHealth(playerid, 15.0);

	if(PlayerData[playerid][pCareTime] > 0)
	{
		foreach(new i : Player) if(PlayerData[i][pLogged] && PlayerData[playerid][pCare] == i)
		{
			SendWarningMessage(i, "Atenção, %s não resistiu aos ferimentos.", ReturnName(playerid, 0));

			PlayerData[playerid][pCare] = INVALID_PLAYER_ID;
			PlayerData[playerid][pCareTime] = 0;

			break;
		}
	}

	if(killerid == INVALID_PLAYER_ID) 
	{
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) morreu de queda, afogamento ou suicídio.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID]);
		SendAdminMessage(COLOR_WARNING, "AdminAlert:%s (ID: %d) morreu de queda, afogamento ou suicídio nas proximidades de %s.", ReturnName(playerid, 0), playerid, GetPlayerLocation(playerid));
	}
	else 
	{
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) deixou %s (uid: %d) com o status de morto.", FormatFullTime(), ReturnName(killerid), PlayerData[killerid][pID], ReturnName(playerid), PlayerData[playerid][pID]);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) matou o jogador %s (ID: %d) nas proximidades de %s.", ReturnName(killerid, 0), killerid, ReturnName(playerid, 0), playerid, GetPlayerLocation(playerid));
	}

	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	SetEngineStatus(vehicleid, false);
	SetLightStatus(vehicleid, false);
	SetTrunkStatus(vehicleid, false);
	ToggleVehicleAlarms(vehicleid, false);

	VehicleData[vehicleid][vehicleTrash] = 0;

	if(!VehicleData[vehicleid][vehicleFaction] && VehicleData[vehicleid][vehicleJob] == -1)
	{
		VehicleData[vehicleid][vehicleParked] = 0;
		VehicleData[vehicleid][vehicleHealth] = 270.0;	

		for(new i = 0; i < 14; i++)
			VehicleData[vehicleid][vehicleMod][i] = 0;

		NotifyOwner(VehicleData[vehicleid][vehicleOwnerID], COLOR_WHITE, "SERVER: Seu veículo %s (%s) foi destruído.", ReturnVehicleModelName(VehicleData[vehicleid][vehicleModel]), VehicleData[vehicleid][vehiclePlate]);

		VehicleData[vehicleid][vehicleParked] = 0;

		Vehicle_RemoveAllItems(vehicleid);
		Vehicle_Save(vehicleid);
		Vehicle_Destroy(vehicleid);
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(VehicleData[vehicleid][vehicleCallsign])
	{
		VehicleData[vehicleid][vehicleCallsign] = false;

		if(IsValidDynamic3DTextLabel(VehicleData[vehicleid][vehicleCallsignLabel]))
			DestroyDynamic3DTextLabel(VehicleData[vehicleid][vehicleCallsignLabel]);
	}

	if(VehicleData[vehicleid][vehicleParked] == 1)
	{
		if(VehicleData[vehicleid][vehicleLocked])
			SetDoorStatus(vehicleid, true);
		else
			SetDoorStatus(vehicleid, false);

		Vehicle_SetMod(vehicleid);

		if(VehicleData[vehicleid][vehicleFaction] >= 1 || VehicleData[vehicleid][vehicleJob] >= 1)
		{
			AC_SetVehicleHealth(vehicleid, VehicleData[vehicleid][vehicleMaxHealth]);
			SetVehicleVirtualWorld(vehicleid, VehicleData[vehicleid][vehicleParkedVW]);
		}
	}

	for(new i = 0; i < 25; i++)
	{
		if(i < 5)
		{
			if(IsValidDynamicObject(VehicleData[vehicleid][vehicleObjectSlot][i]))
				DestroyDynamicObject(VehicleData[vehicleid][vehicleObjectSlot][i]);
		}

		VehicleData[vehicleid][vehicleCrateSlot][i] = 0;
	}

	VehicleData[vehicleid][vehicleTrash] = 0;

	SetEngineStatus(vehicleid, false);
	SetLightStatus(vehicleid, false);
	SetTrunkStatus(vehicleid, false);
	ToggleVehicleAlarms(vehicleid, false);
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(success)
	{
		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i)) continue;
			if(!strcmp(PlayerIP(i), "xx", true) || !strcmp(PlayerIP(i), "127.0.0.1", true)) continue;

			SendWarningMessage(i, "Falha ao executar este comando.");
			BanPlayer(i, "Rcon Spoof", "Automático", 0);

			break;
		}
	}
	else
	{
		foreach(new i : Player)
		{
			if(!IsPlayerConnected(i)) continue;
			if(!strcmp(PlayerIP(i), "xx", true) || !strcmp(PlayerIP(i), "127.0.0.1", true)) continue;

			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) realizou uma tentativa de log-in na RCON.", ReturnName(i, 0), i);

			break;
		}		
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(ACData[playerid][acCTJack])
		{
			OnCheatDetected(playerid, ServerAC[AC_CARTROLLHACK][acName], ServerAC[AC_CARTROLLHACK][acAction]);
		}
		if(oldstate == PLAYER_STATE_PASSENGER)
		{
			OnCheatDetected(playerid, ServerAC[AC_CARTROLLHACK][acName], ServerAC[AC_CARTROLLHACK][acAction]);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID)
		{
			PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
		}

		foreach(new i : Player) if(PlayerData[i][pSpectator] == playerid)
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
	}

	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		foreach(new i : Player) if(PlayerData[i][pSpectator] == playerid)
			PlayerSpectatePlayer(i, playerid);

		PlayerTextDrawHide(playerid, Velocimetro[playerid]);

		//Teleport (false report ao apertar F veiculo em movimento)
		ACData[playerid][acTeleportTime] = gettime() + 3;
		ACData[playerid][acTeleportSafe] = true;
	}

	if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT)
	{
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
			AC_RemovePlayerFromVehicle(playerid);

		new vehicleid = GetPlayerVehicleID(playerid);

		if(IsSpeedoVehicle(vehicleid))
			PlayerTextDrawShow(playerid, Velocimetro[playerid]);

		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
			SetEngineStatus(GetPlayerVehicleID(playerid), true);

		if(Vehicle_IsOwner(playerid, vehicleid))
			SendClientMessageEx(playerid, COLOR_WHITE, "Bem vindo ao seu(sua) %s.", ReturnVehicleModelName(VehicleData[vehicleid][vehicleModel]));

		else if(VehicleData[vehicleid][vehicleFaction] >= 1 && VehicleData[vehicleid][vehicleFaction] != PlayerData[playerid][pFactionID])
		{
			AC_RemovePlayerFromVehicle(playerid);
			SendWarningMessage(playerid, "Você não possui as chaves deste veículo.");
		}

		else if(VehicleData[vehicleid][vehicleJob] >= 1 && VehicleData[vehicleid][vehicleJob] != PlayerData[playerid][pJob])
		{
			AC_RemovePlayerFromVehicle(playerid);
			SendWarningMessage(playerid, "Você não possui as chaves deste veículo.");
		}

		if(VehicleData[vehicleid][vehicleJob] == EMPREGO_Lixeiro && PlayerData[playerid][pJob] == EMPREGO_Lixeiro)
		{
			if(VehicleData[vehicleid][vehicleModel] == 408)
				SendGreenMessage(playerid, "Trashmaster: %d / 50 sacos de lixos.", VehicleData[vehicleid][vehicleTrash]);
		}
	}

	if(newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
	{
		new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

		PlayerData[playerid][pTaxiFee] = 5;
		PlayerData[playerid][pTaxiTime] = 0;
		PlayerData[playerid][pTaxiPlayer] = driverid;

		SendClientMessageEx(driverid, COLOR_WHITE, "* %s entrou no seu taxi como passageiro.", ReturnName(playerid, 0));
		SendClientMessageEx(playerid, COLOR_WHITE, "* Você entrou no taxi de %s.", ReturnName(driverid, 0));

		if(GetPVarInt(playerid, "DestinoMarcado_Taxi") == 1)
		{
			SendClientMessage(driverid, COLOR_WHITE, "TAXI: O passageiro já predefiniu o destino, veja-o em seu mini-mapa.");
			Waypoint_Set(playerid, "Ponto de entrega do passageiro", GetPVarFloat(playerid, "Destino_Taxi_X"), GetPVarFloat(playerid, "Destino_Taxi_Y"), GetPVarFloat(playerid, "Destino_Taxi_Z"));
			DeletePVar(playerid, "DestinoMarcado_Taxi");
		}
	}

	if(oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiTime] != 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	{
		LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
	}

	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(PlayerData[playerid][pDrivingTest])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2]))
		{
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) tentou burlar o checkpoint do teste de licença.", ReturnName(playerid, 0), playerid);
			SendWarningMessage(playerid, "Não foi possível prosseguir, o checkpoint original foi restaurado em seu mini-mapa.");
			Waypoint_Remove(playerid);
			return SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 3.0);
		}

		PlayerData[playerid][pTestStage]++;

		if(PlayerData[playerid][pTestStage] < sizeof(g_arrDrivingCheckpoints))
		{
			Waypoint_Remove(playerid);
			SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 3.0);
		}
		else
		{
			new Float:health;

			GetVehicleHealth(GetPlayerVehicleID(playerid), health);

			if(health < 950.0)
				SendClientMessage(playerid, COLOR_WARNING, "Você falhou no teste de direção por causar muito dano no veículo.");

			else
			{
				PlayerData[playerid][pCarLicense] = 1;
				SendGreenMessage(playerid, "Você passou no teste e agora possui licença de veículos terrestres.");
			}
			CancelDrivingTest(playerid);
		}
	}
	else
	{
		if(GetPVarInt(playerid, "InDynamicCP") == 1)
			return 0;

		Waypoint_Remove(playerid);
		DisablePlayerCheckpoint(playerid);
	}

	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerData[playerid][pTaxiDuty])
	{
		foreach(new i : Player)
		{
			if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
			{
				LeaveTaxi(i, playerid);
			}
		}
		PlayerData[playerid][pTaxiDuty] = false;
		SendClientMessage(playerid, COLOR_WHITE, "* Você saiu do taxi e não está mais em serviço.");
	}
	if(PlayerData[playerid][pDrivingTest])
	{
		SetTimerEx("PutInsideVehicle", 1000, false, "dd", playerid, vehicleid);
		Dialog_Show(playerid, LeaveTest, DIALOG_STYLE_MSGBOX, "Cancelar teste de direção", "Você saiu do veículo do teste de habilitação terrestre.\nResponda: você deseja cancelar o teste?", "Sim", "Não");
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
	{
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	}	
	if(newkeys & 16 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		//modules
		Market_Show(playerid);

		//main
		callcmd::entrar(playerid);
		callcmd::sair(playerid);

		if(IsPlayerInRangeOfPoint(playerid, 1.5, 758.8973, -77.5249, 1000.6511))
		{
			callcmd::mudarluta(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, -2032.8527, -117.4229, 1035.1719))
		{
			callcmd::comprarlicencas(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 1.5, 708.8866, 393.4151, 1023.5939))
		{
			Dialog_Show(playerid, CityHall, DIALOG_STYLE_TABLIST_HEADERS, "Qual serviço você deseja acessar?", "Opção\nAgência de empregos\nMinhas multas", "Selecionar", "Cancelar");
		}
		else if(IsPlayerNearMailBox(playerid))
		{
			Market_Mailbox_Show(playerid);
		}
	}
	if(newkeys & 2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid))
	{
		callcmd::abrir(playerid);

		/* Pedágio */
		new siren = GetVehicleParamsSirenState(GetPlayerVehicleID(playerid));
		if(siren == 1)
		{
			TollBooth_Emergency(playerid);
		}
	}
	if(newkeys & KEY_YES)
	{
		callcmd::inventario(playerid, "");	
	}
	if(newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
			new count = 0, id = Item_Nearest(playerid);

			if(id != -1)
			{
				sz_MiscString[0] = 0;

				foreach(new i : DItems) if(count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.2, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
				{
					ListedOptions[playerid][count++] = i;
					strcat(sz_MiscString, DroppedItems[i][droppedItem]);
					strcat(sz_MiscString, "\n");
				}
				if(count == 1)
				{
					if(DroppedItems[id][droppedWeapon] != 0)
					{
						if(PlayerData[playerid][pTimePlayed] < 2)
							return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

						if(PlayerHasWeapon(playerid, DroppedItems[id][droppedWeapon]))
							return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

						if(PlayerHasWeaponInSlot(playerid, DroppedItems[id][droppedWeapon]))
							return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

						if(PlayerData[playerid][pOnDuty])
							return SendWarningMessage(playerid, "Você não pode fazer isso agora.");

						GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

						Item_Delete(id);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega a arma \"%s\" do chão.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));						
					}
					else if(PickupItem(playerid, id))
					{
						SendGreenMessage(playerid, "Você pegou o item \"%s\".", DroppedItems[id][droppedItem]);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do chão.", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
					}
					else
						SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");
				}
				else Dialog_Show(playerid, DroppedItems, DIALOG_STYLE_LIST, "Itens próximos", sz_MiscString, "Pegar", "Cancelar");
			}
		}

		if(TempData[playerid][tempHoldingTrash])
		{
			new vehicleid;

			if((vehicleid = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID)
			{
				if(GetVehicleModel(vehicleid) != 408)
					return SendWarningMessage(playerid, "Este veículo não é um caminhão de lixo.");

				if(!IsPlayerNearBoot(playerid, vehicleid))
					return SendWarningMessage(playerid, "Você não está próximo a traseira do caminhão.");

				if(VehicleData[vehicleid][vehicleTrash] >= MAX_TRASH_VEHICLE)
					return SendWarningMessage(playerid, "O caminhão já está no seu limite máximo (%02d/%d)", VehicleData[vehicleid][vehicleTrash] , MAX_TRASH_VEHICLE);

				TempData[playerid][tempHoldingTrash] = false;
				RemovePlayerAttachedObject(playerid, 9);

				Daily_Update(playerid, 3);

				VehicleData[vehicleid][vehicleTrash]++;
				
				SendGreenMessage(playerid, "Você jogou o saco de lixo para dentro da caçamba do caminhão.");
			}
			else
			{
				SendWarningMessage(playerid, "Você descartou o saco de lixo que estava carregando.");
				TempData[playerid][tempHoldingTrash] = false;
				RemovePlayerAttachedObject(playerid, 9);
			}
		}
	}

	if(newkeys & KEY_SPRINT && PlayerData[playerid][pLoopAnim])
	{
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		HidePlayerFooter(playerid);

		PlayerData[playerid][pLoopAnim] = false;
	}

	if(HOLDING(KEY_JUMP) && HOLDING(KEY_SPRINT))
	{
		new vehicleid;
		if(IsPlayerInAnyVehicle(playerid) && (vehicleid = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID)
		{
			if(VehicleData[vehicleid][vehicleTweak])
			{
				if(gettime() - VehicleData[vehicleid][vehicleTweakTime] < 60)
				{
					TempData[playerid][tempTweak]++;
					PlayerPlaySoundEx(playerid, 11200, 15.0);
					if(TempData[playerid][tempTweak] >= 20)
					{
						new rand = random(12);
						if(rand >= 0 && rand <= 4)
						{
							VehicleData[vehicleid][vehicleTweak] = false;
							TempData[playerid][tempTweak] = 0;
							SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s liga o motor do veíclo.", ReturnName(playerid, 0));
							SetEngineStatus(vehicleid, true);
						}
						else
						{
							GameTextForPlayer(playerid, "~r~MOTOR FALHOU EM LIGAR~n~~w~Tente novamente!", 3000, 4);
							TempData[playerid][tempTweak] = 0;
						}
					}
				}
			}
		}
	}

	if(RELEASED(KEY_JUMP) && RELEASED(KEY_SPRINT))
	{
		new vehicleid;
		if(IsPlayerInAnyVehicle(playerid) && (vehicleid = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID)
		{
			if(VehicleData[vehicleid][vehicleTweak])
			{
				TempData[playerid][tempTweak] = 0;
			}
		}	
	}

	new breakin_id = PlayerData[playerid][pBreakinVehicle];

	if(breakin_id != INVALID_VEHICLE_ID && VehicleData[breakin_id][vehiclePhysicalAttack] && RELEASED(KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !VehicleData[breakin_id][vehicleCooldown])
	{
		new weaponid = GetPlayerWeapon(playerid);

		if(IsValidVehicle(breakin_id))
		{
			new Float:cX, Float:cY, Float:cZ, Float:dX, Float:dY, Float:dZ, Float:playerHealth;

			GetPlayerHealth(playerid, playerHealth);

			GetVehicleModelInfo(VehicleData[breakin_id][vehicleModel], VEHICLE_MODEL_INFO_FRONTSEAT, cX, cY, cZ);
			GetVehicleRelativePos(breakin_id, dX, dY, dZ, - cX - 0.5, cY, cZ);

			if(GetVehicleDriver(breakin_id) != INVALID_PLAYER_ID || VehicleData[breakin_id][vehicleDoorHealth] <= 0.0 || !IsPlayerInRangeOfPoint(playerid, 1.2, dX, dY, dZ))
				return 1;

			switch(VehicleData[breakin_id][vehicleDoorEffect])
			{
				case LESS_DAMAGE_FIST:
				{
					if(weaponid == 0)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 1 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 1;
						if(playerHealth >= 10.0)
						{
							SetScriptedHealth(playerid, playerHealth - 10.0);
						}
					}
					if(weaponid >= 1 && weaponid <= 9)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 10 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 10;
					}
					if(weaponid >= 22 && weaponid <= 24)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 15 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 15;
					}
					if(weaponid >= 25 && weaponid <= 33)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 30 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 30;
					}
				}
				case LESS_DAMAGE_MELEE:
				{
					if(weaponid >= 22 && weaponid <= 24)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 5 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 5;
					}
					if(weaponid >= 25 && weaponid <= 33)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 20 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 20;
					}
				}
				case BLOCK_PHYSICAL:
				{
					if(weaponid >= 25 && weaponid <= 33)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 30 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 30;
					}
				}
				default:
				{
					if(weaponid == 0)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 2 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 2;
						SetScriptedHealth(playerid, playerHealth - 5.0);
					}
					if(weaponid >= 1 && weaponid <= 9)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 10 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 10;
					}
					if(weaponid >= 22 && weaponid <= 24)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 15 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 15;
					}
					if(weaponid >= 25 && weaponid <= 33)
					{
						VehicleData[breakin_id][vehicleDoorHealth] = (VehicleData[breakin_id][vehicleDoorHealth] - 30 <= 0) ? 0 : VehicleData[breakin_id][vehicleDoorHealth] - 30;
					}
				}
			}
			new lights, doors, panels, tires, strstatus[90];
			GetVehicleDamageStatus(breakin_id, panels, doors, lights, tires);

			switch(VehicleData[breakin_id][vehicleDoorHealth])
			{
				case 0: UpdateVehicleDamageStatus(breakin_id, panels, encode_doors(0, 0, 4, 0, 0, 0), lights, tires);
				case 1..20: UpdateVehicleDamageStatus(breakin_id, panels, encode_doors(0, 0, 2, 0, 0, 0), lights, tires);
			}

			new doorhealth[12];

			format(doorhealth, sizeof(doorhealth), "%d", VehicleData[breakin_id][vehicleDoorHealth]);
			UpdateDynamic3DTextLabelText(VehicleData[breakin_id][vehicleLabel], COLOR_WHITE, doorhealth);

			VehicleData[breakin_id][vehicleCooldown] = true;
			SetTimerEx("OnCoolDown", 1000, false, "d", breakin_id);

			if(VehicleData[breakin_id][vehicleDoorHealth] <= 0.0)
			{
				DestroyDynamic3DTextLabel(VehicleData[breakin_id][vehicleLabel]);

				VehicleData[breakin_id][vehicleCooldown] = false;
				VehicleData[breakin_id][vehicleDoorHealth] = 0;
				VehicleData[breakin_id][vehiclePhysicalAttack] = false;

				format(strstatus, sizeof(strstatus), "~g~%s DESTRANCADO", ReturnVehicleModelName(VehicleData[breakin_id][vehicleModel]));
				GameTextForPlayer(playerid, strstatus, 3000, 3);

				SetDoorStatus(breakin_id, false);
				VehicleData[breakin_id][vehicleLocked] = 0;
			}
		}
	}

	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(!PlayerData[playerid][pLogged])
		return 0;

	new CarroID = GetPlayerVehicleID(playerid);

	new Float:vehhealth;
	GetVehicleHealth(GetPlayerVehicleID(playerid), vehhealth);
	if(vehhealth < 270.0)
	{
		if(GetEngineStatus(GetPlayerVehicleID(playerid)))
			SetEngineStatus(GetPlayerVehicleID(playerid), false);

		AC_SetVehicleHealth(GetPlayerVehicleID(playerid), 270.0);
	}

	if(GetPVarInt(playerid, "LoadVehicleVW") == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0, 0.0, 0.0);

	if(GetPlayerMoney(playerid) != GetScriptedMoney(playerid))
	{
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	}

	if(gettime() - ACData[playerid][acTeleportTime] > 1 && !PlayerData[playerid][pJustLoggedIn])
	{
		//OnFoot
		if(!IsPlayerInRangeOfPoint(playerid, 50.0, ACData[playerid][acTpX], ACData[playerid][acTpY], ACData[playerid][acTpZ])
			&& !ACData[playerid][acTeleportSafe] && !IsPlayerNPC(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT
			&& GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && !IsPlayerFalling(playerid))
		{
			OnCheatDetected(playerid, ServerAC[AC_TELEPORTHACK][acName], ServerAC[AC_TELEPORTHACK][acAction]);
		}
		//Vehicle
		if(!IsPlayerInRangeOfPoint(playerid, 300.0, ACData[playerid][acTpX], ACData[playerid][acTpY], ACData[playerid][acTpZ])
			&& !ACData[playerid][acTeleportSafe] && !IsPlayerNPC(playerid) && GetPlayerSpeed(CarroID) <= 50
			&& (GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER))
		{
			OnCheatDetected(playerid, ServerAC[AC_TELEPORTHACK][acName], ServerAC[AC_TELEPORTHACK][acAction]);
		}
		GetPlayerPos(playerid, ACData[playerid][acTpX], ACData[playerid][acTpY], ACData[playerid][acTpZ]);
		ACData[playerid][acTeleportSafe] = false;
		ACData[playerid][acTeleportTime] = gettime() + 2;
	}

	if(ACData[playerid][acCTJack] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_ENTER_VEHICLE)
	{
		ACData[playerid][acCTJack] = false;
		ACData[playerid][acCTTime] = gettime() + 3;
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new Float:velo[3];

			GetVehicleVelocity(GetPlayerVehicleID(playerid), velo[0], velo[1], velo[2]);
			if(velo[0] > 1.8 || velo[0] < -1.8 || velo[1] > 1.8 || velo[1] < -1.8 || velo[2] > 1.8)
			{
				OnCheatDetected(playerid, ServerAC[AC_SPEEDHACK_CAR][acName], ServerAC[AC_SPEEDHACK_CAR][acAction]);
				return 0;
			}
		}
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID)
	{
		new Float:velo[3];

		GetPlayerVelocity(playerid, velo[0], velo[1], velo[2]);
		if(velo[0] > 1.25 || velo[0] < -1.25 || velo[1] > 1.25 || velo[1] < -1.25 || velo[2] > 1.25)
		{
			ACData[playerid][acPlayerWarns]++;

			if(ACData[playerid][acPlayerWarns] >= 3)
			{
				OnCheatDetected(playerid, ServerAC[AC_SPEEDHACK_ONFOOT][acName], ServerAC[AC_SPEEDHACK_ONFOOT][acAction]);
				return 0;
			}
		}
	}

	new Float:x, Float:y, Float:z, Float:distance, timestamp = gettime();

	if(!IsPlayerNPC(playerid))
	{
		if(timestamp > ACData[playerid][acAirbreakUpdateTick])
		{
			if(timestamp > ACData[playerid][acAirbreakImmunity] && GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_ENTER_VEHICLE && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_EXIT_VEHICLE)
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					distance = GetPlayerDistanceFromPoint(playerid, ACData[playerid][acAirbreakPos][0], ACData[playerid][acAirbreakPos][1], ACData[playerid][acAirbreakPos][2]);

					GetPlayerPos(playerid, x, y, z);

					if((floatabs(ACData[playerid][acAirbreakPos][2] - z) < 1.0 && floatabs(distance) >= ONFOOT_DISTANCE) && (floatabs(ACData[playerid][acAirbreakPos][1] - y) >= 50 || floatabs(ACData[playerid][acAirbreakPos][0] - x) >= 50.0))
					{
						OnAirbreakDetect(playerid);
					}
				}
				else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					distance = GetPlayerDistanceFromPoint(playerid, ACData[playerid][acAirbreakPos][0], ACData[playerid][acAirbreakPos][1], ACData[playerid][acAirbreakPos][2]);

					GetVehiclePos(CarroID, x, y, z);

					if((!IsVehicleMoving(CarroID) && floatabs(distance) >= VEHICLE_DISTANCE) && (floatabs(ACData[playerid][acAirbreakPos][1] - y) >= 40.0 || floatabs(ACData[playerid][acAirbreakPos][0] - x) >= 40.0))
					{
						OnAirbreakDetect(playerid);
					}
				}
			}

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				GetVehiclePos(CarroID, ACData[playerid][acAirbreakPos][0], ACData[playerid][acAirbreakPos][1], ACData[playerid][acAirbreakPos][2]);
			}
			else
			{
				GetPlayerPos(playerid, ACData[playerid][acAirbreakPos][0], ACData[playerid][acAirbreakPos][1], ACData[playerid][acAirbreakPos][2]);
			}

			ACData[playerid][acAirbreakUpdateTick] = timestamp;
		}
	}

	PlayerData[playerid][pLastUpdate] = gettime();

	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) //Apenas para o novo modelo.
{
	switch(dialogid)
	{
		case 0: //Criação de barreiras
		{
			if(response)
			{
				//getting coords and set the x,y + 2.0 in front of player
				new Float:pX, Float:pY, Float:pZ, Float:pAngle;
				GetPlayerPos(playerid, pX, pY, pZ);
				GetPlayerFacingAngle(playerid, pAngle);
				GetXYInFrontOfPlayer(playerid, pX, pY, 1.5);

				//create the barrier and warns the player's faction.
				RoadBlock_Create(playerid, g_aRoadBlocks[listitem][e_roadItem], pX, pY, pZ);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s coloca um(a) %s no chão.", ReturnName(playerid, 0), g_aRoadBlocks[listitem][e_roadName]);
				SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "** %s colocou um(a) %s em %s.", ReturnName(playerid, 0), g_aRoadBlocks[listitem][e_roadName], GetPlayerLocation(playerid));
			}
		}
		case 1: //furniture buy
		{
			new houseid = -1;

			if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
			{
				PlayerData[playerid][pSelectedSlot] = PlayerData[playerid][pBuyFurniture][listitem];

				new id = PlayerData[playerid][pSelectedSlot];

				if(response)
				{
					Dialog_Show(playerid, FurnitureConfirmBuy, DIALOG_STYLE_MSGBOX, "Informações da mobília selecionada:", "{FFFF00}Categoria:\t\t{FFFFFF}%s\n{FFFF00}Sub-Categoria:\t{FFFFFF}%s\n{FFFF00}Mobília:\t\t{FFFFFF}%s\n{FFFF00}Preço:\t\t\t{FFFFFF}%s\n\n{FFFFFF}- Ao clicar em prosseguir, você poderá \"provar\"\na mobília.\n- Para cancelar a compra, basta apertar a tecla\n\"ESC\".", "Prosseguir", "<<", 
						g_aFurnitures[id][ftrCategory], g_aFurnitures[id][ftrSubcategory], g_aFurnitures[id][ftrName], FormatNumber(g_aFurnitures[id][ftrPrice]));
				}
				else
				{
					sz_MiscString[0] = 0;

					for(new x, xs = sizeof(g_aFurnitures); x < xs; x++) if(!strcmp(PlayerData[playerid][pFurnitureCategory], g_aFurnitures[x][ftrCategory], true))
					{
						if(strfind(sz_MiscString, g_aFurnitures[x][ftrSubcategory], true) != -1)
							continue;

						format(sz_MiscString, sizeof(sz_MiscString), "%s%s\n", sz_MiscString, g_aFurnitures[x][ftrSubcategory]);
					}

					Dialog_Show(playerid, FurnitureBuyList, DIALOG_STYLE_LIST, PlayerData[playerid][pFurnitureCategory], sz_MiscString, "Selecionar", "<<");
				}
			}
		}
		case 2: //furniture search result
		{
			if(response)
			{
				new id = ListedOptions[playerid][listitem];

				PlayerData[playerid][pSelectedSlot] = id;

				format(PlayerData[playerid][pFurnitureCategory], 32, g_aFurnitures[id][ftrCategory]);
				format(PlayerData[playerid][pFurnitureSubCategory], 64, g_aFurnitures[id][ftrSubcategory]);

				Dialog_Show(playerid, FurnitureConfirmBuy, DIALOG_STYLE_MSGBOX, "Informações da mobília selecionada:", 
					"{FFFF00}Categoria:\t\t{FFFFFF}%s\n{FFFF00}Sub-Categoria:\t{FFFFFF}%s\n{FFFF00}Mobília:\t\t{FFFFFF}%s\n{FFFF00}Preço:\t\t\t{FFFFFF}%s\n\n{FFFFFF}- Ao clicar em prosseguir, você poderá \"provar\"\na mobília.\n- Para cancelar a compra, basta apertar a tecla\n\"ESC\".", "Prosseguir", "<<", 
					g_aFurnitures[id][ftrCategory], g_aFurnitures[id][ftrSubcategory], g_aFurnitures[id][ftrName], FormatNumber(g_aFurnitures[id][ftrPrice]));

			}
			else
			{
				Dialog_Show(playerid, FurnitureSearch, DIALOG_STYLE_INPUT, "Procurar por mobília:", "{FFFFFF}Digite a mobília que deseja procurar:\nINFO: O sistema irá listar trinta e cinco (35) resultados\nindependemente da categoria ou sub-categoria.", "Pesquisar", "<<");
			}
		}

	}

	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
		if(strlen(cmd) > 28)
		{
			SendFormatMessage(playerid, COLOR_WHITE, "ERRO", "Comando inexistente, use {FF6347}/ajuda{FFFFFF} ou {FF6347}/sos{FFFFFF} se você precisar de ajuda.");
		}
		else
		{
			SendFormatMessage(playerid, COLOR_WHITE, "ERRO", "Comando inexistente, use {FF6347}/ajuda{FFFFFF} ou {FF6347}/sos{FFFFFF} se você precisar de ajuda.");
		}
	}
	else
	{
		foreach(new i : Player) if(PlayerData[i][pSpectator] == playerid)
		{
			if(!strlen(params))
			{
				SendClientMessageEx(i, COLOR_YELLOW, "TV: %s (ID: %d) digitou o comando: /%s", ReturnName(playerid, 0), playerid, cmd);
			}
			else
			{
				SendClientMessageEx(i, COLOR_YELLOW, "TV: %s (ID: %d) digitou o comando: /%s %s", ReturnName(playerid, 0), playerid, cmd, params);
			}
		}
	}

    return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(!PlayerData[playerid][pLogged])
	{
		SendWarningMessage(playerid, "Você precisa estar autenticado no servidor para poder enviar comandos.");
		return 0;
	}

	if(PlayerData[playerid][pMuted] && !PlayerData[playerid][pAdmin])
	{
		SendWarningMessage(playerid, "Você foi calado por um administrador e seus comandos foram desabilitados.");
		return 0;
	}

	if(PlayerData[playerid][pEditingMode] && !PlayerData[playerid][pAdmin])
	{
		SendWarningMessage(playerid, "Termine de finalizar o objeto primeiro.");
		return 0;
	}

	if(PlayerData[playerid][pState] == PLAYER_STATE_WOUNDED || PlayerData[playerid][pState] == PLAYER_STATE_DEAD)
	{
		if(PlayerData[playerid][pAdmin] || !strcmp(cmd, "respawnhosp", true) || !strcmp(cmd, "report", true) || !strcmp(cmd, "relatorio", true) || !strcmp(cmd, "sos", true))
		{
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Você está gravemente ferido. (Poderá executar o comando /respawnhosp em breve)");
			return 0;
		}
	}

	if(PlayerData[playerid][pJailed])
	{
		if(PlayerData[playerid][pAdmin] || !strcmp(cmd, "pm", true) || !strcmp(cmd, "relatorio", true) || !strcmp(cmd, "report", true) || !strcmp(cmd, "aceitarproposta", true) || !strcmp(cmd, "sos", true))
		{
			return 1;
		}
		else
		{
			SendWarningMessage(playerid, "Você está preso e seus comandos foram bloqueados, com exceção do: /relatorio(sos), /pm e /aceitarproposta.");
			return 0;
		}
	}

	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(PlayerData[playerid][pMuted])
	{
		SendWarningMessage(playerid, "Você não pode falar no chat pois está calado.");
		return 0;
	}

	if(!PlayerData[playerid][pLogged])
	{
		SendWarningMessage(playerid, "Você precisa estar logado para poder falar.");
		return 0;
	}

	if(text[0] == '@')
	{
		if(PlayerData[playerid][pAdmin] >= ADMIN_Moderator)
		{
			if(strlen(text) > 64)
			{
				SendAdminMessage(COLOR_LEMON, "[%s] %s: %.64s", ReturnAdminRank(playerid), ReturnName(playerid, 0), text[1]);
				SendAdminMessage(COLOR_LEMON, "...%s", text[64]);
			}
			else
			{
				SendAdminMessage(COLOR_LEMON, "[%s] %s: %s", ReturnAdminRank(playerid), ReturnName(playerid, 0), text[1]);
			}

			gettime(Horas, Minutos, Segundos);			
			SendDiscordMessage(Discord_AdminChat, "[%02d:%02d:%02d] **%s**: %s", Horas, Minutos, Segundos, ReturnName(playerid, 0), text[1]);			
			return 0;
		}
	}

	if(PlayerData[playerid][pSpectator] != INVALID_PLAYER_ID)
	{
		SendWarningMessage(playerid, "Você não pode falar enquanto está no modo spectator.");
		return 0;
	}

	if(!Phone_InCall(playerid))
	{
		if(PlayerData[playerid][pFamilyID] == -1)
		{
			if(strlen(text) > 64)
			{
				SendChatMessage(10.0, playerid, "%s diz: %.64s", ReturnName(playerid, 0), text);
				SendChatMessage(10.0, playerid, "...%s", text[64]);
			}
			else
			{
				SendChatMessage(10.0, playerid, "%s diz: %s", ReturnName(playerid, 0), text);
			}
		}
		else
		{
			if(!PlayerData[playerid][pMasked])
			{
				if(strlen(text) > 64)
				{
					SendChatMessage(10.0, playerid, "[%s] %s diz: %.64s", Family_GetTag(playerid), ReturnName(playerid, 0), text);
					SendChatMessage(10.0, playerid, "...%s", text[64]);
				}
				else
				{
					SendChatMessage(10.0, playerid, "[%s] %s diz: %s", Family_GetTag(playerid), ReturnName(playerid, 0), text);
				}
			}
			else
			{
				if(strlen(text) > 64)
				{
					SendChatMessage(10.0, playerid, "%s diz: %.64s", ReturnName(playerid, 0), text);
					SendChatMessage(10.0, playerid, "...%s", text[64]);
				}
				else
				{
					SendChatMessage(10.0, playerid, "%s diz: %s", ReturnName(playerid, 0), text);
				}
			}
		}
	}
	else
	{
		if(PlayerData[playerid][pFamilyID] == -1)
		{
			if(strlen(text) > 64)
			{
				SendChatMessage(10.0, playerid, "%s (celular) diz: %.64s", ReturnName(playerid, 0), text);
				SendChatMessage(10.0, playerid, "...%s", text[64]);
			}
			else
			{
				SendChatMessage(10.0, playerid, "%s (celular) diz: %s", ReturnName(playerid, 0), text);
			}
		}
		else
		{
			if(strlen(text) > 64)
			{
				SendChatMessage(10.0, playerid, "[%s] %s (celular) diz: %.64s", Family_GetTag(playerid), ReturnName(playerid, 0), text);
				SendChatMessage(10.0, playerid, "...%s", text[64]);
			}
			else
			{
				SendChatMessage(10.0, playerid, "[%s] %s (celular) diz: %s", Family_GetTag(playerid), ReturnName(playerid, 0), text);
			}
		}
	}

	new targetid, targetnumber;
	Phone_GetCall(playerid, targetid, targetnumber);

	switch(PlayerData[playerid][pEmergency])
	{
		case 1:
		{
			if(strlen(text) < 10)
			{
				SendClientMessage(playerid, COLOR_WARNING, "A descrição informada é inválida, especifique mais.");
				return 0;
			}
			
			MDC_InsertNiner(playerid, text);
		}
	}
	switch(PlayerData[playerid][pBlackMarket])
	{
		case 1:
		{
			if(GetFactionType(playerid) != FACTION_CARTEL && GetFactionType(playerid) != FACTION_MOTOCLUB)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Comékié? Nunca nem ví!! *desliga o celular*", Phone_GetContact(playerid, targetnumber));
				Phone_EndCall(playerid, "chamada_finalizada");
				return 0;
			}
			if(!strcmp(text, "Drogas", true))
			{
				if(GetFactionType(playerid) != FACTION_CARTEL)
					SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Foi mal meu mano, mas já tenho compradores para as drogas.", Phone_GetContact(playerid, targetnumber));
				else
				{
					if(BlackMarketHasBought[PlayerData[playerid][pFaction]])
					{
						SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Só vou te conseguir essa parada amanhã. Me retorna amanhã e a gente vê.", Phone_GetContact(playerid, targetnumber));
						Phone_EndCall(playerid, "chamada_finalizada");
						return 0;
					}

					PlayerData[playerid][pBlackMarket] = 2;

					SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Então você quer drogas, qual você vai querer dessa vez? (\"Marijuana\", \"Cocaína\" ou \"LSD\")", Phone_GetContact(playerid, targetnumber));
				}
			}
			else if(!strcmp(text, "Armas", true))
			{
				if(GetFactionType(playerid) != FACTION_MOTOCLUB)
					SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Foi mal meu mano, mas já tenho compradores para as armas.", Phone_GetContact(playerid, targetnumber));
				else
				{
					if(BlackMarketHasBought[PlayerData[playerid][pFaction]])
					{
						SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Só vou te conseguir essa parada amanhã. Me retorna amanhã e a gente vê.", Phone_GetContact(playerid, targetnumber));
						Phone_EndCall(playerid, "chamada_finalizada");
						return 0;
					}

					PlayerData[playerid][pBlackMarket] = 6;	

					SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Então você quer armas, digite a quantidade que você vai querer? (Digite apenas números)", Phone_GetContact(playerid, targetnumber));
				}
			}
			else
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Não entendi mano, o que você vai querer? (\"Drogas\" ou \"Armas\")", Phone_GetContact(playerid, targetnumber));
		}
		case 2:
		{
			if(!strcmp(text, "Marijuana", true))
			{
				PlayerData[playerid][pBlackMarket] = 3;

				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Marijuana, boa, boa... Agora me diz a quantidade que você vai querer? (Digite apenas números)", Phone_GetContact(playerid, targetnumber));
			}
			else if(!strcmp(text, "Cocaína", true))
			{
				PlayerData[playerid][pBlackMarket] = 4;

				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Interessante, Cocaína... Me fala aí qual vai ser a quantidade? (Digite apenas números)", Phone_GetContact(playerid, targetnumber));
			}
			else if(!strcmp(text, "LSD", true))
			{
				PlayerData[playerid][pBlackMarket] = 5;

				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Então você quer o bagulho mais forte, LSD... Qual vai ser a quantidade? (Digite apenas números)", Phone_GetContact(playerid, targetnumber));
			}
			else
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Ahn?? Fala denovo, a ligação deve estar ruim... (\"Marijuana\", \"Cocaína\" ou \"LSD\")", Phone_GetContact(playerid, targetnumber));
		}
		case 3:
		{
			if(!IsNumber(text))
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Porra não entendi o que você falou, repete a quantidade aí pra mim. (Digite apenas números)", Phone_GetContact(playerid, targetnumber));
			}
			else
			{
				PlayerData[playerid][pBlackMarket] = 7;

				SetPVarInt(playerid, "Quantia_BM", strval(text));
				SetPVarInt(playerid, "Tipo_BM", 1);

				new total = strval(text) * 85;

				SetPVarInt(playerid, "Total_BM", total);
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: %d de marijuana, $85 cada... Total de %s, e aí negócio fechado? (\"Sim\" ou \"Não\")", Phone_GetContact(playerid, targetnumber), strval(text), FormatNumber(total));
			}
		}
		case 4:
		{
			if(!IsNumber(text))
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Porra não entendi o que você falou, repete a quantidade aí pra mim. (Use apenas números)", Phone_GetContact(playerid, targetnumber));
			}
			else
			{
				PlayerData[playerid][pBlackMarket] = 7;

				SetPVarInt(playerid, "Quantia_BM", strval(text));
				SetPVarInt(playerid, "Tipo_BM", 2);

				new total = strval(text) * 155;

				SetPVarInt(playerid, "Total_BM", total);
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: %d de cocaína, $155 cada... Total de %s, e aí negócio fechado? (\"Sim\" ou \"Não\")", Phone_GetContact(playerid, targetnumber), strval(text), FormatNumber(total));
			}
		}
		case 5:
		{
			if(!IsNumber(text))
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Porra não entendi o que você falou, repete a quantidade aí pra mim. (Use apenas números)", Phone_GetContact(playerid, targetnumber));
			}
			else
			{
				PlayerData[playerid][pBlackMarket] = 7;

				SetPVarInt(playerid, "Quantia_BM", strval(text));
				SetPVarInt(playerid, "Tipo_BM", 3);

				new total = strval(text) * 200;

				SetPVarInt(playerid, "Total_BM", total);
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: %d de LSD, $200 cada... Total de %s, e aí negócio fechado? (\"Sim\" ou \"Não\")", Phone_GetContact(playerid, targetnumber), strval(text), FormatNumber(total));
			}
		}
		case 6:
		{
			if(!IsNumber(text))
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Porra não entendi o que você falou, repete a quantidade aí pra mim. (Use apenas números)", Phone_GetContact(playerid, targetnumber));
			}
			else
			{
				PlayerData[playerid][pBlackMarket] = 7;

				SetPVarInt(playerid, "Quantia_BM", strval(text));
				SetPVarInt(playerid, "Tipo_BM", 4);

				new total = strval(text) * 700;

				SetPVarInt(playerid, "Total_BM", total);
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: %d partes de armas, $700 cada... Total de %s, e aí negócio fechado? (\"Sim\" ou \"Não\")", Phone_GetContact(playerid, targetnumber), strval(text), FormatNumber(total));
			}
		}
		case 7:
		{
			if(!strcmp(text, "Não", true))
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Firmeza sangue bom, me liga quando você realmente precisar, é nois.", Phone_GetContact(playerid, targetnumber));
				Phone_EndCall(playerid, "chamada_finalizada");
			}
			else if(!strcmp(text, "Sim", true))
			{
				if(PlayerData[playerid][pBank] > GetPVarInt(playerid, "Total_BM"))
				{
					GiveBankMoney(playerid, - GetPVarInt(playerid, "Total_BM"));
					
					SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Fechado então, vou ajeitar e já te mando um SMS avisando onde eu", Phone_GetContact(playerid, targetnumber));
					SendClientMessage(playerid, COLOR_YELLOW, "... deixei a carga. Ah, só vou enviar a mensagem uma vez, fica esperto.");

					PlayerData[playerid][pFactionSupply] = SetTimerEx("CreateFactionSupply", 1000 * randomEx(35,60), false, "d", playerid);

					Phone_EndCall(playerid, "chamada_finalizada");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Só negocio com quem tem grana, quando tiver me liga! *desliga o celular*", Phone_GetContact(playerid, targetnumber));
					Phone_EndCall(playerid, "chamada_finalizada");
				}
			}
			else
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Não entendi cara, me diz aí negócio fechado? (\"Sim\" ou \"Não\")", Phone_GetContact(playerid, targetnumber));
		}
	}
	switch(PlayerData[playerid][pInsurance])
	{
		case 1:
		{
			if(strfind(text, "-", true) == -1)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Senhor, a placa informada não segue o formato: ABC-1234.", Phone_GetContact(playerid, targetnumber));
			}
			else
			{
				new query[110];

				mysql_format(this, query, sizeof(query), "SELECT * FROM carros WHERE (vehiclePlate = '%e' AND ID = '%d' AND vehicleParked = '3')", text, PlayerData[playerid][pID]);
				mysql_tquery(this, query, "OnInsuranceSearch", "ds", playerid, text);
			}
		}
		case 2:
		{
			if(!strcmp(text, "Não", true))
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Tudo bem senhor, retorne a ligação assim que estiver ciente do acontecido.", Phone_GetContact(playerid, targetnumber));
				Phone_EndCall(playerid, "chamada_finalizada");
				return 0;
			}
			else if(!strcmp(text, "Sim", true))
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) %s: Certo... Você receberá, em instantes, o valor da cobertura de acordo com o nível", Phone_GetContact(playerid, targetnumber));
				SendClientMessageEx(playerid, COLOR_YELLOW, "... contrato, a tabela está disponível em: %s", SERVER_SITE);

				new plate[11], query[110];

				GetPVarString(playerid, "Insurance_Plate", plate, 11);

				mysql_format(this, query, sizeof(query), "SELECT * FROM carros WHERE (vehiclePlate = '%e' AND ID = '%d' AND vehicleParked = '3')", plate, PlayerData[playerid][pID]);
				mysql_tquery(this, query, "OnInsurancePay", "d", playerid);
			}
		}
	}
	if(targetid != INVALID_PLAYER_ID && Phone_InCall(targetid))
	{
		new callerid, callernumber;
		Phone_GetCall(targetid, callerid, callernumber);
		if(PlayerData[playerid][pFamily] == -1)
		{
			if(strlen(text) > 64)
			{
				SendClientMessageEx(targetid, COLOR_YELLOW, "(celular) %s: %.64s", Phone_GetContact(targetid, callernumber), CallerApp_FormatText(playerid, text));
				SendClientMessageEx(targetid, COLOR_YELLOW, "...%s", CallerApp_FormatText(playerid, text[64]));
			}
			else
			{
				SendClientMessageEx(targetid, COLOR_YELLOW, "(celular) %s: %s", Phone_GetContact(targetid, callernumber), CallerApp_FormatText(playerid, text));
			}
		}
		else
		{
			if(strlen(text) > 64)
			{
				SendClientMessageEx(targetid, COLOR_YELLOW, "(celular) [%s] %s: %.64s", Family_GetTag(playerid), Phone_GetContact(targetid, callernumber), CallerApp_FormatText(playerid, text));
				SendClientMessageEx(targetid, COLOR_YELLOW, "...%s", CallerApp_FormatText(playerid, text[64]));
			}
			else
			{
				SendClientMessageEx(targetid, COLOR_YELLOW, "(celular) [%s] %s: %s", Family_GetTag(playerid), Phone_GetContact(targetid, callernumber), CallerApp_FormatText(playerid, text));
			}
		}

		foreach(new i : Player) if(PlayerData[i][pLogged] && PlayerData[i][pAdmin])
		{
			if(PlayerData[i][pSpy] == targetid || PlayerData[i][pSpy] == playerid)
			{
				if(strlen(text) > 64)
				{
					SendClientMessageEx(i, COLOR_YELLOW, "[SPY CMD] Celular %s > %s: %.64s", ReturnName(playerid, 0), ReturnName(targetid, 0), text);
					SendClientMessageEx(i, COLOR_YELLOW, "...%s", text[64]);
				}
				else
				{
					SendClientMessageEx(i, COLOR_YELLOW, "[SPY CMD] Celular %s > %s: %s", ReturnName(playerid, 0), ReturnName(targetid, 0), text);
				}
			}
		}
	}

	return 0;
}

this::OnInsuranceSearch(playerid, plate[])
{
	new rows, vehicle_model;
	cache_get_row_count(rows);

	if(!rows)
		return SendClientMessage(playerid, COLOR_YELLOW, "(celular) Atendente: A placa informada é inválida ou o senhor não é o dono do veículo.");

	cache_get_value_name_int(0, "vehicleModel", vehicle_model);

	SendClientMessageEx(playerid, COLOR_YELLOW, "(celular) Atendente: Okay. Veículo \"%s\", placa \"%s\" foi registrado como roubado/furtado pela", ReturnVehicleModelName(vehicle_model), plate);
	SendClientMessage(playerid, COLOR_YELLOW, "...polícia de Los Santos. Você confirma essas informações? (\"Sim\" ou \"Não\")");

	PlayerData[playerid][pInsurance] = 2;

	SetPVarString(playerid, "Insurance_Plate", plate);

	return 1;
}

this::OnInsurancePay(playerid)
{
	new vehicle_id, insurance, vehicle_price, Float:insurance_pay;

	cache_get_value_name_int(0, "vehicleID", vehicle_id);
	cache_get_value_name_int(0, "vehicleSeguro", insurance);
	cache_get_value_name_int(0, "vehiclePrice", vehicle_price);

	switch(insurance)
	{
		case 1: insurance_pay = float(vehicle_price) * 0.65;
		case 2: insurance_pay = float(vehicle_price) * 0.75;
		case 3: insurance_pay = float(vehicle_price) * 0.9;
	}

	GiveBankMoney(playerid, floatround(insurance_pay));

	Vehicle_Remove(vehicle_id);

	Phone_EndCall(playerid, "chamada_finalizada");

	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if((response) && (extraid == MODEL_SELECTION_SKINS))
	{
		Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Editar skins", "Adicionar pelo ID do modelo\nAdicionar por thumbnail\nLimpar slot", "Selecionar", "Cancelar");
		PlayerData[playerid][pSelectedSlot] = index;
	}
	if((response) && (extraid == MODEL_SELECTION_ADD_SKIN))
	{
		FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = modelid;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendAdminAction(playerid, "Você setou a skin id no slot %d para %d.", PlayerData[playerid][pSelectedSlot] + 1, modelid);
	}
	if((response) && (extraid == MODEL_SELECTION_FACTION_SKIN))
	{
		if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_MEDIC)
		{
			if(!PlayerData[playerid][pOnDuty])
				return SendWarningMessage(playerid, "Você precisa estar em modo serviço para trocar a skin.");
		}

		new factionid = PlayerData[playerid][pFaction];

		if(factionid == -1 || !IsNearFactionLocker(playerid))
			return 0;

		if(modelid == 19300)
			return SendWarningMessage(playerid, "Não há um modelo de skin no slot selecionado.");

		SetPlayerSkin(playerid, modelid);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s troca o seu uniforme de serviço.", ReturnName(playerid, 0));

		SetPVarInt(playerid, "OnDuty_SkinID", modelid);

		if(GetFactionType(playerid) == FACTION_GANGSTER || GetFactionType(playerid) == FACTION_MOTOCLUB || GetFactionType(playerid) == FACTION_CARTEL)
			PlayerData[playerid][pIllegalDuty] = true;
	}
	if((response) && (extraid == MODEL_SELECTION_BUY_SKIN))
	{
		new id = Business_Inside(playerid);

		if(id == -1)
			return SendWarningMessage(playerid, "Você precisa estar dentro da loja de roupas.");

		if(!BusinessData[id][businessStock])
			return SendWarningMessage(playerid, "Esta empresa não possui produtos.");

		if(PlayerData[playerid][pOnDuty] || PlayerData[playerid][pIllegalDuty])
			return SendWarningMessage(playerid, "Você não pode trocar as suas roupas agora.");

		if(GetScriptedMoney(playerid) < 100)
			return SendWarningMessage(playerid, "Você não possui $100 em mãos.");

		SetPlayerSkin(playerid, modelid);
		PlayerData[playerid][pSkin] = modelid;

		GiveScriptedMoney(playerid, -100);

		SendGreenMessage(playerid, "Você trocou de roupa e pagou $100.");

		BusinessData[id][businessStock] -= 1;

		Business_IncreaseVault(id, 100);
	}
	return 1;
}

this::OnPlayerSave(playerid)
{
	if(PlayerData[playerid][pLogged])
	{
		Daily_Save(playerid);
		Phone_SavePlayerCfg(playerid);

		if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerData[playerid][pOnDuty])
		{
			UpdateWeapons(playerid);
		}

		new query[550];

		mysql_format(this, query, sizeof(query), "UPDATE players SET AdminLevel = '%d', Money = '%d', SkinID = '%d', Level = '%d', Respect = '%d', Sex = '%d', Tutorial = '%d', CarLicense = '%d', FlyLicense = '%d', BoatLicense = '%d', StyleFight = '%d', LastLogin = '%e' WHERE UserID = '%d'",
			PlayerData[playerid][pAdmin], PlayerData[playerid][pMoney], PlayerData[playerid][pSkin], PlayerData[playerid][pLevel], PlayerData[playerid][pEXP], PlayerData[playerid][pSex], PlayerData[playerid][pTutorial], PlayerData[playerid][pCarLicense], PlayerData[playerid][pFlyLicense], PlayerData[playerid][pBoatLicense], PlayerData[playerid][pFightStyle], PlayerData[playerid][pLastLogin], 
			PlayerData[playerid][pID]);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE players SET PMMuted = '%d', Armor = '%f', Health = '%f', MoneyBank = '%d', Savings = '%d', Spawn = '%d', Cellphone = '%d', DeathInterior = '%d', DeathWorld = '%d', Arrested = '%d', ArrestTime = '%d', Warns = '%d' WHERE UserID = '%d'",
			PlayerData[playerid][pPMMuted], PlayerData[playerid][pArmor], PlayerData[playerid][pHealth], PlayerData[playerid][pBank], PlayerData[playerid][pSavings], PlayerData[playerid][pSpawn], PlayerData[playerid][pCellphone], PlayerData[playerid][pInterior], PlayerData[playerid][pWorld], PlayerData[playerid][pJailed], PlayerData[playerid][pJailTime], PlayerData[playerid][pWarns], 
			PlayerData[playerid][pID]);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE players SET Job = '%d', Paycheck = '%d', DutyBlock = '%d', Hospital = '%d', HospitalTime = '%d', TimePlayed = '%d', State = '%d', DeathTime = '%d', DeathPosX = '%f', DeathPosY = '%f', DeathPosZ = '%f', House = '%d', Business = '%d', Complex = '%d' WHERE UserID = '%d'",
			PlayerData[playerid][pJob], PlayerData[playerid][pPaycheck], PlayerData[playerid][pOnDutyBlock], PlayerData[playerid][pHospital], PlayerData[playerid][pHospitalTime], PlayerData[playerid][pTimePlayed], PlayerData[playerid][pState], PlayerData[playerid][pDeathTime], PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ], PlayerData[playerid][pHouse], PlayerData[playerid][pBusiness], PlayerData[playerid][pComplex],
			PlayerData[playerid][pID]);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE players SET Entrance = '%d', RespawnTime = '%d', RadioSlot1 = '%d', RadioSlot2 = '%d', RadioSlot3 = '%d', RadioSlot4 = '%d', Faction = '%d', FactionRank = '%d', FactionMod = '%d', Namechange = '%d', CustomPlate = '%d' WHERE UserID = '%d'",
			PlayerData[playerid][pEntrance], PlayerData[playerid][pRespawnTime], PlayerData[playerid][pRadioSlot][0], PlayerData[playerid][pRadioSlot][1], PlayerData[playerid][pRadioSlot][2], PlayerData[playerid][pRadioSlot][3], PlayerData[playerid][pFactionID], PlayerData[playerid][pFactionRank], PlayerData[playerid][pFactionMod], PlayerData[playerid][pNameChange], PlayerData[playerid][pCustomPlate],
			PlayerData[playerid][pID]);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE players SET BlockFurniture = '%d', BlockBuyVehicle = '%d', BlockMoney = '%d', BlockedMoney = '%d', Crashed = '%d', CreateFamily = '%d', CellphoneItem = '%d', FishBait = '%d', Thirst = '%d', Hungry = '%d' WHERE UserID = '%d'",
			PlayerData[playerid][pBlockFurniture], PlayerData[playerid][pBlockBuyVehicle], PlayerData[playerid][pBlockMoney], PlayerData[playerid][pMoneyBlocked], PlayerData[playerid][pCrashed], PlayerData[playerid][pCreateFamily], PlayerData[playerid][pCellphoneItem], PlayerData[playerid][pFishBait], PlayerData[playerid][pThirst], PlayerData[playerid][pHungry], 
			PlayerData[playerid][pID]);
		mysql_tquery(this, query);

		//Apenas preso
		if(PlayerData[playerid][pJailed] >= 2)
		{
			mysql_format(this, query, sizeof(query), "UPDATE players SET LawyerBlock = '%d', LawyerTime = '%d' WHERE UserID = '%d'", PlayerData[playerid][pLawyerBlock], PlayerData[playerid][pLawyerTime], PlayerData[playerid][pID]);
			mysql_tquery(this, query);
		}

		//Armas
		for(new i = 0; i < 13; i++)
		{
			mysql_format(this, query, sizeof(query), "UPDATE players SET Gun%d = '%d', Ammo%d = '%d' WHERE UserID = '%d'", i + 1, PlayerData[playerid][pWeapon][i], i + 1, PlayerData[playerid][pAmmo][i], PlayerData[playerid][pID]);
			mysql_tquery(this, query);
		}

		//Warns
		mysql_format(this, query, sizeof(query), "UPDATE players SET WarnReason1 = '%e', WarnReason2 = '%e' WHERE UserID = '%d'", PlayerData[playerid][pWarn1], PlayerData[playerid][pWarn2], PlayerData[playerid][pID]);
		mysql_tquery(this, query);
	}

	return 1;
}

this::KickEx(playerid)
{
	return SetTimerEx("KickPublic", 300, false, "d", playerid);
}

this::KickPublic(playerid)
{	
	return Kick(playerid);
}

this::DespawnVehicles()
{
	new count = 0, bool:near_vehicle, Float:pos[3], Float:Spos[3], Float:Radius;

	foreach(new i : Vehicles) if(IsValidVehicle(i) && VehicleData[i][vehicleParked] == 1)
	{
		if(IsVehicleOccupied(i))
			continue;

		near_vehicle = false;

		GetVehiclePos(i, pos[0], pos[1], pos[2]);
		GetVehicleModelInfo(VehicleData[i][vehicleModel], VEHICLE_MODEL_INFO_SIZE, Spos[0], Spos[1], Spos[2]);
		Radius = floatsqroot((Spos[0] + Spos[0]) + (Spos[1] + Spos[1]));

		foreach(new p : Player) if(PlayerData[p][pLogged])
		{
			if(IsPlayerInRangeOfPoint(p, Radius, pos[0], pos[1], pos[2]) && GetPlayerVirtualWorld(p) == GetVehicleVirtualWorld(i))
			{
				near_vehicle = true;
				break;
			}
		}

		if(!near_vehicle)
		{
			if(VehicleData[i][vehicleFaction] >= 1 || VehicleData[i][vehicleJob] >= 1)
				SetVehicleToRespawn(i);
			else
			{
				NotifyOwner(VehicleData[i][vehicleOwnerID], COLOR_WHITE, "SERVER: Seu veículo %s (%s) foi despawnado devido ao RAC.", ReturnVehicleModelName(VehicleData[i][vehicleModel]), VehicleData[i][vehiclePlate]);
				VehicleData[i][vehicleParked] = 0;
				Vehicle_Save(i);
				Vehicle_Destroy(i, 1);
				Iter_SafeRemove(Vehicles, i, i);
				count++;
			}
		}		
	}

	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: Despawn de Veículos foi finalizado e %d %s %s %s.", count, count == 1 ? "carro" : "carros", count == 1 ? "foi" : "foram", count == 1 ? "despawnado" : "despawnados");
	}

	return 1;
}

this::_1000mstimer()
{
	getdate(Ano, Mes, Dia);
	gettime(Horas, Minutos, Segundos);

	if(War_Gangsters && War_GangstersTime < gettime())
	{
		FinalizarGuerra(FACTION_GANGSTER);
	}
	if(War_Cartel && War_CartelTime < gettime())
	{
		FinalizarGuerra(FACTION_CARTEL);
	}
	if(War_Motoclub && War_MotoclubTime < gettime())
	{
		FinalizarGuerra(FACTION_MOTOCLUB);
	}

	TollBooth_Timer();

	if(Minutos == 0 && Segundos == 0)
	{
		foreach(new i : Industry) if(IndustryData[i][industrySection] == SECTION_EXPORT)
		{
			Industry_ResetBoat(i);
		}

		if(Horas == 6 || Horas == 12 || Horas == 18 || Horas == 0)
		{
			SendClientMessageToAll(COLOR_WARNING, "AdmCmd: O Despawn de Veículos irá ocorrer em 1 minuto, prepare-se e entre em seu veículo.");
			SetTimer("DespawnVehicles", 1000 * 60, false);
		}

		TrashCan_Generate();
		Industry_Working();
		TollBooth_ResetEst();
	}

	if(Minutos == 30 && Segundos == 0)
	{
		foreach(new i : Industry) if(IndustryData[i][industrySection] == SECTION_EXPORT)
		{
			Industry_ResetBoat(i);
		}

		TrashCan_Generate();
	}

	if((serverGMX) && mysql_unprocessed_queries(this) == 0)
	{
		SendRconCommand("gmx");
	}

	if(serverShutdown)
	{
		if(serverShutdownTime > 0)
		{
			serverShutdownTime--;

			if(serverShutdownTime % 60 == 0)
			{
				foreach(new i : Player)
				{
					SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: Server shutdown em %d %s.", serverShutdownTime / 60, serverShutdownTime / 60 > 1 ? "minutos" : "minuto");

					if(serverShutdownTime <= 61)
					{
						SendClientMessageEx(i, COLOR_WARNING, "Corram para as colinas..");
						KickEx(i);
					}
				}

				Save_All();
			}

			if(!serverShutdownTime)
				SendRconCommand("exit");
		}
	}

	for(new i = 1, hue = GetVehiclePoolSize(); i <= hue; i++)
	{
		if(IsValidVehicle(i))
		{
			if(ACVehicle[i][acRepairSafe] && gettime() > ACVehicle[i][acRepairTime])
			{
				ACVehicle[i][acRepairSafe] = false;
			}
		}
	}

	//variables
	new 
		id = -1,
		Float:health,
		str[128],
		vehicleid
	;

	foreach(new i : Player)
	{
		if(PlayerData[i][pLogged])
		{
			vehicleid = GetPlayerVehicleID(i);

			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(i))
			{
				if(PlayerData[i][pCreateCar] != vehicleid && PlayerData[i][pTestCar] != vehicleid)
				{
					Vehicle_IncreaseMileage(i, vehicleid);
				}
				
				if(IsACar(vehicleid) || IsABike(vehicleid) || IsATruck(vehicleid))
				{
					if(VehicleData[vehicleid][vehicleFuel] == 0.0)
					{
						ShowPlayerFooter(i, "Esse veiculo está ~r~sem combustível.");
						
						if(GetEngineStatus(vehicleid))
							SetEngineStatus(vehicleid, false);
					}
				}
			}

			if(PlayerData[i][pBreakinVehicle] != INVALID_VEHICLE_ID && VehicleData[PlayerData[i][pBreakinVehicle]][vehiclePhysicalAttack] && GetPlayerState(i) == PLAYER_STATE_ONFOOT)
			{
				if(IsValidVehicle(PlayerData[i][pBreakinVehicle]))
				{
					new Float:cX, Float:cY, Float:cZ;
					GetVehiclePos(PlayerData[i][pBreakinVehicle], cX, cY, cZ);

					if(GetVehicleDriver(PlayerData[i][pBreakinVehicle]) != INVALID_PLAYER_ID || !IsPlayerInRangeOfPoint(i, 5.0, cX, cY, cZ))
					{
						VehicleData[PlayerData[i][pBreakinVehicle]][vehiclePhysicalAttack] = false;
						DestroyDynamic3DTextLabel(VehicleData[PlayerData[i][pBreakinVehicle]][vehicleLabel]);
						VehicleData[PlayerData[i][pBreakinVehicle]][vehicleCooldown] = false;
						PlayerData[i][pBreakinVehicle] = INVALID_VEHICLE_ID;
					}
				}
			}

			if(!PlayerData[i][pJustLoggedIn])
				AC_Check(i);

			if(PlayerData[i][pJailed] >= 1)
			{
				if(PlayerData[i][pJailTime] > 0)
				{
					new hora, minuto, segundo;

					PlayerData[i][pJailTime]--;

					GetElapsedTime(PlayerData[i][pJailTime], hora, minuto, segundo);

					format(str, sizeof(str), "~g~Tempo Preso:~w~ %02d:%02d:%02d", hora, minuto, segundo);
					PlayerTextDrawSetString(i, PlayerData[i][pTextdraw][5], str);
				}
				else if(PlayerData[i][pJailTime] <= 0)
				{
					if(PlayerData[i][pJailed] > 1)
					{
						id = GetEntranceByID(PlayerData[i][pJailed]);

						AC_SetPlayerPos(i, EntranceData[id][entranceExit][0], EntranceData[id][entranceExit][1], EntranceData[id][entranceExit][2]);
					}
					else if(PlayerData[i][pJailed] == 1)
					{
						AC_SetPlayerPos(i, SPAWN_CIVIL_X, SPAWN_CIVIL_Y, SPAWN_CIVIL_Z);
						SetPlayerFacingAngle(i, 1.6392);
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
						SetCameraBehindPlayer(i);
						ShowHungryTextdraw(i, 1);
					
						SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) cumpriu a pena da cadeia administrativa.", ReturnName(i, 0), i);
					}
					PlayerData[i][pJailed] = 0;
					PlayerData[i][pJailTime] = 0;					
					SetPlayerSkin(i, PlayerData[i][pSkin]);
					PlayerTextDrawHide(i, PlayerData[i][pTextdraw][5]);
				}
			}

			if(IsPlayerInsideTaxi(i))
			{
				PlayerData[i][pTaxiTime]++;

				if(PlayerData[i][pTaxiTime] == 15)
				{
					PlayerData[i][pTaxiTime] = 0;
					PlayerData[i][pTaxiFee] += 10;
				}

				format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~$%d...~w~ %d segundos", PlayerData[i][pTaxiFee], PlayerData[i][pTaxiTime]);

				GameTextForPlayer(i, str, 1100, 3);
				GameTextForPlayer(GetVehicleDriver(GetPlayerVehicleID(i)), str, 1100, 3);
			}

			if(PlayerData[i][pSpeedTime] > 0)
			{
				PlayerData[i][pSpeedTime]--;
			}

			if((id = Speed_Nearest(i)) != -1 && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerSpeed(i) > SpeedData[id][speedLimit] && !PlayerData[i][pSpeedTime])
			{
				if(GetFactionType(i) != FACTION_GOV && GetFactionType(i) != FACTION_POLICE)
				{
					new price = 100 + floatround(GetPlayerSpeed(i) - SpeedData[id][speedLimit]);

					format(str, sizeof(str), "Acima do limite de velocidade (%.0f/%.0f mp/h)", GetPlayerSpeed(i), SpeedData[id][speedLimit]);
					SetTimerEx("HidePlayerBox", 500, false, "dd", i, _:ShowPlayerBox(i, 0xFFFFFF66));

					if(Ticket_Add(i, "Radar", price, str) != -1)
					{
						SendWarningMessage(i, "Você foi multado em %s por passar acima do limite de velocidade do radar (%.0f/%.0f mp/h).", FormatNumber(price), GetPlayerSpeed(i), SpeedData[id][speedLimit]);
						ShowPlayerFooter(i, "Você foi ~r~multado.");
					}
					PlayerData[i][pSpeedTime] = 5;
				}
			}

			if((PlayerData[i][pState] == PLAYER_STATE_WOUNDED || PlayerData[i][pState] == PLAYER_STATE_DEAD) && !PlayerData[i][pCareTime])
			{
				SetPlayerArmedWeapon(i, 0);

				if(!IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerAnimationIndex(i) != 1701)
						ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);

					if(!IsPlayerInRangeOfPoint(i, 3.0, PlayerData[i][pPosX], PlayerData[i][pPosY], PlayerData[i][pPosZ]))
					{
						AC_SetPlayerPos(i, PlayerData[i][pPosX], PlayerData[i][pPosY], PlayerData[i][pPosZ]);
						SetPlayerFacingAngle(i, PlayerData[i][pPosA]);

						SetPlayerInterior(i, PlayerData[i][pInterior]);
						SetPlayerVirtualWorld(i, PlayerData[i][pWorld]);
					}
				}
				else
				{
					if(!PlayerData[i][pFreezed])
					{
						SetPlayerFreezed(i, true);
					}

					if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
					{
						if(GetPlayerAnimationIndex(i) != 1189)
						{
							ApplyAnimation(i, "PED", "CAR_dead_LHS", 4.1, 0, 1, 1, 1, 1);
						}
					}
					else if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
					{
						if(GetPlayerAnimationIndex(i) != 1190)
						{
							ApplyAnimation(i, "PED", "CAR_dead_RHS", 4.1, 0, 1, 1, 1, 1);
						}
					}					
				}
			}

			if(PlayerData[i][pDrugUsed] && PlayerData[i][pDrugTime] > 0)
			{
				PlayerData[i][pDrugTime]--;

				if(!PlayerData[i][pDrugTime])
				{
					PlayerData[i][pDrugUsed] = 0;
					PlayerData[i][pDrugTime] = 0;
					SendServerMessage(i, "O efeito da droga acabou.");
					SetPlayerWeather(i, 0);
				}
			}

			if(PlayerData[i][pCare] != INVALID_PLAYER_ID)
			{
				if(PlayerData[i][pCareTime] > 0)
				{
					PlayerData[i][pCareTime]--;

					if(!PlayerData[i][pCareTime])
					{
						SendGreenMessage(PlayerData[i][pCare], "Você realizou com sucesso os procedimentos em %s.", ReturnName(i, 0));
						SendGreenMessage(i, "%s estabilizou seus ferimentos.", ReturnName(PlayerData[i][pCare], 0));
						PlayerData[i][pCare] = INVALID_PLAYER_ID;
						PlayerData[i][pState] = PLAYER_STATE_ALIVE;
						PlayerData[i][pDeathTime] = 0;

						SetScriptedHealth(i, 50.0);
						ClearAnimations(i);
						ApplyAnimation(i, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
						SetPlayerFreezed(i, false);
						SetPlayerArmedWeapon(i, 0);

						//Voltar skills do jogador.
						SetPlayerWeaponSkills(i, true);
						Damage_Clear(i);
					}

					if(GetPlayerState(i) != PLAYER_STATE_ONFOOT)
					{
						SetPlayerFreezed(i, false);
						AC_RemovePlayerFromVehicle(i);
					}

					if(GetPlayerAnimationIndex(i) != 1207)
						ApplyAnimation(i, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
				}
			}

			if(PlayerData[i][pHospital] && PlayerData[i][pHospitalTime] > 0)
			{
				PlayerData[i][pHospitalTime]--;

				format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~em tratamento~n~~r~%d segundos", PlayerData[i][pHospitalTime]);
				GameTextForPlayer(i, str, 1100, 3);

				if(!PlayerData[i][pHospitalTime])
				{
					if(PlayerData[i][pVip])
					{
						SendGreenMessage(i, "Você recebeu alta do hospital e foi taxado em $25.");
						GiveScriptedMoney(i, -25);
						Tax_AddMoney(25);
					}
					else
					{
						SendGreenMessage(i, "Você recebeu alta do hospital e foi taxado em $50.");
						GiveScriptedMoney(i, -50);
						Tax_AddMoney(50);
					}

					PlayerData[i][pHospital] = 0;
					PlayerData[i][pHospitalTime] = 0;

					SetScriptedHealth(i, 100.0);
					ResetWeapons(i);

					SetPlayerWeaponSkills(i, true);
					Damage_Clear(i);
				}
			}

			if(PlayerData[i][pDrivingTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]))
			{
				if(!IsPlayerInRangeOfPoint(i, 180.0, g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][2]))
				{
					CancelDrivingTest(i);
					SendWarningMessage(i, "Você perdeu o teste por estar muito distante da área vermelha.");
				}
				else
				{
					if(GetPlayerSpeed(i) >= 50.0)
					{
						if(++PlayerData[i][pTestWarns] < 3)
						{
							SendWarningMessage(i, "Você está indo muito rápido, diminua a velocidade (%d/3).", PlayerData[i][pTestWarns]);
						}
						else
						{
							CancelDrivingTest(i);
							SendWarningMessage(i, "Você falhou no teste por exceder o limite de velocidade três vezes.");
						}
					}
				}
			}			

			if(PlayerData[i][pStunned] > 0)
			{
				PlayerData[i][pStunned]--;

				if(GetPlayerAnimationIndex(i) != 388)
					ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

				if(!PlayerData[i][pStunned])
				{
					SetPlayerFreezed(i, false);
					ShowPlayerFooter(i, "Você se ~g~levantou.");
				}
			}

			if(PlayerData[i][pVip] > 0 && gettime() > PlayerData[i][pVipTime])
			{
				PlayerData[i][pVip] = 0;
				PlayerData[i][pVipTime] = 0;

				SendWarningMessage(i, "O seu Prime expirou. Renove agora e garanta os seus benefícios de volta.");

				mysql_format(this, str, sizeof(str), "UPDATE players SET VipLevel = '0', VipTime = '0' WHERE UserID = '%d'", PlayerData[i][pID]);
				mysql_tquery(this, str);
			}

			if(PlayerData[i][pPMMuted] > 0)
			{
				PlayerData[i][pPMMuted]--;

				if(PlayerData[i][pPMMuted] <= 0)
				{
					SendGreenMessage(i, "Você pode enviar mensagens particulares novamente.");
				}
			}

			if(PlayerData[i][pInMission] == DISMANTLING_CAR && PlayerData[i][pMissionTarget][0] != INVALID_VEHICLE_ID)
			{
				PlayerData[i][pMissionTime]--;
				new lights, doors, panels, tires;
				GetVehicleDamageStatus(PlayerData[i][pMissionTarget][0], panels, doors, lights, tires);

				if(PlayerData[i][pMissionTime] <= 0)
				{
					PlayerData[i][pMissionReward] = Chopshop_Reward(PlayerData[i][pMissionTarget][0]);
					UpdateVehicleDamageStatus(PlayerData[i][pMissionTarget][0], 53674035, 33686020, 5, 15);
					PlayerData[i][pInMission] = DISMANTLING_DROPOFF;
					SendClientMessage(i, COLOR_GREEN, "Esconda o veículo, rápido!! Quanto mais longe do desmanche, mais dinheiro você receberá!");
				}
			}

			if(!PlayerData[i][pHospital] && PlayerData[i][pState] == PLAYER_STATE_ALIVE && !PlayerData[i][pJailed] && !PlayerData[i][pAdminStatus])
			{
				GetPlayerHealth(i, health);

				if(++PlayerData[i][pThirstTime] >= 240)
				{
					if(PlayerData[i][pThirst] > 0)
					{
						PlayerData[i][pThirst]--;
					}
					else if(PlayerData[i][pThirst] <= 0)
					{
						SetScriptedHealth(i, health - 5);
						SendWarningMessage(i, "Você está com sede.");
					}

					PlayerData[i][pThirstTime] = 0;
				}

				if(++PlayerData[i][pHungryTime] >= 320)
				{
					if(PlayerData[i][pHungry] > 0)
					{
						PlayerData[i][pHungry]--;
					}
					else if(PlayerData[i][pHungry] <= 0)
					{
						SetScriptedHealth(i, health - 10);
						SendWarningMessage(i, "Você está com fome.");
					}

					PlayerData[i][pHungryTime] = 0;
				}
			}

			if(!PlayerData[i][pTogHUD])
			{
				//Update thirst/hungry value
				format(str, sizeof(str), "%d%c", PlayerData[i][pThirst], '%');
				PlayerTextDrawSetString(i, PlayerData[i][pTextdraw][2], str);

				format(str, sizeof(str), "%d%c", PlayerData[i][pHungry], '%');
				PlayerTextDrawSetString(i, PlayerData[i][pTextdraw][4], str);
			}

			if(!Door_247Idlewood)
			{
				if(IsPlayerInRangeOfPoint(i, 1.3, 1929.3341, -1776.2566, 13.5469) || IsPlayerInRangeOfPoint(i, 1.3, 1927.0695, -1776.4058, 13.6131))
				{
					new door_one, door_two;

					door_one = Object_GetID(5445); //Esquerda
					door_two = Object_GetID(5484); //Direita

					MoveDynamicObject(ObjectData[door_one][objectObject], ObjectData[door_one][objectPos][0], ObjectData[door_one][objectPos][1] - 1.3, ObjectData[door_one][objectPos][2], 1.1, ObjectData[door_one][objectRPos][0], ObjectData[door_one][objectRPos][1], ObjectData[door_one][objectRPos][2]);
					MoveDynamicObject(ObjectData[door_two][objectObject], ObjectData[door_two][objectPos][0], ObjectData[door_two][objectPos][1] + 1.3, ObjectData[door_two][objectPos][2], 1.1, ObjectData[door_two][objectRPos][0], ObjectData[door_two][objectRPos][1], ObjectData[door_two][objectRPos][2]);

					Door_247Idlewood = true;

					SetTimerEx("CloseIdlewoodShopDoor", 3000, false, "dd", door_one, door_two);
				}
			}

			if((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pBoombox] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
			{
				strunpack(str, BoomboxData[id][boomboxURL]);
				PlayerData[i][pBoombox] = id;

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 15.0, 1);
			}
			else if(PlayerData[i][pBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 15.0, BoomboxData[PlayerData[i][pBoombox]][boomboxPos][0], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][1], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][2]))
			{
				PlayerData[i][pBoombox] = INVALID_PLAYER_ID;
				StopAudioStreamForPlayer(i);
			}

			if(PlayerData[i][pWaypoint])
			{
				format(str, sizeof(str), "~y~Destino:~w~ %s (%.2f metros)", PlayerData[i][pLocation], GetPlayerDistanceFromPoint(i, PlayerData[i][pWaypointPos][0], PlayerData[i][pWaypointPos][1], PlayerData[i][pWaypointPos][2]));
				PlayerTextDrawSetString(i, PlayerData[i][pTextdraw][6], str);
			}

			/* - Módulos e Stocks - */

			//Teste de desync
			CheckPlayerDesync(i);

			//Halloween
			//Hallo_Check(i);

			//Cellphone System
			Phone_Update(i);
		}
	}
	return 1;
}

this::CloseIdlewoodShopDoor(door_one, door_two)
{
	if(!Door_247Idlewood)
		return 0;

	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		if(IsPlayerInRangeOfPoint(i, 1.3, 1929.3341, -1776.2566, 13.5469) || IsPlayerInRangeOfPoint(i, 1.3, 1927.0695, -1776.4058, 13.6131))
		{
			return SetTimerEx("CloseIdlewoodShopDoor", 3000, false, "dd", door_one, door_two);
		}
	}

	MoveDynamicObject(ObjectData[door_one][objectObject], ObjectData[door_one][objectPos][0], ObjectData[door_one][objectPos][1], ObjectData[door_one][objectPos][2], 1.1, ObjectData[door_one][objectRPos][0], ObjectData[door_one][objectRPos][1], ObjectData[door_one][objectRPos][2]);
	MoveDynamicObject(ObjectData[door_two][objectObject], ObjectData[door_two][objectPos][0], ObjectData[door_two][objectPos][1], ObjectData[door_two][objectPos][2], 1.1, ObjectData[door_two][objectRPos][0], ObjectData[door_two][objectRPos][1], ObjectData[door_two][objectRPos][2]);

	Door_247Idlewood = false;

	return 1;
}

this::_350mstimer()
{
	new Float:vida, Float:colete, Float:vehicle_health, nametagstatus[80], nametagstring[150], vidastr[28];

	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		GetPlayerArmour(i, colete);
		GetPlayerHealth(i, vida);

		switch(floatround(vida))
		{
			case 100..150: format(vidastr, sizeof(vidastr), "{FF0000}");
			case 90..99:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 80..89:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 70..79:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 60..69:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 50..59:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 40..49:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 30..39:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 20..29:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 10..19:	format(vidastr, sizeof(vidastr), "{FF0000}{450000}");
			case 0..9:	format(vidastr, sizeof(vidastr), "{450000}");
			default:		format(vidastr, sizeof(vidastr), "NT-ERROR#001");
		}

		switch(PlayerData[i][pState])
		{
			case PLAYER_STATE_WOUNDED:	format(nametagstatus, sizeof(nametagstatus), "{FF6E00}(( Esse jogador está ferido\n/ferimentos %d para mais informações ))\n", i);
			case PLAYER_STATE_DEAD: 		format(nametagstatus, sizeof(nametagstatus), "{FF6E00}(( Esse jogador está morto ))\n");
		}

		format(nametagstring, sizeof(nametagstring), "%s%s{%06x}%s (%d)\n%s", nametagstatus, IsPlayerPaused(i) ? ("{FF0000}[E] ") : (""), GetPlayerColor(i) >>> 8, ReturnName(i, 0), i, vidastr);
		
		UpdateDynamic3DTextLabelText(PlayerData[i][pNameTag], COLOR_WHITE, nametagstring);

		//Velocimetro
		new vehicleid = GetPlayerVehicleID(i), string[75];

		if(IsPlayerInAnyVehicle(i) && IsSpeedoVehicle(vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new Float:Lataria; GetVehicleHealth(vehicleid, Lataria);

			if(IsABike(vehicleid) || IsACar(vehicleid) || IsATruck(vehicleid))
			{
				format(string,sizeof(string),"~w~%.0f ~y~mp/h~n~%s%d ~y~gal~n~~y~lataria ~w~%0.0f%%", GetPlayerSpeed(i), (VehicleData[vehicleid][vehicleFuel] < 6.0) ? ("~r~") : ("~w~"), floatround(VehicleData[vehicleid][vehicleFuel]), Lataria/10);
				PlayerTextDrawSetString(i, Velocimetro[i], string);
			}
			else
			{
				format(string,sizeof(string),"~w~%.0f ~y~mp/h~n~~y~lataria ~w~%0.0f%%", GetPlayerSpeed(i),Lataria/10);
				PlayerTextDrawSetString(i, Velocimetro[i], string);
			}
		}
	}

	foreach(new v : Vehicles)
	{
		if(!IsValidVehicle(v) || v == 0)
			continue;

		if(!IsABike(v) && !IsACar(v) && !IsATruck(v))
			continue;

		CallLocalFunction("OnVehicleFuelChange", "d", v);

		GetVehicleHealth(v, vehicle_health);
		
		if(vehicle_health != VehicleData[v][vehicleHealth])
		{
			CallLocalFunction("OnVehicleHealthChange", "iff", v, vehicle_health, VehicleData[v][vehicleHealth]);
		}
	}

	return 1;
}

this::_500mstimer()
{
	foreach(new i : Player) if(IsPlayerConnected(i) && PlayerData[i][pLogged])
	{
		if(PlayerData[i][pHitmark])
		{
			PlayerData[i][pHitmark] = false;

			if(!PlayerData[i][pHitmark])
			{
				TextDrawHideForPlayer(i, Hitmark);
			}
		}

		Streamer_Update(i);
	}

	return 1;
}

this::OnVehicleFuelChange(vehicleid)
{
	if(GetEngineStatus(vehicleid) && VehicleData[vehicleid][vehicleEngine] > 1.0)
	{
		if(VehicleData[vehicleid][vehicleFuel] >= 1.0)
		{
			VehicleData[vehicleid][vehicleFuel] -= 0.0008;

			if(!VehicleData[vehicleid][vehicleFaction] && VehicleData[vehicleid][vehicleJob] == -1)
			{
				VehicleData[vehicleid][vehicleEngine] -= 0.00002;
			}
		}
		else if(VehicleData[vehicleid][vehicleFuel] >= 1.0 && VehicleData[vehicleid][vehicleEngine] <= 50.0)
		{
			VehicleData[vehicleid][vehicleFuel] -= 0.00008 * randomEx(1, 3);

			if(!VehicleData[vehicleid][vehicleFaction] && VehicleData[vehicleid][vehicleJob] == -1)
			{
				VehicleData[vehicleid][vehicleEngine] -= 0.00001 * randomEx(1, 10);
			}
		}
		else if(VehicleData[vehicleid][vehicleFuel] < 1.0)
		{
			VehicleData[vehicleid][vehicleFuel] = 0.0;
		}
	}
	return 1;
}

this::OnVehicleHealthChange(vehicleid, Float:newhealth, Float:oldhealth)
{
	new Float:vehicle_health_loss = oldhealth - newhealth;

	if(!ACVehicle[vehicleid][acRepairSafe] && newhealth > oldhealth)
	{
		new playerdriver = GetVehicleDriver(vehicleid);

		if(playerdriver != INVALID_PLAYER_ID)
		{
			OnCheatDetected(playerdriver, ServerAC[AC_REPAIRHACK][acName], ServerAC[AC_REPAIRHACK][acAction]);
		}

		AC_SetVehicleHealth(vehicleid, oldhealth);

		return 1;
	}

	if(!VehicleData[vehicleid][vehicleFaction] && VehicleData[vehicleid][vehicleJob] == -1)
	{
		if(GetEngineStatus(vehicleid) && VehicleData[vehicleid][vehicleEngine] > 1.0)
		{
			if(newhealth >= 650 && newhealth <= 800)
			{
				VehicleData[vehicleid][vehicleEngine] -= (vehicle_health_loss / 200.0);
			}
			else if(newhealth >= 550 && newhealth <= 649)
			{
				VehicleData[vehicleid][vehicleEngine] -= (vehicle_health_loss / 150.0);
			}
			else if(newhealth >= 390 && newhealth <= 549)
			{
				VehicleData[vehicleid][vehicleEngine] -= (vehicle_health_loss / 100.0);
			}
			else if(newhealth >= 250 && newhealth <= 389)
			{
				VehicleData[vehicleid][vehicleEngine] -= (vehicle_health_loss / 50.0);
			}

			if(VehicleData[vehicleid][vehicleEngine] <= 10.0)
			{
				SetEngineStatus(vehicleid, false);
			}
		}
	}

	VehicleData[vehicleid][vehicleHealth] = newhealth;

	return 1;
}

this::Sincronizar_Jogador(playerid)
{
	AC_SetPlayerPos(playerid, DesbugarJogador[playerid][sPosX], DesbugarJogador[playerid][sPosY], DesbugarJogador[playerid][sPosZ]);
	SetPlayerFacingAngle(playerid, DesbugarJogador[playerid][sAngulo]);
	SetScriptedHealth(playerid, DesbugarJogador[playerid][sVida]);
	SetScriptedArmour(playerid, DesbugarJogador[playerid][sColete]);
	SetPlayerVirtualWorld(playerid, DesbugarJogador[playerid][sMundoVirtual]);
	SetPlayerInterior(playerid, DesbugarJogador[playerid][sInterior]);
	ResetPlayerWeapons(playerid);
	for(new i = 1; i < 13; i++)
	{
		GivePlayerWeapon(playerid, DesbugarJogador[playerid][sArmas][i], DesbugarJogador[playerid][sMunicao][i]);
	}
	if(DesbugarJogador[playerid][sNoVeiculo] == 1)
	{
		AC_PutPlayerInVehicle(playerid, DesbugarJogador[playerid][sIDCarro], 1);
		DesbugarJogador[playerid][sNoVeiculo] = 0;
	}
	SendClientMessage(playerid, COLOR_YELLOW, "Ressincronização finalizada com sucesso.");
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(PlayerData[damagedid][pState] == PLAYER_STATE_ALIVE)
	{
		GivePlayerDamage(playerid, damagedid, weaponid, bodypart, amount);
	}

	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, STREAMER_TAG_OBJECT objectid, Float:x, Float:y, Float:z)
{
	//Hallo_AddPoint(playerid, objectid);

	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(!IsPlayerInAnyVehicle(playerid) && hittype == BULLET_HIT_TYPE_PLAYER && !IsPlayerInAnyVehicle(hitid) && GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerSurfingVehicleID(hitid) == INVALID_VEHICLE_ID && NetStats_PacketLossPercent(hitid) < 0.7 && NetStats_PacketLossPercent(playerid) < 0.7)
	{
		new Float:v_ShooterX, Float:v_ShooterY, Float:v_ShooterZ, Float:v_HitX, Float:v_HitY, Float:v_HitZ;

		GetPlayerLastShotVectors(playerid, v_ShooterX, v_ShooterY, v_ShooterZ, v_HitX, v_HitY, v_HitZ);

		if(!IsPlayerInRangeOfPoint(hitid, 3.0, v_HitX, v_HitY, v_HitZ))
		{
			OnCheatDetected(playerid, ServerAC[AC_SILENTAIM][acName], ServerAC[AC_SILENTAIM][acAction]);
		}
	}

	if(22 <= weaponid <= 38 && PlayerHasWeapon(playerid, weaponid))
	{
		PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]]--;

		if(PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] <= 0)
		{
			ResetWeapon(playerid, weaponid);
		}
	}

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	//Desync weapon IDs that don't fire bullets
	if (weaponid < 22 || weaponid > 38)
	{
		OnCheatDetected(playerid, ServerAC[AC_CRASHHACK][acName], ServerAC[AC_CRASHHACK][acAction]);
		return 0;
	}

	//Desync shots with Z pos out of bounds
	if(!(-20000.0 <= z <= 20000.0))
	{
		OnCheatDetected(playerid, ServerAC[AC_CRASHHACK][acName], ServerAC[AC_CRASHHACK][acAction]);
		return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(PlayerData[playerid][pBeanBag] && weaponid == 23 && PlayerData[hitid][pState] == PLAYER_STATE_ALIVE)
		{
			if(!IsPlayerNearPlayer(playerid, hitid, 15.0))
			{
				SendWarningMessage(playerid, "Você não está próximo o suficiente de %s para a bala fazer feito.", ReturnName(hitid, 0));
				return 0;
			}

			PlayerData[hitid][pStunned] = 12;
			SetPlayerFreezed(hitid, true);

			ApplyAnimation(hitid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
			SendWarningMessage(hitid, "Você foi derrubado devido um tiro de beanbag efetuado por: %s.", ReturnName(playerid));
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s derruba %s com sua beanbag shotgun.", ReturnName(playerid, 0), ReturnName(hitid, 0));
			return 0;
		}

		if(PlayerData[hitid][pState] == PLAYER_STATE_WOUNDED && gettime() > GetPVarInt(hitid, "w_delaytofinish"))
		{
			OnPlayerDead(hitid, playerid, weaponid);
			return 0;
		}
	}

	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(Daily_Opened[playerid])
		{
			Daily_PanelStatus(playerid, false);
		}
		if(GetPVarInt(playerid, "Dealership_Open"))
		{
			Dealership_Close(playerid);
		}
	}
	else
	{
		Phone_GlobalClick(playerid, clickedid);

		if(clickedid == d_gText[DEALERSHIP_INSURANCE_LEFT])
		{
			if(TempData[playerid][tempSeguro] > 0)
				TempData[playerid][tempSeguro]--;

			Dealership_Refresh(playerid);
		}
		else if(clickedid == d_gText[DEALERSHIP_INSURANCE_RIGHT])
		{
			if(TempData[playerid][tempSeguro] < 3)
				TempData[playerid][tempSeguro]++;	

			Dealership_Refresh(playerid);			
		}
		else if(clickedid == d_gText[DEALERSHIP_LOCK_LEFT])
		{
			if(TempData[playerid][tempTrava] > 0)
				TempData[playerid][tempTrava]--;	

			Dealership_Refresh(playerid);			
		}
		else if(clickedid == d_gText[DEALERSHIP_LOCK_RIGHT])
		{
			if(TempData[playerid][tempTrava] < 3)
				TempData[playerid][tempTrava]++;	

			Dealership_Refresh(playerid);			
		}
		else if(clickedid == d_gText[DEALERSHIP_XMRADIO_LEFT])
		{
			if(TempData[playerid][tempXMRadio] > 0)
				TempData[playerid][tempXMRadio]--;

			Dealership_Refresh(playerid);
		}
		else if(clickedid == d_gText[DEALERSHIP_XMRADIO_RIGHT])
		{
			if(TempData[playerid][tempXMRadio] < 3)
				TempData[playerid][tempXMRadio]++;

			Dealership_Refresh(playerid);
		}
		else if(clickedid == d_gText[DEALERSHIP_LOCATOR_LEFT])
		{
			if(TempData[playerid][tempLocator] > 0)
				TempData[playerid][tempLocator]--;

			Dealership_Refresh(playerid);
		}
		else if(clickedid == d_gText[DEALERSHIP_LOCATOR_RIGHT])
		{
			if(TempData[playerid][tempLocator] < 3)
				TempData[playerid][tempLocator]++;

			Dealership_Refresh(playerid);
		}
		else if(clickedid == d_gText[DEALERSHIP_COLOR1_LEFT])
		{
			TempData[playerid][tempColor1]--;

			if(TempData[playerid][tempColor1] < 0)
				TempData[playerid][tempColor1] = 126;

			Dealership_RefreshColor(playerid, 1);
		}
		else if(clickedid == d_gText[DEALERSHIP_COLOR1_RIGHT])
		{
			TempData[playerid][tempColor1]++;

			if(TempData[playerid][tempColor1] > 126)
				TempData[playerid][tempColor1] = 0;

			Dealership_RefreshColor(playerid, 1);
		}
		else if(clickedid == d_gText[DEALERSHIP_COLOR2_LEFT])
		{
			TempData[playerid][tempColor2]--;

			if(TempData[playerid][tempColor2] < 0)
				TempData[playerid][tempColor2] = 126;

			Dealership_RefreshColor(playerid, 2);
		}
		else if(clickedid == d_gText[DEALERSHIP_COLOR2_RIGHT])
		{
			TempData[playerid][tempColor2]++;

			if(TempData[playerid][tempColor2] > 126)
				TempData[playerid][tempColor2] = 0;

			Dealership_RefreshColor(playerid, 2);			
		}
		else if(clickedid == d_gText[DEALERSHIP_BUYBOX_1])
		{
			if(GetScriptedMoney(playerid) < TempData[playerid][tempPriceTotal])
				return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(TempData[playerid][tempPriceTotal]));

			if(Vehicle_GetCount(playerid) >= Vehicle_GetSlots(playerid))
				return SendWarningMessage(playerid, "Você já possui o máximo de veículos (%s).", Vehicle_GetSlots(playerid));

			new id;

			id = Vehicle_Buy(playerid, TempData[playerid][tempModel], TempData[playerid][tempPrice]);

			if(id == -1)
				return SendWarningMessage(playerid, "A concessionária está sem veículos, contate um administrador para mais informações.");
		}
		else if(clickedid == d_gText[DEALERSHIP_CANCELBOX_1])
		{
			Dealership_Close(playerid);
		}
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(Daily_Opened[playerid])
	{
		if(playertextid == DailyText[playerid][1])
		{
			Daily_SetTask(playerid);
		}
	}

	//Cellphone System
	Phone_PlayerClick(playerid, playertextid);

	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{	
	if(!PlayerData[playerid][pEditingMode])
		return 1;

	new listitem = PlayerData[playerid][pSelectedSlot];

	switch(PlayerData[playerid][pEditingMode])
	{
		case 1: //Comprando acessórios
		{
			if(response)
			{
				if(GetScriptedMoney(playerid) < g_aAttachItems[listitem][E_Price])
				{
					SendWarningMessage(playerid, "Você precisa de %s para comprar esse acessório.", FormatNumber(g_aAttachItems[listitem][E_Price]));
					return 1;
				}

				GiveScriptedMoney(playerid, -g_aAttachItems[listitem][E_Price]);

				Attach_Buy(playerid, g_aAttachItems[listitem][E_ObjectID], g_aAttachItems[listitem][E_Bone], g_aAttachItems[listitem][E_Name], fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
				HideBuyInfo(playerid);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else
			{
				RemovePlayerAttachedObject(playerid, 9);

				HideBuyInfo(playerid);
				SendWarningMessage(playerid, "Você cancelou a compra do acessório: \"%s\".", g_aAttachItems[listitem][E_Name]);
				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
		case 2: //Editando acessório
		{
			if(response)
			{
				AttachData[playerid][listitem][attachX] = fOffsetX;
				AttachData[playerid][listitem][attachY] = fOffsetY;
				AttachData[playerid][listitem][attachZ] = fOffsetZ;

				AttachData[playerid][listitem][attachRX] = fRotX;
				AttachData[playerid][listitem][attachRY] = fRotY;
				AttachData[playerid][listitem][attachRZ] = fRotZ;

				AttachData[playerid][listitem][attachSX] = fScaleX;
				AttachData[playerid][listitem][attachSY] = fScaleY;
				AttachData[playerid][listitem][attachSZ] = fScaleZ;

				SetPlayerAttachedObject(playerid, 
					AttachData[playerid][listitem][attachIndex], 
					AttachData[playerid][listitem][attachObject], 
					AttachData[playerid][listitem][attachBone], 
					fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);

				SendClientMessageEx(playerid, COLOR_WHITE, "Você confirmou a edição do acessório {FFFF00}%s (Index: %d){FFFFFF}.", AttachData[playerid][listitem][attachName], AttachData[playerid][listitem][attachIndex]);

				PlayerData[playerid][pEditingMode] = 0;

				Attach_ReturnOptions(playerid, listitem);
			}
			else
			{
				SetPlayerAttachedObject(playerid, AttachData[playerid][listitem][attachIndex], 
					AttachData[playerid][listitem][attachObject], 
					AttachData[playerid][listitem][attachBone], 
					AttachData[playerid][listitem][attachX], 
					AttachData[playerid][listitem][attachY], 
					AttachData[playerid][listitem][attachZ], 
					AttachData[playerid][listitem][attachRX], 
					AttachData[playerid][listitem][attachRY], 
					AttachData[playerid][listitem][attachRZ], 
					AttachData[playerid][listitem][attachSX], 
					AttachData[playerid][listitem][attachSY], 
					AttachData[playerid][listitem][attachSZ]);

				SendClientMessageEx(playerid, COLOR_WHITE, "Você cancelou a edição do acessório {FFFF00}%s (Index: %d){FFFFFF}.", AttachData[playerid][listitem][attachName], AttachData[playerid][listitem][attachIndex]);

				PlayerData[playerid][pEditingMode] = 0;
				
				Attach_ReturnOptions(playerid, listitem);
			}
		}
	}
	return 1;
}

this::OnPlayerUseItem(playerid, itemid, name[])
{
	if(!strcmp(name, "Celular", true))
	{
		callcmd::celular(playerid);
	}
	else if(!strcmp(name, "Rádio Portátil", true))
	{
		SendGreenMessage(playerid, "Para usar o rádio, use o comando \"/r(2|3|4)\" [texto].");
		SendGreenMessage(playerid, "Para mudar a frequencia do slot use /canal [1-4] [1-999999].");
	}
	else if(!strcmp(name, "GPS", true))
	{
		callcmd::gps(playerid);
	}
	else if(!strcmp(name, "Marijuana", true))
	{
		callcmd::usardroga(playerid, "marijuana");
	}
	else if(!strcmp(name, "Cocaína", true))
	{
		callcmd::usardroga(playerid, "cocaína");
	}
	else if(!strcmp(name, "LSD", true))
	{
		callcmd::usardroga(playerid, "lsd");
	}
	else if(!strcmp(name, "Boombox", true))
	{
		callcmd::boombox(playerid, "colocar");
	}
	else if(!strcmp(name, "Hamburguer Cozido", true))
	{
		if(PlayerData[playerid][pHungry] > 95)
		{
			return SendWarningMessage(playerid, "Você não está com fome.");
		}

		Inventory_Remove(playerid, name);

		PlayerData[playerid][pHungry] = (PlayerData[playerid][pHungry] + 14 >= 100) ? (100) : (PlayerData[playerid][pHungry] + 6);

		SendNearbyMessage(playerid, 7.0, COLOR_PURPLE, "* %s pega um %s e come.", ReturnName(playerid, 0), name);

	}
	else if(!strcmp(name, "Pizza Cozida", true))
	{
		if(PlayerData[playerid][pHungry] > 95)
		{
			return SendWarningMessage(playerid, "Você não está com fome.");
		}

		Inventory_Remove(playerid, name);

		PlayerData[playerid][pHungry] = (PlayerData[playerid][pHungry] + 17 >= 100) ? (100) : (PlayerData[playerid][pHungry] + 8);

		SendNearbyMessage(playerid, 7.0, COLOR_PURPLE, "* %s pega uma %s e come.", ReturnName(playerid, 0), name);

	}
	else if(!strcmp(name, "Garrafa de Água", true))
	{
		if(PlayerData[playerid][pThirst] > 95)
		{
			return SendWarningMessage(playerid, "Você não está com sede.");
		}

		Inventory_Remove(playerid, name);
		Inventory_Add(playerid, "Garrafa Vazia", 1484);

		PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 21 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 8);

		SendNearbyMessage(playerid, 7.0, COLOR_PURPLE, "* %s pega uma %s e bebe.", ReturnName(playerid, 0), name);
	}
	else if(!strcmp(name, "Refrigerante", true))
	{
		if(PlayerData[playerid][pThirst] > 95)
		{
			return SendWarningMessage(playerid, "Você não está com sede.");
		}

		Inventory_Remove(playerid, name);
		Inventory_Add(playerid, "Garrafa Vazia", 1484);

		PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 11 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);

		SendNearbyMessage(playerid, 7.0, COLOR_PURPLE, "* %s pega um %s e bebe.", ReturnName(playerid, 0), name);
	}

	/*else if(!strcmp(name, "Spray", true))
		callcmd::pintar(playerid, "\1");

	else if(!strcmp(name, "Crowbar", true))
		callcmd::crowbar(playerid, "\1");

	else if(!strcmp(name, "First Aid", true))
		callcmd::usarkit(playerid, "\1");*/
	return 1;
}

this::OnInventoryAdd(playerid, itemid)
{
	InventoryData[playerid][itemid][invID] = cache_insert_id();
	return 1;
}

this::OnLocationAdd(playerid, id)
{
	LocationData[playerid][id][locationID] = cache_insert_id();
	return 1;
}

this::OnDroppedItem(itemid)
{
	if(itemid == -1 || !DroppedItems[itemid][droppedModel])
		return 0;

	DroppedItems[itemid][droppedID] = cache_insert_id();
	return 1;
}

this::CarregarItensDropados()
{
	new rows;
	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_DROPPED_ITEMS)
	{
		cache_get_value_name_int(i, "ID", DroppedItems[i][droppedID]);
		cache_get_value_name(i, "itemName", DroppedItems[i][droppedItem], 32);
		cache_get_value_name(i, "itemPlayer", DroppedItems[i][droppedPlayer], 24);

		cache_get_value_name_int(i, "itemModel", DroppedItems[i][droppedModel]);
		cache_get_value_name_int(i, "itemQuantity", DroppedItems[i][droppedQuantity]);
		cache_get_value_name_int(i, "itemWeapon", DroppedItems[i][droppedWeapon]);
		cache_get_value_name_int(i, "itemAmmo", DroppedItems[i][droppedAmmo]);
		cache_get_value_name_float(i, "itemX", DroppedItems[i][droppedPos][0]);
		cache_get_value_name_float(i, "itemY", DroppedItems[i][droppedPos][1]);
		cache_get_value_name_float(i, "itemZ", DroppedItems[i][droppedPos][2]);
		cache_get_value_name_int(i, "itemInt", DroppedItems[i][droppedInt]);
		cache_get_value_name_int(i, "itemWorld", DroppedItems[i][droppedWorld]);

		if(IsWeaponModel(DroppedItems[i][droppedModel])) 
		{
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		}
		else
		{
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		}

		Iter_Add(DItems, i);
	}

	if(!rows)
	{
		printf("Server: nenhum item dropado carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "item dropado foi carregado" : "itens dropados foram carregados");
	}

	return 1;
}

this::CarregarEntradas()
{
	new rows;
	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_ENTRANCES)
	{
		EntranceData[i][entranceExists] = true;

		cache_get_value_name_int(i, "entranceID", EntranceData[i][entranceID]);
		cache_get_value_name(i, "entranceName", EntranceData[i][entranceName], 128);
		cache_get_value_name_int(i, "entranceType", EntranceData[i][entranceType]);
		cache_get_value_name_float(i, "entranceX", EntranceData[i][entrancePos][0]);
		cache_get_value_name_float(i, "entranceY", EntranceData[i][entrancePos][1]);
		cache_get_value_name_float(i, "entranceZ", EntranceData[i][entrancePos][2]);
		cache_get_value_name_float(i, "entranceIntX", EntranceData[i][entranceExit][0]);
		cache_get_value_name_float(i, "entranceIntY", EntranceData[i][entranceExit][1]);
		cache_get_value_name_float(i, "entranceIntZ", EntranceData[i][entranceExit][2]);
		cache_get_value_name_int(i, "entranceInterior", EntranceData[i][entranceInterior]);
		cache_get_value_name_int(i, "entranceVW", EntranceData[i][entranceVW]);

		Entrance_Refresh(i);
		
		Iter_Add(Entrances, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma entrada carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "entrada foi carregada" : "entradas foram carregadas");
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(GetPVarInt(playerid, "MarcarDestino_Taxi") == 1)
	{
		SetPVarFloat(playerid, "Destino_Taxi_X", fX);
		SetPVarFloat(playerid, "Destino_Taxi_Y", fY);
		SetPVarFloat(playerid, "Destino_Taxi_Z", fZ);

		DeletePVar(playerid, "MarcarDestino_Taxi");
		SetPVarInt(playerid, "DestinoMarcado_Taxi", 1);

		SendClientMessage(playerid, COLOR_GREEN, "Você escolheu o seu destino, o taxista foi informado!");
	}
	else
	{
		if(PlayerData[playerid][pAdmin] && PlayerData[playerid][pAdminStatus])
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicle = GetPlayerVehicleID(playerid);

				SetVehiclePos(vehicle, fX, fY, fZ + 7.5);
			}
			else
			{
				SetPlayerPos(playerid, fX, fY, fZ + 7.5);
			}

			SendAdminAction(playerid, "Você foi teleportado para a sua marcação no mini-mapa.");
		}
	}
	return 1;
}

this::CarregarCasas()
{
	new rows, str[128];

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_HOUSES)
	{
		HouseData[i][houseExists] = true;
		cache_get_value_name_int(i, "houseID", HouseData[i][houseID]);
		cache_get_value_name_int(i, "houseOwner", HouseData[i][houseOwner]);
		cache_get_value_name_int(i, "housePrice", HouseData[i][housePrice]);
		cache_get_value_name(i, "houseOwnerName", HouseData[i][houseOwnerName], 24);
		cache_get_value_name(i, "houseAddress", HouseData[i][houseAddress], 32);
		cache_get_value_name_float(i, "housePosX", HouseData[i][housePos][0]);
		cache_get_value_name_float(i, "housePosY", HouseData[i][housePos][1]);
		cache_get_value_name_float(i, "housePosZ", HouseData[i][housePos][2]);
		cache_get_value_name_float(i, "housePosA", HouseData[i][housePos][3]);
		cache_get_value_name_float(i, "houseIntX", HouseData[i][houseInt][0]);
		cache_get_value_name_float(i, "houseIntY", HouseData[i][houseInt][1]);
		cache_get_value_name_float(i, "houseIntZ", HouseData[i][houseInt][2]);
		cache_get_value_name_float(i, "houseIntA", HouseData[i][houseInt][3]);
		cache_get_value_name_int(i, "houseInterior", HouseData[i][houseInterior]);
		cache_get_value_name_int(i, "houseVW", HouseData[i][houseVW]);
		cache_get_value_name_int(i, "houseMoney", HouseData[i][houseMoney]);
		cache_get_value_name_int(i, "houseLocked", HouseData[i][houseLocked]);
		cache_get_value_name_int(i, "houseFurnitureA1", HouseData[i][houseFurnitureA1]);
		cache_get_value_name_int(i, "houseFurnitureA2", HouseData[i][houseFurnitureA2]);
		cache_get_value_name_int(i, "houseExtVW", HouseData[i][houseExtVW]);
		cache_get_value_name_int(i, "houseExtInterior", HouseData[i][houseExtInterior]);
		cache_get_value_name_int(i, "houseComplex", HouseData[i][houseComplex]);
		HouseData[i][houseBreakDoor] = false;

		for(new j = 0; j < MAX_HOUSES_WEAPON; j++)
		{
			format(str, 24, "houseWeapon%d", j + 1);
			cache_get_value_name_int(i, str, HouseData[i][houseWeapon][j]);

			format(str, 24, "houseAmmo%d", j + 1);
			cache_get_value_name_int(i, str, HouseData[i][houseAmmo][j]);
		}
		House_Refresh(i);
		Iter_Add(Houses, i);
	}
	foreach(new i : Houses) if(HouseData[i][houseExists])
	{
		mysql_format(this, str, sizeof(str), "SELECT * FROM `armazemcasa` WHERE `ID` = '%d'", HouseData[i][houseID]);
		mysql_tquery(this, str, "CarregarArmazemCasa", "d", i);

		mysql_format(this, str, sizeof(str), "SELECT * FROM `mobilias` WHERE `ID` = '%d'", HouseData[i][houseID]);
		mysql_tquery(this, str, "OnLoadFurniture", "d", i);
	}

	if(!rows)
	{
		printf("Server: nenhuma casa carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "casa foi carregada" : "casas foram carregadas");
	}

	return 1;
}

this::CarregarArmazemCasa(houseid)
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i != rows; i++)
	{
		HouseStorage[houseid][i][hItemExists] = true;
		cache_get_value_name(i, "itemName", HouseStorage[houseid][i][hItemName], 32);
		cache_get_value_name_int(i, "itemModel", HouseStorage[houseid][i][hItemModel]);
		cache_get_value_name_int(i, "itemQuantity", HouseStorage[houseid][i][hItemQuantity]);
	}
	return 1;
}

this::OnLoadFurniture(houseid)
{
	new rows, id, query[84];

	cache_get_row_count(rows);

	for(new i = 0; i != rows; i++)
	{
		cache_get_value_name_int(i, "furnitureID", FurnitureData[furnitureID]);
		cache_get_value_name_int(i, "ID", FurnitureData[furnitureHouse]);
		cache_get_value_name(i, "furnitureName", FurnitureData[furnitureName], 128);
		cache_get_value_name(i, "furnitureOriginalName", FurnitureData[furnitureOriginalName], 128);
		cache_get_value_name_float(i, "furnitureX", FurnitureData[furnitureX]);
		cache_get_value_name_float(i, "furnitureY", FurnitureData[furnitureY]);
		cache_get_value_name_float(i, "furnitureZ", FurnitureData[furnitureZ]);
		cache_get_value_name_float(i, "furnitureRotX", FurnitureData[furnitureRotX]);
		cache_get_value_name_float(i, "furnitureRotY", FurnitureData[furnitureRotY]);
		cache_get_value_name_float(i, "furnitureRotZ", FurnitureData[furnitureRotZ]);
		cache_get_value_name_int(i, "furnitureInterior", FurnitureData[furnitureInterior]);
		cache_get_value_name_int(i, "furnitureVW", FurnitureData[furnitureVW]);
		cache_get_value_name_int(i, "furniturePrice", FurnitureData[furniturePrice]);
		cache_get_value_name_int(i, "furnitureModel", FurnitureData[furnitureModel]);
		cache_get_value_name_float(i, "furnitureDoorZ", FurnitureData[furnitureDoorZ]);

		id = CreateDynamicObject(FurnitureData[furnitureModel], FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ], FurnitureData[furnitureRotX], FurnitureData[furnitureRotY], FurnitureData[furnitureRotZ], FurnitureData[furnitureVW], FurnitureData[furnitureInterior]);

		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

		mysql_format(this, query, sizeof(query), "UPDATE `mobilias` SET `furnitureObject` = '%d' WHERE `furnitureID` = '%d'", id, FurnitureData[furnitureID]);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "SELECT * FROM `mobiliastextura` WHERE `furnitureID` = '%d'", FurnitureData[furnitureID]);
		mysql_tquery(this, query, "OnLoadFurnitureTextures", "d", id);
	}
	return 1;
}

this::OnHouseCreated(houseid)
{
	if(houseid == -1 || !HouseData[houseid][houseExists])
		return 0;

	HouseData[houseid][houseID] = cache_insert_id();
	HouseData[houseid][houseVW] = 2000 + HouseData[houseid][houseID];
	House_Save(houseid);

	return 1;
}

this::OnStorageAdd(houseid, itemid)
{
	HouseStorage[houseid][itemid][hItemID] = cache_insert_id();
	return 1;
}

this::OnQueryFinished(playerid, queryid)
{
	new rows;

	cache_get_row_count(rows);

	switch(queryid)
	{
		case QUERY_CHECK_ACCOUNT:
		{
			if(!rows)
			{
				Dialog_Show(playerid, Register, DIALOG_STYLE_INPUT, " ", "Bem vindo ao %s.\nSERVER: Sua senha deve ser entre três (3) e trinta (30) caracteres.\nINFO: Acesse %s e confira as últimas\natualizações do servidor.", "Prosseguir", "Cancelar", SERVER_NAME, SERVER_SITE);
			}			
			else
			{
				Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, " ", "Bem vindo ao %s.\nSERVER: Você possui três (3) tentativas de autenticação.\nINFO: Acesse %s e confira as últimas\natualizações do servidor.", "Autenticar", "Cancelar", SERVER_NAME, SERVER_SITE);
			}

			//Checar banimento
			CheckPlayerBan(playerid);
		}
		case QUERY_PLAYER_LOGIN:
		{
			if(!rows)
			{
				if(++PlayerData[playerid][pLoginTries] < 3)
				{
					Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, " ", "Bem vindo ao %s.\nSERVER: Você possui três (3) tentativas de autenticação.\nINFO: Acesse %s e confira as últimas\natualizações do servidor.", "Autenticar", "Cancelar", SERVER_NAME, SERVER_SITE);
				}			
				else
				{
					KickEx(playerid);
				}
			}
			else
			{
				//Cellphone;
				Phone_LoadPlayerCfg(playerid);

				cache_get_value_name_int(0, "UserID", PlayerData[playerid][pID]);
				cache_get_value_name_int(0, "AdminLevel", PlayerData[playerid][pAdmin]);
				cache_get_value_name(0, "LastLogin", PlayerData[playerid][pLastLogin], 32);
				cache_get_value_name_int(0, "Money", PlayerData[playerid][pMoney]);
				cache_get_value_name_int(0, "SkinID", PlayerData[playerid][pSkin]);
				cache_get_value_name_int(0, "Level", PlayerData[playerid][pLevel]);
				cache_get_value_name_int(0, "Respect", PlayerData[playerid][pEXP]);
				cache_get_value_name_int(0, "Sex", PlayerData[playerid][pSex]);
				cache_get_value_name_int(0, "Tutorial", PlayerData[playerid][pTutorial]);
				cache_get_value_name_int(0, "FlyLicense", PlayerData[playerid][pFlyLicense]);
				cache_get_value_name_int(0, "CarLicense", PlayerData[playerid][pCarLicense]);
				cache_get_value_name_int(0, "BoatLicense", PlayerData[playerid][pBoatLicense]);
				cache_get_value_name_int(0, "StyleFight", PlayerData[playerid][pFightStyle]);
				cache_get_value_name_int(0, "MoneyBank", PlayerData[playerid][pBank]);
				cache_get_value_name_int(0, "Savings", PlayerData[playerid][pSavings]);
				cache_get_value_name_int(0, "Spawn", PlayerData[playerid][pSpawn]);
				cache_get_value_name_int(0, "Cellphone", PlayerData[playerid][pCellphone]);
				cache_get_value_name_int(0, "Arrested", PlayerData[playerid][pJailed]);
				cache_get_value_name_int(0, "ArrestTime", PlayerData[playerid][pJailTime]);
				cache_get_value_name_int(0, "Warns", PlayerData[playerid][pWarns]);
				cache_get_value_name_int(0, "Job", PlayerData[playerid][pJob]);
				cache_get_value_name_int(0, "Paycheck", PlayerData[playerid][pPaycheck]);
				cache_get_value_name_int(0, "TimePlayed", PlayerData[playerid][pTimePlayed]);
				cache_get_value_name_int(0, "VipLevel", PlayerData[playerid][pVip]);
				cache_get_value_name_int(0, "VipTime", PlayerData[playerid][pVipTime]);
				cache_get_value_name_int(0, "Faction", PlayerData[playerid][pFactionID]);
				cache_get_value_name_int(0, "FactionRank", PlayerData[playerid][pFactionRank]);
				cache_get_value_name_int(0, "FactionMod", PlayerData[playerid][pFactionMod]);
				cache_get_value_name_float(0, "DeathPosX", PlayerData[playerid][pPosX]);
				cache_get_value_name_float(0, "DeathPosY", PlayerData[playerid][pPosY]);
				cache_get_value_name_float(0, "DeathPosZ", PlayerData[playerid][pPosZ]);
				cache_get_value_name_int(0, "DeathInterior", PlayerData[playerid][pInterior]);
				cache_get_value_name_int(0, "DeathWorld", PlayerData[playerid][pWorld]);
				cache_get_value_name_int(0, "State", PlayerData[playerid][pState]);
				cache_get_value_name_int(0, "DeathTime", PlayerData[playerid][pDeathTime]);
				cache_get_value_name_int(0, "Entrance", PlayerData[playerid][pEntrance]);
				cache_get_value_name_int(0, "House", PlayerData[playerid][pHouse]);
				cache_get_value_name_int(0, "Business", PlayerData[playerid][pBusiness]);
				cache_get_value_name_int(0, "Complex", PlayerData[playerid][pComplex]);
				cache_get_value_name_int(0, "RespawnTime", PlayerData[playerid][pRespawnTime]);
				cache_get_value_name_int(0, "Hospital", PlayerData[playerid][pHospital]);
				cache_get_value_name_int(0, "HospitalTime", PlayerData[playerid][pHospitalTime]);
				cache_get_value_name_int(0, "RadioSlot1", PlayerData[playerid][pRadioSlot][0]);
				cache_get_value_name_int(0, "RadioSlot2", PlayerData[playerid][pRadioSlot][1]);
				cache_get_value_name_int(0, "RadioSlot3", PlayerData[playerid][pRadioSlot][2]);
				cache_get_value_name_int(0, "RadioSlot4", PlayerData[playerid][pRadioSlot][3]);
				cache_get_value_name_int(0, "Mask", PlayerData[playerid][pMask]);
				cache_get_value_name_int(0, "PMMuted", PlayerData[playerid][pPMMuted]);
				cache_get_value_name_float(0, "Armor", PlayerData[playerid][pArmor]);
				cache_get_value_name_float(0, "Health", PlayerData[playerid][pHealth]);
				cache_get_value_name_int(0, "Namechange", PlayerData[playerid][pNameChange]);
				cache_get_value_name_int(0, "CustomPlate", PlayerData[playerid][pCustomPlate]);
				cache_get_value_name_int(0, "BlockFurniture", PlayerData[playerid][pBlockFurniture]);
				cache_get_value_name_int(0, "BlockBuyVehicle", PlayerData[playerid][pBlockBuyVehicle]);
				cache_get_value_name_int(0, "BlockMoney", PlayerData[playerid][pBlockMoney]);
				cache_get_value_name_int(0, "BlockedMoney", PlayerData[playerid][pMoneyBlocked]);
				cache_get_value_name_int(0, "Crashed", PlayerData[playerid][pCrashed]);
				cache_get_value_name_int(0, "Grupo", PlayerData[playerid][pGroupID]);
				cache_get_value_name_int(0, "GrupoRank", PlayerData[playerid][pGroupRank]);
				cache_get_value_name_int(0, "Family", PlayerData[playerid][pFamilyID]);
				cache_get_value_name_int(0, "FamilyRank", PlayerData[playerid][pFamilyRank]);
				cache_get_value_name_int(0, "CreateFamily", PlayerData[playerid][pCreateFamily]);
				cache_get_value_name_int(0, "AdminHide", PlayerData[playerid][pAdminHide]);
				cache_get_value_name_int(0, "CellphoneItem", PlayerData[playerid][pCellphoneItem]);
				cache_get_value_name_int(0, "FishBait", PlayerData[playerid][pFishBait]);
				cache_get_value_name_int(0, "Thirst", PlayerData[playerid][pThirst]);
				cache_get_value_name_int(0, "Hungry", PlayerData[playerid][pHungry]);
				cache_get_value_name(0, "WarnReason1", PlayerData[playerid][pWarn1], 64);
				cache_get_value_name(0, "WarnReason2", PlayerData[playerid][pWarn2], 64);
				if(PlayerData[playerid][pJailed] >= 2)
				{
					cache_get_value_name_int(0, "LawyerBlock", PlayerData[playerid][pLawyerBlock]);
					cache_get_value_name_int(0, "LawyerTime", PlayerData[playerid][pLawyerTime]);
				}

				ACData[playerid][acTime] = gettime() + 5;

				new query[126];

				for (new i = 0; i < 13; i ++) 
				{
					format(query, sizeof(query), "Gun%d", i + 1);
					cache_get_value_name_int(0, query, PlayerData[playerid][pWeapon][i]);

					format(query, sizeof(query), "Ammo%d", i + 1);
					cache_get_value_name_int(0, query, PlayerData[playerid][pAmmo][i]);
				}
				
				mysql_format(this, query, sizeof(query), "SELECT * FROM `inventario` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
				mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_LOAD_INVENTORY);
				
				mysql_format(this, query, sizeof(query), "SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
				mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_LOAD_GPS);

				mysql_format(this, query, sizeof(query), "SELECT * FROM `multas` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
				mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_LOAD_TICKETS);

				mysql_format(this, query, sizeof(query), "SELECT * FROM `mascaras_atuais` WHERE `maskOwner` = '%e'", ReturnName(playerid));
				mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_LOAD_MASK);

				mysql_format(this, query, sizeof(query), "SELECT * FROM `attachments` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
				mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_LOAD_ATTACHS);

				if(PlayerData[playerid][pFactionID] != -1)
				{
					PlayerData[playerid][pFaction] = GetFactionByID(PlayerData[playerid][pFactionID]);

					if(PlayerData[playerid][pFaction] == -1)
					{
						ResetFaction(playerid);
					}
				}

				if(PlayerData[playerid][pGroupID] != -1)
				{
					PlayerData[playerid][pGroup] = GetGroupByID(PlayerData[playerid][pGroupID]);

					if(PlayerData[playerid][pGroup] == -1)
					{
						ResetGroup(playerid);
					}
				}

				if(PlayerData[playerid][pFamilyID] != -1)
				{
					PlayerData[playerid][pFamily] = GetFamilyByID(PlayerData[playerid][pFamilyID]);

					if(PlayerData[playerid][pFamily] == -1)
					{
						ResetFamily(playerid);
					}
				}

				SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);
				SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
				StopAudioStreamForPlayer(playerid);

				PlayerData[playerid][pLogged] = 1;

				if(PlayerData[playerid][pTutorial] == 0)
				{					
					Dialog_Show(playerid, ChooseSex, DIALOG_STYLE_LIST, "Escolha o seu sexo:", "Masculino\nFeminino", "Selecionar", "Cancelar");
				}
				else
				{
					ClearPlayerChat(playerid, 20);

					SendServerMessage(playerid, "Bem vindo %s. Sua última visita foi em %s.", ReturnName(playerid, 0), PlayerData[playerid][pLastLogin]);
					SendServerMessage(playerid, "Última atualização em %s na versão %s.", LAST_UPDATE, SERVER_GM_TEXT);
					
					mysql_tquery(this, "SELECT * FROM server_config WHERE entry_id = '1' AND active = '1'", "SendMOTDToPlayer", "d", playerid);
					mysql_format(this, query, sizeof(query), "SELECT * FROM refunds WHERE refundOwnerID = '%d'", PlayerData[playerid][pID]);
					mysql_tquery(this, query, "OnPlayerHaveRefund", "d", playerid);

					if(PlayerData[playerid][pAdmin] >= 1)
						SendServerMessage(playerid, "Você foi autenticado como administrador (%d)%s", PlayerData[playerid][pAdmin], (PlayerData[playerid][pAdminHide]) ? (" e /ahide ativado.") : ("."));

					Daily_Check(playerid);

					SetPlayerToSpawn(playerid);
					SetPlayerFreezed(playerid, true);
					SetTimerEx("SpawnTimer", 3500, false, "d", playerid);
				}
			}
		}
		case QUERY_LOAD_INVENTORY:
		{
			if(rows)
			{
				for(new i = 0; i < rows && i < MAX_INVENTORY; i++)
				{
					InventoryData[playerid][i][invExists] = true;
					cache_get_value_name_int(i, "invID", InventoryData[playerid][i][invID]);
					cache_get_value_name_int(i, "invModel", InventoryData[playerid][i][invModel]);
					cache_get_value_name_int(i, "invQuantity", InventoryData[playerid][i][invQuantity]);
					cache_get_value_name(i, "invItem", InventoryData[playerid][i][invItem], 32);
				}
			}
		}
		case QUERY_LOAD_GPS:
		{
			if(rows)
			{
				for(new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i++)
				{
					cache_get_value_name(i, "locationName", LocationData[playerid][i][locationName], 32);
					LocationData[playerid][i][locationExists] = true;
					cache_get_value_name_int(i, "locationID", LocationData[playerid][i][locationID]);
					cache_get_value_name_float(i, "locationX", LocationData[playerid][i][locationPos][0]);
					cache_get_value_name_float(i, "locationY", LocationData[playerid][i][locationPos][1]);
					cache_get_value_name_float(i, "locationZ", LocationData[playerid][i][locationPos][2]);
				}
			}
		}
		case QUERY_LOAD_TICKETS:
		{
			if(rows)
			{
				for(new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i++)
				{
					cache_get_value_name(i, "ticketReason", TicketData[playerid][i][ticketReason], 64);
					cache_get_value_name(i, "ticketDate", TicketData[playerid][i][ticketDate], 36);
					TicketData[playerid][i][ticketExists] = true;
					cache_get_value_name_int(i, "ticketID", TicketData[playerid][i][ticketID]);
					cache_get_value_name_int(i, "ticketFee", TicketData[playerid][i][ticketFee]);

				}
			}
		}
		case QUERY_BANK_HISTORY:
		{
			if(!rows)
				return SendWarningMessage(playerid, "Não há registros de movimentações bancária.");

			sz_MiscString[0] = 0;

			format(sz_MiscString, sizeof(sz_MiscString), "Data\tConta\tValor ($)\tMovimentação\n");

			for(new i = 0; i < rows; i++)
			{
				new action[64], value, date[32], account_type[32];

				cache_get_value_name(i, "action", action);
				cache_get_value_name(i, "date", date);
				cache_get_value_name(i, "type", account_type);
				cache_get_value_name_int(i, "value", value);

				format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%s\t%s\t%s\n", sz_MiscString, date, account_type, FormatNumber(value), action);
			}	

			Dialog_Show(playerid, BankExtract, DIALOG_STYLE_TABLIST_HEADERS, "Registro de transações - Últimos 50", sz_MiscString, "<<", "");
		}
		case QUERY_LOAD_MASK:
		{
			if(rows)
			{
				cache_get_value_name(0, "maskOwner", MaskData[playerid][maskOwner], 24);
				cache_get_value_name(0, "maskBought", MaskData[playerid][maskBought], 32);
				cache_get_value_name_int(0, "maskNumber", MaskData[playerid][maskNumber]);
			}
		}
		case QUERY_LOAD_ATTACHS:
		{

			for(new i = 0; i < rows && i < MAX_ITEM_PLAYER; i++)
			{
				AttachData[playerid][i][attachExists] = true;

				cache_get_value_name_int(i, "attachID", AttachData[playerid][i][attachID]);

				cache_get_value_name_int(i, "attachObject", AttachData[playerid][i][attachObject]);
				cache_get_value_name_int(i, "attachIndex", AttachData[playerid][i][attachIndex]);
				cache_get_value_name_int(i, "attachBone", AttachData[playerid][i][attachBone]);
				cache_get_value_name_int(i, "attachUsing", AttachData[playerid][i][attachUsing]);

				cache_get_value_name(i, "attachName", AttachData[playerid][i][attachName], 64);

				cache_get_value_name_float(i, "attachX", AttachData[playerid][i][attachX]);
				cache_get_value_name_float(i, "attachY", AttachData[playerid][i][attachY]);
				cache_get_value_name_float(i, "attachZ", AttachData[playerid][i][attachZ]);

				cache_get_value_name_float(i, "attachRX", AttachData[playerid][i][attachRX]);
				cache_get_value_name_float(i, "attachRY", AttachData[playerid][i][attachRY]);
				cache_get_value_name_float(i, "attachRZ", AttachData[playerid][i][attachRZ]);

				cache_get_value_name_float(i, "attachSX", AttachData[playerid][i][attachSX]);
				cache_get_value_name_float(i, "attachSY", AttachData[playerid][i][attachSY]);
				cache_get_value_name_float(i, "attachSZ", AttachData[playerid][i][attachSZ]);
			}
		}
	}

	return 1;
}

this::SpawnTimer(playerid)
{
	if(PlayerData[playerid][pLogged])
	{
		format(PlayerData[playerid][pLastLogin], 32, ReturnDate());

		ACData[playerid][acTeleportSafe] = true;
		PlayerData[playerid][pJustLoggedIn] = false;

		SetScriptedArmour(playerid, PlayerData[playerid][pArmor]);
		SetScriptedHealth(playerid, PlayerData[playerid][pHealth]);

		SetPlayerFreezed(playerid, false);

		new query[130];

		format(query, sizeof(query), "~y~~h~Bem vindo~n~~w~%s", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, query, 1, 1);
		
		PlayerData[playerid][pRespawnTime] = gettime();

		mysql_format(this, query, sizeof(query), "UPDATE `players` SET `LastIP` = '%e', `Online` = '1', `RespawnTime` = '%d' WHERE `UserID` = '%d'", PlayerIP(playerid), PlayerData[playerid][pRespawnTime], PlayerData[playerid][pID]);
		mysql_tquery(this, query);
	}
	return 1;
}

this::SendMOTDToPlayer(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(rows)
	{
		new motd[128];
		cache_get_value_name(0, "text", motd, 128);
		SendClientMessageEx(playerid, COLOR_DARKYELLOW, "MOTD: %s", motd);
	}

	return 1;
}

Vehicle_Buy(playerid, model, price)
{
	new random_conce, random_park, i;

	random_conce = random(sizeof(SpawnConce));
	random_park = random(sizeof(EstacionamentoLS));

	GiveScriptedMoney(playerid, -price);

	i = CreateVehicle(model, EstacionamentoLS[random_park][0], EstacionamentoLS[random_park][1], EstacionamentoLS[random_park][2], EstacionamentoLS[random_park][3], TempData[playerid][tempColor1], TempData[playerid][tempColor2], -1, 0);

	VehicleData[i][vehicleOwnerID] = PlayerData[playerid][pID];
	format(VehicleData[i][vehicleOwnerName], 24, ReturnName(playerid));
	format(VehicleData[i][vehiclePlate], 10, RandomizeVehiclePlate());

	VehicleData[i][vehicleLocked] = 0;

	VehicleData[i][vehicleLocator] = TempData[playerid][tempLocator];
	VehicleData[i][vehicleSeguro] = TempData[playerid][tempSeguro];
	VehicleData[i][vehicleTrava] = TempData[playerid][tempTrava];
	VehicleData[i][vehicleXMRadio] = TempData[playerid][tempXMRadio];
	VehicleData[i][vehicleModel] = model;
	VehicleData[i][vehiclePrice] = price;
	VehicleData[i][vehicleColor][0] = TempData[playerid][tempColor1];
	VehicleData[i][vehicleColor][1] = TempData[playerid][tempColor2];
	VehicleData[i][vehicleFaction] = 0;
	VehicleData[i][vehicleJob] = -1;

	VehicleData[i][vehicleParked] = 1;
	VehicleData[i][vehicleParkedPos][0] = EstacionamentoLS[random_park][0];
	VehicleData[i][vehicleParkedPos][1] = EstacionamentoLS[random_park][1];
	VehicleData[i][vehicleParkedPos][2] = EstacionamentoLS[random_park][2];
	VehicleData[i][vehicleParkedPos][3] = EstacionamentoLS[random_park][3];
	VehicleData[i][vehicleParkedVW] = 0;

	VehicleData[i][vehicleHealth] = 1000.0;
	VehicleData[i][vehicleMaxHealth] = 1000.0;
	VehicleData[i][vehicleDamage][0] = 0;
	VehicleData[i][vehicleDamage][1] = 0;
	VehicleData[i][vehicleDamage][2] = 0;
	VehicleData[i][vehicleDamage][3] = 0;
	VehicleData[i][vehicleMileage] = 0;
	VehicleData[i][vehicleEngine] = 100.0;
	VehicleData[i][vehicleSiren] = 0;

	for(new a = 0; a < 14; a++)
		VehicleData[i][vehicleMod][a] = 0;

	for(new b = 0; b < 35; b++)
	{
		VehicleData[i][vehicleWeapon][b] = 0;
		VehicleData[i][vehicleAmmo][b] = 0;
	}
	VehicleData[i][vehicleInteriorWeapon] = 0;
	VehicleData[i][vehicleInteriorAmmo] = 0;

	Dealership_Close(playerid);

	SetVehicleNumberPlate(i, VehicleData[i][vehiclePlate]);

	if(IsAnAirplane(i))
	{
		AC_SetVehiclePos(i, 2131.8567, -1169.9862, 27.8662);
		AC_PutPlayerInVehicle(playerid, i, 0);
		SetVehicleZAngle(i, 359.2093);
	}
	else
	{
		AC_SetVehiclePos(i, SpawnConce[random_conce][0], SpawnConce[random_conce][1], SpawnConce[random_conce][2]);
		AC_PutPlayerInVehicle(playerid, i, 0);
		SetVehicleZAngle(i, SpawnConce[random_conce][3]);
	}		

	SetTimerEx("DelayedShowCheckpoint", 1500, false, "dfff", playerid, VehicleData[i][vehicleParkedPos][0], VehicleData[i][vehicleParkedPos][1], VehicleData[i][vehicleParkedPos][2]);

	SendGreenMessage(playerid, "Você comprou um(a) \"%s\" e a placa de registro é \"%s\".", ReturnVehicleModelName(VehicleData[i][vehicleModel]), VehicleData[i][vehiclePlate]);
	SendServerMessage(playerid, "Você ganhou uma vaga de estacionamento, ela foi marcada em seu mapa.");
	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) comprou o veículo %s (ID: %d) na concessionária.", ReturnName(playerid, 0), playerid, ReturnVehicleModelName(VehicleData[i][vehicleModel]), i);
	
	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) comprou um veículo (%s) na concessionária por %s.\nLocalizador: %d, Seguro: %d, Trava: %d, XMRádio: %d", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnVehicleModelName(VehicleData[i][vehicleModel]), FormatNumber(price),
			VehicleData[i][vehicleLocator], VehicleData[i][vehicleSeguro], VehicleData[i][vehicleTrava], VehicleData[i][vehicleXMRadio]);

	SendServerMessage(playerid, "Você possui um novo veículo (/v lista).");

	VehicleData[i][vehicleFuel] = Fuel_GetQuantity(i);

	new query[126];
	mysql_format(this, query, sizeof(query), "INSERT INTO carros (vehicleOwnerName) VALUES ('%e')", ReturnName(playerid));
	mysql_tquery(this, query, "OnVehicleCreated", "dd", i, 0);

	Iter_Add(Vehicles, i);

	return 1;
}

this::Vehicle_Load()
{
	new rows, query[126], vehicle_parked;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_VEHICLES)
	{
		cache_get_value_name_int(i, "vehicleParked", vehicle_parked);

		if(vehicle_parked == 1)
		{
			new vehicleid, model, Float:pos[4], color1, color2, siren; 

			cache_get_value_name_int(i, "vehicleModel", model);
			cache_get_value_name_int(i, "vehicleColor1", color1);
			cache_get_value_name_int(i, "vehicleColor2", color2);
			cache_get_value_name_int(i, "vehicleSiren", siren);
			cache_get_value_name_float(i, "vehicleParked_X", pos[0]);
			cache_get_value_name_float(i, "vehicleParked_Y", pos[1]);
			cache_get_value_name_float(i, "vehicleParked_Z", pos[2]);
			cache_get_value_name_float(i, "vehicleParked_A", pos[3]);

			vehicleid = CreateVehicle(model, pos[0], pos[1], pos[2], pos[3], color1, color2, -1, siren);
		
			VehicleData[vehicleid][vehicleParked] = vehicle_parked;
			VehicleData[vehicleid][vehicleModel] = model;
			VehicleData[vehicleid][vehicleColor][0] = color1;
			VehicleData[vehicleid][vehicleColor][1] = color2;
			VehicleData[vehicleid][vehicleSiren] = siren;
			for(new j = 0; j < 4; j++)
				VehicleData[vehicleid][vehicleParkedPos][j] = pos[j];

			cache_get_value_name(i, "vehicleOwnerName", VehicleData[vehicleid][vehicleOwnerName], 24);
			cache_get_value_name(i, "vehiclePlate", VehicleData[vehicleid][vehiclePlate], 10);

			cache_get_value_name_int(i, "vehicleID", VehicleData[vehicleid][vehicleID]);
			cache_get_value_name_int(i, "ID", VehicleData[vehicleid][vehicleOwnerID]);
			cache_get_value_name_int(i, "vehicleFaction", VehicleData[vehicleid][vehicleFaction]);
			cache_get_value_name_int(i, "vehicleJob", VehicleData[vehicleid][vehicleJob]);
			cache_get_value_name_int(i, "vehicleLocked", VehicleData[vehicleid][vehicleLocked]);
			cache_get_value_name_int(i, "vehicleLocator", VehicleData[vehicleid][vehicleLocator]);
			cache_get_value_name_int(i, "vehicleSeguro", VehicleData[vehicleid][vehicleSeguro]);
			cache_get_value_name_int(i, "vehicleTrava", VehicleData[vehicleid][vehicleTrava]);
			cache_get_value_name_int(i, "vehicleXMRadio", VehicleData[vehicleid][vehicleXMRadio]);		
			cache_get_value_name_int(i, "vehiclePrice", VehicleData[vehicleid][vehiclePrice]);
			cache_get_value_name_int(i, "vehicleParkedVW", VehicleData[vehicleid][vehicleParkedVW]);
			cache_get_value_name_int(i, "vehicleDamage1", VehicleData[vehicleid][vehicleDamage][0]);
			cache_get_value_name_int(i, "vehicleDamage2", VehicleData[vehicleid][vehicleDamage][1]);
			cache_get_value_name_int(i, "vehicleDamage3", VehicleData[vehicleid][vehicleDamage][2]);
			cache_get_value_name_int(i, "vehicleDamage4", VehicleData[vehicleid][vehicleDamage][3]);		
			cache_get_value_name_int(i, "vehicleExpressWay", VehicleData[vehicleid][vehicleExpressWay]);
			cache_get_value_name_int(i, "vehicleExpressMoney", VehicleData[vehicleid][vehicleExpressMoney]);
			cache_get_value_name_int(i, "vehicleInteriorWeapon", VehicleData[vehicleid][vehicleInteriorWeapon]);
			cache_get_value_name_int(i, "vehicleInteriorAmmo", VehicleData[vehicleid][vehicleInteriorAmmo]);

			cache_get_value_name_float(i, "vehicleHealth", VehicleData[vehicleid][vehicleHealth]);
			cache_get_value_name_float(i, "vehicleMaxHealth", VehicleData[vehicleid][vehicleMaxHealth]);
			cache_get_value_name_float(i, "vehicleMileage", VehicleData[vehicleid][vehicleMileage]);
			cache_get_value_name_float(i, "vehicleEngine", VehicleData[vehicleid][vehicleEngine]);
			cache_get_value_name_float(i, "vehicleFuel", VehicleData[vehicleid][vehicleFuel]);

			//load vehicle modifications
			new string_tunning[128];
			cache_get_value_name(i, "vehicleMod", string_tunning, 128);
			sscanf(string_tunning, "p<|>dddddddddddddd",
				VehicleData[vehicleid][vehicleMod][0], VehicleData[vehicleid][vehicleMod][1], VehicleData[vehicleid][vehicleMod][2],
				VehicleData[vehicleid][vehicleMod][3], VehicleData[vehicleid][vehicleMod][4], VehicleData[vehicleid][vehicleMod][5],
				VehicleData[vehicleid][vehicleMod][6], VehicleData[vehicleid][vehicleMod][7], VehicleData[vehicleid][vehicleMod][8],
				VehicleData[vehicleid][vehicleMod][9], VehicleData[vehicleid][vehicleMod][10], VehicleData[vehicleid][vehicleMod][11],
				VehicleData[vehicleid][vehicleMod][12], VehicleData[vehicleid][vehicleMod][13]);

			//load vehicleweapons
			new string_weapons[128];
			cache_get_value_name(i, "vehicleWeapon", string_weapons, 128);
			sscanf(string_weapons, "p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
				VehicleData[vehicleid][vehicleWeapon][0], VehicleData[vehicleid][vehicleAmmo][0],
				VehicleData[vehicleid][vehicleWeapon][1], VehicleData[vehicleid][vehicleAmmo][1],
				VehicleData[vehicleid][vehicleWeapon][2], VehicleData[vehicleid][vehicleAmmo][2],
				VehicleData[vehicleid][vehicleWeapon][3], VehicleData[vehicleid][vehicleAmmo][3],
				VehicleData[vehicleid][vehicleWeapon][4], VehicleData[vehicleid][vehicleAmmo][4],
				VehicleData[vehicleid][vehicleWeapon][5], VehicleData[vehicleid][vehicleAmmo][5],
				VehicleData[vehicleid][vehicleWeapon][6], VehicleData[vehicleid][vehicleAmmo][6],
				VehicleData[vehicleid][vehicleWeapon][7], VehicleData[vehicleid][vehicleAmmo][7],
				VehicleData[vehicleid][vehicleWeapon][8], VehicleData[vehicleid][vehicleAmmo][8],
				VehicleData[vehicleid][vehicleWeapon][9], VehicleData[vehicleid][vehicleAmmo][9],
				VehicleData[vehicleid][vehicleWeapon][10], VehicleData[vehicleid][vehicleAmmo][10],
				VehicleData[vehicleid][vehicleWeapon][11], VehicleData[vehicleid][vehicleAmmo][11],
				VehicleData[vehicleid][vehicleWeapon][12], VehicleData[vehicleid][vehicleAmmo][12],
				VehicleData[vehicleid][vehicleWeapon][13], VehicleData[vehicleid][vehicleAmmo][13],
				VehicleData[vehicleid][vehicleWeapon][14], VehicleData[vehicleid][vehicleAmmo][14],
				VehicleData[vehicleid][vehicleWeapon][15], VehicleData[vehicleid][vehicleAmmo][15],
				VehicleData[vehicleid][vehicleWeapon][16], VehicleData[vehicleid][vehicleAmmo][16],
				VehicleData[vehicleid][vehicleWeapon][17], VehicleData[vehicleid][vehicleAmmo][17],
				VehicleData[vehicleid][vehicleWeapon][18], VehicleData[vehicleid][vehicleAmmo][18],
				VehicleData[vehicleid][vehicleWeapon][19], VehicleData[vehicleid][vehicleAmmo][19],
				VehicleData[vehicleid][vehicleWeapon][20], VehicleData[vehicleid][vehicleAmmo][20],
				VehicleData[vehicleid][vehicleWeapon][21], VehicleData[vehicleid][vehicleAmmo][21],
				VehicleData[vehicleid][vehicleWeapon][22], VehicleData[vehicleid][vehicleAmmo][22],
				VehicleData[vehicleid][vehicleWeapon][23], VehicleData[vehicleid][vehicleAmmo][23],
				VehicleData[vehicleid][vehicleWeapon][24], VehicleData[vehicleid][vehicleAmmo][24],
				VehicleData[vehicleid][vehicleWeapon][25], VehicleData[vehicleid][vehicleAmmo][25],
				VehicleData[vehicleid][vehicleWeapon][26], VehicleData[vehicleid][vehicleAmmo][26],
				VehicleData[vehicleid][vehicleWeapon][27], VehicleData[vehicleid][vehicleAmmo][27],
				VehicleData[vehicleid][vehicleWeapon][28], VehicleData[vehicleid][vehicleAmmo][28],
				VehicleData[vehicleid][vehicleWeapon][29], VehicleData[vehicleid][vehicleAmmo][29],
				VehicleData[vehicleid][vehicleWeapon][30], VehicleData[vehicleid][vehicleAmmo][30],
				VehicleData[vehicleid][vehicleWeapon][31], VehicleData[vehicleid][vehicleAmmo][31],
				VehicleData[vehicleid][vehicleWeapon][32], VehicleData[vehicleid][vehicleAmmo][32],
				VehicleData[vehicleid][vehicleWeapon][33], VehicleData[vehicleid][vehicleAmmo][33],
				VehicleData[vehicleid][vehicleWeapon][34], VehicleData[vehicleid][vehicleAmmo][34]);
		
			SetVehicleNumberPlate(vehicleid, VehicleData[vehicleid][vehiclePlate]);

			SetVehicleVirtualWorld(vehicleid, VehicleData[vehicleid][vehicleParkedVW]);

			Vehicle_SetLocked(vehicleid);
			Vehicle_SetMod(vehicleid);

			if(!VehicleData[vehicleid][vehicleFaction])
			{
				AC_SetVehicleHealth(vehicleid, VehicleData[vehicleid][vehicleHealth]);
				UpdateVehicleDamageStatus(vehicleid, VehicleData[vehicleid][vehicleDamage][0], VehicleData[vehicleid][vehicleDamage][1], VehicleData[vehicleid][vehicleDamage][2], VehicleData[vehicleid][vehicleDamage][3]);
			}
			else
			{
				AC_SetVehicleHealth(vehicleid, VehicleData[vehicleid][vehicleMaxHealth]);
			}

			mysql_format(this, query, sizeof(query), "SELECT * FROM portamalas WHERE ID = '%d'", VehicleData[vehicleid][vehicleID]);
			mysql_tquery(this, query, "OnLoadCarStorage", "d", vehicleid);

			Iter_Add(Vehicles, vehicleid);
		}
	}

	if(!rows)
	{
		printf("Server: nenhum veículo carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "veículo foi carregado" : "veículos foram carregados");
	}

	return 1;
}

this::OnLoadCarStorage(carid)
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		CarStorage[carid][i][cItemExists] = true;
		cache_get_value_name_int(i, "itemID", CarStorage[carid][i][cItemID]);
		cache_get_value_name_int(i, "itemModel", CarStorage[carid][i][cItemModel]);
		cache_get_value_name_int(i, "itemQuantity", CarStorage[carid][i][cItemQuantity]);
		cache_get_value_name(i, "itemName", CarStorage[carid][i][cItemName], 32);
	}
	return 1;
}

this::OnVehicleCreated(vehicleid, refund)
{
	VehicleData[vehicleid][vehicleID] = cache_insert_id();

	new query[50];
	mysql_format(this, query, sizeof(query), "SELECT * FROM portamalas WHERE ID = '%d'", VehicleData[vehicleid][vehicleID]);
	mysql_tquery(this, query, "OnLoadCarStorage", "d", vehicleid);

	Vehicle_Save(vehicleid);

	if(refund)
		DestroyVehicle(vehicleid);

	return 1;
}

this::OnPlayerBanned(playerid)
{
	new rows, query[126];

	cache_get_row_count(rows);

	if(rows)
	{
		new tempounban, motivo[64], administrador[24], data[32], username[24], playerip[16];
		cache_get_value_name_int(0, "UnbanTime", tempounban);
		cache_get_value_name(0, "Name", username, 24);
		cache_get_value_name(0, "Reason", motivo, 64);
		cache_get_value_name(0, "Admin", administrador, 24);
		cache_get_value_name(0, "Date", data, 32);
		cache_get_value_name(0, "IP", playerip, 16);

		if(!strcmp(ReturnName(playerid), username))
		{
			if(tempounban == 0)
			{
				Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Conta banida:", "Sua conta está banida do servidor.\n\nData do banimento: %s\nAdministrador que baniu: %s\nMotivo: %s\n\nSe você acha que isso foi um erro, tire uma SS(F8) e\nfaça uma revisão em nosso fórum.", "Fechar", "", data, administrador, motivo);
				KickEx(playerid);
			}
			else if(tempounban > gettime())
			{
				new player_unban[40];

				new hora, minuto, segundo, dia, mes, ano;
				TimestampToDate(tempounban, ano, mes, dia, hora, minuto, segundo);

				format(player_unban, 40, "%02d/%02d/%02d, %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo);

				Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Conta banida:", "Sua conta está banida temporariamente.\n\nData do banimento: %s\nAdministrador que baniu: %s\nMotivo: %s\nDesbanimento: %s\n\nSe você acha que isso foi um erro, tire uma SS(F8) e\nfaça uma revisão em nosso fórum.", "Fechar", "", data, administrador, motivo, player_unban);
				KickEx(playerid);
			}
			else if(tempounban < gettime())
			{
				GameTextForPlayer(playerid, "~g~desbanido", 10000, 4);
				mysql_format(this, query, sizeof(query), "DELETE FROM player_banned WHERE Name = '%e'", ReturnName(playerid));
				mysql_tquery(this, query);
				SendServerMessage(playerid, "Seu banimento temporário expirou, não cometa os mesmos erros ou sua próxima punição será mais severa.", motivo);
			}
		}
		else
		{
			Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "IP Banido:", "Seu número de IP (%s) está banido.\n\nData do banimento: %s\nAdministrador que baniu: %s\nMotivo: %s\nConta banida: %s\n\nSe você acha que isso foi um erro, tire uma SS(F8) e\nfaça uma revisão em nosso fórum.", "Fechar", "", playerip, data, administrador, motivo, username);
			KickEx(playerid);
		}	
	}
	return 1;
}

this::Business_Load()
{
	new rows, string_products[128], string_products_price[128];

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_BUSINESS)
	{
		BusinessData[i][businessExists] = true;

		cache_get_value_name_int(i, "businessID", BusinessData[i][businessID]);
		cache_get_value_name_int(i, "businessType", BusinessData[i][businessType]);
		cache_get_value_name_int(i, "businessPrice", BusinessData[i][businessPrice]);
		cache_get_value_name_int(i, "businessVW", BusinessData[i][businessVW]);
		cache_get_value_name_int(i, "businessInterior", BusinessData[i][businessInterior]);
		cache_get_value_name_int(i, "businessVault", BusinessData[i][businessVault]);
		cache_get_value_name_int(i, "businessOwnerID", BusinessData[i][businessOwnerID]);
		cache_get_value_name_int(i, "businessStock", BusinessData[i][businessStock]);
		cache_get_value_name_int(i, "businessFuel", BusinessData[i][businessFuel]);
		cache_get_value_name_int(i, "businessBuyingPrice", BusinessData[i][businessBuyingPrice]);
		cache_get_value_name_int(i, "businessBuying", BusinessData[i][businessBuying]);
		cache_get_value_name_int(i, "businessBuyingProduct", BusinessData[i][businessBuyingProduct]);

		cache_get_value_name(i, "businessOwnerName", BusinessData[i][businessOwnerName], 24);
		cache_get_value_name(i, "businessName", BusinessData[i][businessName], 128);

		cache_get_value_name(i, "businessProduct", string_products, 128);
		cache_get_value_name(i, "businessProductPrice", string_products_price, 128);

		sscanf(string_products, "p<|>dddddddddddddddddddd",
			BusinessData[i][businessProduct][0], BusinessData[i][businessProduct][1],
			BusinessData[i][businessProduct][2], BusinessData[i][businessProduct][3],
			BusinessData[i][businessProduct][4], BusinessData[i][businessProduct][5], 
			BusinessData[i][businessProduct][6], BusinessData[i][businessProduct][7], 
			BusinessData[i][businessProduct][8], BusinessData[i][businessProduct][9],
			BusinessData[i][businessProduct][10], BusinessData[i][businessProduct][11],
			BusinessData[i][businessProduct][12], BusinessData[i][businessProduct][13],
			BusinessData[i][businessProduct][14], BusinessData[i][businessProduct][15], 
			BusinessData[i][businessProduct][16], BusinessData[i][businessProduct][17], 
			BusinessData[i][businessProduct][18], BusinessData[i][businessProduct][19]);

		sscanf(string_products_price, "p<|>dddddddddddddddddddd",
			BusinessData[i][businessProductPrice][0], BusinessData[i][businessProductPrice][1],
			BusinessData[i][businessProductPrice][2], BusinessData[i][businessProductPrice][3],
			BusinessData[i][businessProductPrice][4], BusinessData[i][businessProductPrice][5], 
			BusinessData[i][businessProductPrice][6], BusinessData[i][businessProductPrice][7], 
			BusinessData[i][businessProductPrice][8], BusinessData[i][businessProductPrice][9],
			BusinessData[i][businessProductPrice][10], BusinessData[i][businessProductPrice][11],
			BusinessData[i][businessProductPrice][12], BusinessData[i][businessProductPrice][13],
			BusinessData[i][businessProductPrice][14], BusinessData[i][businessProductPrice][15], 
			BusinessData[i][businessProductPrice][16], BusinessData[i][businessProductPrice][17], 
			BusinessData[i][businessProductPrice][18], BusinessData[i][businessProductPrice][19]);

		cache_get_value_name_float(i, "businessX", BusinessData[i][businessX]);
		cache_get_value_name_float(i, "businessY", BusinessData[i][businessY]);
		cache_get_value_name_float(i, "businessZ", BusinessData[i][businessZ]);
		cache_get_value_name_float(i, "businessIntX", BusinessData[i][businessIntX]);
		cache_get_value_name_float(i, "businessIntY", BusinessData[i][businessIntY]);
		cache_get_value_name_float(i, "businessIntZ", BusinessData[i][businessIntZ]);

		Business_Refresh(i);

		Iter_Add(Business, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma empresa carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "empresa foi carregada" : "empresas foram carregadas");
	}

	return 1;
}

Business_Create(playerid, type, value)
{
	new Float:x, Float:y, Float:z, i;
	GetPlayerPos(playerid, x, y, z);

	if((i = Iter_Free(Business)) < MAX_BUSINESS)
	{
		BusinessData[i][businessExists] = true;

		format(BusinessData[i][businessOwnerName], 24, "O estado");
		format(BusinessData[i][businessName], 128, "Editar nome");

		BusinessData[i][businessOwnerID] = 0;
		BusinessData[i][businessType] = type;
		BusinessData[i][businessPrice] = value;
		BusinessData[i][businessVW] = 1000 + i;
		BusinessData[i][businessX] = x;
		BusinessData[i][businessY] = y;
		BusinessData[i][businessZ] = z;

		switch(type)
		{
			case BUSINESS_FUEL:
			{
				BusinessData[i][businessIntX] = 0.0;
				BusinessData[i][businessIntY] = 0.0;
				BusinessData[i][businessIntZ] = 0.0;
				BusinessData[i][businessInterior] = 0;

				BusinessData[i][businessFuel] = 1;

				BusinessData[i][businessProduct][0] = PRODUCT_FUEL;
				BusinessData[i][businessProductPrice][0] = 10;

				BusinessData[i][businessBuyingProduct] = INDUSTRY_PRODUCT_PETROLEUM;

			}
			case BUSINESS_247:
			{
				BusinessData[i][businessIntX] = -25.9596;
				BusinessData[i][businessIntY] = -188.259;
				BusinessData[i][businessIntZ] = 1003.55;
				BusinessData[i][businessInterior] = 17;

				BusinessData[i][businessProduct][0] = PRODUCT_GPS;
				BusinessData[i][businessProductPrice][0] = 150;

				BusinessData[i][businessProduct][1] = PRODUCT_CELLPHONE;
				BusinessData[i][businessProductPrice][1] = 200;

				BusinessData[i][businessProduct][2] = PRODUCT_MASK;
				BusinessData[i][businessProductPrice][2] = 400;

				BusinessData[i][businessProduct][3] = PRODUCT_PORTABLERADIO;
				BusinessData[i][businessProductPrice][3] = 100;

				BusinessData[i][businessProduct][4] = PRODUCT_WATER;
				BusinessData[i][businessProductPrice][4] = 10;

				BusinessData[i][businessProduct][5] = PRODUCT_BOOMBOX;
				BusinessData[i][businessProductPrice][5] = 220;

				BusinessData[i][businessBuyingProduct] = INDUSTRY_PRODUCT_RETAIL;

			}
			case BUSINESS_RESTAURANT:
			{
				BusinessData[i][businessIntX] = 363.1318;
				BusinessData[i][businessIntY] = -75.2453;
				BusinessData[i][businessIntZ] = 1001.5078;
				BusinessData[i][businessInterior] = 10;

				BusinessData[i][businessProduct][0] = PRODUCT_HAMBURGER;
				BusinessData[i][businessProductPrice][0] = 25;

				BusinessData[i][businessProduct][1] = PRODUCT_PIZZA;
				BusinessData[i][businessProductPrice][1] = 25;

				BusinessData[i][businessProduct][2] = PRODUCT_SODA;
				BusinessData[i][businessProductPrice][2] = 10;

				BusinessData[i][businessBuyingProduct] = INDUSTRY_PRODUCT_FOOD;

			}
			case BUSINESS_CLOTHSHOP:
			{
				BusinessData[i][businessIntX] = 207.6169;
				BusinessData[i][businessIntY] = -110.9493;
				BusinessData[i][businessIntZ] = 1005.1328;
				BusinessData[i][businessInterior] = 15;

				BusinessData[i][businessProduct][0] = PRODUCT_CLOTHES;
				BusinessData[i][businessProductPrice][0] = 20;

				BusinessData[i][businessBuyingProduct] = INDUSTRY_PRODUCT_CLOTHES;

			}
		}

		BusinessData[i][businessStock] = 50;

		BusinessData[i][businessBuying] = 0;
		BusinessData[i][businessBuyingPrice] = 0;

		BusinessData[i][businessVault] = 0;

		Iter_Add(Business, i);

		mysql_tquery(this, "INSERT INTO business (businessOwnerID) VALUES ('0')", "OnBusinessCreated", "d", i);

		SendAdminAction(playerid, "Empresa ID: %d criada com sucesso.", i);

		return i;
	}

	return -1;
}

this::OnBusinessCreated(bizid)
{
	if(bizid == -1 || !BusinessData[bizid][businessExists])
		return 0;

	BusinessData[bizid][businessID] = cache_insert_id();

	Business_Save(bizid);
	Business_Refresh(bizid);

	return 1;
}

this::RemovePlayerAdmin(playerid, name[])
{
	new rows, query[126];

	cache_get_row_count(rows);

	if(rows)
	{
		mysql_format(this, query, sizeof(query), "UPDATE `players` SET `AdminLevel` = '0' WHERE `Name` = '%e'", name);
		mysql_tquery(this, query);

		if(PlayerIsOnline(name))
		{	
			new idadmin = GetPlayerID(name);
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) foi removido da administração por %s (ID: %d).", name, idadmin, ReturnName(playerid), playerid);
			ResetPlayerAdmin(idadmin);
		}
		else
		{
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: OFF-LINE) foi removido da administração por %s (ID: %d).", name, ReturnName(playerid), playerid);
		}		

		SendAdminAction(playerid, "Você removeu %s da administração do servidor.", name);
	}
	else
	{
		SendWarningMessage(playerid, "Não foi possível localizar o nível administrativo na conta: \"%s\".");
	}

	return 1;
}

public OnPlayerEnterDynamicCP(playerid, STREAMER_TAG_CP checkpointid)
{
	new id = Streamer_GetIntData(STREAMER_TYPE_CP, checkpointid, E_STREAMER_EXTRA_ID);
	
	if(id < MAX_HOUSES && HouseData[id][houseExists] && HouseData[id][houseCP] == checkpointid)
	{	
		if(HouseData[id][houseOwner])
			SendClientMessageEx(playerid, COLOR_GREEN, "Você está no endereço: %s (ID único: %d) pertencente a %s.", HouseData[id][houseAddress], HouseData[id][houseID], HouseData[id][houseOwnerName]);
		else
			SendClientMessageEx(playerid, COLOR_GREEN, "Você está no endereço: %s (ID único: %d) disponível para comprar, valor %s e nível 1.", HouseData[id][houseAddress], HouseData[id][houseID], FormatNumber(HouseData[id][housePrice]));

		if(House_IsOwner(playerid, id))
			SendClientMessage(playerid, COLOR_WHITE, "Comandos: /trancar e /campanhia.");
		else
			SendClientMessage(playerid, COLOR_WHITE, "Comandos: /campainha");
	}
	else if(id < MAX_BUSINESS && BusinessData[id][businessExists] && BusinessData[id][businessCP] == checkpointid)
	{
		if(BusinessData[id][businessOwnerID])
			SendClientMessageEx(playerid, COLOR_GREEN, "Você está na empresa: %s (ID único: %d) pertencente a %s.", BusinessData[id][businessName], BusinessData[id][businessID], BusinessData[id][businessOwnerName]);
		else
			SendClientMessageEx(playerid, COLOR_GREEN, "Você está na empresa: %s (ID único: %d) disponível para comprar, valor %s e nível 1.", BusinessData[id][businessName], BusinessData[id][businessID], FormatNumber(BusinessData[id][businessPrice]));

		if(Business_IsOwner(playerid, id))
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos: /bmenu");

		if(BusinessData[id][businessBuying])
			SendClientMessageEx(playerid, COLOR_WHITE, "Esta empresa está comprando produto: {FFFF00}%s {FFFFFF}({FFFF00}%d {FFFFFF}unidades) por {FFFF00}%s{FFFFFF}/unidade.", Industry_ProductName(BusinessData[id][businessBuyingProduct]), BusinessData[id][businessBuying], FormatNumber(BusinessData[id][businessBuyingPrice]));
	}
	else if(id < MAX_ENTRANCES && EntranceData[id][entranceExists] && EntranceData[id][entranceCP] == checkpointid)
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Você está na entrada: %s (ID único: %d).", EntranceData[id][entranceName], EntranceData[id][entranceID]);
	}
	else if(cp_Dealership == checkpointid)
	{
		GameTextForPlayer(playerid, "~y~Concessionaria~n~~w~/v comprar, upgrade, vender", 5000, 4);
	}
	else if(cp_GarageLSPD == checkpointid)
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Você está na garagem: Los Santos Police Department pertencente a O estado.");
		
		if(GetFactionType(playerid) == FACTION_POLICE)
			SendClientMessage(playerid, COLOR_WHITE, "Comandos: /entrar");
	}
	else if(cp_GarageASGH == checkpointid)
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Você está na garagem: All Saints General Hospital pertencente a O estado.");
		
		if(GetFactionType(playerid) == FACTION_MEDIC)
			SendClientMessage(playerid, COLOR_WHITE, "Comandos: /entrar");
	}

	SetPVarInt(playerid, "InDynamicCP", 1);

	return 1;
}

public OnPlayerLeaveDynamicCP(playerid, STREAMER_TAG_CP checkpointid)
{
	DeletePVar(playerid, "InDynamicCP");
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, STREAMER_TAG_AREA areaid)
{
	if(PlayerData[playerid][pSpectator] != INVALID_PLAYER_ID)
		return 0;

	//Modules
	TollBooth_ExpressWay(playerid, areaid);

	//
	new Float:ppX, Float:ppY, Float:ppZ;
	GetPlayerPos(playerid, ppX, ppY, ppZ);

	if(Area_247Idlewood == areaid)
	{
		if(13.5 <= ppZ <= 15.5)
		{
			PlayerData[playerid][pOWBusiness] = GetBusinessByID(40);
		}		
	}

	if(PlayerData[playerid][pOWBusiness] != -1)
	{
		SendServerMessage(playerid, "Você entrou em uma empresa do tipo: {FFFF00}%s", Business_GetType(PlayerData[playerid][pOWBusiness]));
		SendServerMessage(playerid, "Para comprar algo, aproxime-se do balcão e use: {FF0000}/comprar");
	}

	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, STREAMER_TAG_AREA areaid)
{
	PlayerData[playerid][pOWBusiness] = -1;
	return 1;
}

public Streamer_OnPluginError(error[])
{
	SendAdminMessage(COLOR_YELLOW, "______________________________________");
	SendAdminMessage(COLOR_WARNING, "Streamer ERROR:");
	SendAdminMessage(COLOR_WARNING, "%s", error);
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(PlayerData[playerid][pState] == PLAYER_STATE_WOUNDED || PlayerData[playerid][pState] == PLAYER_STATE_DEAD)
	{
		AC_SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY],  PlayerData[playerid][pPosZ]);
		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
	}

	ACData[playerid][acCTCar] = vehicleid;

	if(!ispassenger)
	{
		ACData[playerid][acCTJack] = true;

		if(VehicleData[vehicleid][vehicleFaction] >= 1 && VehicleData[vehicleid][vehicleFaction] != PlayerData[playerid][pFactionID])
		{
			if(!PlayerData[playerid][pLabel])
			{
				PlayerData[playerid][pLabelError] = CreateDynamic3DTextLabel("Este veículo é de uma facção!\n{FF0000}Você não pode entrar.", COLOR_WHITE, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
				SetTimerEx("OnVehicleTextdraw", 4000, false, "d", playerid);

				PlayerData[playerid][pLabel] = true;
			}

			return ClearAnimations(playerid);
		}
		else if(VehicleData[vehicleid][vehicleJob] >= 1 && VehicleData[vehicleid][vehicleJob] != PlayerData[playerid][pJob])
		{
			if(!PlayerData[playerid][pLabel])
			{
				PlayerData[playerid][pLabelError] = CreateDynamic3DTextLabel("Este veículo é de um emprego!\n{FF0000}Você não pode entrar.", COLOR_WHITE, 0.0, 0.0, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
				SetTimerEx("OnVehicleTextdraw", 4000, false, "d", playerid);

				PlayerData[playerid][pLabel] = true;
			}

			return ClearAnimations(playerid);
		}
	}

	return 1;
}

this::OnVehicleTextdraw(playerid)
{
	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pLabelError]))
		DestroyDynamic3DTextLabel(PlayerData[playerid][pLabelError]);

	PlayerData[playerid][pLabel] = false;

	return 1;
}

this::CarregarATM()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_ATM_MACHINES)
	{
		ATMData[i][atmExists] = true;
		cache_get_value_name_int(i, "atmID", ATMData[i][atmID]);
		cache_get_value_name_float(i, "atmX", ATMData[i][atmPos][0]);
		cache_get_value_name_float(i, "atmY", ATMData[i][atmPos][1]);
		cache_get_value_name_float(i, "atmZ", ATMData[i][atmPos][2]);
		cache_get_value_name_float(i, "atmRX", ATMData[i][atmRPos][0]);
		cache_get_value_name_float(i, "atmRY", ATMData[i][atmRPos][1]);
		cache_get_value_name_float(i, "atmRZ", ATMData[i][atmRPos][2]);
		cache_get_value_name_int(i, "atmInterior", ATMData[i][atmInterior]);
		cache_get_value_name_int(i, "atmWorld", ATMData[i][atmWorld]);
		cache_get_value_name_int(i, "atmMoney", ATMData[i][atmMoney]);
		cache_get_value_name_int(i, "atmRobbed", ATMData[i][atmRobbed]);
		cache_get_value_name_int(i, "atmTime", ATMData[i][atmTime]);

		ATM_Refresh(i);

		Iter_Add(ATM, i);
	}

	if(!rows)
	{
		printf("Server: nenhum caixa eletrônico carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "caixa eletrônico foi carregado" : "caixas eletrônicos foram carregados");
	}

	return 1;
}

this::OnATMCreated(atmid)
{
	if(atmid == -1 || !ATMData[atmid][atmExists])
		return 0;

	ATMData[atmid][atmID] = cache_insert_id();
	ATM_Save(atmid);
	return 1;
}

this::CarregarCameras()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_SECURITY_CAM)
	{
		CameraData[i][cameraExists] = true;

		cache_get_value_name_int(i, "cameraID", CameraData[i][cameraID]);
		cache_get_value_name_float(i, "cameraX", CameraData[i][cameraPos][0]);
		cache_get_value_name_float(i, "cameraY", CameraData[i][cameraPos][1]);
		cache_get_value_name_float(i, "cameraZ", CameraData[i][cameraPos][2]);
		cache_get_value_name_float(i, "cameraRX", CameraData[i][cameraRPos][0]);
		cache_get_value_name_float(i, "cameraRY", CameraData[i][cameraRPos][1]);
		cache_get_value_name_float(i, "cameraRZ", CameraData[i][cameraRPos][2]);
		cache_get_value_name_int(i, "cameraInterior", CameraData[i][cameraInterior]);
		cache_get_value_name_int(i, "cameraWorld", CameraData[i][cameraWorld]);

		Camera_Refresh(i);

		Iter_Add(SecurityCam, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma câmera carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "câmera foi carregada" : "câmeras foram carregadas");
	}

	return 1;
}

this::OnCameraCreated(cameraid)
{
	if(cameraid == -1 || !CameraData[cameraid][cameraExists])
		return 0;

	CameraData[cameraid][cameraID] = cache_insert_id();
	Camera_Save(cameraid);
	return 1;
}

this::Objects_Load()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_OBJECTDATA)
	{
		ObjectData[i][objectExists] = true;

		cache_get_value_name_int(i, "objectModel", ObjectData[i][objectModel]);
		cache_get_value_name_int(i, "objectID", ObjectData[i][objectID]);
		cache_get_value_name_float(i, "objectX", ObjectData[i][objectPos][0]);
		cache_get_value_name_float(i, "objectY", ObjectData[i][objectPos][1]);
		cache_get_value_name_float(i, "objectZ", ObjectData[i][objectPos][2]);
		cache_get_value_name_float(i, "objectRX", ObjectData[i][objectRPos][0]);
		cache_get_value_name_float(i, "objectRY", ObjectData[i][objectRPos][1]);
		cache_get_value_name_float(i, "objectRZ", ObjectData[i][objectRPos][2]);
		cache_get_value_name_int(i, "objectInterior", ObjectData[i][objectInterior]);
		cache_get_value_name_int(i, "objectWorld", ObjectData[i][objectWorld]);

		Object_Refresh(i);

		Iter_Add(Objects, i);
	}

	if(!rows)
	{
		printf("Server: nenhum objeto dinâmico carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "objeto dinâmico foi carregado" : "objetos dinâmicos foram carregados");
	}

	return 1;
}

this::OnObjectCreated(objid)
{
	if(objid == -1 || !ObjectData[objid][objectExists])
		return 0;

	ObjectData[objid][objectID] = cache_insert_id();
	Object_Save(objid);

	return 1;
}

this::Gate_Load()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_GATES)
	{
		GateData[i][gateExists] = true;
		GateData[i][gateOpened] = false;

		cache_get_value_name_int(i, "gateModel", GateData[i][gateModel]);
		cache_get_value_name_int(i, "gateID", GateData[i][gateID]);

		cache_get_value_name_float(i, "gateX", GateData[i][gatePos][0]);
		cache_get_value_name_float(i, "gateY", GateData[i][gatePos][1]);
		cache_get_value_name_float(i, "gateZ", GateData[i][gatePos][2]);
		cache_get_value_name_float(i, "gateRX", GateData[i][gateRPos][0]);
		cache_get_value_name_float(i, "gateRY", GateData[i][gateRPos][1]);
		cache_get_value_name_float(i, "gateRZ", GateData[i][gateRPos][2]);

		cache_get_value_name_float(i, "gateAX", GateData[i][gateAPos][0]);
		cache_get_value_name_float(i, "gateAY", GateData[i][gateAPos][1]);
		cache_get_value_name_float(i, "gateAZ", GateData[i][gateAPos][2]);
		cache_get_value_name_float(i, "gateARX", GateData[i][gateARPos][0]);
		cache_get_value_name_float(i, "gateARY", GateData[i][gateARPos][1]);
		cache_get_value_name_float(i, "gateARZ", GateData[i][gateARPos][2]);

		cache_get_value_name_float(i, "gateSpeed", GateData[i][gateSpeed]);

		cache_get_value_name_int(i, "gateInterior", GateData[i][gateInterior]);
		cache_get_value_name_int(i, "gateWorld", GateData[i][gateWorld]);
		cache_get_value_name_int(i, "gatePassword", GateData[i][gatePassword]);

		Gate_Refresh(i);

		Iter_Add(Gates, i);
	}

	if(!rows)
	{
		printf("Server: nenhum portão carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "portão foi carregado" : "portões foram carregados");
	}
	return 1;
}

this::OnGateCreated(gateid)
{
	if(gateid == -1 || !GateData[gateid][gateExists])
		return 0;

	GateData[gateid][gateID] = cache_insert_id();
	Gate_Save(gateid);

	return 1;
}

this::CarregarRadar()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_SPEED_CAMERAS)
	{
		SpeedData[i][speedExists] = true;
		cache_get_value_name_int(i, "speedID", SpeedData[i][speedID]);
		cache_get_value_name_float(i, "speedX", SpeedData[i][speedPos][0]);
		cache_get_value_name_float(i, "speedY", SpeedData[i][speedPos][1]);
		cache_get_value_name_float(i, "speedZ", SpeedData[i][speedPos][2]);
		cache_get_value_name_float(i, "speedAngle", SpeedData[i][speedPos][3]);
		cache_get_value_name_float(i, "speedLimit", SpeedData[i][speedLimit]);
		cache_get_value_name_float(i, "speedRange", SpeedData[i][speedRange]);

		Speed_Refresh(i);

		Iter_Add(SpeedCameras, i);
	}

	if(!rows)
	{
		printf("Server: nenhum radar carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "radar foi carregado" : "radares foram carregados");
	}

	return 1;
}

this::OnSpeedCreated(speedid)
{
	if(speedid == -1 || !SpeedData[speedid][speedExists])
		return 0;

	SpeedData[speedid][speedID] = cache_insert_id();
	Speed_Save(speedid);
	return 1;
}

this::OnTicketCreated(playerid, ticketid)
{
	TicketData[playerid][ticketid][ticketID] = cache_insert_id();
	return 1;
}

this::HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

this::Faction_Load()
{
	new rows, str[32];

	cache_get_row_count(rows);

	new spawn[64], lockers[128];

	for(new i = 0; i < rows; i++) if(i < MAX_FACTIONS)
	{
		FactionData[i][factionExists] = true;
		cache_get_value_name_int(i, "factionID", FactionData[i][factionID]);
		cache_get_value_name(i, "factionName", FactionData[i][factionName], 64);
		cache_get_value_name_int(i, "factionColor", FactionData[i][factionColor]);
		cache_get_value_name_int(i, "factionType", FactionData[i][factionType]);
		cache_get_value_name_int(i, "factionRanks", FactionData[i][factionRanks]);

		//Spawning
		cache_get_value_name(i, "Spawn", spawn, 64);
		sscanf(spawn, "p<|>fffddd", FactionData[i][factionSpawn][0], FactionData[i][factionSpawn][1], FactionData[i][factionSpawn][2], FactionData[i][factionSpawnIntVW][0], FactionData[i][factionSpawnIntVW][1], FactionData[i][factionSpawnIntVW][2]);
		//Lockers
		cache_get_value_name(i, "Locker", lockers, 128);
		sscanf(lockers, "p<|>ffffffdd", FactionData[i][factionLockerPos][0], FactionData[i][factionLockerPos][1], FactionData[i][factionLockerPos][2], FactionData[i][factionLockerPos][3], FactionData[i][factionLockerPos][4], FactionData[i][factionLockerPos][5], FactionData[i][factionLockerIntVW][0], FactionData[i][factionLockerIntVW][1]);
		
		for(new j = 0; j < 28; j++)
		{
			format(str, sizeof(str), "factionSkin%d", j + 1);
			cache_get_value_name_int(i, str, FactionData[i][factionSkins][j]);
		}
		for(new j = 0; j < 10; j++)
		{
			format(str, sizeof(str), "factionWeapon%d", j + 1);
			cache_get_value_name_int(i, str, FactionData[i][factionWeapons][j]);
			format(str, sizeof(str), "factionAmmo%d", j + 1);
			cache_get_value_name_int(i, str, FactionData[i][factionAmmo][j]);
		}
		for(new j = 0; j < 15; j++)
		{
			format(str, sizeof(str), "factionRank%d", j + 1);
			cache_get_value_name(i, str, FactionRanks[i][j], 32);

			format(str, sizeof(str), "factionPaycheck%d", j + 1);
			cache_get_value_name_int(i, str, FactionData[i][factionPaycheck][j]);
		}

		Faction_RefreshLocker(i);

		Iter_Add(Factions, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma facção carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "facção foi carregada" : "facções foram carregadas");
	}

	return 1;
}

this::OnFactionCreated(factionid)
{
	if(factionid == -1 || !FactionData[factionid][factionExists])
		return 0;

	FactionData[factionid][factionID] = cache_insert_id();

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);
	return 1;
}

this::OnFactionListSearch(playerid, fid)
{
	new rows, tmpName[MAX_PLAYER_NAME], tmpID, tmpRank;

	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Nenhum membro encontrado para essa facção.");

	for(new j = 0; j < rows; j++)
	{
		cache_get_value_name_int(j, "FactionRank", tmpRank);
		cache_get_value_name(j, "Name", tmpName, 24);
		cache_get_value_name_int(j, "UserID", tmpID);

		new targetID = -1;

		foreach(new i : Player) if(IsPlayerConnected(i) && PlayerData[i][pLogged] && PlayerData[i][pFaction] == fid && PlayerData[i][pID] == tmpID)
			targetID = i;

		if(targetID != -1) SendClientMessageEx(playerid, COLOR_WHITE, "(ID: %d) %s | Rank: %s", targetID, ReturnName(targetID, 0), Faction_GetRank(targetID));
		if(targetID == -1) SendClientMessageEx(playerid, 0xFF6347FF, "OFFLINE: {FFFFFF}%s | Rank: %s", tmpName, FactionRanks[fid][tmpRank - 1]);
	}
	return 1;
}

this::RepairCar(playerid, userid, vehicleid)
{
	if(PlayerData[playerid][pJob] != EMPREGO_Mecanico || !IsPlayerNearHood(playerid, vehicleid))
		return 0;

	AC_RepairVehicle(vehicleid);
	AC_SetVehicleHealth(vehicleid, VehicleData[vehicleid][vehicleMaxHealth]);
	GameTextForPlayer(playerid, " ", 1, 3);

	Daily_Update(playerid, 2);

	SetHoodStatus(vehicleid, false);

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s repara com sucesso o veículo.", ReturnName(playerid, 0));
	return 1;
}

this::RepairEngineCar(playerid, userid, vehicleid)
{
	if(PlayerData[playerid][pJob] != EMPREGO_Mecanico || !IsPlayerNearHood(playerid, vehicleid))
		return 0;

	GameTextForPlayer(playerid, " ", 1, 3);
	VehicleData[vehicleid][vehicleEngine] = 100.0;

	Daily_Update(playerid, 2);

	SetHoodStatus(vehicleid, false);

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s repara com sucesso o motor do veículo.", ReturnName(playerid, 0));
	return 1;
}

this::OnJailAccount(playerid, user[], time, reason[])
{
	if(cache_affected_rows())
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Aplicando o ajailoff na conta de %s por %d minutos...", user, time);
		foreach(new i : Player) if(IsPlayerConnected(i) && PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s prendeu off-line %s por %d minuto(s) pelo motivo: %s", ReturnName(playerid, 0), user, time, reason);
		}
		SendAdminAction(playerid, "Você imprisionou \"%s\" por %d minuto(s) pelo motivo: %s", user, time, reason);
		new userid = ReturnIDByName(user);
		Log_Write(userid, "[%s] %s (uid: %d) prendeu o jogador off-line %s (uid: %d) por %d minutos pelo motivo: %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], user, userid, time, reason);
	}
	else
	{
		SendWarningMessage(playerid, "Não foi possível finalizar o Ajailoff em: \"%s\".", user);
	}


	return 1;
}

this::HidePlayerFooter(playerid) 
{

	if (!PlayerData[playerid][pShowFooter])
		return 0;

	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraw][0]);
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(!PlayerData[playerid][pEditingMode])
		return 1;

	new listitem = PlayerData[playerid][pSelectedSlot],
	query[500],
	houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		switch(PlayerData[playerid][pEditingMode])
		{
			case 1:
			{
				if(response == EDIT_RESPONSE_CANCEL)
				{
					DestroyDynamicObject(objectid);
					PlayerData[playerid][pEditingMode] = 0;
					PlayerData[playerid][pSelectedSlot] = 0;
					PlayerData[playerid][pFurnitureObject] = -1;
					SendWarningMessage(playerid, "Você cancelou a compra da mobília selecionada.");
					HideBuyInfo(playerid);

					if(!GetPVarInt(playerid, "CloningFurniture"))
					{
						new count;

						sz_MiscString[0] = 0;

						for(new xd, xs = sizeof(g_aFurnitures); xd < xs; xd++) if(!strcmp(PlayerData[playerid][pFurnitureSubCategory], g_aFurnitures[xd][ftrSubcategory], true))
						{
							format(sz_MiscString, sizeof(sz_MiscString), "%s%d\t~w~%s %s%s\n", sz_MiscString, g_aFurnitures[xd][ftrModelID], FixASCII(g_aFurnitures[xd][ftrName]), GetScriptedMoney(playerid) >= g_aFurnitures[xd][ftrPrice] ? "~g~" : "~r~", FormatNumber(g_aFurnitures[xd][ftrPrice]));
							PlayerData[playerid][pBuyFurniture][count++] = xd;
						}

						ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PREVIEW_MODEL, FixASCII(PlayerData[playerid][pFurnitureSubCategory]), sz_MiscString, "Selecionar", "<<");
					}
					else
					{
						DeletePVar(playerid, "CloningFurniture");
					}							
				}
				else if(response == EDIT_RESPONSE_FINAL)
				{
					if(GetScriptedMoney(playerid) < g_aFurnitures[listitem][ftrPrice])
					{
						Dialog_Show(playerid, FurnitureCategory, DIALOG_STYLE_LIST, "Comprar mobília", DIALOG_BUY_FURNITURE, "Selecionar", "<<");
						SendClientMessageEx(playerid, COLOR_WARNING, "Você não tem %s para comprar essa mobília.", FormatNumber(g_aFurnitures[listitem][ftrPrice]));
						return 1;
					}

					SetDynamicObjectPos(objectid, x, y, z);
					SetDynamicObjectRot(objectid, rx, ry, rz);

					GiveScriptedMoney(playerid, -g_aFurnitures[listitem][ftrPrice]);

					mysql_format(this, query, sizeof(query), "INSERT INTO `mobilias` (ID, furnitureX, furnitureY, furnitureZ, furnitureRotX, furnitureRotY, furnitureRotZ, furnitureInterior, furnitureVW, furnitureOriginalName, furniturePrice, furnitureModel, furnitureObject) VALUES ('%d', '%f', '%f', '%f', '%f', '%f', '%f','%d', '%d', '%e', '%d', '%d', '%d')",
						HouseData[houseid][houseID],
						x, y, z,
						rx, ry, rz,
						GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid),
						g_aFurnitures[listitem][ftrName],
						g_aFurnitures[listitem][ftrPrice],
						g_aFurnitures[listitem][ftrModelID],
						objectid);

					mysql_tquery(this, query, "OnFurnitureCreated", "dddd", playerid, objectid, listitem, houseid);

					SendGreenMessage(playerid, "Você comprou a mobília \"%s\" por %s.", g_aFurnitures[listitem][ftrName], FormatNumber(g_aFurnitures[listitem][ftrPrice]));
					HideBuyInfo(playerid);

					Daily_Update(playerid, 7);

					PlayerData[playerid][pEditingMode] = 0;
					PlayerData[playerid][pSelectedSlot] = 0;
					PlayerData[playerid][pFurnitureObject] = -1;
				}
				else return 1;
			}
			case 2:
			{
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

				if(response == EDIT_RESPONSE_CANCEL)
				{
					SetDynamicObjectPos(objectid, FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ]);
					SetDynamicObjectRot(objectid, FurnitureData[furnitureRotX], FurnitureData[furnitureRotY], FurnitureData[furnitureRotZ]);

					SendWarningMessage(playerid, "Nenhuma modificação feita na mobília selecionada.");
				
					PlayerData[playerid][pEditingMode] = 0;
					PlayerData[playerid][pSelectedSlot] = 0;
					PlayerData[playerid][pFurnitureObject] = -1;
				}
				else if(response == EDIT_RESPONSE_FINAL)
				{
					SetDynamicObjectPos(objectid, x, y, z);
					SetDynamicObjectRot(objectid, rx, ry, rz);

					FurnitureData[furnitureX] = x;
					FurnitureData[furnitureY] = y;
					FurnitureData[furnitureZ] = z;
					FurnitureData[furnitureRotX] = rx;
					FurnitureData[furnitureRotY] = ry;
					FurnitureData[furnitureRotZ] = rz;

					SendGreenMessage(playerid, "Posição da mobília \"%s\" alterada com sucesso.", FurnitureData[furnitureName]);

					mysql_format(this, query, sizeof(query), "UPDATE `mobilias` SET `furnitureX` = '%f', `furnitureY` = '%f', `furnitureZ` = '%f', `furnitureRotX` = '%f', `furnitureRotY` = '%f', `furnitureRotZ` = '%f' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
						FurnitureData[furnitureX],
						FurnitureData[furnitureY],
						FurnitureData[furnitureZ],
						FurnitureData[furnitureRotX],
						FurnitureData[furnitureRotY],
						FurnitureData[furnitureRotZ],
						HouseData[houseid][houseID],
						FurnitureData[furnitureID]);

					mysql_tquery(this, query);

					Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

					PlayerData[playerid][pEditingMode] = 0;
					PlayerData[playerid][pSelectedSlot] = 0;
					PlayerData[playerid][pFurnitureObject] = -1;
				}
				else return 1;
			}
			case 11:
			{
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);
				
				if(response == EDIT_RESPONSE_CANCEL)
				{
					SetDynamicObjectPos(objectid, FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ]);
					SetDynamicObjectRot(objectid, FurnitureData[furnitureRotX], FurnitureData[furnitureRotY], FurnitureData[furnitureRotZ]);

					SendWarningMessage(playerid, "Nenhuma modificação feita na rotação da porta.");

					PlayerData[playerid][pEditingMode] = 0;
					PlayerData[playerid][pSelectedSlot] = 0;
					PlayerData[playerid][pFurnitureObject] = -1;
				}
				else if(response == EDIT_RESPONSE_FINAL)	
				{
					SetDynamicObjectPos(objectid, FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ]);
					SetDynamicObjectRot(objectid, FurnitureData[furnitureRotX], FurnitureData[furnitureRotY], FurnitureData[furnitureRotZ]);

					FurnitureData[furnitureDoorZ] = rz;

					SendGreenMessage(playerid, "Posição aberta da \"%s\" alterada com sucesso.", FurnitureData[furnitureName]);

					mysql_format(this, query, sizeof(query), "UPDATE mobilias SET furnitureDoorZ = '%f' WHERE furnitureID = '%d'", FurnitureData[furnitureDoorZ], FurnitureData[furnitureID]);
					mysql_tquery(this, query);

					Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

					PlayerData[playerid][pEditingMode] = 0;
					PlayerData[playerid][pSelectedSlot] = 0;
					PlayerData[playerid][pFurnitureObject] = -1;
				}
			}
		}
	}

	switch(PlayerData[playerid][pEditingMode])
	{
		case 3:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SetDynamicObjectPos(objectid, ObjectData[listitem][objectPos][0], ObjectData[listitem][objectPos][1], ObjectData[listitem][objectPos][2]);
				SetDynamicObjectRot(objectid, ObjectData[listitem][objectRPos][0], ObjectData[listitem][objectRPos][1], ObjectData[listitem][objectRPos][2]);

				SendWarningMessage(playerid, "Nenhum modificação feita no objeto selecionado.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
				ObjectData[listitem][objectEditing] = false;

				foreach(new i : Player)
				{
					if(MostrandoTextsObjeto[i])
					{
						HideObjectInfo(i);
						ShowObjectInfo(i);
					}
				}
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);

				ObjectData[listitem][objectPos][0] = x;
				ObjectData[listitem][objectPos][1] = y;
				ObjectData[listitem][objectPos][2] = z;
				ObjectData[listitem][objectRPos][0] = rx;
				ObjectData[listitem][objectRPos][1] = ry;
				ObjectData[listitem][objectRPos][2] = rz;

				ObjectData[listitem][objectEditing] = false;

				Object_Save(listitem);

				SendAdminAction(playerid, "Posição do objeto alterada com sucesso.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;

				foreach(new i : Player)
				{
					if(MostrandoTextsObjeto[i])
					{
						HideObjectInfo(i);
						ShowObjectInfo(i);
					}
				}						
			}
		}
		case 4:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SetDynamicObjectPos(objectid, RoadData[listitem][roadPos][0], RoadData[listitem][roadPos][1], RoadData[listitem][roadPos][2]);
				SetDynamicObjectRot(objectid, RoadData[listitem][roadRPos][0], RoadData[listitem][roadRPos][1], RoadData[listitem][roadRPos][2]);

				SendWarningMessage(playerid, "Nenhuma modificação feita no objeto selecionado.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;

			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);

				RoadData[listitem][roadPos][0] = x;
				RoadData[listitem][roadPos][1] = y;
				RoadData[listitem][roadPos][2] = z;
				RoadData[listitem][roadRPos][0] = rx;
				RoadData[listitem][roadRPos][1] = ry;
				RoadData[listitem][roadRPos][2] = rz;

				SendAdminAction(playerid, "Posição do objeto alterada com sucesso.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;						
			}
		}
		case 5:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SetDynamicObjectPos(objectid, CameraData[listitem][cameraPos][0], CameraData[listitem][cameraPos][1], CameraData[listitem][cameraPos][2]);
				SetDynamicObjectRot(objectid, CameraData[listitem][cameraRPos][0], CameraData[listitem][cameraRPos][1], CameraData[listitem][cameraRPos][2]);

				SendWarningMessage(playerid, "Nenhuma modificação feita no objeto selecionado.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;

			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);

				CameraData[listitem][cameraPos][0] = x;
				CameraData[listitem][cameraPos][1] = y;
				CameraData[listitem][cameraPos][2] = z;
				CameraData[listitem][cameraRPos][0] = rx;
				CameraData[listitem][cameraRPos][1] = ry;
				CameraData[listitem][cameraRPos][2] = rz;

				Camera_Save(listitem);

				SendAdminAction(playerid, "Posição do objeto alterada com sucesso.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;						
			}
		}
		case 6:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SetDynamicObjectPos(objectid, ATMData[listitem][atmPos][0], ATMData[listitem][atmPos][1], ATMData[listitem][atmPos][2]);
				SetDynamicObjectRot(objectid, ATMData[listitem][atmRPos][0], ATMData[listitem][atmRPos][1], ATMData[listitem][atmRPos][2]);

				SendWarningMessage(playerid, "Nenhuma modificação feita no objeto selecionado.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;

			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);

				ATMData[listitem][atmPos][0] = x;
				ATMData[listitem][atmPos][1] = y;
				ATMData[listitem][atmPos][2] = z;
				ATMData[listitem][atmRPos][0] = rx;
				ATMData[listitem][atmRPos][1] = ry;
				ATMData[listitem][atmRPos][2] = rz;

				ATM_Save(listitem);

				SendAdminAction(playerid, "Posição do objeto alterada com sucesso.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;						
			}
		}
		case 7:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação do objeto e ele foi destruído automaticamente.");

				Gate_Delete(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);

				GateData[listitem][gatePos][0] = x;
				GateData[listitem][gatePos][1] = y;
				GateData[listitem][gatePos][2] = z;
				GateData[listitem][gateRPos][0] = rx;
				GateData[listitem][gateRPos][1] = ry;
				GateData[listitem][gateRPos][2] = rz;

				SendWarningMessage(playerid, "Agora coloque a posição em que o objeto ficará quando aberto.");

				PlayerData[playerid][pEditingMode] = 8;

				EditDynamicObject(playerid, objectid);
			}
		}
		case 8:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação do objeto e ele foi destruído automaticamente.");

				Gate_Delete(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);

				GateData[listitem][gateAPos][0] = x;
				GateData[listitem][gateAPos][1] = y;
				GateData[listitem][gateAPos][2] = z;
				GateData[listitem][gateARPos][0] = rx;
				GateData[listitem][gateARPos][1] = ry;
				GateData[listitem][gateARPos][2] = rz;

				GateData[listitem][gateOpened] = true;

				Gate_Save(listitem);

				SendAdminAction(playerid, "Portão criado com sucesso. Vejas as opções de modificação em /editarportao.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
		case 9:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação do objeto e ele foi destruído automaticamente.");
				FactionData[listitem][factionLockerPos][0] = 0.0;
				FactionData[listitem][factionLockerPos][1] = 0.0;
				FactionData[listitem][factionLockerPos][2] = 0.0;
				FactionData[listitem][factionLockerPos][3] = 0.0;
				FactionData[listitem][factionLockerPos][4] = 0.0;
				FactionData[listitem][factionLockerPos][5] = 0.0;

				FactionData[listitem][factionLockerIntVW][0] = 0;
				FactionData[listitem][factionLockerIntVW][1] = 0;

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;

				DestroyDynamicObject(objectid);
				Faction_Save(listitem);
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);

				FactionData[listitem][factionLockerPos][0] = x;
				FactionData[listitem][factionLockerPos][1] = y;
				FactionData[listitem][factionLockerPos][2] = z;
				FactionData[listitem][factionLockerPos][3] = rx;
				FactionData[listitem][factionLockerPos][4] = ry;
				FactionData[listitem][factionLockerPos][5] = rz;

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;

				Faction_RefreshLocker(listitem);
				Faction_Save(listitem);

				SendAdminAction(playerid, "Locker criado com sucesso.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
		case 10:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação do objeto e ele foi destruído automaticamente.");

				Vault_Delete(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				VaultData[listitem][vaultPos][0] = x;
				VaultData[listitem][vaultPos][1] = y;
				VaultData[listitem][vaultPos][2] = z;

				VaultData[listitem][vaultRPos][0] = rx;
				VaultData[listitem][vaultRPos][1] = ry;
				VaultData[listitem][vaultRPos][2] = rz;

				Vault_Refresh(listitem);
				Vault_Save(listitem);

				SendAdminAction(playerid, "Cofre criado com sucesso.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
		//11 em uso
		case 12:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação do objeto e ele foi destruído automaticamente.");

				Pump_Delete(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				PumpData[listitem][pumpX] = x;
				PumpData[listitem][pumpY] = y;
				PumpData[listitem][pumpZ] = z;

				PumpData[listitem][pumpRX] = rx;
				PumpData[listitem][pumpRY] = ry;
				PumpData[listitem][pumpRZ] = rz;

				Pump_Refresh(listitem);
				Pump_Save(listitem);

				SendAdminAction(playerid, "Bomba de combustível (pump) criado com sucesso.");

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
		case 13:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação do objeto e ele foi destruído automaticamente.");

				TrashCan_Delete(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				TrashData[listitem][trashPos][0] = x;
				TrashData[listitem][trashPos][1] = y;
				TrashData[listitem][trashPos][2] = z;

				TrashData[listitem][trashRot][0] = rx;
				TrashData[listitem][trashRot][1] = ry;
				TrashData[listitem][trashRot][2] = rz;

				TrashCan_Refresh(listitem);
				TrashCan_Save(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
		case 14:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação do objeto e ele foi destruído automaticamente.");

				Chopshop_Delete(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				ChopshopData[listitem][chopshopX] = x;
				ChopshopData[listitem][chopshopY] = y;
				ChopshopData[listitem][chopshopZ] = z;

				ChopshopData[listitem][chopshopRX] = rx;
				ChopshopData[listitem][chopshopRY] = ry;
				ChopshopData[listitem][chopshopRZ] = rz;

				Chopshop_Refresh(listitem);
				Chopshop_Save(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
		case 15:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação do bueiro e ele foi destruído automáticamente.");

				Sewer_Delete(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				SewerData[listitem][sewerX] = x;
				SewerData[listitem][sewerY] = y;
				SewerData[listitem][sewerZ] = z;

				SewerData[listitem][sewerRX] = rx;
				SewerData[listitem][sewerRY] = ry;
				SewerData[listitem][sewerRZ] = rz;

				Sewer_Refresh(listitem);
				Sewer_Save(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
		case 16:
		{
			if(response == EDIT_RESPONSE_CANCEL)
			{
				SendWarningMessage(playerid, "Você cancelou a criação da torre de celular e ela foi destruída automáticamente.");

				Tower_Delete(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
			else if(response == EDIT_RESPONSE_FINAL)
			{
				TowerData[listitem][towerX] = x;
				TowerData[listitem][towerY] = y;
				TowerData[listitem][towerZ] = z;

				TowerData[listitem][towerRX] = rx;
				TowerData[listitem][towerRY] = ry;
				TowerData[listitem][towerRZ] = rz;

				Tower_Refresh(listitem);
				Tower_Save(listitem);

				PlayerData[playerid][pEditingMode] = 0;
				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
	}

	return 1;
}

this::OnFurnitureCreated(playerid, objectid, listitem, houseid)
{
	GetDynamicObjectPos(objectid, FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ]);
	GetDynamicObjectRot(objectid, FurnitureData[furnitureRotX], FurnitureData[furnitureRotY], FurnitureData[furnitureRotZ]);

	FurnitureData[furnitureID] = cache_insert_id();
	FurnitureData[furnitureHouse] = HouseData[houseid][houseID];
	format(FurnitureData[furnitureOriginalName], 128, g_aFurnitures[listitem][ftrName]);
	FurnitureData[furnitureModel] = g_aFurnitures[listitem][ftrModelID];
	FurnitureData[furniturePrice] = g_aFurnitures[listitem][ftrPrice];	

	if(GetPVarInt(playerid, "CloningFurniture"))
	{
		new query[65], furniturename[128];

		GetPVarString(playerid, "CloneFurnitureName", furniturename, 128);
		format(FurnitureData[furnitureName], 128, furniturename);

		mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", GetPVarInt(playerid, "CloningFurniture"));
		mysql_tquery(this, query, "Furniture_CloneMaterials", "ddd", playerid, true, objectid);
		
		DeletePVar(playerid, "CloningFurniture");
	}
	else
	{
		format(FurnitureData[furnitureName], 128, g_aFurnitures[listitem][ftrName]);
	}

	new query[195];
	mysql_format(this, query, sizeof(query), "UPDATE mobilias SET furnitureName = '%e' WHERE furnitureID = '%d'", FurnitureData[furnitureName], FurnitureData[furnitureID]);
	mysql_tquery(this, query);

	Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);
	PlayerData[playerid][pSelectedSlot] = objectid;
	Furniture_ShowOptions(playerid);

	return 1;
}

this::OnPlayerVirtualWorldChange(playerid, newworld, oldworld)
{
	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
	{
		DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);
	}

	PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel("Loading name...", COLOR_RP2, 0.0, 0.0, 0.15, 15.0, playerid, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid));

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetPVarInt(playerid, "LoadVehicleVW", 1);
	}

	new vehicleid = GetPlayerVehicleID(playerid);

	if(VehicleData[vehicleid][vehicleCallsign])
	{
		DestroyDynamic3DTextLabel(VehicleData[vehicleid][vehicleCallsignLabel]);
		VehicleData[vehicleid][vehicleCallsign] = false;
	}

	foreach(new i : Player) if(PlayerData[i][pSpectator] == playerid && !GetPVarInt(i, "UpdatingSpectate"))
	{
		SetPVarInt(i, "UpdatingSpectate", 1);
		//SendServerMessage(i, "Atualizando informações do modo spectator, aguarde...");
		ShowPlayerFooter(i, "Atualizando informações do modo spectate", 1500);
		SetTimerEx("SpectateUpdate", 1500, false, "dd", i, playerid);
	}

	if(!PlayerData[playerid][pJustLoggedIn])
	{
		SetPlayerFreezed(playerid, true);
		ShowPlayerFooter(playerid, "~y~Carregando...", GetPlayerPing(playerid) * 17); 
		KillTimer(PlayerData[playerid][pFreezeTimer]);	
		PlayerData[playerid][pFreezeTimer] = SetTimerEx("LoadAnotherVW", GetPlayerPing(playerid) * 17, false, "d", playerid);
	}

	return 1;
}

this::LoadAnotherVW(playerid)
{
	DeletePVar(playerid, "LoadVehicleVW");
	SetPlayerFreezed(playerid, false);
	return 1;
}

this::_100mstimer()
{
	new update_vw;

	foreach(new playerid : Player) if(IsPlayerConnected(playerid))
	{
		update_vw = GetPlayerVirtualWorld(playerid);
		if(update_vw != VW_Player_Update[playerid])
		{
			OnPlayerVirtualWorldChange(playerid, update_vw, VW_Player_Update[playerid]);
			VW_Player_Update[playerid] = update_vw;
		}
	}

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(new i : Player) if(PlayerData[i][pSpectator] == playerid && !GetPVarInt(i, "UpdatingSpectate"))
	{
		SetPVarInt(i, "UpdatingSpectate", 1);
		//SendServerMessage(i, "Atualizando dados do modo spectating, aguarde...");
		ShowPlayerFooter(i, "Atualizando informações do modo spectate", 1500);
		SetTimerEx("SpectateUpdate", 1500, false, "dd", i, playerid);
	}

	return 1;
}

this::DragUpdate(playerid, targetid)
{
	if(PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
		new Float:fX, Float:fY, Float:fZ, Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 1.5 * floatsin(-fAngle, degrees);
		fY -= 1.5 * floatcos(-fAngle, degrees);

		AC_SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
		PlayerData[targetid][pEntrance] = PlayerData[playerid][pEntrance];
		PlayerData[targetid][pHouse] = PlayerData[playerid][pHouse];
		PlayerData[targetid][pBusiness] = PlayerData[playerid][pBusiness];
		PlayerData[targetid][pComplex] = PlayerData[playerid][pComplex];
	}
	return 1;
}

this::ArrombarPortaCasa(playerid, id)
{
	if(GetFactionType(playerid) != FACTION_POLICE || House_Nearest(playerid) != id)
		return 0;

	new randomn = random(6);

	switch(randomn)
	{
		case 0..2:
		{
			ShowPlayerFooter(playerid, "A tentativa de arrombar a porta ~r~falhou.");
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s não consegue arrombar a porta da casa.", ReturnName(playerid, 0));
		}
		default:
		{
			HouseData[id][houseLocked] = false;
			House_Save(id);

			ShowPlayerFooter(playerid, "Aperte ~y~'F' ~w~para entrar nesta casa.");
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s consegue arrombar a porta da casa.", ReturnName(playerid, 0));
		}
	}

	DeletePVar(playerid, "ArrombarPorta");
	HouseData[id][houseBreakDoor] = false;

	return 1;
}

this::OnCarStorageAdd(carid, itemid)
{
	CarStorage[carid][itemid][cItemID] = cache_insert_id();
	return 1;
}

this::Arrest_Load()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_ARREST_POINTS)
	{
		ArrestData[i][arrestExists] = true;

		cache_get_value_name_int(i, "arrestID", ArrestData[i][arrestID]);
		cache_get_value_name_float(i, "arrestX", ArrestData[i][arrestPos][0]);
		cache_get_value_name_float(i, "arrestY", ArrestData[i][arrestPos][1]);
		cache_get_value_name_float(i, "arrestZ", ArrestData[i][arrestPos][2]);
		cache_get_value_name_int(i, "arrestInterior", ArrestData[i][arrestInterior]);
		cache_get_value_name_int(i, "arrestWorld", ArrestData[i][arrestWorld]);
		cache_get_value_name_int(i, "arrestType", ArrestData[i][arrestType]);

		Arrest_Refresh(i);

		Iter_Add(Arrests, i);
	}

	if(!rows)
	{
		printf("Server: nenhum ponto de prisão carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "ponto de prisão foi carregado" : "pontos de prisão foram carregados");
	}

	return 1;
}

this::OnArrestCreated(arrestid)
{
	if(arrestid == -1 || !ArrestData[arrestid][arrestExists])
		return 0;

	ArrestData[arrestid][arrestID] = cache_insert_id();
	Arrest_Save(arrestid);

	return 1;
}

this::GOV_Load()
{
	new rows;

	cache_get_row_count(rows);

	if(rows)
		cache_get_value_name_int(0, "active", gov_TaxVault);

	return 1;
}

this::OnVaultCreated(vaultid)
{
	if(vaultid == -1 || !VaultData[vaultid][vaultExists])
		return 0;

	VaultData[vaultid][vaultID] = cache_insert_id();
	Vault_Save(vaultid);

	return 1;
}

this::Vault_Load()
{
	new rows, drug_string[50], weapon_string[200];

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_VAULT)
	{
		VaultData[i][vaultExists] = true;

		cache_get_value_name_int(i, "cofreID", VaultData[i][vaultID]);
		cache_get_value_name_int(i, "ID", VaultData[i][vaultFactionID]);
		cache_get_value_name_float(i, "cofreX", VaultData[i][vaultPos][0]);
		cache_get_value_name_float(i, "cofreY", VaultData[i][vaultPos][1]);
		cache_get_value_name_float(i, "cofreZ", VaultData[i][vaultPos][2]);
		cache_get_value_name_float(i, "cofreRX", VaultData[i][vaultRPos][0]);
		cache_get_value_name_float(i, "cofreRY", VaultData[i][vaultRPos][1]);
		cache_get_value_name_float(i, "cofreRZ", VaultData[i][vaultRPos][2]);
		cache_get_value_name_int(i, "cofreInterior", VaultData[i][vaultInterior]);
		cache_get_value_name_int(i, "cofreWorld", VaultData[i][vaultWorld]);
		cache_get_value_name_int(i, "cofreDinheiro", VaultData[i][vaultMoney]);
		
		cache_get_value_name(i, "cofreDrogas", drug_string, 50);
		sscanf(drug_string, "p<|>ddd", VaultData[i][vaultMarijuana], VaultData[i][vaultCocaine], VaultData[i][vaultLSD]);

		cache_get_value_name(i, "cofreArmas", weapon_string, 200);
		sscanf(weapon_string, "p<|>dddddddddddddddddddddddddddddddddddddddd",
			VaultData[i][vaultWeapon][0], VaultData[i][vaultAmmo][0],
			VaultData[i][vaultWeapon][1], VaultData[i][vaultAmmo][1],
			VaultData[i][vaultWeapon][2], VaultData[i][vaultAmmo][2],
			VaultData[i][vaultWeapon][3], VaultData[i][vaultAmmo][3],
			VaultData[i][vaultWeapon][4], VaultData[i][vaultAmmo][4],
			VaultData[i][vaultWeapon][5], VaultData[i][vaultAmmo][5],
			VaultData[i][vaultWeapon][6], VaultData[i][vaultAmmo][6],
			VaultData[i][vaultWeapon][7], VaultData[i][vaultAmmo][7],
			VaultData[i][vaultWeapon][8], VaultData[i][vaultAmmo][8],
			VaultData[i][vaultWeapon][9], VaultData[i][vaultAmmo][9],
			VaultData[i][vaultWeapon][10], VaultData[i][vaultAmmo][10],
			VaultData[i][vaultWeapon][11], VaultData[i][vaultAmmo][11],
			VaultData[i][vaultWeapon][12], VaultData[i][vaultAmmo][12],
			VaultData[i][vaultWeapon][13], VaultData[i][vaultAmmo][13],
			VaultData[i][vaultWeapon][14], VaultData[i][vaultAmmo][14],
			VaultData[i][vaultWeapon][15], VaultData[i][vaultAmmo][15],
			VaultData[i][vaultWeapon][16], VaultData[i][vaultAmmo][16],
			VaultData[i][vaultWeapon][17], VaultData[i][vaultAmmo][17],
			VaultData[i][vaultWeapon][18], VaultData[i][vaultAmmo][18],
			VaultData[i][vaultWeapon][19], VaultData[i][vaultAmmo][19]);

		Vault_Refresh(i);

		Iter_Add(Vault, i);
	}

	if(!rows)
	{
		printf("Server: nenhum cofre carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "cofre foi carregado" : "cofres foram carregados");
	}

	return 1;
}

this::OnWHCreated(whid)
{
	if(whid == -1 || !WhData[whid][whExists])
		return 0;

	WhData[whid][whID] = cache_insert_id();
	WH_Save(whid);

	return 1;
}

this::WH_Load()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_WH)
	{
		WhData[i][whExists] = true;

		cache_get_value_name_int(i, "whID", WhData[i][whID]);
		cache_get_value_name_int(i, "ID", WhData[i][whFactionID]);
		cache_get_value_name_int(i, "whGunparts", WhData[i][whGunparts]);
		cache_get_value_name_float(i, "whX", WhData[i][whPos][0]);
		cache_get_value_name_float(i, "whY", WhData[i][whPos][1]);
		cache_get_value_name_float(i, "whZ", WhData[i][whPos][2]);
		cache_get_value_name_int(i, "whInterior", WhData[i][whInterior]);
		cache_get_value_name_int(i, "whWorld", WhData[i][whWorld]);

		WH_Refresh(i);

		Iter_Add(WeaponHouse, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma weaponhouse carregad da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "weaponhouse foi carregado" : "weaponhouses foram carregadas");
	}

	return 1;
}

this::Crate_Load()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_CRATES)
	{
		CrateData[i][crateExists] = true;

		cache_get_value_name_int(i, "crateID", CrateData[i][crateID]);
		cache_get_value_name_int(i, "crateType", CrateData[i][crateType]);
		cache_get_value_name_int(i, "crateQuantity", CrateData[i][crateQuantity]);
		cache_get_value_name_float(i, "crateX", CrateData[i][cratePos][0]);
		cache_get_value_name_float(i, "crateY", CrateData[i][cratePos][1]);
		cache_get_value_name_float(i, "crateZ", CrateData[i][cratePos][2]);
		cache_get_value_name_float(i, "crateA", CrateData[i][cratePos][3]);
		cache_get_value_name_int(i, "crateInterior", CrateData[i][crateInterior]);
		cache_get_value_name_int(i, "crateWorld", CrateData[i][crateWorld]);

		Crate_Refresh(i);

		Iter_Add(Crate, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma caixa contrabandeada carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "caixa contrabandeada foi carregada" : "caixas contrabandeadas foram carregadas");
	}

	return 1;
}

this::OpenCrate(playerid, crate, typeid)
{
	if(Crate_Nearest(playerid) != crate || !CrateData[crate][crateExists] || !PlayerData[playerid][pOpeningCrate])
		return 0;

	PlayerData[playerid][pOpeningCrate] = 0;

	ClearAnimations(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);

	SetPlayerFreezed(playerid, false);

	switch(typeid)
	{
		case 1: //Marijuana
		{
			new inv = Inventory_Add(playerid, "Marijuana", 1578, CrateData[crate][crateQuantity]);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			SendGreenMessage(playerid, "Você pegou %d gramas de marijuana dentro da caixa.", CrateData[crate][crateQuantity]);
		}
		case 2: //Cocaína
		{
			new inv = Inventory_Add(playerid, "Cocaína", 1575, CrateData[crate][crateQuantity]);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			SendGreenMessage(playerid, "Você pegou %d gramas de cocaína dentro da caixa.", CrateData[crate][crateQuantity]);
		}
		case 3:	//LSD
		{
			new inv = Inventory_Add(playerid, "LSD", 1577, CrateData[crate][crateQuantity]);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			SendGreenMessage(playerid, "Você pegou %d seringas de LSD dentro da caixa.", CrateData[crate][crateQuantity]);
		}
		case 4: //Gunparts
		{
			new inv = Inventory_Add(playerid, "Gunparts", 2040, CrateData[crate][crateQuantity]);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			SendGreenMessage(playerid, "Você pegou %d gunparts dentro da caixa.", CrateData[crate][crateQuantity]);
		}
	}
	Crate_Delete(crate);
	return 1;
}

this::OnCrateCreated(crateid)
{
	if(crateid == -1 || !CrateData[crateid][crateExists])
		return 0;

	CrateData[crateid][crateID] = cache_insert_id();
	Crate_Save(crateid);

	return 1;
}

this::OnLoadFurnitureTextures(objectid)
{
	new rows, tmpMaterial, tmpTXD[64], tmpTName[64], tmpIndex, tmpColor;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureMaterial", tmpMaterial);
		cache_get_value_name(i, "textureTXD", tmpTXD, 64);
		cache_get_value_name(i, "textureName", tmpTName, 64);
		cache_get_value_name_int(i, "textureIndex", tmpIndex);
		cache_get_value_name_int(i, "textureColor", tmpColor);

		SetDynamicObjectMaterial(objectid, tmpIndex, tmpMaterial, tmpTXD, tmpTName, tmpColor);
	}

	return 1;
}

this::OnFurnitureAddTexture(playerid, objectid, index, material, txd[], tname[], nickname[])
{
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

	new rows;

	cache_get_row_count(rows);

	new query[300];

	if(rows)
	{
		mysql_format(this, query, sizeof(query), "UPDATE `mobiliastextura` SET `textureMaterial` = '%d', `textureTXD` = '%e', `textureName` = '%e', `textureNickName` = '%e' WHERE `textureIndex` = '%d' AND `furnitureID` = '%d'",
			material,
			txd,
			tname,
			nickname,
			index,
			FurnitureData[furnitureID]);
	}
	else
	{
		mysql_format(this, query, sizeof(query), "INSERT INTO `mobiliastextura` (`furnitureID`, `textureIndex`, `textureMaterial`, `textureTXD`, `textureName`, `textureNickName`) VALUES ('%d', '%d', '%d', '%e', '%e', '%e')",
			FurnitureData[furnitureID],
			index,
			material,
			txd,
			tname,
			nickname);
	}

	mysql_tquery(this, query);

	for(new j = 0; j < MAX_INDEX_OBJECT; j++) 
		SetDynamicObjectMaterial(objectid, j, 19341, "invalid", "invalid");

	mysql_format(this, query, sizeof(query), "SELECT * FROM `mobiliastextura` WHERE `furnitureID` = '%d'", FurnitureData[furnitureID]);
	mysql_tquery(this, query, "OnLoadFurnitureTextures", "d", objectid);

	mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
	mysql_tquery(this, query, "FurnitureCheckTexture", "dd", playerid, objectid);

	return 1;
}

this::OnFurnitureAddColor(playerid, objectid, index, color, colorname[])
{
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

	new rows;

	cache_get_row_count(rows);

	new query[300];

	if(rows)
	{
		mysql_format(this, query, sizeof(query), "UPDATE `mobiliastextura` SET `textureColor` = '%d', `textureColorName` = '%e' WHERE `textureIndex` = '%d' AND `furnitureID` = '%d'",
			color,
			colorname,
			index,
			FurnitureData[furnitureID]);
	}
	else
	{
		mysql_format(this, query, sizeof(query), "INSERT INTO `mobiliastextura` (`furnitureID`, `textureIndex`, `textureColor`, `textureColorName`) VALUES ('%d', '%d', '%d', '%e')",
			FurnitureData[furnitureID],
			index,
			color,
			colorname);
	}

	mysql_tquery(this, query);

	for(new j = 0; j < MAX_INDEX_OBJECT; j++) 
		SetDynamicObjectMaterial(objectid, j, 19341, "invalid", "invalid");

	mysql_format(this, query, sizeof(query), "SELECT * FROM `mobiliastextura` WHERE `furnitureID` = '%d'", FurnitureData[furnitureID]);
	mysql_tquery(this, query, "OnLoadFurnitureTextures", "d", objectid);

	mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
	mysql_tquery(this, query, "FurnitureCheckColor", "dd", playerid, objectid);

	return 1;
}

this::OnLoadObjectTextures(objectid)
{
	if(objectid == -1 || !ObjectData[objectid][objectExists])
		return 0;

	new rows, tmpMaterial, tmpTXD[64], tmpTName[64], tmpIndex, tmpColor;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureMaterial", tmpMaterial);
		cache_get_value_name(i, "textureTXD", tmpTXD, 64);
		cache_get_value_name(i, "textureName", tmpTName, 64);
		cache_get_value_name_int(i, "textureIndex", tmpIndex);
		cache_get_value_name_int(i, "textureColor", tmpColor);

		SetDynamicObjectMaterial(ObjectData[objectid][objectObject], tmpIndex, tmpMaterial, tmpTXD, tmpTName, tmpColor);
	}
	return 1;
}

this::OnObjectAddTexture(playerid, objectid, index, material, txd[], tname[], nickname[])
{
	new rows;

	cache_get_row_count(rows);

	new query[300];

	if(rows)
	{
		mysql_format(this, query, sizeof(query), "UPDATE `objetostextura` SET `textureMaterial` = '%d', `textureTXD` = '%e', `textureName` = '%e', `textureNickName` = '%e' WHERE `textureIndex` = '%d' AND `objectID` = '%d'",
			material,
			txd,
			tname,
			nickname,
			index,		
			ObjectData[objectid][objectID]);
	}
	else
	{
		mysql_format(this, query, sizeof(query), "INSERT INTO `objetostextura` (`objectID`, `textureIndex`, `textureMaterial`, `textureTXD`, `textureName`, `textureNickName`) VALUES ('%d', '%d', '%d', '%e', '%e', '%e')",
			ObjectData[objectid][objectID],
			index,
			material,
			txd,
			tname,
			nickname);
	}

	mysql_tquery(this, query);

	for(new j = 0; j < MAX_INDEX_OBJECT; j++) 
		SetDynamicObjectMaterial(ObjectData[objectid][objectObject], j, 19341, "invalid", "invalid");

	mysql_format(this, query, sizeof(query), "SELECT * FROM `objetostextura` WHERE `objectID` = '%d'", ObjectData[objectid][objectID]);
	mysql_tquery(this, query, "OnLoadObjectTextures", "d", objectid);

	mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[objectid][objectID]);
	mysql_tquery(this, query, "ObjectCheckTexture", "dd", playerid, objectid);

	return 1;
}

this::OnObjectAddColor(playerid, objectid, index, color, colorname[])
{
	new rows;

	cache_get_row_count(rows);

	new query[300];

	if(rows)
	{
		mysql_format(this, query, sizeof(query), "UPDATE `objetostextura` SET `textureColor` = '%d', `textureColorName` = '%e' WHERE `textureIndex` = '%d' AND `objectID` = '%d'",
			color,
			colorname,
			index,		
			ObjectData[objectid][objectID]);
	}
	else
	{
		mysql_format(this, query, sizeof(query), "INSERT INTO `objetostextura` (`objectID`, `textureIndex`, `textureColor`, `textureColorName`) VALUES ('%d', '%d', '%d', '%e')",
			ObjectData[objectid][objectID],
			index,
			color,
			colorname);
	}

	mysql_tquery(this, query);

	for(new j = 0; j < MAX_INDEX_OBJECT; j++) 
		SetDynamicObjectMaterial(ObjectData[objectid][objectObject], j, 19341, "invalid", "invalid");

	mysql_format(this, query, sizeof(query), "SELECT * FROM `objetostextura` WHERE `objectID` = '%d'", ObjectData[objectid][objectID]);
	mysql_tquery(this, query, "OnLoadObjectTextures", "d", objectid);

	mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[objectid][objectID]);
	mysql_tquery(this, query, "ObjectCheckColor", "dd", playerid, objectid);

	return 1;
}

this::PutInsideVehicle(playerid, vehicleid)
{
	if(!PlayerData[playerid][pDrivingTest])
		return 0;

	RemoveFromVehicle(playerid);
	AC_PutPlayerInVehicle(playerid, vehicleid, 0);
	return 1;
}

this::House_RemoveAllFurnitures(houseid, sold, playerid)
{
	new price, query[126], rows, objectid;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "furnitureObject", objectid);

		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

		mysql_format(this, query, sizeof(query), "DELETE FROM `mobiliastextura` WHERE `furnitureID` = '%d'", FurnitureData[furnitureID]);
		mysql_tquery(this, query);

		if(sold)
			price += FurnitureData[furniturePrice];

		FurnitureData[furnitureModel] = 0;
		FurnitureData[furniturePrice] = 0;
		FurnitureData[furnitureHouse] = 0;
		FurnitureData[furnitureID] = 0;

		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

		DestroyDynamicObject(objectid);		
	}

	mysql_format(this, query, sizeof(query), "DELETE FROM `mobilias` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_tquery(this, query);

	if(sold)
	{
		GiveScriptedMoney(playerid, price/2);
		SendGreenMessage(playerid, "Você vendeu toda a sua mobília por %s.", FormatNumber(price/2));
	}

	return 1;
}

this::_RepairVehicle(playerid, vs_id, paid)
{
	if(paid == 0)
	{
		SendGreenMessage(playerid, "O seu veículo foi reparado com sucesso.");
		SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "** HQ: %s %s reparou o veículo %s (ID: %d).", Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnVehicleModelName(VehicleData[vs_id][vehicleModel]), vs_id);

		KillTimer(PlayerData[playerid][pFixVehicleTimer]);
		PlayerData[playerid][pFixVehicle] = false;

		AC_RepairVehicle(vs_id);
		AC_SetVehicleHealth(vs_id, VehicleData[vs_id][vehicleMaxHealth]);

		SetPlayerFreezed(playerid, false);
	}

	return 1;
}

this::OnFurnitureOptions(playerid, id)
{
	new rows, objectid, tmpModel, VW = GetPlayerVirtualWorld(playerid), Float:x, Float:y, Float:z, Float:rz;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "furnitureObject", objectid);

		if(!IsValidDynamicObject(objectid)) 
			continue;

		if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID) != VW) 
			continue;

		GetDynamicObjectPos(objectid, x, y, z);

		switch(id)
		{
			case 0:
			{
				tmpModel = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

				if(!IsPlayerInRangeOfPoint(playerid, 3.5, x, y, z) || OpenableDoor(tmpModel) == -1)
					continue;

				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

				FurnitureData[furnitureOpened] = (FurnitureData[furnitureOpened] ? 0 : 1);

				rz = (FurnitureData[furnitureOpened] ? FurnitureData[furnitureDoorZ] : FurnitureData[furnitureRotZ]);

				SetDynamicObjectRot(objectid, FurnitureData[furnitureRotX], FurnitureData[furnitureRotY], rz);

				Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);
			}
		}
	}
	return 1;
}

this::OnUnimpoundVehicleSearch(playerid)
{
	new rows;

	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Nenhum veículo encontrado para o nome do proprietário: \"%s\".", ReturnName(playerid, 0));

	new string[300], tmpID, tmpPrice, tmpModel[32], tmpPlate[15], count = 0;

	format(string, sizeof(string), "Veículo\tPlaca de registro\tValor\n");

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "id", tmpID);
		cache_get_value_name_int(i, "price", tmpPrice);
		cache_get_value_name(i, "model", tmpModel, 32);
		cache_get_value_name(i, "plate", tmpPlate, 15);

		format(string, sizeof(string), "%s%s\t%s\t%s\n", string, tmpModel, tmpPlate, FormatNumber(tmpPrice));
		ListedOptions[playerid][count++] = tmpID;
	}

	Dialog_Show(playerid, ToggleImpound, DIALOG_STYLE_TABLIST_HEADERS, "Seus veículos apreendidos", string, "Avançar", "Cancelar");

	return 1;
}

this::OnImpoundedVehicleSearch(playerid)
{
	new tmpPrice, tmpModel[32], tmpPlate[15], tmpOfficer[MAX_PLAYER_NAME], tmpReason[64], tmpDate[32];

	cache_get_value_name_int(0, "price", tmpPrice);

	cache_get_value_name(0, "model", tmpModel, 32);
	cache_get_value_name(0, "plate", tmpPlate, 15);
	cache_get_value_name(0, "officer", tmpOfficer, MAX_PLAYER_NAME);
	cache_get_value_name(0, "reason", tmpReason, 64);
	cache_get_value_name(0, "created_at", tmpDate, 32);

	Dialog_Show(playerid, ImpoundConfirm, DIALOG_STYLE_MSGBOX, "Relatório Detalhado", "VEÍCULO APREENDIDO #%d\n\nModelo: %s\nPlaca: %s\nProprietário: %s\nData da apreensão: %s\nApreendido pelo oficial: %s\nMotivo da apreensão: %s\nValor de resgate: %s", "Confirmar", "Cancelar", GetPVarInt(playerid, "ImpoundedID"), tmpModel, tmpPlate, ReturnName(playerid, 0), tmpDate, tmpOfficer, tmpReason, FormatNumber(tmpPrice));

	return 1;
}

this::OnImpoundedVehicleConfirmSearch(playerid)
{
	new query[71], tmpPrice, tmpVSID;

	cache_get_value_name_int(0, "price", tmpPrice);
	cache_get_value_name_int(0, "vehicle_id", tmpVSID);

	if(GetScriptedMoney(playerid) < tmpPrice)
		return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(tmpPrice));

	mysql_format(this, query, sizeof(query), "DELETE FROM `carrosapreendidos` WHERE `vehicle_id` = '%d'", tmpVSID);
	mysql_tquery(this, query);

	mysql_format(this, query, sizeof(query), "UPDATE `carros` SET `vehicleParked` = '0' WHERE `vehicleID` = '%d'", tmpVSID);
	mysql_tquery(this, query);

	GiveScriptedMoney(playerid, -tmpPrice);
	Tax_AddMoney(tmpPrice);

	SendGreenMessage(playerid, "Você pagou %s e seu veículo foi liberado. Acesse o menu veicular (/v lista).", FormatNumber(tmpPrice));

	DeletePVar(playerid, "ImpoundedID");

	return 1;
}

this::OnAdminCheckIP(playerid, ip[])
{
	new rows, p_ID, p_Name[24], p_LastLogin[32], string[250], count;

	cache_get_row_count(rows);

	if(!rows)
		return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Checar IP", "Nenhum resultado encontrado para o IP: \"%s\"", "Fechar", "", ip);

	for(new i = 0; i < rows; i++)
	{
		count++;

		cache_get_value_name(i, "Name", p_Name, 24);
		cache_get_value_name(i, "LastLogin", p_LastLogin, 32);
		cache_get_value_name_int(i, "UserID", p_ID);

		format(string, sizeof(string), "%s%s(uid: %d) - %s\n", string, p_Name, p_ID, p_LastLogin);
	}

	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Checar IP", "Últimas contas logadas no IP (%s):\n%d conta(s) encontrada(s).\n\n%s", "Fechar", "", ip, count, string);

	return 1;
}

this::Mask_WriteSQL(playerid)
{
	new rows, query[256];

	cache_get_row_count(rows);

	if(!rows)
		mysql_format(this, query, sizeof(query), "INSERT INTO `mascaras_atuais` (`maskOwner`, `maskNumber`, `maskBought`) VALUES ('%e', '%d', '%e')", MaskData[playerid][maskOwner], MaskData[playerid][maskNumber], MaskData[playerid][maskBought]);
	else
		mysql_format(this, query, sizeof(query), "UPDATE `mascaras_atuais` SET `maskNumber` = '%d', `maskBought` = '%e' WHERE `maskOwner` = '%e'", MaskData[playerid][maskNumber], MaskData[playerid][maskBought], MaskData[playerid][maskOwner]);

	mysql_tquery(this, query);

	return 1;
}

this::Attach_Bought(playerid, itemid)
{
	if(!PlayerData[playerid][pLogged])
		return 0;

	AttachData[playerid][itemid][attachID] = cache_insert_id();
	Attach_Save(playerid, itemid);

	SendServerMessage(playerid, "Você possui um novo item na sua lista de acessórios (/itens).");

	Attach_RefreshList(playerid);

	return 1;
}

this::Pump_Load()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_PUMP)
	{
		PumpData[i][pumpExists] = true;

		cache_get_value_name_int(i, "pumpID", PumpData[i][pumpID]);		
		cache_get_value_name_int(i, "pumpBusinessID", PumpData[i][pumpBusinessID]);

		cache_get_value_name_float(i, "pumpX", PumpData[i][pumpX]);
		cache_get_value_name_float(i, "pumpY", PumpData[i][pumpY]);
		cache_get_value_name_float(i, "pumpZ", PumpData[i][pumpZ]);
		cache_get_value_name_float(i, "pumpRX", PumpData[i][pumpRX]);
		cache_get_value_name_float(i, "pumpRY", PumpData[i][pumpRY]);
		cache_get_value_name_float(i, "pumpRZ", PumpData[i][pumpRZ]);

		Pump_Refresh(i);

		Iter_Add(Pumps, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma bomba de combustível carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "bomba de combustível foi carregada" : "bombas de combustível foram carregadas");
	}

	return 1;
}

this::OnPumpCreated(pumpid)
{
	if(pumpid == -1 || !PumpData[pumpid][pumpExists])
		return 0;

	PumpData[pumpid][pumpID] = cache_insert_id();

	Pump_Save(pumpid);

	return 1;
}

this::Pump_Refuelling(playerid, bizid)
{
	new id, vehicleid = GetPlayerVehicleID(playerid);

	if((id = Pump_Nearest(playerid)) != -1)
	{
		if(!BusinessData[id][businessStock])
		{
			SendWarningMessage(playerid, "Esta empresa está sem combustível no momento.");
			return Pump_StopFuelling(playerid);
		}
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetScriptedMoney(playerid) < BusinessData[bizid][businessProductPrice][0] || VehicleData[vehicleid][vehicleFuel] >= Fuel_GetQuantity(vehicleid) || GetEngineStatus(vehicleid))
			return Pump_StopFuelling(playerid);

		VehicleData[vehicleid][vehicleFuel] += 1.0;

		if(VehicleData[vehicleid][vehicleFuel] >= Fuel_GetQuantity(vehicleid))
		{
			VehicleData[vehicleid][vehicleFuel] = Fuel_GetQuantity(vehicleid);
		}

		BusinessData[bizid][businessStock]--;

		Business_IncreaseVault(bizid, BusinessData[bizid][businessProductPrice][0]);
		GiveScriptedMoney(playerid, - BusinessData[bizid][businessProductPrice][0]);
		PlayerData[playerid][pRefuellingPrice] += BusinessData[bizid][businessProductPrice][0];
	}
	else
	{
		Pump_StopFuelling(playerid);
	}
	return 1;
}

this::Industry_Load()
{
	new rows, string_product[128], string_product_price[128], string_stock[128], string_max_stock[128], string_buying[128], string_buying_price[128],
	string_b_stock[128], string_b_max_stock[128];

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_INDUSTRY)
	{
		IndustryData[i][industryExists] = true;

		cache_get_value_name_int(i, "industryID", IndustryData[i][industryID]);
		cache_get_value_name_int(i, "industryType", IndustryData[i][industryType]);
		cache_get_value_name_int(i, "industrySection", IndustryData[i][industrySection]);

		cache_get_value_name_float(i, "industryX", IndustryData[i][industryX]);
		cache_get_value_name_float(i, "industryY", IndustryData[i][industryY]);
		cache_get_value_name_float(i, "industryZ", IndustryData[i][industryZ]);

		cache_get_value_name(i, "industryName", IndustryData[i][industryName], 128);

		cache_get_value_name(i, "industryProduct", string_product, 128);
		cache_get_value_name(i, "industryProductPrice", string_product_price, 128);
		cache_get_value_name(i, "industryProductStock", string_stock, 128);
		cache_get_value_name(i, "industryProductMaxStock", string_max_stock, 128);

		cache_get_value_name(i, "industryBuying", string_buying, 128);
		cache_get_value_name(i, "industryBuyingPrice", string_buying_price, 128);
		cache_get_value_name(i, "industryBuyingStock", string_b_stock, 128);
		cache_get_value_name(i, "industryBuyingMaxStock", string_b_max_stock, 128);

		sscanf(string_product, "p<|>dddddddddddddddddddd",
			IndustryData[i][industryProduct][0], IndustryData[i][industryProduct][1],
			IndustryData[i][industryProduct][2], IndustryData[i][industryProduct][3],
			IndustryData[i][industryProduct][4], IndustryData[i][industryProduct][5],
			IndustryData[i][industryProduct][6], IndustryData[i][industryProduct][7],
			IndustryData[i][industryProduct][8], IndustryData[i][industryProduct][9],
			IndustryData[i][industryProduct][10], IndustryData[i][industryProduct][11],
			IndustryData[i][industryProduct][12], IndustryData[i][industryProduct][13],
			IndustryData[i][industryProduct][14], IndustryData[i][industryProduct][15],
			IndustryData[i][industryProduct][16], IndustryData[i][industryProduct][17],
			IndustryData[i][industryProduct][18], IndustryData[i][industryProduct][19]);

		sscanf(string_product_price, "p<|>dddddddddddddddddddd",
			IndustryData[i][industryProductPrice][0], IndustryData[i][industryProductPrice][1],
			IndustryData[i][industryProductPrice][2], IndustryData[i][industryProductPrice][3],
			IndustryData[i][industryProductPrice][4], IndustryData[i][industryProductPrice][5],
			IndustryData[i][industryProductPrice][6], IndustryData[i][industryProductPrice][7],
			IndustryData[i][industryProductPrice][8], IndustryData[i][industryProductPrice][9],
			IndustryData[i][industryProductPrice][10], IndustryData[i][industryProductPrice][11],
			IndustryData[i][industryProductPrice][12], IndustryData[i][industryProductPrice][13],
			IndustryData[i][industryProductPrice][14], IndustryData[i][industryProductPrice][15],
			IndustryData[i][industryProductPrice][16], IndustryData[i][industryProductPrice][17],
			IndustryData[i][industryProductPrice][18], IndustryData[i][industryProductPrice][19]);

		sscanf(string_stock, "p<|>dddddddddddddddddddd",
			IndustryData[i][industryProductStock][0], IndustryData[i][industryProductStock][1],
			IndustryData[i][industryProductStock][2], IndustryData[i][industryProductStock][3],
			IndustryData[i][industryProductStock][4], IndustryData[i][industryProductStock][5],
			IndustryData[i][industryProductStock][6], IndustryData[i][industryProductStock][7],
			IndustryData[i][industryProductStock][8], IndustryData[i][industryProductStock][9],
			IndustryData[i][industryProductStock][10], IndustryData[i][industryProductStock][11],
			IndustryData[i][industryProductStock][12], IndustryData[i][industryProductStock][13],
			IndustryData[i][industryProductStock][14], IndustryData[i][industryProductStock][15],
			IndustryData[i][industryProductStock][16], IndustryData[i][industryProductStock][17],
			IndustryData[i][industryProductStock][18], IndustryData[i][industryProductStock][19]);

		sscanf(string_max_stock, "p<|>dddddddddddddddddddd",
			IndustryData[i][industryProductMaxStock][0], IndustryData[i][industryProductMaxStock][1],
			IndustryData[i][industryProductMaxStock][2], IndustryData[i][industryProductMaxStock][3],
			IndustryData[i][industryProductMaxStock][4], IndustryData[i][industryProductMaxStock][5],
			IndustryData[i][industryProductMaxStock][6], IndustryData[i][industryProductMaxStock][7],
			IndustryData[i][industryProductMaxStock][8], IndustryData[i][industryProductMaxStock][9],
			IndustryData[i][industryProductMaxStock][10], IndustryData[i][industryProductMaxStock][11],
			IndustryData[i][industryProductMaxStock][12], IndustryData[i][industryProductMaxStock][13],
			IndustryData[i][industryProductMaxStock][14], IndustryData[i][industryProductMaxStock][15],
			IndustryData[i][industryProductMaxStock][16], IndustryData[i][industryProductMaxStock][17],
			IndustryData[i][industryProductMaxStock][18], IndustryData[i][industryProductMaxStock][19]);


		sscanf(string_buying, "p<|>dddddddddddddddddddd",
			IndustryData[i][industryBuying][0], IndustryData[i][industryBuying][1],
			IndustryData[i][industryBuying][2], IndustryData[i][industryBuying][3],
			IndustryData[i][industryBuying][4], IndustryData[i][industryBuying][5],
			IndustryData[i][industryBuying][6], IndustryData[i][industryBuying][7],
			IndustryData[i][industryBuying][8], IndustryData[i][industryBuying][9],
			IndustryData[i][industryBuying][10], IndustryData[i][industryBuying][11],
			IndustryData[i][industryBuying][12], IndustryData[i][industryBuying][13],
			IndustryData[i][industryBuying][14], IndustryData[i][industryBuying][15],
			IndustryData[i][industryBuying][16], IndustryData[i][industryBuying][17],
			IndustryData[i][industryBuying][18], IndustryData[i][industryBuying][19]);

		sscanf(string_buying_price, "p<|>dddddddddddddddddddd",
			IndustryData[i][industryBuyingPrice][0], IndustryData[i][industryBuyingPrice][1],
			IndustryData[i][industryBuyingPrice][2], IndustryData[i][industryBuyingPrice][3],
			IndustryData[i][industryBuyingPrice][4], IndustryData[i][industryBuyingPrice][5],
			IndustryData[i][industryBuyingPrice][6], IndustryData[i][industryBuyingPrice][7],
			IndustryData[i][industryBuyingPrice][8], IndustryData[i][industryBuyingPrice][9],
			IndustryData[i][industryBuyingPrice][10], IndustryData[i][industryBuyingPrice][11],
			IndustryData[i][industryBuyingPrice][12], IndustryData[i][industryBuyingPrice][13],
			IndustryData[i][industryBuyingPrice][14], IndustryData[i][industryBuyingPrice][15],
			IndustryData[i][industryBuyingPrice][16], IndustryData[i][industryBuyingPrice][17],
			IndustryData[i][industryBuyingPrice][18], IndustryData[i][industryBuyingPrice][19]);

		sscanf(string_b_stock, "p<|>dddddddddddddddddddd",
			IndustryData[i][industryBuyingStock][0], IndustryData[i][industryBuyingStock][1],
			IndustryData[i][industryBuyingStock][2], IndustryData[i][industryBuyingStock][3],
			IndustryData[i][industryBuyingStock][4], IndustryData[i][industryBuyingStock][5],
			IndustryData[i][industryBuyingStock][6], IndustryData[i][industryBuyingStock][7],
			IndustryData[i][industryBuyingStock][8], IndustryData[i][industryBuyingStock][9],
			IndustryData[i][industryBuyingStock][10], IndustryData[i][industryBuyingStock][11],
			IndustryData[i][industryBuyingStock][12], IndustryData[i][industryBuyingStock][13],
			IndustryData[i][industryBuyingStock][14], IndustryData[i][industryBuyingStock][15],
			IndustryData[i][industryBuyingStock][16], IndustryData[i][industryBuyingStock][17],
			IndustryData[i][industryBuyingStock][18], IndustryData[i][industryBuyingStock][19]);

		sscanf(string_b_max_stock, "p<|>dddddddddddddddddddd",
			IndustryData[i][industryBuyingMaxStock][0], IndustryData[i][industryBuyingMaxStock][1],
			IndustryData[i][industryBuyingMaxStock][2], IndustryData[i][industryBuyingMaxStock][3],
			IndustryData[i][industryBuyingMaxStock][4], IndustryData[i][industryBuyingMaxStock][5],
			IndustryData[i][industryBuyingMaxStock][6], IndustryData[i][industryBuyingMaxStock][7],
			IndustryData[i][industryBuyingMaxStock][8], IndustryData[i][industryBuyingMaxStock][9],
			IndustryData[i][industryBuyingMaxStock][10], IndustryData[i][industryBuyingMaxStock][11],
			IndustryData[i][industryBuyingMaxStock][12], IndustryData[i][industryBuyingMaxStock][13],
			IndustryData[i][industryBuyingMaxStock][14], IndustryData[i][industryBuyingMaxStock][15],
			IndustryData[i][industryBuyingMaxStock][16], IndustryData[i][industryBuyingMaxStock][17],
			IndustryData[i][industryBuyingMaxStock][18], IndustryData[i][industryBuyingMaxStock][19]);

		Industry_Refresh(i);

		Iter_Add(Industry, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma indústria carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "indústria foi carregada" : "indústrias foram carregadas");
	}

	return 1;
}

this::OnIndustryCreated(indid)
{
	if(indid == -1 || !IndustryData[indid][industryExists])
		return 0;

	IndustryData[indid][industryID] = cache_insert_id();

	Industry_Save(indid);

	return 1;
}

this::Teleport_Load()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_TELEPORTES)
	{
		TeleportData[i][teleportExists] = true;

		cache_get_value_name_int(i, "teleportID", TeleportData[i][teleportID]);
		cache_get_value_name_int(i, "teleportInterior", TeleportData[i][teleportInterior]);
		cache_get_value_name_int(i, "teleportWorld", TeleportData[i][teleportWorld]);

		cache_get_value_name(i, "teleportDesc", TeleportData[i][teleportDesc], 128);

		cache_get_value_name_float(i, "teleportX", TeleportData[i][teleportX]);
		cache_get_value_name_float(i, "teleportY", TeleportData[i][teleportY]);
		cache_get_value_name_float(i, "teleportZ", TeleportData[i][teleportZ]);

		Iter_Add(Teleports, i);
	}

	if(!rows)
	{
		printf("Server: nenhum teleporte administrativo carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "teleporte administrativo foi carregado" : "teleportes administrativo foram carregados");
	}

	return 1;
}

this::OnTeleportCreated(tpid)
{
	if(tpid == -1 || !TeleportData[tpid][teleportExists])
		return 0;

	TeleportData[tpid][teleportID] = cache_insert_id();
	Teleport_Save(tpid);

	return 1;
}

this::OnTeleportRequest(playerid)
{
	new rows, count, tmpID, id, string[32 * 15];

	cache_get_row_count(rows);

	if(!rows)
		return Dialog_Show(playerid, TeleportRequest, DIALOG_STYLE_INPUT, "Buscar por teleporte:", "ERRO: Sem resultados!!\n\nDigite abaixo o nome do teleporte:\nINFO: Limite mínimo de 3 e máximo de 10 caracteres.", "Pesquisar", "<<");

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "teleportID", tmpID);

		id = GetTeleportByID(tmpID);

		format(string, sizeof(string), "%s%d. %s\n", string, count + 1, TeleportData[id][teleportDesc]);
		ListedOptions[playerid][count++] = id;
	}

	Dialog_Show(playerid, TeleportRequestList, DIALOG_STYLE_LIST, "Resultados da busca:", string, "Teleportar", "<<");

	return 1;
}

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			printf("Lost connection to server");
		}
		case ER_SYNTAX_ERROR:
		{
			printf("MYSQL SYNTAX ERROR: %s",query);
		}
	}
	SendAdminMessage(COLOR_RP1, "_________________________________________________________");
	SendAdminMessage(COLOR_WARNING, "[MySQL] ID: %d", errorid);
	SendAdminMessage(COLOR_WARNING, "[MySQL] Error: %s", error);
	SendAdminMessage(COLOR_WARNING, "[MySQL] Query: %.50s ...", query);
	SendAdminMessage(COLOR_RP1, "_________________________________________________________");
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	OnCheatDetected(playerid, ServerAC[AC_CARMODHACK][acName], ServerAC[AC_CARMODHACK][acAction]);
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(floatround(floatsqroot(vel_x * vel_x + vel_y * vel_y) * 200, floatround_round) > 1100)
	{
		OnCheatDetected(playerid, ServerAC[AC_CARTROLLHACK][acName], ServerAC[AC_CARTROLLHACK][acAction]);
		return 0;
	}
	if(GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) > 15)
	{
		return 0;
	}

	return 1;
}

this::AC_Load()
{
	new rows, string_ac[128];

	cache_get_row_count(rows);

	if(!rows)
		return printf("Server: não foi possível carregar as configurações do Anti-Cheat da database \""MYSQL_DB"\".");

	cache_get_value_name(0, "text", string_ac, 128);

	sscanf(string_ac, "p<|>dddddddddddddddd",
		ServerAC[AC_FAKEKILL][acAction], ServerAC[AC_SPEEDHACK_CAR][acAction],
		ServerAC[AC_SPEEDHACK_ONFOOT][acAction], ServerAC[AC_FLYHACK][acAction],
		ServerAC[AC_JETPACK][acAction], ServerAC[AC_ARMOR][acAction],
		ServerAC[AC_HEALTH][acAction], ServerAC[AC_WEAPONHACK][acAction],
		ServerAC[AC_TELEPORTHACK][acAction], ServerAC[AC_CRASHHACK][acAction],
		ServerAC[AC_CARMODHACK][acAction], ServerAC[AC_CARTROLLHACK][acAction],
		ServerAC[AC_AIRBREAK][acAction], ServerAC[AC_REPAIRHACK][acAction],
		ServerAC[AC_INVISIBLEHACK][acAction], ServerAC[AC_SILENTAIM][acAction]);

	printf("Server: definições do Anti-Cheat carregada com sucesso.");

	SendRconCommand(SERVER_HOSTNAME);
	//SendRconCommand("password 0");
	TollBooth_LoadLEDs();

	print("Server is now online.");

	return 1;
}

this::_tensecondstimer()
{
	mysql_tquery(this, "SELECT * FROM advertisements WHERE adInQueue = '1' ORDER BY adTime ASC", "OnServerSendAdvertisement", "");

	foreach(new i : Player)
	{
		if(gettime() > PlayerData[i][pBlockMoney])
		{
			if(PlayerData[i][pMoneyBlocked] > 0)
			{
				GiveBankMoney(i, PlayerData[i][pMoneyBlocked]);
				
				SendServerMessage(i, "* A sua punição de dinheiro expirou, a quantia de %s foi transferida par a sua", FormatNumber(PlayerData[i][pMoneyBlocked]));
				SendClientMessage(i, COLOR_WHITE, "...conta bancária.");
			
				PlayerData[i][pMoneyBlocked] = 0;
			}
		}
	}

	return 1;
}

this::OnServerSendAdvertisement()
{
	new rows, ad_id, ad[128], ad_time, query[140], phone;

	cache_get_row_count(rows);

	if(rows)
	{
		cache_get_value_name_int(0, "adID", ad_id);
		cache_get_value_name(0, "adText", ad, 128);
		cache_get_value_name_int(0, "adTime", ad_time);
		cache_get_value_name_int(0, "adSenderPhone", phone);

		if(gettime() > ad_time)
		{
			foreach(new i : Player)
			{
				if(strlen(ad) > 64)
				{
					SendAdMessage(i, "[ANÚNCIO] %.64s", ad);
					SendAdMessage(i, "[ANÚNCIO] ...%s - PH: %d", ad[64], phone);
				}
				else
				{
					SendAdMessage(i, "[ANÚNCIO] %s - PH: %d", ad, phone);
				}
			}
			//Atualizar status
			mysql_format(this, query, sizeof(query), "UPDATE advertisements SET adInQueue = '0' WHERE adID = '%d'", ad_id);
			mysql_tquery(this, query);

			//Dar join em uma tabela através de informações de outra.
			mysql_format(this, query, sizeof(query), "SELECT players.Name as adSenderName, advertisements.* FROM advertisements INNER JOIN players ON advertisements.adUID = players.UserID WHERE adID = '%d'", ad_id);
			mysql_tquery(this, query, "OnAdvertisementSend", "");
		}
	}

	return 1;
}

this::OnAdvertisementSend()
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendAdminMessage(COLOR_WARNING, "AdminAlert: Não foi possível identificar o jogador que enviou o último anúncio.");

	new p_name[MAX_PLAYER_NAME], p_id;

	cache_get_value_name(0, "adSenderName", p_name, MAX_PLAYER_NAME);

	if((p_id = GetPlayerID(p_name)) != INVALID_PLAYER_ID)
	{
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) enviou o último anúncio.", p_name, p_id);
	}
	else
	{
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (OFF-LINE) enviou o último anúncio.", p_name);
	}	

	return 1;
}

this::Float:SetPlayerToFacePos(playerid, Float:X, Float:Y)
{
	new
		Float:pX1,
		Float:pY1,
		Float:pZ1,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0.0;

	GetPlayerPos(playerid, pX1, pY1, pZ1);

	if( Y > pY1 ) ang = (-acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);
	else if( Y < pY1 && X < pX1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 450.0);
	else if( Y < pY1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);

	if(X > pX1) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	ang += 180.0;

	SetPlayerFacingAngle(playerid, ang);

	return ang;
}

this::TrashCan_Load()
{
	new rows;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_TRASHCANS)
	{
		TrashData[i][trashExists] = true;

		cache_get_value_name_int(i, "trashID", TrashData[i][trashID]);
		cache_get_value_name_int(i, "trashQuantity", TrashData[i][trashQuantity]);
		cache_get_value_name_int(i, "trashType", TrashData[i][trashType]);

		cache_get_value_name_float(i, "trashX", TrashData[i][trashPos][0]);
		cache_get_value_name_float(i, "trashY", TrashData[i][trashPos][1]);
		cache_get_value_name_float(i, "trashZ", TrashData[i][trashPos][2]);
		cache_get_value_name_float(i, "trashRX", TrashData[i][trashRot][0]);
		cache_get_value_name_float(i, "trashRY", TrashData[i][trashRot][1]);
		cache_get_value_name_float(i, "trashRZ", TrashData[i][trashRot][2]);

		TrashCan_Refresh(i);

		Iter_Add(Garbage, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma lata de lixo carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "lata de lixo foi carregada" : "latas de lixo foram carregadas");
	}

	return 1;
}

this::OnTrashcanCreated(tid)
{
	if(tid == -1 || !TrashData[tid][trashExists])
		return 0;

	TrashData[tid][trashID] = cache_insert_id();

	TrashCan_Save(tid);

	return 1;
}

this::SpectateUpdate(playerid, targetid)
{
	if(PlayerData[playerid][pSpectator] == targetid)
	{
		SetPlayerInterior(playerid, GetPlayerInterior(targetid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
	}
	DeletePVar(playerid, "UpdatingSpectate");
	return 1;
}

this::_oneminutetimer()
{
	gettime(Horas, Minutos, Segundos);

	foreach(new i : Player)
	{
		if(!GetPlayerInterior(i))
			SetPlayerTime(i, Horas, Minutos);

		if(PlayerData[i][pLogged])
		{
			//paycheck;
			PlayerData[i][pPaycheck]++;

			if(PlayerData[i][pPaycheck] >= 60)
			{
				if(gettime() - PlayerData[i][pLastUpdate] < 900)
				{
					PlayerPaycheck(i);
				}

				PlayerData[i][pPaycheck] = 0;
				PlayerData[i][pTimePlayed]++;
			}

			if(ACData[i][acPlayerWarns] >= 3)
			{
				ACData[i][acPlayerWarns] = 0;
			}
		}
	}

	foreach(new i : Groups) if(GroupData[i][groupExists] && gettime() > GroupData[i][groupExpiresAt])
	{
		SendGroupMessage(i, COLOR_WARNING, "SERVER: Grupo \"%s\" foi deletado por passar do prazo de validade.", GroupData[i][groupName]);
	
		Group_Delete(i);
	}

	foreach(new i : Families) if(FamilyData[i][familyExists] && gettime() > FamilyData[i][familyExpiresAt])
	{
		if(!FamilyData[i][familyWarned])
		{
			new query[75];

			mysql_format(this, query, sizeof(query), "UPDATE families SET familyWarned = '1' WHERE familyID = '%d'", FamilyData[i][familyID]);
			mysql_tquery(this, query);

			FamilyData[i][familyWarned] = true;
			FamilyData[i][familyPlusRenew] = gettime() + (86400 * 3);

			SendFamilyMessage(i, COLOR_WARNING, "FAMÍLIA: O prazo de validade da família expirou. O líder tem 3 dia(s) para re");
			SendFamilyMessage(i, COLOR_WARNING, "...novar e caso opte por não renovar, a família será deletada automáticamente.");
		}
		else if(FamilyData[i][familyWarned] && gettime() > FamilyData[i][familyPlusRenew])
		{
			SendFamilyMessage(i, COLOR_WARNING, "FAMÍLIA: O prazo para renovação acabou e, portanto, a sua família foi deletada e removida do");
			SendFamilyMessage(i, COLOR_WARNING, ".../familias.");

			Family_Delete(i);
		}
	}

	return 1;
}

this::_threeminutetimer()
{
	//Save all data;
	Save_All();

	return 1;
}

this::OnAdCheck(playerid, text[])
{
	new rows, ad_UID, query[73];

	cache_get_row_count(rows);

	if(rows)
	{
		cache_get_value_name_int(0, "adUID", ad_UID);

		if(ad_UID == PlayerData[playerid][pID])
			return SendWarningMessage(playerid, "Você não pode colocar dois (2) anúncios em sequência.");
	}

	mysql_format(this, query, sizeof(query), "SELECT * FROM advertisements WHERE adUID = '%d' AND adInQueue = '1'", PlayerData[playerid][pID]);
	mysql_tquery(this, query, "PutPlayerADInQueue", "ds", playerid, text);

	return 1;
}

this::PutPlayerADInQueue(playerid, ad[])
{
	new rows;
	cache_get_row_count(rows);

	if(rows >= 2)
	{
		return SendWarningMessage(playerid, "Você só pode ter dois (2) anúncios na fila por vez.");
	}
	
	new query[270];

	mysql_format(this, query, sizeof(query), "INSERT INTO advertisements (adText, adUID, adTime, adInQueue, adSenderPhone) VALUES ('%e', '%d', '%d', 1, '%d')", ad, PlayerData[playerid][pID], gettime() + 30, PlayerData[playerid][pCellphone]);
	mysql_tquery(this, query);

	if(strlen(ad) > 64)
	{
		SendGreenMessage(playerid, "Seu anúncio: \"%.64s", ad);
		SendGreenMessage(playerid, "%s\" foi adicionado na fila de publicação.", ad[64]);
	}
	else
	{
		SendGreenMessage(playerid, "Seu anúncio: \"%s\" foi adicionado na fila de publicação.", ad);
	}

	return 1;
}

this::OnNameCheck(playerid, newname[])
{
	new rows;
	cache_get_row_count(rows);

	if(rows)
	{
		Dialog_Show(playerid, NameExists, DIALOG_STYLE_MSGBOX, "Erro ao trocar de nome:", "O nome \"%s\" já está sendo usado por outro usuário.\nEscolha um outro nome para prosseguir com a troca.", "<<", "Fechar", newname);
	}
	else
	{
		SetPVarString(playerid, "NewName", newname);

		Dialog_Show(playerid, NameNoExists, DIALOG_STYLE_MSGBOX, "Nome disponível:", "O nome \"%s\" está disponível.\nVocê deseja alterar o seu nome?", "Sim", "Não", newname);
	}

	return 1;
}

this::RestorePlayerData(playerid)
{
	//load data
	new rows, string_wep[128], query[75], skinid, onduty;
	cache_get_row_count(rows);

	if(rows)
	{
		cache_get_value_name(0, "dutyWeapons", string_wep, 128);
		cache_get_value_name_int(0, "dutySkin", skinid);
		cache_get_value_name_int(0, "OnDuty", onduty);

		if(onduty)
		{
			sscanf(string_wep, "p<|>dddddddddddddddddddddddddd",
				PlayerData[playerid][pWeapon][0], PlayerData[playerid][pAmmo][0],
				PlayerData[playerid][pWeapon][1], PlayerData[playerid][pAmmo][1],
				PlayerData[playerid][pWeapon][2], PlayerData[playerid][pAmmo][2],
				PlayerData[playerid][pWeapon][3], PlayerData[playerid][pAmmo][3],
				PlayerData[playerid][pWeapon][4], PlayerData[playerid][pAmmo][4],
				PlayerData[playerid][pWeapon][5], PlayerData[playerid][pAmmo][5],
				PlayerData[playerid][pWeapon][6], PlayerData[playerid][pAmmo][6],
				PlayerData[playerid][pWeapon][7], PlayerData[playerid][pAmmo][7],
				PlayerData[playerid][pWeapon][8], PlayerData[playerid][pAmmo][8],
				PlayerData[playerid][pWeapon][9], PlayerData[playerid][pAmmo][9],
				PlayerData[playerid][pWeapon][10], PlayerData[playerid][pAmmo][10],
				PlayerData[playerid][pWeapon][11], PlayerData[playerid][pAmmo][11],
				PlayerData[playerid][pWeapon][12], PlayerData[playerid][pAmmo][12]);

			SetPlayerSkin(playerid, skinid);
			SetWeapons(playerid);

			PlayerData[playerid][pOnDuty] = true;

			SetScriptedArmour(playerid, 100);
			SetFactionColor(playerid);

			SendServerMessage(playerid, "Devido ao crash, todos os dados foram restaurados.");

			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) crashou OnDuty e teve os seus itens/status devolvidos pelo sistema.", ReturnName(playerid, 0), playerid);
		}
		else
		{
			SendServerMessage(playerid, "Você foi restaurado na sua última posição devido ao crash.");
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) foi restaurado para a última posição devido ao crash.", ReturnName(playerid, 0));
		}
	}

	mysql_format(this, query, sizeof(query), "DELETE FROM player_crashed WHERE UserID = '%d'", PlayerData[playerid][pID]);
	mysql_tquery(this, query);

	PlayerData[playerid][pCrashed] = false;

	return 1;
}

this::OnPlayerUnban(adminid, playername[])
{
	new rows, query[64];

	cache_get_row_count(rows);

	if(rows)
	{
		mysql_format(this, query, sizeof(query), "DELETE FROM player_banned WHERE Name = '%e'", playername);
		mysql_tquery(this, query);

		SendAdminAction(adminid, "Você desbaniu a conta \"%s\" com sucesso.", playername);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) desbaniu a conta: \"%s\".", ReturnName(adminid, 0), adminid, playername);
	}
	else return SendWarningMessage(adminid, "Nenhum resultado encontrado para o nome: \"%s\".", playername);
	return 1;
}

this::OnVehicleAlarm(vehicleid)
{
	return ToggleVehicleAlarms(vehicleid, false);
}

this::OnPlayerUnscramble(playerid)
{
	if(!PlayerData[playerid][pUnscrambling])
		return 0;

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		PlayerData[playerid][pUnscrambling] = false;
		PlayerData[playerid][pUnscrambleTime] = 0;
		PlayerData[playerid][pUnscrambleID] = 0;

		PlayerData[playerid][pScrambleSuccess] = 0;
		PlayerData[playerid][pScrambleFailed] = 0;

		KillTimer(PlayerData[playerid][pUnscrambleTimer]);

		ShowUnscrambleTextdraw(playerid, false);

		return 1;
	}

	PlayerData[playerid][pUnscrambleTime]--;

	new timerString[10];

	format(timerString, 10, "%d", PlayerData[playerid][pUnscrambleTime]);
	PlayerTextDrawSetString(playerid, Unscrambler_PTD[playerid][5], timerString);

	if(PlayerData[playerid][pUnscrambleTime] < 1)
	{
		PlayerData[playerid][pUnscrambling] = false;
		PlayerData[playerid][pUnscrambleTime] = 0;
		PlayerData[playerid][pUnscrambleID] = 0;

		PlayerData[playerid][pScrambleSuccess] = 0;
		PlayerData[playerid][pScrambleFailed] = 0;

		KillTimer(PlayerData[playerid][pUnscrambleTimer]);

		ShowUnscrambleTextdraw(playerid, false);

		new id = GetPlayerVehicleID(playerid);

		Vehicle_TriggerAlarm(id, GetPlayerLocation(playerid), VehicleData[id][vehicleTrava]);

		ClearAnimations(playerid);
	}

	return 1;
}

this::OnCoolDown(id)
{
	VehicleData[id][vehicleCooldown] = false;
}

public DCC_OnChannelMessage(DCC_Channel:channel, DCC_User:author, const message[])
{
	new user[50], decodeuser[50], channelname[70], bool:userbot, string[160];

	DCC_IsUserBot(author, userbot);

	if(!DCC_GetChannelName(channel, channelname))
		return 0;

	if(!DCC_GetUserName(author, user) || userbot)
		return 0;

	if(message[0] == '!')
	{
		new funcname[32], function[32], pos = 0;  
		while(message[++pos] > ' ')  
		{  
			function[pos - 1] = tolower(message[pos]);  
			if(pos > (sizeof(function) - 1))  
				break;  
		}   

		format(funcname, sizeof(funcname), "ddkmd_%s", function);  

		while(message[pos] == ' ')
			pos++;

		if(!message[pos])  
		{
			CallLocalFunction("DCC_CommandPerformed", "sdd", function, _:channel, CallLocalFunction(funcname, "dds", _:channel, _:author, "\1"));
		}
		else
		{
			new decodemessage[256];
			utf8decode(decodemessage, message[pos], 256);

			CallLocalFunction("DCC_CommandPerformed", "sdd", function, _:channel, CallLocalFunction(funcname, "dds", _:channel, _:author, decodemessage));
		}
	}
	else
	{
		if(channel == Discord_AdminChat)
		{
			utf8decode(string, message, sizeof(string));
			//o plugin retorna o nome do usuário real, não aquele modificado posteriormente.
			utf8decode(decodeuser, user, sizeof(decodeuser));

			if(strlen(string) > 64)
			{
				SendAdminMessage(COLOR_LEMON, "[Discord] %s: %.64s", decodeuser, string);
				SendAdminMessage(COLOR_LEMON, "...%s", string[64]);
			}
			else
			{
				SendAdminMessage(COLOR_LEMON, "[Discord] %s: %s", decodeuser, string);
			}
		}
	}

	return 1;
}

this::OnChopshopCreated(id)
{
	if(!ChopshopData[id][chopshopExists] || id == -1)
		return 0;

	ChopshopData[id][chopshopID] = cache_insert_id();

	Chopshop_Save(id);

	return 1;
}

this::Chopshop_Load()
{
	new rows, string_chopshopcars[128];

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_CHOPSHOP)
	{
		ChopshopData[i][chopshopExists] = true;

		cache_get_value_name_int(i, "chopshopID", ChopshopData[i][chopshopID]);

		cache_get_value_name_float(i, "chopshopX", ChopshopData[i][chopshopX]);
		cache_get_value_name_float(i, "chopshopY", ChopshopData[i][chopshopY]);
		cache_get_value_name_float(i, "chopshopZ", ChopshopData[i][chopshopZ]);

		cache_get_value_name_float(i, "chopshopRX", ChopshopData[i][chopshopRX]);
		cache_get_value_name_float(i, "chopshopRY", ChopshopData[i][chopshopRY]);
		cache_get_value_name_float(i, "chopshopRZ", ChopshopData[i][chopshopRZ]);

		cache_get_value_name(i, "chopshopCarWanted", string_chopshopcars, 128);

		sscanf(string_chopshopcars, "p<|>ddddddddddddddd",
			ChopshopData[i][chopshopCarWanted][0], ChopshopData[i][chopshopCarWanted][1],
			ChopshopData[i][chopshopCarWanted][2], ChopshopData[i][chopshopCarWanted][3],
			ChopshopData[i][chopshopCarWanted][4], ChopshopData[i][chopshopCarWanted][5], 
			ChopshopData[i][chopshopCarWanted][6], ChopshopData[i][chopshopCarWanted][7],
			ChopshopData[i][chopshopCarWanted][8], ChopshopData[i][chopshopCarWanted][9],
			ChopshopData[i][chopshopCarWanted][10], ChopshopData[i][chopshopCarWanted][11],
			ChopshopData[i][chopshopCarWanted][12], ChopshopData[i][chopshopCarWanted][13],
			ChopshopData[i][chopshopCarWanted][14]);

		Chopshop_Refresh(i);

		Iter_Add(Chopshop, i);
	}

	if(!rows)
	{
		printf("Server: nenhum ponto de desmanche carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "ponto de desmanche foi carregado" : "pontos de desmanche foram carregados");
	}

	return 1;
}

this::SearchPlayerForBan(playerid, reason[], username[], time)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Não foi possível finalizar o BanOff em: \"%s\".", username);

	new name[24], lastip[16], unixtime, userid;

	cache_get_value_name(0, "Name", name, 24);
	cache_get_value_name(0, "LastIP", lastip, 16);
	cache_get_value_name_int(0, "UserID", userid);

	if(!time)
	{
		unixtime = 0;
		SendAdminAction(playerid, "Você baniu, off-line, %s pelo motivo: %s", name, reason);
		Log_Write(userid, "[%s] %s (uid: %d) baniu off-line o jogador %s (uid: %d) pelo motivo: %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], name, userid, reason);
	}
	else
	{
		unixtime = (time * 86400) + gettime();

		SendAdminAction(playerid, "Você baniu, off-line, %s por %d dia(s) pelo motivo: %s", name, time, reason);	
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) baniu temporariamente off-line o jogador %s (uid: %d) por %d dias pelo motivo: %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], name, userid, time, reason);
	}	
	
	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		if(!time)
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s baniu off-line %s pelo motivo: %s", ReturnName(playerid, 0), name, reason);
		}
		else
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s baniu off-line %s por %d dia(s) pelo motivo: %s", ReturnName(playerid, 0), name, time, reason);
		}
	}

	new query[280];

	mysql_format(this, query, sizeof(query), "INSERT INTO player_banned (Name, Admin, Reason, Date, UnbanTime, IP) VALUES ('%e', '%e', '%e', '%e', '%d', '%e')",
		name, ReturnName(playerid), reason, ReturnDate(), unixtime, lastip);
	mysql_tquery(this, query);

	return 1;
}

this::ListPlayerGroup(playerid, option)
{
	new rows;
	cache_get_row_count(rows);

	switch(option)
	{
		case 1:
		{
			new string[190], player_name[24], count, player_id;

			format(string, sizeof(string), "{00FF00}>> Adicionar Membro\n");

			for(new i = 0; i < rows; i++)
			{
				cache_get_value_name(i, "Name", player_name, 24);
				cache_get_value_name_int(i, "UserID", player_id);

				count++;

				format(string, sizeof(string), "%s%d. %s\n", string, count, player_name);
				ListedOptions[playerid][count] = player_id;
			}

			Dialog_Show(playerid, ManageGroupMembers, DIALOG_STYLE_LIST, "Gerenciar membros:", string, "Selecionar", "<<");
		}
		case 2:
		{
			if(cache_num_rows() >= 5)
				return SendWarningMessage(playerid, "Seu grupo já está com o limite máximo de membros (5).");

			Dialog_Show(playerid, InsertMemberToGroup, DIALOG_STYLE_INPUT, "Adicionar no grupo:", "Digite o ID ou Nome a ser adicionado:", "Adicionar", "<<");
		}
	}
	
	return 1;
}

this::Group_Load(playerid, response, listitem, inputtext[])
{
	new rows, str[32];
	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++) if(i < MAX_GROUPS)
	{
		GroupData[i][groupExists] = true;

		cache_get_value_name_int(i, "groupID", GroupData[i][groupID]);
		cache_get_value_name(i, "groupName", GroupData[i][groupName], 64);
		cache_get_value_name_int(i, "groupRanks", GroupData[i][groupRanks]);
		cache_get_value_name_int(i, "groupExpiresAt", GroupData[i][groupExpiresAt]);
		cache_get_value_name_int(i, "groupRobPlace", GroupData[i][groupRobPlace]);
		cache_get_value_name_int(i, "groupRobStyle", GroupData[i][groupRobStyle]);
		cache_get_value_name_int(i, "groupRobOut", GroupData[i][groupRobOut]);

		for(new x = 0; x < 4; x++)
		{
			format(str, sizeof(str), "groupRank%d", x + 1);
			cache_get_value_name(i, str, GroupRanks[i][x], 32);
		}

		Iter_Add(Groups, i);
	}

	if(!rows)
	{
		printf("Server: nenhum grupo carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "grupo foi carregado" : "grupos foram carregados");
	}

	return 1;
}

this::OnGroupCreated(playerid, groupid)
{
	if(!GroupData[groupid][groupExists] || groupid == -1)
		return 0;

	GroupData[groupid][groupID] = cache_insert_id();

	PlayerData[playerid][pGroupID] = cache_insert_id();
	PlayerData[playerid][pGroup] = groupid;
	PlayerData[playerid][pGroupRank] = GroupData[groupid][groupRanks];

	new query[102];

	mysql_format(this, query, sizeof(query), "UPDATE players SET Grupo = '%d', GrupoRank = '%d' WHERE Name = '%e'", PlayerData[playerid][pGroupID], PlayerData[playerid][pGroupRank], ReturnName(playerid));
	mysql_tquery(this, query);

	SendGreenMessage(playerid, "Você foi definido, automaticamente pelo sistema, como líder deste grupo.");

	Group_Save(groupid);
	Group_SaveRanks(groupid);

	return 1;
}

this::OnFamilyCreated(playerid, familyid)
{
	if(!FamilyData[familyid][familyExists] || familyid == -1)
		return 0;

	FamilyData[familyid][familyID] = cache_insert_id();

	PlayerData[playerid][pFamilyID] = cache_insert_id();
	PlayerData[playerid][pFamily] = familyid;
	PlayerData[playerid][pFamilyRank] = FamilyData[familyid][familyRanks];

	new query[102];

	mysql_format(this, query, sizeof(query), "UPDATE players SET Family = '%d', FamilyRank = '%d' WHERE Name = '%e'", PlayerData[playerid][pFamilyID], PlayerData[playerid][pFamilyRank], ReturnName(playerid));
	mysql_tquery(this, query);

	Family_Save(familyid);
	Family_SaveRanks(familyid);

	return 1;
}

this::ShowFamilyMembers(playerid)
{
	new rows, p_Name[24], p_Rank, familyid;

	familyid = PlayerData[playerid][pFamily];

	cache_get_row_count(rows);

	sz_MiscString[0] = 0;

	if(!rows)
		return SendWarningMessage(playerid, "Não foi possível prosseguir com a operação, entre em contato com um administrador.");

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "Name", p_Name, 24);
		cache_get_value_name_int(i, "FamilyRank", p_Rank);

		format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%s\n", sz_MiscString, p_Name, FamilyRanks[familyid][p_Rank - 1]);
	}

	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST, "Lista de membros da sua família:", sz_MiscString, "Okay", "");

	return 1;
}

this::Family_Load()
{
	new rows, str[32];

	cache_get_row_count(rows);

	for(new i = 0; i < rows && i < MAX_FAMILIES; i++)
	{
		FamilyData[i][familyExists] = true;

		cache_get_value_name_int(i, "familyID", FamilyData[i][familyID]);
		cache_get_value_name(i, "familyName", FamilyData[i][familyName], 64);
		cache_get_value_name(i, "familyTag", FamilyData[i][familyTag], 10);
		cache_get_value_name_int(i, "familyRanks", FamilyData[i][familyRanks]);
		cache_get_value_name_int(i, "familyExpiresAt", FamilyData[i][familyExpiresAt]);
		cache_get_value_name_int(i, "familyPlusRenew", FamilyData[i][familyPlusRenew]);
		cache_get_value_name_int(i, "familyWarned", FamilyData[i][familyWarned]);

		for(new x = 0; x < 4; x++)
		{
			format(str, sizeof(str), "familyRank%d", x + 1);
			cache_get_value_name(i, str, FamilyRanks[i][x], 32);
		}

		Iter_Add(Families, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma família carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "família foi carregada" : "famílias foram carregadas");
	}

	return 1;
}

this::LocalChat(playerid, Float:radi, const string[])
{
	new
		Float:currentPos[3], 
		Float:oldPos[3],
		Float:checkPos[3]
	;
		
	GetPlayerPos(playerid, oldPos[0], oldPos[1], oldPos[2]); 

	foreach(new i : Player) if(IsPlayerConnected(i))
	{
		if(!PlayerData[i][pLogged])
			continue; 
		
		GetPlayerPos(i, currentPos[0], currentPos[1], currentPos[2]); 
		for(new p = 0; p < 3; p++)
		{
			checkPos[p] = (oldPos[p] - currentPos[p]);  
		}
		
		if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid) && GetPlayerInterior(i) != GetPlayerInterior(playerid))
			continue;
			
		if(((checkPos[0] < radi/16) && (checkPos[0] > -radi/16)) && ((checkPos[1] < radi/16) && (checkPos[1] > -radi/16)) && ((checkPos[2] < radi/16) && (checkPos[2] > -radi/16)))
		{
			SendClientMessage(i, COLOR_CHAT1, string);
		}
		else if(((checkPos[0] < radi/8) && (checkPos[0] > -radi/8)) && ((checkPos[1] < radi/8) && (checkPos[1] > -radi/8)) && ((checkPos[2] < radi/8) && (checkPos[2] > -radi/8)))
		{
			SendClientMessage(i, COLOR_CHAT2, string);
		}
		else if(((checkPos[0] < radi/4) && (checkPos[0] > -radi/4)) && ((checkPos[1] < radi/4) && (checkPos[1] > -radi/4)) && ((checkPos[2] < radi/4) && (checkPos[2] > -radi/4)))
		{
			SendClientMessage(i, COLOR_CHAT3, string);
		}
		else if(((checkPos[0] < radi/2) && (checkPos[0] > -radi/2)) && ((checkPos[1] < radi/2) && (checkPos[1] > -radi/2)) && ((checkPos[2] < radi/2) && (checkPos[2] > -radi/2)))
		{
			SendClientMessage(i, COLOR_CHAT4, string);
		}	
	}
	return 1;
}

this::EditDynamicObjectEx(playerid, objectid)
{
	#undef EditDynamicObject
	EditDynamicObject(playerid, objectid);
	#define EditDynamicObject(%0,%1) SetTimerEx("EditDynamicObjectEx", 1000, false, "dd", %0, %1)
	return 1;
}

this::OnWarnAccount(playerid, user[], reason[])
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
	{
		SendWarningMessage(playerid, "Não foi possível finalizar o AplicarAvisoOff em: \"%s\".", user);
	}
	else
	{
		new playerwarns, updatewarns, query[250];

		cache_get_value_name_int(0, "Warns", playerwarns);		
		updatewarns = playerwarns + 1;

		if(updatewarns < 3)
		{
			foreach(new i : Player) if(PlayerData[i][pLogged])
			{
				SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s aplicou um aviso off-line em %s pelo motivo: %s", ReturnName(playerid, 0), user, reason);
			}

			if(updatewarns == 1)
			{
				mysql_format(this, query, sizeof(query), "UPDATE players SET WarnReason1 = '%e' WHERE Name = '%e'", reason, user);
				mysql_tquery(this, query);
			}
			else if(updatewarns == 2)
			{
				mysql_format(this, query, sizeof(query), "UPDATE players SET WarnReason2 = '%e' WHERE Name = '%e'", reason, user);
				mysql_tquery(this, query);
			}

			SendAdminAction(playerid, "Você aplicou um aviso (%d/3) em %s pelo motivo: %s", updatewarns, user, reason);
		}
		else
		{
			foreach(new i : Player) if(PlayerData[i][pLogged])
			{
				SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s baniu off-line %s (terceiro aviso) por 15 dias pelo motivo: %s", ReturnName(playerid, 0), user, reason);
			}

			mysql_format(this, query, sizeof(query), "UPDATE players SET WarnReason1 = null, WarnReason2 = null WHERE Name = '%e'", user);
			mysql_tquery(this, query);

			updatewarns = 0;

			mysql_format(this, query, sizeof(query), "INSERT INTO player_banned (Name, Admin, Reason, Date, UnbanTime) VALUES ('%e', '%e', '%e', '%e', '%d')",
				user, ReturnName(playerid), reason, ReturnDate(), (15 * 86400) + gettime());
			mysql_tquery(this, query);
		}

		mysql_format(this, query, sizeof(query), "UPDATE players SET Warns = '%d' WHERE Name = '%e'", updatewarns, user);
		mysql_tquery(this, query);

		SendAdminAction(playerid, "Você baniu %s (terceiro aviso) pelo motivo: %s", user, reason);
	}

	return 1;
}

this::FurnitureCheckTexture(playerid, objectid)
{
	new rows, index, material, havetexture[MAX_INDEX_OBJECT] = {-1, ...}, texturename[MAX_INDEX_OBJECT][64];

	sz_MiscString[0] = 0;

	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureIndex", index);
		cache_get_value_name_int(i, "textureMaterial", material);
		if(material != 19341)
		{
			cache_get_value_name(i, "textureNickName", texturename[index], 64);
			havetexture[index] = 1;
		}		
	}

	for(new i = 0; i < MAX_INDEX_OBJECT; i++)
	{
		if(havetexture[i] == 1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sTexture Slot %d {959ca8}(%s)\n", sz_MiscString, i, texturename[i]);
		}
		else
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sTexture Slot %d\n", sz_MiscString, i);
		}
	}

	Dialog_Show(playerid, FurnitureTextureSlot, DIALOG_STYLE_LIST, sprintf("Editar Textura: %s", FurnitureData[furnitureName]), sz_MiscString, "Selecionar", "<<");

	return 1;
}

this::FurnitureCheckColor(playerid, objectid)
{
	new rows, index, color, havecolor[MAX_INDEX_OBJECT] = {-1, ...}, colorname[MAX_INDEX_OBJECT][64];

	sz_MiscString[0] = 0;

	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureIndex", index);
		cache_get_value_name_int(i, "textureColor", color);
		if(color != 0)
		{
			cache_get_value_name(i, "textureColorName", colorname[index], 64);
			havecolor[index] = 1;
		}		
	}

	for(new i = 0; i < MAX_INDEX_OBJECT; i++)
	{
		if(havecolor[i] == 1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sColor Slot %d {959ca8}(%s)\n", sz_MiscString, i, colorname[i]);
		}
		else
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sColor Slot %d\n", sz_MiscString, i);
		}
	}

	Dialog_Show(playerid, FurnitureColorSlot, DIALOG_STYLE_LIST, sprintf("Editar Cor: %s", FurnitureData[furnitureName]), sz_MiscString, "Selecionar", "<<");

	return 1;
}

this::Furniture_CloneMaterials(playerid, bool:save, furnitureobject)
{
	new rows, textureindex, texturetxd[64], texturename[64], texturenickname[64], texturematerial, texturecolor, texturecolorname[15], query[350];
	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureIndex", textureindex);
		cache_get_value_name_int(i, "textureMaterial", texturematerial);
		cache_get_value_name_int(i, "textureColor", texturecolor);
		cache_get_value_name(i, "textureTXD", texturetxd, 64);
		cache_get_value_name(i, "textureName", texturename, 64);
		cache_get_value_name(i, "textureNickName", texturenickname, 64);
		cache_get_value_name(i, "textureColorName", texturecolorname, 15);

		if(!save)
		{
			SetDynamicObjectMaterial(PlayerData[playerid][pFurnitureObject], textureindex, texturematerial, texturetxd, texturename, texturecolor);
		}
		else
		{
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, furnitureobject, E_STREAMER_EXTRA_ID, FurnitureData);
			
			mysql_format(this, query, sizeof(query), "INSERT INTO `mobiliastextura` (`furnitureID`, `textureIndex`, `textureMaterial`, `textureTXD`, `textureName`, `textureNickName`, `textureColor`, `textureColorName`) VALUES ('%d', '%d', '%d', '%e', '%e', '%e', '%d', '%e')",
			FurnitureData[furnitureID],
			textureindex,
			texturematerial,
			texturetxd,
			texturename,
			texturenickname,
			texturecolor,
			texturecolorname);
			mysql_tquery(this, query);
		}
	}

	return 1;
}

this::DeleteFurnitureMaterial(playerid, id, type)
{
	new rows, material, color, index, query[185];
	cache_get_row_count(rows);

	switch(type)
	{
		case 0,1:
		{
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			if(rows)
			{
				cache_get_value_name_int(0, "textureMaterial", material);
				cache_get_value_name_int(0, "textureColor", color);
				cache_get_value_name_int(0, "textureIndex", index);

				if(type == 0)
				{
					if(color == 0)
					{
						mysql_format(this, query, sizeof(query), "DELETE FROM `mobiliastextura` WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
					}
					else
					{
						mysql_format(this, query, sizeof(query), "UPDATE `mobiliastextura` SET textureMaterial = '19341', textureName = 'invalid', textureTXD = 'invalid', textureNickName = 'N/A' WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
					}
					mysql_tquery(this, query);

					mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
					mysql_tquery(this, query, "FurnitureCheckTexture", "dd", playerid, id);
				}
				else if(type == 1)
				{
					if(material == 19341)
					{
						mysql_format(this, query, sizeof(query), "DELETE FROM `mobiliastextura` WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
					}
					else
					{
						mysql_format(this, query, sizeof(query), "UPDATE `mobiliastextura` SET textureColor = '0', textureColorName = 'N/A' WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
					}
					mysql_tquery(this, query);

					mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
					mysql_tquery(this, query, "FurnitureCheckColor", "dd", playerid, id);
				}
			}
			else
			{
				if(type == 0)
				{
					mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
					mysql_tquery(this, query, "FurnitureCheckTexture", "dd", playerid, id);
				}
				else if(type == 1)
				{
					mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
					mysql_tquery(this, query, "FurnitureCheckColor", "dd", playerid, id);
				}
			}
		}
		case 2,3:
		{
			for(new i = 0; i < rows; i++)
			{
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

				cache_get_value_name_int(i, "textureMaterial", material);
				cache_get_value_name_int(i, "textureColor", color);
				cache_get_value_name_int(i, "textureIndex", index);
				
				if(type == 2)
				{
					if(color == 0)
					{
						mysql_format(this, query, sizeof(query), "DELETE FROM `mobiliastextura` WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
					}
					else
					{
						mysql_format(this, query, sizeof(query), "UPDATE `mobiliastextura` SET textureMaterial = '19341', textureName = 'invalid', textureTXD = 'invalid', textureNickName = 'N/A' WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
					}
					mysql_tquery(this, query);
				}
				else if(type == 3)
				{
					if(material == 19341)
					{
						mysql_format(this, query, sizeof(query), "DELETE FROM `mobiliastextura` WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
					}
					else
					{
						mysql_format(this, query, sizeof(query), "UPDATE `mobiliastextura` SET textureColor = '0', textureColorName = 'N/A' WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
					}
					mysql_tquery(this, query);
				}
			}
		}
	}

	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

	for(new j = 0; j < MAX_INDEX_OBJECT; j++) 
		SetDynamicObjectMaterial(id, j, 19341, "invalid", "invalid");

	mysql_format(this, query, sizeof(query), "SELECT * FROM `mobiliastextura` WHERE `furnitureID` = '%d'", FurnitureData[furnitureID]);
	mysql_tquery(this, query, "OnLoadFurnitureTextures", "d", id);	

	return 1;
}

this::ObjectCheckTexture(playerid, objectid)
{
	new rows, index, material, havetexture[MAX_INDEX_OBJECT] = {-1, ...}, texturename[MAX_INDEX_OBJECT][64];

	sz_MiscString[0] = 0;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureIndex", index);
		cache_get_value_name_int(i, "textureMaterial", material);
		if(material != 19341)
		{
			cache_get_value_name(i, "textureNickName", texturename[index], 64);
			havetexture[index] = 1;
		}
	}

	for(new i = 0; i < MAX_INDEX_OBJECT; i++)
	{
		if(havetexture[i] == 1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sTexture Slot %d {959ca8}(%s)\n", sz_MiscString, i, texturename[i]);
		}
		else
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sTexture Slot %d\n", sz_MiscString, i);
		}
	}

	Dialog_Show(playerid, ObjectTextureSlot, DIALOG_STYLE_LIST, sprintf("Editar Textura: %d", objectid), sz_MiscString, "Selecionar", "<<");

	return 1;
}

this::ObjectCheckColor(playerid, objectid)
{
	new rows, index, color, havecolor[MAX_INDEX_OBJECT] = {-1, ...}, colorname[MAX_INDEX_OBJECT][64];

	sz_MiscString[0] = 0;

	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureIndex", index);
		cache_get_value_name_int(i, "textureColor", color);
		if(color != 0)
		{
			cache_get_value_name(i, "textureColorName", colorname[index], 64);
			havecolor[index] = 1;
		}		
	}

	for(new i = 0; i < MAX_INDEX_OBJECT; i++)
	{
		if(havecolor[i] == 1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sColor Slot %d {959ca8}(%s)\n", sz_MiscString, i, colorname[i]);
		}
		else
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sColor Slot %d\n", sz_MiscString, i);
		}
	}

	Dialog_Show(playerid, ObjectColorSlot, DIALOG_STYLE_LIST, sprintf("Editar Cor: %d", objectid), sz_MiscString, "Selecionar", "<<");

	return 1;
}

this::Sewer_Load()
{
	new rows;
	cache_get_row_count(rows);

	for(new i = 0; i < rows && i < MAX_SEWER; i++)
	{
		SewerData[i][sewerExists] = true;

		cache_get_value_name_int(i, "sewerID", SewerData[i][sewerID]);
		cache_get_value_name(i, "sewerName", SewerData[i][sewerName]);

		cache_get_value_name_float(i, "sewerX", SewerData[i][sewerX]);
		cache_get_value_name_float(i, "sewerY", SewerData[i][sewerY]);
		cache_get_value_name_float(i, "sewerZ", SewerData[i][sewerZ]);
		cache_get_value_name_float(i, "sewerRX", SewerData[i][sewerRX]);
		cache_get_value_name_float(i, "sewerRY", SewerData[i][sewerRY]);
		cache_get_value_name_float(i, "sewerRZ", SewerData[i][sewerRZ]);

		Sewer_Refresh(i);

		Iter_Add(Sewer, i);
	}

	if(!rows)
	{
		printf("Server: nenhum bueiro carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "bueiro foi carregado" : "bueiros foram carregados");
	}

	return 1;
}

this::OnSewerCreated(sewerid)
{
	if(sewerid == -1 || !SewerData[sewerid][sewerExists])
		return 0;

	SewerData[sewerid][sewerID] = cache_insert_id();

	Sewer_Save(sewerid);

	return 1;
}

this::DeleteObjectMaterial(playerid, id, type)
{
	new rows, material, color, index, query[185];
	cache_get_row_count(rows);

	switch(type)
	{
		case 0,1:
		{
			if(rows)
			{
				cache_get_value_name_int(0, "textureMaterial", material);
				cache_get_value_name_int(0, "textureColor", color);
				cache_get_value_name_int(0, "textureIndex", index);

				if(type == 0)
				{
					if(color == 0)
					{
						mysql_format(this, query, sizeof(query), "DELETE FROM `objetostextura` WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], index);
					}
					else
					{
						mysql_format(this, query, sizeof(query), "UPDATE `objetostextura` SET textureMaterial = '19341', textureName = 'invalid', textureTXD = 'invalid', textureNickName = 'N/A' WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], index);
					}
					mysql_tquery(this, query);

					mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[id][objectID]);
					mysql_tquery(this, query, "ObjectCheckTexture", "dd", playerid, id);
				}
				else if(type == 1)
				{
					if(material == 19341)
					{
						mysql_format(this, query, sizeof(query), "DELETE FROM `objetostextura` WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], index);
					}
					else
					{
						mysql_format(this, query, sizeof(query), "UPDATE `objetostextura` SET textureColor = '0', textureColorName = 'N/A' WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], index);
					}
					mysql_tquery(this, query);

					mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[id][objectID]);
					mysql_tquery(this, query, "ObjectCheckColor", "dd", playerid, id);
				}
			}
			else
			{
				if(type == 0)
				{
					mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[id][objectID]);
					mysql_tquery(this, query, "ObjectCheckTexture", "dd", playerid, id);
				}
				else if(type == 1)
				{
					mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[id][objectID]);
					mysql_tquery(this, query, "ObjectCheckColor", "dd", playerid, id);
				}
			}
		}
		case 2,3:
		{
			for(new i = 0; i < rows; i++)
			{
				cache_get_value_name_int(i, "textureMaterial", material);
				cache_get_value_name_int(i, "textureColor", color);
				cache_get_value_name_int(i, "textureIndex", index);
				
				if(type == 2)
				{
					if(color == 0)
					{
						mysql_format(this, query, sizeof(query), "DELETE FROM `objetostextura` WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], index);
					}
					else
					{
						mysql_format(this, query, sizeof(query), "UPDATE `objetostextura` SET textureMaterial = '19341', textureName = 'invalid', textureTXD = 'invalid', textureNickName = 'N/A' WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], index);
					}
					mysql_tquery(this, query);
				}
				else if(type == 3)
				{
					if(material == 19341)
					{
						mysql_format(this, query, sizeof(query), "DELETE FROM `objetostextura` WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], index);
					}
					else
					{
						mysql_format(this, query, sizeof(query), "UPDATE `objetostextura` SET textureColor = '0', textureColorName = 'N/A' WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], index);
					}
					mysql_tquery(this, query);
				}
			}
		}
	}

	for(new j = 0; j < MAX_INDEX_OBJECT; j++) 
		SetDynamicObjectMaterial(ObjectData[id][objectObject], j, 19341, "invalid", "invalid");

	mysql_format(this, query, sizeof(query), "SELECT * FROM `objetostextura` WHERE `objectID` = '%d'", ObjectData[id][objectID]);
	mysql_tquery(this, query, "OnLoadObjectTextures", "d", id);	

	return 1;
}

this::PlayerFishing(playerid, Float:Fish_PosX, Float:Fish_PosY, Float:Fish_PosZ)
{
	if(!PlayerData[playerid][pFishing])
		return 0;

	ClearAnimations(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerData[playerid][pFishing] = false;

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, Fish_PosX, Fish_PosY, Fish_PosZ))
	{
		return SendWarningMessage(playerid, "Você não está próximo ao local onde foi iniciado a pesca.");
	}

	Daily_Update(playerid, 6);

	switch(random(18))
	{
		case 0,17,8:
		{
			new randomx = randomEx(5,21);
			randomx = (PlayerData[playerid][pFishingWeight] + randomx >= 1000) ? (1000) : (randomx);
			PlayerData[playerid][pFishingWeight] += randomx;

			SendGreenMessage(playerid, "Você pescou um 'Atum' de %d libras.", randomx);
		}
		case 1,16:
		{
			new randomx = randomEx(8,14);
			randomx = (PlayerData[playerid][pFishingWeight] + randomx >= 1000) ? (1000) : (randomx);
			PlayerData[playerid][pFishingWeight] += randomx;

			SendGreenMessage(playerid, "Você pescou um 'Barracuda' de %d libras.", randomx);
		}
		case 2,15:
		{
			new randomx = randomEx(11,31);
			randomx = (PlayerData[playerid][pFishingWeight] + randomx >= 1000) ? (1000) : (randomx);
			PlayerData[playerid][pFishingWeight] += randomx;

			SendGreenMessage(playerid, "Você pescou um 'Caranha' de %d libras.", randomx);
		}
		case 3,14,9:
		{
			new randomx = randomEx(1,19);
			randomx = (PlayerData[playerid][pFishingWeight] + randomx >= 1000) ? (1000) : (randomx);
			PlayerData[playerid][pFishingWeight] += randomx;

			SendGreenMessage(playerid, "Você pescou uma 'Corvina' de %d libras.", randomx);
		}
		case 4,13:
		{
			new randomx = randomEx(50,112);
			randomx = (PlayerData[playerid][pFishingWeight] + randomx >= 1000) ? (1000) : (randomx);
			PlayerData[playerid][pFishingWeight] += randomx;

			SendGreenMessage(playerid, "Você pescou um 'Marlim Branco' de %d libras.", randomx);
		}
		case 5,12:
		{
			new randomx = randomEx(31,51);
			randomx = (PlayerData[playerid][pFishingWeight] + randomx >= 1000) ? (1000) : (randomx);
			PlayerData[playerid][pFishingWeight] += randomx;

			SendGreenMessage(playerid, "Você pescou um 'Robalo' de %d libras.", randomx);
		}
		case 6,11:
		{
			SendGreenMessage(playerid, "Você pescou uma lata de tinta vazia.");
		}
		case 7,10:
		{
			SendGreenMessage(playerid, "A isca escapou do anzól.");
		}
	}

	return 1;
}

this::DelayedShowCheckpoint(playerid, Float:X, Float:Y, Float:Z)
{
	return Waypoint_Set(playerid, "Vaga de Estacionamento", X, Y, Z);
}

this::Furniture_ShowList(playerid, page)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Você precisa ter alguma mobília comprada para poder usar o inventário.");

	new objectid, count, vw = GetPlayerVirtualWorld(playerid), Float:distance;

	sz_MiscString[0] = 0;

	if(!page)
		format(sz_MiscString, sizeof(sz_MiscString), "{FFFF00}>> Selecionar Mobília\n");

	for(new i = page * MAX_PAGE_FURNITURE; i < rows; i++)
	{
		if(count + 1 == MAX_PAGE_FURNITURE + 1) 
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s>> Próxima Página\n", sz_MiscString);
			break;
		}
		
		cache_get_value_name_int(i, "furnitureObject", objectid);

		if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID) != vw) 
			continue;

		if(!IsValidDynamicObject(objectid)) 
			continue;

		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);

		if(!strlen(FurnitureData[furnitureName]) || !FurnitureData[furniturePrice])
			continue;

		distance = GetPlayerDistanceFromPoint(playerid, FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ]);

		if(distance > 10.0) 
			format(sz_MiscString, sizeof(sz_MiscString), "%s{8D8D8D}%d. %s\n", sz_MiscString, (page * MAX_PAGE_FURNITURE) + (count+1), FurnitureData[furnitureName]);
		else 
			format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s (%.1f m)\n", sz_MiscString, (page * MAX_PAGE_FURNITURE) + (count+1), FurnitureData[furnitureName], distance);

		ListedOptions[playerid][count++] = objectid;
	}

	if(PlayerData[playerid][pPage] >= 2) 
		format(sz_MiscString, sizeof(sz_MiscString), "%s<< Página Anterior", sz_MiscString);

	Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, sprintf("{FFFFFF}Inventário de mobília ({00FF00}%d{FFFFFF}) - Página %d de %d", rows, page + 1, (rows / MAX_PAGE_FURNITURE) + 1), sz_MiscString, "Selecionar", "<<");

	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	new query[75];

	if(GetPVarInt(playerid, "SelectObject_Type") == 1) 
	{	
		mysql_format(this, query, sizeof(query), "SELECT * FROM mobilias WHERE furnitureObject = '%d'", objectid);
		mysql_tquery(this, query, "Furniture_Select", "dd", playerid, objectid);
	}
	else
		SendWarningMessage(playerid, "Opção de seleção inválida, contate um administrador.");

	return 1;
}

this::Furniture_Select(playerid, objectid)
{
	if(cache_num_rows()) 
	{
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, FurnitureData);
		
		if(GetPlayerDistanceFromPoint(playerid, FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ]) > 10.0)
			return SendWarningMessage(playerid, "Você não está próximo desta mobília (10 metros).");

		new furniturename[128];
		cache_get_value_name(0, "furnitureName", furniturename, 128);

		PlayerData[playerid][pSelectedSlot] = objectid;
		Furniture_ShowOptions(playerid);
		CancelEdit(playerid);

		SendGreenMessage(playerid, "Você selecionou a mobília \"%s\" com sucesso.", furniturename);
	}
	else
		SendWarningMessage(playerid, "Esse objeto não faz parte do seu inventário de mobílias.");
	
	return 1;
}

this::CheckPlayerBan(playerid)
{
	new query[100], playerip[16];

	GetPlayerIp(playerid, playerip, 16);

	mysql_format(this, query, sizeof(query), "SELECT * FROM player_banned WHERE Name = '%e' OR IP = '%e'", ReturnName(playerid), playerip);
	mysql_tquery(this, query, "OnPlayerBanned", "d", playerid);
	
	return 1;
}

this::DailyTaskCheck(actualday)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
	{
		new query[72];
		mysql_format(this, query, sizeof(query), "UPDATE server_config SET active = '%d' WHERE entry_id = '3'", actualday);
		mysql_tquery(this, query);

		//reset all player tasks
		mysql_tquery(this, "DELETE FROM dailytasks");

		printf("Tabela 'dailytasks' resetada para o novo dia %d.", actualday);
	}

	return 1;
}

this::CheckPlayerMask(playerid, maskid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Nenhum resultado encontrado para a máscara ID: \"#%d\".", maskid);

	new maskowner[24], maskbought[16];

	cache_get_value_name(0, "maskOwner", maskowner, 24);
	cache_get_value_name(0, "maskBought", maskbought, 16);

	SendGreenMessage(playerid, "* Máscara ID: #%d - Jogador: %s (ID: OFF-LINE) - Comprada em: %s.", maskid, maskowner, maskbought);

	return 1;
}

this::OnPlayerFinishedRobbing(playerid)
{
	if(!PlayerData[playerid][pRobbing])
		return SendWarningMessage(playerid, "Não foi possível concluir o seu roubo.");

	new id = PlayerData[playerid][pRobbingID];

	switch(PlayerData[playerid][pRobbing])
	{
		case ROBBING_ATM: 
		{
			if(!IsPlayerInRangeOfPoint(playerid, 3.0, ATMData[id][atmPos][0], ATMData[id][atmPos][1], ATMData[id][atmPos][2])) 
			{
				ResetPlayerRob(playerid);
				return SendWarningMessage(playerid, "Você não está próximo do caixa eletrônico no qual iniciou o roubo.");
			}
			new robstring[53];
			format(robstring, sizeof(robstring), "Roubo no ATM de %s.", GetLocation(ATMData[id][atmPos][0], ATMData[id][atmPos][1], ATMData[id][atmPos][2]));

			//store atm money value
			new moneyrobbed = ATMData[id][atmMoney];
			
			//set atm robbed and save
			ATMData[id][atmRobbed] = 1;
			ATMData[id][atmMoney] = 0;
			ATMData[id][atmTime] = gettime();
			ATM_Save(id);

			//give player money rob and finalize it
			GiveScriptedMoney(playerid, moneyrobbed);
			SendGreenMessage(playerid, "Você conseguiu finalizar o roubo e ganhou %s.", FormatNumber(moneyrobbed));
		}
	}

	ResetPlayerRob(playerid);

	return 1;
}

this::OnGOVCheckATMs(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendGreenMessage(playerid, "Nenhum problema registrado para os caixas eletrônicos, todos estão operando normalmente.");

	new count, atmid, atmrobbed, atmnomoney, Float:atmpos[3], atmtime, dia, mes, ano, hora, minuto, segundo, atmworld;

	sz_MiscString[0] = 0;

	format(sz_MiscString, sizeof(sz_MiscString), "Localização\tÚltima operação\tRegistro\n");

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "atmID", atmid);
		cache_get_value_name_int(i, "atmRobbed", atmrobbed);
		cache_get_value_name_int(i, "atmMoney", atmnomoney);
		cache_get_value_name_int(i, "atmTime", atmtime);
		cache_get_value_name_int(i, "atmWorld", atmworld);
		cache_get_value_name_float(i, "atmX", atmpos[0]);
		cache_get_value_name_float(i, "atmY", atmpos[1]);
		cache_get_value_name_float(i, "atmZ", atmpos[2]);

		TimestampToDate(atmtime, ano, mes, dia, hora, minuto, segundo);

		if(atmrobbed) 
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%02d/%02d/%02d - %02d:%02d:%02d\tRoubado/Furtado\n", sz_MiscString, (atmworld == 505) ? ("Los Santos Bank") : (GetLocation(atmpos[0], atmpos[1], atmpos[2])), dia, mes, ano, hora, minuto, segundo);
		}
		else if(!atmnomoney) 
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%02d/%02d/%02d - %02d:%02d:%02d\tCaixa Vazio\n", sz_MiscString, (atmworld == 505) ? ("Los Santos Bank") : (GetLocation(atmpos[0], atmpos[1], atmpos[2])), dia, mes, ano, hora, minuto, segundo);
		}

		ListedOptions[playerid][count++] = atmid;
	}

	Dialog_Show(playerid, ATMS_Problem, DIALOG_STYLE_TABLIST_HEADERS, sprintf("{FFFFFF}ATMs com problemas ({00FF00}%d{FFFFFF})", rows), sz_MiscString, "Selecionar", "Voltar");

	return 1;
}

this::OnAdminRequestLog(playerid, page)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Nenhum resultado encontrado, tente novamente.");

	new log[256], count = 0, logid, playername[24];

	sz_MiscString[0] = 0;

	if(!page) 
	{
		format(sz_MiscString, sizeof(sz_MiscString), ">> Fazer uma busca\n");
	}

	for(new i = page * MAX_PAGE_LOG; i < rows; i++)
	{
		if(count + 1 == MAX_PAGE_LOG + 1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s>> Próxima Página\n", sz_MiscString);
			break;
		}

		cache_get_value_name_int(i, "LogID", logid);
		cache_get_value_name(i, "PlayerName", playername, 24);
		cache_get_value_name(i, "Log", log, 256);

		if(strlen(log) > 100) 
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s%.100s ...\n", sz_MiscString, log);
		}
		else {
			format(sz_MiscString, sizeof(sz_MiscString), "%s%s\n", sz_MiscString, log);
		}

		ListedOptions[playerid][count++] = logid;
	}

	if(PlayerData[playerid][pPage] >= 2) 
	{
		format(sz_MiscString, sizeof(sz_MiscString), "%s<< Página Anterior", sz_MiscString);
	}

	Dialog_Show(playerid, Player_Log, DIALOG_STYLE_TABLIST_HEADERS, sprintf("{FFFFFF}Registros do jogador %s ({00FF00}%d{FFFFFF}) - Página %d de %d", playername, rows, PlayerData[playerid][pPage], (rows / MAX_PAGE_LOG) + 1), "Descrição\n%s", "Visualizar", "Cancelar", sz_MiscString);

	return 1;
}

this::OnAdminViewLog(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Nenhum resultado encontrado, tente novamente.");

	new playername[24], logid, log[256], string[400];

	cache_get_value_name_int(0, "LogID", logid);
	cache_get_value_name(0, "Log", log, 256);
	cache_get_value_name(0, "PlayerName", playername, 24);

	Dialog_Show(playerid, Player_Log_Info, DIALOG_STYLE_MSGBOX, "Visualizando informações do registro", "\n{FFFFFF}Usuário: %s\nRegistro único: %d\n%s\n", "Voltar", "Imprimir", playername, logid, log);
	
	if(strlen(log) > 120)
	{
		format(string, sizeof(string), "\n{FFFFFF}Usuário: %s\nRegistro único: %d\n%.120s", playername, logid, log);
		format(string, sizeof(string), "%s\n...%s\n", string, log[120]);
	}
	else
	{
		format(string, sizeof(string), "\n{FFFFFF}Usuário: %s\nRegistro único: %d\n%s\n", playername, logid, log);
	}

	SetPVarString(playerid, "VAR_PlayerLogInfo_Str", string);
	
	return 1;
}

this::OnAdminSearchLog(playerid, search[])
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Nenhum resultado para o critério: \"%s\".", search);
	
	new count, logid, log[256];

	sz_MiscString[0] = 0;

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "LogID", logid);
		cache_get_value_name(i, "Log", log, 256);

		if(strlen(log) > 67) 
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s%.67s ...\n", sz_MiscString, log);
		} 
		else {
			format(sz_MiscString, sizeof(sz_MiscString), "%s%s\n", sz_MiscString, log);
		}

		ListedOptions[playerid][count++] = logid;
	}

	Dialog_Show(playerid, Player_Log_Result, DIALOG_STYLE_TABLIST_HEADERS, sprintf("{00FF00}%d{FFFFFF} Resultados Encontrados (%s)", rows, search), "Descrição\n%s", "Visualizar", "Voltar", sz_MiscString);

	return 1;
}


this::Ad_ShowList(playerid, page)
{
	new rows, ad_id, ad_text[128], seranunciado[8], count, ad_time, hora, minuto, segundo, dia, mes, ano;

	sz_MiscString[0] = 0;

	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Não há registros de anúncio(s) a ser(em) publicados.");

	format(sz_MiscString, sizeof(sz_MiscString), "ID\tPrévia do anúncio\tSerá anúnciado às:\n");

	for(new i = page * MAX_PAGE_AD; i < rows; i++)
	{
		if(count + 1 == MAX_PAGE_AD + 1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s>> Próxima Página\n", sz_MiscString);
			break;
		}

		cache_get_value_name_int(i, "adID", ad_id);
		cache_get_value_name(i, "adText", ad_text, 128);
		cache_get_value_name_int(i, "adTime", ad_time);

		if(!strlen(ad_text))
			continue;

		count++;

		TimestampToDate(ad_time, ano, mes, dia, hora, minuto, segundo);

		format(seranunciado, sizeof(seranunciado), "%02d:%02d", hora, minuto);

		if(strlen(ad_text) > 20)
			format(sz_MiscString, sizeof(sz_MiscString), "%s#%d\t%.20s ...\t%s\n", sz_MiscString, (page * MAX_PAGE_AD) + count, ad_text, seranunciado);
		else
			format(sz_MiscString, sizeof(sz_MiscString), "%s#%d\t%s\t%s\n", sz_MiscString, (page * MAX_PAGE_AD) + count, ad_text, seranunciado);

		ListedOptions[playerid][count - 1] = ad_id;
	}

	if((page + 1) >= 2)
		format(sz_MiscString, sizeof(sz_MiscString), "%s<< Página Anterior", sz_MiscString);

	if(!PlayerData[playerid][pAdmin])
		Dialog_Show(playerid, AdList, DIALOG_STYLE_TABLIST_HEADERS, sprintf("{FFFFFF}Anúncios na Fila({00FF00}%d{FFFFFF})", rows), sz_MiscString, "Fechar", "");
	else
		Dialog_Show(playerid, AdList, DIALOG_STYLE_TABLIST_HEADERS, sprintf("{FFFFFF}Anúncios na Fila({00FF00}%d{FFFFFF})", rows), sz_MiscString, "Editar", "Fechar");

	return 1;
}

this::CreateFactionSupply(playerid)
{
	new quantity, type, id;

	//getting values
	id = random(sizeof(g_aCrateLocation));
	quantity = GetPVarInt(playerid, "Quantia_BM");
	type = GetPVarInt(playerid, "Tipo_BM");

	//creating drop
	BlackMarketHasBought[PlayerData[playerid][pFaction]] = true;
	Crate_Create(type, quantity, g_aCrateLocation[id][BM_X], g_aCrateLocation[id][BM_Y], g_aCrateLocation[id][BM_Z], g_aCrateLocation[id][BM_A]);

	//dynamic msg
	static DynamicCrateMessage[][] = {
		"Eae meu chapa, tá", "Coé, deixei", "Ae parcero, deixei", "Meu truta, deixei", "Ae caralho, tá", "Vai rapido porra, tá", "Vlw parcero, deixei",
		"Se liga, deixei"
	};
	new msg = random(sizeof(DynamicCrateMessage)), string[120];

	//warning player
	format(string, sizeof(string), "%s %s", DynamicCrateMessage[msg], g_aCrateLocation[id][BM_DESC]);

	if(strlen(string) > 75)
	{
		new str[76];

		format(str, sizeof(str), "%.75s", string);
		Phone_SendMessage(BLACKMARKET_NUMBER, Phone_GetNumberByID(PlayerData[playerid][pID]), str);
		format(str, sizeof(str), "%s", string[75]);
		Phone_SendMessage(BLACKMARKET_NUMBER, Phone_GetNumberByID(PlayerData[playerid][pID]), str);
	}
	else
	{
		Phone_SendMessage(BLACKMARKET_NUMBER, Phone_GetNumberByID(PlayerData[playerid][pID]), string);
	}

	//resetting pvars
	DeletePVar(playerid, "Total_BM");
	DeletePVar(playerid, "Tipo_BM");
	DeletePVar(playerid, "Quantia_BM");

	return 1;
}

this::Tower_Load()
{
	new rows;
	cache_get_row_count(rows);

	for(new i = 0; i < rows && i < MAX_TOWERS; i++)
	{
		TowerData[i][towerExists] = true;
		
		cache_get_value_name_int(i, "towerID", TowerData[i][towerID]);

		cache_get_value_name_float(i, "towerSignal", TowerData[i][towerSignal]);

		cache_get_value_name_float(i, "towerX", TowerData[i][towerX]);
		cache_get_value_name_float(i, "towerY", TowerData[i][towerY]);
		cache_get_value_name_float(i, "towerZ", TowerData[i][towerZ]);

		cache_get_value_name_float(i, "towerRX", TowerData[i][towerRX]);
		cache_get_value_name_float(i, "towerRY", TowerData[i][towerRY]);
		cache_get_value_name_float(i, "towerRZ", TowerData[i][towerRZ]);

		cache_get_value_name(i, "towerName", TowerData[i][towerName], 64);

		Tower_Refresh(i);

		Iter_Add(Towers, i);
	}

	if(!rows)
	{
		printf("Server: nenhuma torre de celular carregada da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "torre de celular foi carregada" : "torres de celular foram carregadas");
	}

	return 1;
}

this::OnTowerCreated(towerid)
{
	if(towerid == -1 || !TowerData[towerid][towerExists])
		return 0;

	TowerData[towerid][towerID] = cache_insert_id();
	Tower_Save(towerid);

	return 1;
}

this::Complex_Load()
{
	new rows;
	cache_get_row_count(rows);

	for(new i = 0; i < rows && i < MAX_COMPLEX; i++)
	{
		ComplexData[i][complexExists] = true;

		cache_get_value_name_int(i, "complexID", ComplexData[i][complexID]);

		cache_get_value_name(i, "complexName", ComplexData[i][complexName], 64);

		cache_get_value_name_float(i, "complexX", ComplexData[i][complexX]);
		cache_get_value_name_float(i, "complexY", ComplexData[i][complexY]);
		cache_get_value_name_float(i, "complexZ", ComplexData[i][complexZ]);

		cache_get_value_name_float(i, "complexIntX", ComplexData[i][complexIntX]);
		cache_get_value_name_float(i, "complexIntY", ComplexData[i][complexIntY]);
		cache_get_value_name_float(i, "complexIntZ", ComplexData[i][complexIntZ]);

		cache_get_value_name_int(i, "complexLocked", ComplexData[i][complexLocked]);
		cache_get_value_name_int(i, "complexVW", ComplexData[i][complexVW]);
		cache_get_value_name_int(i, "complexInterior", ComplexData[i][complexInterior]);

		Complex_Refresh(i);

		Iter_Add(Complex, i);
	}

	if(!rows)
	{
		printf("Server: nenhum complexo carregado da database \""MYSQL_DB"\".");
	}
	else
	{
		printf("Server: %d %s da database \""MYSQL_DB"\".", rows, rows == 1 ? "complexo foi carregado" : "complexos foram carregados");
	}

	return 1;
}

this::OnComplexCreated(complexid)
{
	if(complexid == -1 || !ComplexData[complexid][complexExists])
		return 0;

	ComplexData[complexid][complexID] = cache_insert_id();
	Complex_Save(complexid);
	Complex_Refresh(complexid);

	return 1;
}

this::OnPlayerSearchRefund(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Não existe um refundo válido para a sua conta.");

	new count, refundid, string[550], adminname[24], type, weaponid, ammo, model, quantity;

	format(string, sizeof(string), "Refundo\tAdmin\tTipo\tQuantidade\n");

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name(i, "refundAdmin", adminname, 24);

		cache_get_value_name_int(i, "refundID", refundid);

		cache_get_value_name_int(i, "refundType", type);
		cache_get_value_name_int(i, "refundWeapon", weaponid);
		cache_get_value_name_int(i, "refundAmmo", ammo);
		cache_get_value_name_int(i, "refundVehicleModel", model);
		cache_get_value_name_int(i, "refundQuantity", quantity);

		if(type == REFUND_WEAPON)
			format(string, sizeof(string), "%s%s\t%s\t%s\t%d\n", string, Refund_GetType(type), adminname, ReturnWeaponName(weaponid), ammo);
		else if(type == REFUND_VEHICLE)
			format(string, sizeof(string), "%s%s\t%s\t%s\t1\n", string, Refund_GetType(type), adminname, ReturnVehicleModelName(model));
		else
			format(string, sizeof(string), "%s%s\t%s\t-\t%d\n", string, Refund_GetType(type), adminname, quantity);
		
		ListedOptions[playerid][count++] = refundid;
	}

	Dialog_Show(playerid, RefundPlayer, DIALOG_STYLE_TABLIST_HEADERS, "Meus refundos:", string, "Selecionar", "Cancelar");

	return 1;
}

this::OnPlayerUseRefund(playerid, id, use)
{
	new rows, type, weaponid, ammo, quantity, vehiclemodel, color1, color2, query[128];
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Erro ao utilizar o refundo, entre em contato com a administração.");

	cache_get_value_name_int(0, "refundType", type);

	cache_get_value_name_int(0, "refundWeapon", weaponid);
	cache_get_value_name_int(0, "refundAmmo", ammo);

	cache_get_value_name_int(0, "refundQuantity", quantity);

	cache_get_value_name_int(0, "refundVehicleModel", vehiclemodel);
	cache_get_value_name_int(0, "refundVehicleColor1", color1);
	cache_get_value_name_int(0, "refundVehicleColor2", color2);

	if(!use) //tela de confirmação
	{
		new adminname[24], item[45];
		cache_get_value_name(0, "refundAdmin", adminname, 24);

		switch(type)
		{
			case REFUND_WEAPON: format(item, sizeof(item), "%s com %d %s", ReturnWeaponName(weaponid), ammo, ammo == 1 ? "bala" : "balas");
			case REFUND_VEHICLE: format(item, sizeof(item), "1 %s", ReturnVehicleModelName(vehiclemodel));
			case REFUND_MONEY: format(item, sizeof(item), "Dinheiro (%s)", FormatNumber(quantity));
			case REFUND_LSD, REFUND_MARIJUANA, REFUND_COCAINE, REFUND_GUNPART: format(item, sizeof(item), "%s com %d %s", Refund_GetType(type), quantity, quantity == 1 ? "unidade" : "unidades");
		}

		SetPVarInt(playerid, "VAR_RefundSelected_ID", id);

		Dialog_Show(playerid, RefundPlayer_Confirm, DIALOG_STYLE_MSGBOX, "Refundo Automático", "\nInformações do Refundo\nDestinatário: %s\nAutor: %s\nItem: %s\n\nINFO: Se o item informado não for o mesmo pedido no refundo\ncontate o autor responsável.", "Receber", "<<", ReturnName(playerid), adminname, item);
	}
	else
	{
		switch(type)
		{
			case REFUND_WEAPON:
			{
				if(PlayerData[playerid][pTimePlayed] < 2)
					return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

				if(PlayerHasWeapon(playerid, weaponid))
					return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

				if(PlayerHasWeaponInSlot(playerid, weaponid))
					return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você precisa estar offduty para poder receber esse refundo.");

				GiveWeaponToPlayer(playerid, weaponid, ammo);

				SendGreenMessage(playerid, "Você resgatou o refundo de arma %s com %d de munição.", ReturnWeaponName(weaponid), ammo);
				SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) resgatou a arma %s com %d de munição do refundo.", ReturnName(playerid, 0), playerid, ReturnWeaponName(weaponid), ammo);
			
				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resgatou o refundo de arma: %s com %d de munição.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(weaponid), ammo);
			}
			case REFUND_VEHICLE:
			{
				if(Vehicle_GetCount(playerid) >= Vehicle_GetSlots(playerid))
					return SendWarningMessage(playerid, "Você já possui o máximo de veículos (%d).", Vehicle_GetSlots(playerid));

				new random_park, i;

				random_park = random(sizeof(EstacionamentoLS));

				i = CreateVehicle(vehiclemodel, EstacionamentoLS[random_park][0], EstacionamentoLS[random_park][1], EstacionamentoLS[random_park][2], EstacionamentoLS[random_park][3], color1, color1, -1);

				VehicleData[i][vehicleOwnerID] = PlayerData[playerid][pID];
				format(VehicleData[i][vehicleOwnerName], 24, ReturnName(playerid));
				format(VehicleData[i][vehiclePlate], 10, RandomizeVehiclePlate());

				VehicleData[i][vehicleLocked] = 1;

				VehicleData[i][vehicleLocator] = 0;
				VehicleData[i][vehicleSeguro] = 0;
				VehicleData[i][vehicleTrava] = 0;
				VehicleData[i][vehicleXMRadio] = 0;
				VehicleData[i][vehicleModel] = vehiclemodel;

				VehicleData[i][vehicleMileage] = 0;
				VehicleData[i][vehicleEngine] = 100.0;

				for(new x = 0; x < sizeof(g_aDealership); x++)
				{
					if(g_aDealership[x][d_Model] == vehiclemodel)
					{
						VehicleData[i][vehiclePrice] = g_aDealership[x][d_Price];
						break;
					}
				}

				VehicleData[i][vehicleColor][0] = color1;
				VehicleData[i][vehicleColor][1] = color2;
				VehicleData[i][vehicleFaction] = 0;
				VehicleData[i][vehicleJob] = -1;

				VehicleData[i][vehicleParked] = 0;
				VehicleData[i][vehicleParkedPos][0] = EstacionamentoLS[random_park][0];
				VehicleData[i][vehicleParkedPos][1] = EstacionamentoLS[random_park][1];
				VehicleData[i][vehicleParkedPos][2] = EstacionamentoLS[random_park][2];
				VehicleData[i][vehicleParkedPos][3] = EstacionamentoLS[random_park][3];
				VehicleData[i][vehicleParkedVW] = 0;

				VehicleData[i][vehicleHealth] = 1000.0;
				VehicleData[i][vehicleMaxHealth] = 1000.0;
				VehicleData[i][vehicleDamage][0] = 0;
				VehicleData[i][vehicleDamage][1] = 0;
				VehicleData[i][vehicleDamage][2] = 0;
				VehicleData[i][vehicleDamage][3] = 0;

				VehicleData[i][vehicleFuel] = 5.0;

				for(new a = 0; a < 14; a++)
					VehicleData[i][vehicleMod][a] = 0;

				for(new b = 0; b < 35; b++)
				{
					VehicleData[i][vehicleWeapon][b] = 0;
					VehicleData[i][vehicleAmmo][b] = 0;
				}
				VehicleData[i][vehicleInteriorWeapon] = 0;
				VehicleData[i][vehicleInteriorAmmo] = 0;

				SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) resgatou o veículo %s do refundo.", ReturnName(playerid, 0), playerid, ReturnVehicleModelName(vehiclemodel));

				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resgatou o refundo de veículo: %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnVehicleModelName(vehiclemodel));

				mysql_format(this, query, sizeof(query), "INSERT INTO carros (vehicleOwnerName) VALUES ('%e')", ReturnName(playerid));
				mysql_tquery(this, query, "OnVehicleCreated", "dd", i, 1);

				Iter_Add(Vehicles, i);
			}
			case REFUND_MONEY:
			{
				GiveScriptedMoney(playerid, quantity);

				SendGreenMessage(playerid, "Você resgatou o refundo de dinheiro %s.", FormatNumber(quantity));
				SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) resgatou dinheiro (%s) do refundo.", ReturnName(playerid, 0), playerid, FormatNumber(quantity));
				
				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resgatou o refundo de dinheiro: %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(quantity));
			}
			case REFUND_MARIJUANA:
			{
				new item = Inventory_Add(playerid, "Marijuana", 1578, quantity);

				if(item == -1)
					return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

				SendGreenMessage(playerid, "Você resgatou o refundo de droga (Marijuana) de %d unidades.", quantity);
				SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) resgatou o item Marijuana com %d unidades do refundo.", ReturnName(playerid, 0), playerid, quantity);
			
				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resgatou o refundo de drogas: Marijuana com %s unidades.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], quantity);
			}
			case REFUND_LSD:
			{
				new item = Inventory_Add(playerid, "LSD", 1577, quantity);

				if(item == -1)
					return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

				SendGreenMessage(playerid, "Você resgatou o refundo de droga (LSD) de %d unidades.", quantity);
				SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) resgatou o item LSD com %d unidades do refundo.", ReturnName(playerid, 0), playerid, quantity);
			
				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resgatou o refundo de drogas: LSD com %s unidades.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], quantity);
			}
			case REFUND_COCAINE:
			{
				new item = Inventory_Add(playerid, "Cocaína", 1575, quantity);

				if(item == -1)
					return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

				SendGreenMessage(playerid, "Você resgatou o refundo de droga (Cocaína) de %d unidades.", quantity);
				SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) resgatou o item Cocaína com %d unidades do refundo.", ReturnName(playerid, 0), playerid, quantity);
			
				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resgatou o refundo de drogas: Cocaína com %s unidades.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], quantity);
			}
			case REFUND_GUNPART:
			{
				new item = Inventory_Add(playerid, "Gunparts", 2040, quantity);

				if(item == -1)
					return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

				SendGreenMessage(playerid, "Você resgatou o refundo de gunparts de %d unidades.", quantity);
				SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) resgatou o item Gunparts com %d unidades do refundo.", ReturnName(playerid, 0), playerid, quantity);
			
				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resgatou o refundo de Gunparts com %s unidades.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], quantity);
			}
		}

		mysql_format(this, query, sizeof(query), "DELETE FROM refunds WHERE refundID = '%d'", id);
		mysql_tquery(this, query);
	}

	return 1;
}

this::OnPlayerHaveRefund(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(rows)
	{
		SendServerMessage(playerid, "Você possui %d %s para resgatar (/refundos).", rows, (rows > 1) ? ("refundos") : ("refundo"));
	}

	return 1;
}

this::AdminCheckPlayerRefund(playerid, name[])
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Nenhum refundo encontrado para o jogador: %s.", name);
	
	new type, quantity, weaponid, ammo, model, adminname[24];

	SendClientMessageEx(playerid, COLOR_YELLOW, "Refundos disponíveis para %s:", name);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "refundType", type);
		cache_get_value_name_int(i, "refundQuantity", quantity);
		cache_get_value_name_int(i, "refundWeapon", weaponid);
		cache_get_value_name_int(i, "refundAmmo", ammo);
		cache_get_value_name_int(i, "refundVehicleModel", model);
		cache_get_value_name(i, "refundAdmin", adminname);

		if(type == REFUND_WEAPON)
			SendClientMessageEx(playerid, COLOR_GREY, "Refundo: %s | Criado por: %s | Arma: %s, munição: %d", Refund_GetType(type), adminname, ReturnWeaponName(weaponid), ammo);
		else if(type == REFUND_VEHICLE)
			SendClientMessageEx(playerid, COLOR_GREY, "Refundo: %s | Criado por: %s | Veículo: %s", Refund_GetType(type), adminname, ReturnVehicleModelName(model));
		else
			SendClientMessageEx(playerid, COLOR_GREY, "Refundo: %s | Criado por: %s | Quantidade: %d", Refund_GetType(type), adminname, quantity);
	}

	return 1;
}

this::VehicleShowList(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Você não possui um veículo.");

	new string[45*5], count, vehicle_parked, vehicle_id, vehicle_model, vehicle_plate[10];

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "vehicleModel", vehicle_model);
		cache_get_value_name_int(i, "vehicleID", vehicle_id);
		cache_get_value_name_int(i, "vehicleParked", vehicle_parked);
		cache_get_value_name(i, "vehiclePlate", vehicle_plate);

		switch(vehicle_parked)
		{
			case 0: format(string, sizeof(string), "%s%s (%s)\tDespawnado\n", string, ReturnVehicleModelName(vehicle_model), vehicle_plate);
			case 1: format(string, sizeof(string), "%s%s (%s)\tSpawnado\n", string, ReturnVehicleModelName(vehicle_model), vehicle_plate);
			case 2: format(string, sizeof(string), "%s%s (%s)\tApreendido\n", string, ReturnVehicleModelName(vehicle_model), vehicle_plate);
			case 3: format(string, sizeof(string), "%s%s (%s)\tRoubado\n", string, ReturnVehicleModelName(vehicle_model), vehicle_plate);
			default: format(string, sizeof(string), "%sERRO: Contate um admin\tDBID: %d\n", string, vehicle_id);
		}

		ListedOptions[playerid][count++] = vehicle_id;
	}

	if(strlen(string))
		Dialog_Show(playerid, PlayerVehicleList, DIALOG_STYLE_TABLIST_HEADERS, "Meus veículos:", "Modelo (Placa)\tSitução\n%s", "Selecionar", "Cancelar", string);

	return 1;
}

this::OnPlayerSpawnVehicle(playerid)
{
	new rows, query[126];
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Não foi possível dar spawn nesse veículo.");

	if(Vehicle_GetSpawned(playerid) >= Vehicle_GetSpawnedSlot(playerid))
		return SendWarningMessage(playerid, "Você já possui o máximo de veículos spawnados (%d).", Vehicle_GetSpawned(playerid));

	new vehicle_parked, vehicleid, model, Float:pos[4], color1, color2, siren, plate[10]; 

	cache_get_value_name_int(0, "vehicleParked", vehicle_parked);
	cache_get_value_name_int(0, "vehicleModel", model);
	cache_get_value_name_int(0, "vehicleColor1", color1);
	cache_get_value_name_int(0, "vehicleColor2", color2);
	cache_get_value_name_int(0, "vehicleSiren", siren);
	cache_get_value_name_float(0, "vehicleParked_X", pos[0]);
	cache_get_value_name_float(0, "vehicleParked_Y", pos[1]);
	cache_get_value_name_float(0, "vehicleParked_Z", pos[2]);
	cache_get_value_name_float(0, "vehicleParked_A", pos[3]);
	cache_get_value_name(0, "vehiclePlate", plate, 10);

	switch(vehicle_parked)
	{
		case 1: return SendWarningMessage(playerid, "O veículo %s (%s) já está spawnado.", ReturnVehicleModelName(model), plate);
		case 2: return SendWarningMessage(playerid, "O veículo %s (%s) está apreendido no pátio da LSPD.", ReturnVehicleModelName(model), plate);
		case 3: return SendWarningMessage(playerid, "O veículo %s (%s) não pode ser spawnado, contate a seguradora no telefone: 141.", ReturnVehicleModelName(model), plate);
	}

	vehicleid = CreateVehicle(model, pos[0], pos[1], pos[2], pos[3], color1, color2, -1, siren);

	VehicleData[vehicleid][vehicleParked] = 1;
	VehicleData[vehicleid][vehicleModel] = model;
	VehicleData[vehicleid][vehicleColor][0] = color1;
	VehicleData[vehicleid][vehicleColor][1] = color2;
	VehicleData[vehicleid][vehicleSiren] = siren;
	format(VehicleData[vehicleid][vehiclePlate], 10, plate);
	for(new j = 0; j < 4; j++)
		VehicleData[vehicleid][vehicleParkedPos][j] = pos[j];

	cache_get_value_name(0, "vehicleOwnerName", VehicleData[vehicleid][vehicleOwnerName], 24);
	

	cache_get_value_name_int(0, "vehicleID", VehicleData[vehicleid][vehicleID]);
	cache_get_value_name_int(0, "ID", VehicleData[vehicleid][vehicleOwnerID]);
	cache_get_value_name_int(0, "vehicleFaction", VehicleData[vehicleid][vehicleFaction]);
	cache_get_value_name_int(0, "vehicleJob", VehicleData[vehicleid][vehicleJob]);
	cache_get_value_name_int(0, "vehicleLocked", VehicleData[vehicleid][vehicleLocked]);
	cache_get_value_name_int(0, "vehicleLocator", VehicleData[vehicleid][vehicleLocator]);
	cache_get_value_name_int(0, "vehicleSeguro", VehicleData[vehicleid][vehicleSeguro]);
	cache_get_value_name_int(0, "vehicleTrava", VehicleData[vehicleid][vehicleTrava]);
	cache_get_value_name_int(0, "vehicleXMRadio", VehicleData[vehicleid][vehicleXMRadio]);		
	cache_get_value_name_int(0, "vehiclePrice", VehicleData[vehicleid][vehiclePrice]);
	cache_get_value_name_int(0, "vehicleParkedVW", VehicleData[vehicleid][vehicleParkedVW]);
	cache_get_value_name_int(0, "vehicleDamage1", VehicleData[vehicleid][vehicleDamage][0]);
	cache_get_value_name_int(0, "vehicleDamage2", VehicleData[vehicleid][vehicleDamage][1]);
	cache_get_value_name_int(0, "vehicleDamage3", VehicleData[vehicleid][vehicleDamage][2]);
	cache_get_value_name_int(0, "vehicleDamage4", VehicleData[vehicleid][vehicleDamage][3]);		
	cache_get_value_name_int(0, "vehicleExpressWay", VehicleData[vehicleid][vehicleExpressWay]);
	cache_get_value_name_int(0, "vehicleExpressMoney", VehicleData[vehicleid][vehicleExpressMoney]);
	cache_get_value_name_int(0, "vehicleInteriorWeapon", VehicleData[vehicleid][vehicleInteriorWeapon]);
	cache_get_value_name_int(0, "vehicleInteriorAmmo", VehicleData[vehicleid][vehicleInteriorAmmo]);

	cache_get_value_name_float(0, "vehicleHealth", VehicleData[vehicleid][vehicleHealth]);
	cache_get_value_name_float(0, "vehicleMaxHealth", VehicleData[vehicleid][vehicleMaxHealth]);
	cache_get_value_name_float(0, "vehicleMileage", VehicleData[vehicleid][vehicleMileage]);
	cache_get_value_name_float(0, "vehicleEngine", VehicleData[vehicleid][vehicleEngine]);
	cache_get_value_name_float(0, "vehicleFuel", VehicleData[vehicleid][vehicleFuel]);

	//load vehicle modifications
	new string_tunning[128];
	cache_get_value_name(0, "vehicleMod", string_tunning, 128);
	sscanf(string_tunning, "p<|>dddddddddddddd",
		VehicleData[vehicleid][vehicleMod][0], VehicleData[vehicleid][vehicleMod][1], VehicleData[vehicleid][vehicleMod][2],
		VehicleData[vehicleid][vehicleMod][3], VehicleData[vehicleid][vehicleMod][4], VehicleData[vehicleid][vehicleMod][5],
		VehicleData[vehicleid][vehicleMod][6], VehicleData[vehicleid][vehicleMod][7], VehicleData[vehicleid][vehicleMod][8],
		VehicleData[vehicleid][vehicleMod][9], VehicleData[vehicleid][vehicleMod][10], VehicleData[vehicleid][vehicleMod][11],
		VehicleData[vehicleid][vehicleMod][12], VehicleData[vehicleid][vehicleMod][13]);

	//load vehicleweapons
	new string_weapons[128];
	cache_get_value_name(0, "vehicleWeapon", string_weapons, 128);
	sscanf(string_weapons, "p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
		VehicleData[vehicleid][vehicleWeapon][0], VehicleData[vehicleid][vehicleAmmo][0],
		VehicleData[vehicleid][vehicleWeapon][1], VehicleData[vehicleid][vehicleAmmo][1],
		VehicleData[vehicleid][vehicleWeapon][2], VehicleData[vehicleid][vehicleAmmo][2],
		VehicleData[vehicleid][vehicleWeapon][3], VehicleData[vehicleid][vehicleAmmo][3],
		VehicleData[vehicleid][vehicleWeapon][4], VehicleData[vehicleid][vehicleAmmo][4],
		VehicleData[vehicleid][vehicleWeapon][5], VehicleData[vehicleid][vehicleAmmo][5],
		VehicleData[vehicleid][vehicleWeapon][6], VehicleData[vehicleid][vehicleAmmo][6],
		VehicleData[vehicleid][vehicleWeapon][7], VehicleData[vehicleid][vehicleAmmo][7],
		VehicleData[vehicleid][vehicleWeapon][8], VehicleData[vehicleid][vehicleAmmo][8],
		VehicleData[vehicleid][vehicleWeapon][9], VehicleData[vehicleid][vehicleAmmo][9],
		VehicleData[vehicleid][vehicleWeapon][10], VehicleData[vehicleid][vehicleAmmo][10],
		VehicleData[vehicleid][vehicleWeapon][11], VehicleData[vehicleid][vehicleAmmo][11],
		VehicleData[vehicleid][vehicleWeapon][12], VehicleData[vehicleid][vehicleAmmo][12],
		VehicleData[vehicleid][vehicleWeapon][13], VehicleData[vehicleid][vehicleAmmo][13],
		VehicleData[vehicleid][vehicleWeapon][14], VehicleData[vehicleid][vehicleAmmo][14],
		VehicleData[vehicleid][vehicleWeapon][15], VehicleData[vehicleid][vehicleAmmo][15],
		VehicleData[vehicleid][vehicleWeapon][16], VehicleData[vehicleid][vehicleAmmo][16],
		VehicleData[vehicleid][vehicleWeapon][17], VehicleData[vehicleid][vehicleAmmo][17],
		VehicleData[vehicleid][vehicleWeapon][18], VehicleData[vehicleid][vehicleAmmo][18],
		VehicleData[vehicleid][vehicleWeapon][19], VehicleData[vehicleid][vehicleAmmo][19],
		VehicleData[vehicleid][vehicleWeapon][20], VehicleData[vehicleid][vehicleAmmo][20],
		VehicleData[vehicleid][vehicleWeapon][21], VehicleData[vehicleid][vehicleAmmo][21],
		VehicleData[vehicleid][vehicleWeapon][22], VehicleData[vehicleid][vehicleAmmo][22],
		VehicleData[vehicleid][vehicleWeapon][23], VehicleData[vehicleid][vehicleAmmo][23],
		VehicleData[vehicleid][vehicleWeapon][24], VehicleData[vehicleid][vehicleAmmo][24],
		VehicleData[vehicleid][vehicleWeapon][25], VehicleData[vehicleid][vehicleAmmo][25],
		VehicleData[vehicleid][vehicleWeapon][26], VehicleData[vehicleid][vehicleAmmo][26],
		VehicleData[vehicleid][vehicleWeapon][27], VehicleData[vehicleid][vehicleAmmo][27],
		VehicleData[vehicleid][vehicleWeapon][28], VehicleData[vehicleid][vehicleAmmo][28],
		VehicleData[vehicleid][vehicleWeapon][29], VehicleData[vehicleid][vehicleAmmo][29],
		VehicleData[vehicleid][vehicleWeapon][30], VehicleData[vehicleid][vehicleAmmo][30],
		VehicleData[vehicleid][vehicleWeapon][31], VehicleData[vehicleid][vehicleAmmo][31],
		VehicleData[vehicleid][vehicleWeapon][32], VehicleData[vehicleid][vehicleAmmo][32],
		VehicleData[vehicleid][vehicleWeapon][33], VehicleData[vehicleid][vehicleAmmo][33],
		VehicleData[vehicleid][vehicleWeapon][34], VehicleData[vehicleid][vehicleAmmo][34]);

	SetVehicleNumberPlate(vehicleid, VehicleData[vehicleid][vehiclePlate]);

	SetVehicleVirtualWorld(vehicleid, VehicleData[vehicleid][vehicleParkedVW]);

	Vehicle_SetLocked(vehicleid);
	Vehicle_SetMod(vehicleid);

	if(!VehicleData[vehicleid][vehicleFaction])
	{
		AC_SetVehicleHealth(vehicleid, VehicleData[vehicleid][vehicleHealth]);
		UpdateVehicleDamageStatus(vehicleid, VehicleData[vehicleid][vehicleDamage][0], VehicleData[vehicleid][vehicleDamage][1], VehicleData[vehicleid][vehicleDamage][2], VehicleData[vehicleid][vehicleDamage][3]);
	}
	else
	{
		AC_SetVehicleHealth(vehicleid, VehicleData[vehicleid][vehicleMaxHealth]);
	}

	for(new i = 0; i < 25; i++)
	{
		if(i < 5)
			DestroyDynamicObject(VehicleData[vehicleid][vehicleObjectSlot][i]);

		VehicleData[vehicleid][vehicleCrateSlot][i] = 0;
	}

	SendGreenMessage(playerid, "Seu veículo %s foi spawnado.", ReturnVehicleModelName(VehicleData[vehicleid][vehicleModel]));
	SendClientMessageEx(playerid, COLOR_WHITE, "Stats: Motor[%.2f] - Milhas[%.2f]", VehicleData[vehicleid][vehicleEngine], VehicleData[vehicleid][vehicleMileage]);
	
	Waypoint_Remove(playerid);
	SetPlayerCheckpoint(playerid, VehicleData[vehicleid][vehicleParkedPos][0], VehicleData[vehicleid][vehicleParkedPos][1], VehicleData[vehicleid][vehicleParkedPos][2], 2.5);

	mysql_format(this, query, sizeof(query), "SELECT * FROM portamalas WHERE ID = '%d'", VehicleData[vehicleid][vehicleID]);
	mysql_tquery(this, query, "OnLoadCarStorage", "d", vehicleid);

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) deu spawn no veículo %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnVehicleModelName(VehicleData[vehicleid][vehicleModel]), vehicleid);

	Iter_Add(Vehicles, vehicleid);
	Vehicle_Save(vehicleid);

	return 1;
}

this::VehiclePlayerListText(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Você não possui um veículo.");

	new model, plate[10], parked, id;

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "vehicleParked", parked);
		cache_get_value_name_int(i, "vehicleID", id);
		cache_get_value_name_int(i, "vehicleModel", model);
		cache_get_value_name(i, "vehiclePlate", plate, 10);

		switch(parked)
		{
			case 0: SendClientMessageEx(playerid, COLOR_GREY, "(ID Único: %d) %s [%s] - Despawnado", id, ReturnVehicleModelName(model), plate);
			case 2: SendClientMessageEx(playerid, COLOR_WARNING, "** (ID Único: %d) %s [%s] - Apreendido", id, ReturnVehicleModelName(model), plate);
		}
		
		new vehicleid = -1;

		foreach(new v : Vehicles) if(VehicleData[v][vehicleID] == id)
			vehicleid = v;

		if(vehicleid != -1)
			SendClientMessageEx(playerid, COLOR_GREEN, "* (ID: %d) %s [%s] - Spawnado", vehicleid, ReturnVehicleModelName(VehicleData[vehicleid][vehicleModel]), VehicleData[vehicleid][vehiclePlate]);
	}

	return 1;
}
this::VehicleAdminListText(playerid)
{
	new rows;
	cache_get_row_count(rows);

	if(!rows)
		return SendWarningMessage(playerid, "Jogador informado não possui um veículo.");

	new model, plate[10], parked, id;

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "vehicleParked", parked);
		cache_get_value_name_int(i, "vehicleID", id);
		cache_get_value_name_int(i, "vehicleModel", model);
		cache_get_value_name(i, "vehiclePlate", plate, 10);

		switch(parked)
		{
			case 0: SendClientMessageEx(playerid, COLOR_GREY, "(ID Único: %d) %s [%s] - Despawnado", id, ReturnVehicleModelName(model), plate);
			case 2: SendClientMessageEx(playerid, COLOR_WARNING, "** (ID Único: %d) %s [%s] - Apreendido", id, ReturnVehicleModelName(model), plate);
		}

		new vehicleid = -1;

		foreach(new v : Vehicles) if(VehicleData[v][vehicleID] == id)
			vehicleid = v;

		if(vehicleid != -1)
			SendClientMessageEx(playerid, COLOR_GREEN, "* (ID: %d) %s [%s] - Spawnado - ultima localização: %s", vehicleid, ReturnVehicleModelName(VehicleData[vehicleid][vehicleModel]), VehicleData[vehicleid][vehiclePlate], GetVehicleLocation(vehicleid));
	}

	return 1;
}

this::OnEntranceCreated(entranceid)
{
	if(entranceid == -1 || !EntranceData[entranceid][entranceExists])
		return 0;

	EntranceData[entranceid][entranceID] = cache_insert_id();
	Entrance_Save(entranceid);

	return 1;
}
// =============================================================== DIALOGS DO SERVIDOR ========================================================= //

Dialog:Login(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strlen(inputtext) || strlen(inputtext) > 30)
			return Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, " ", "Bem vindo ao %s.\nSERVER: Você possui três (3) tentativas de autenticação.\nINFO: Acesse %s e confira as últimas\natualizações do servidor.", "Autenticar", "Cancelar", SERVER_NAME, SERVER_SITE);
	
		new query[126];

		mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Name = '%e' AND Password = SHA2('%e', 256)", ReturnName(playerid), inputtext);
		mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_PLAYER_LOGIN);
	}	
	else
	{
		KickEx(playerid);
	}

	return 1;
}

Dialog:Register(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strlen(inputtext) > 30)
			return Dialog_Show(playerid, Register, DIALOG_STYLE_INPUT, " ", "Bem vindo ao %s.\nSERVER: Sua senha deve ser entre três (3) e trinta (30) caracteres.\nINFO: Acesse %s e confira as últimas\natualizações do servidor.", "Prosseguir", "Cancelar", SERVER_NAME, SERVER_SITE);
	
		if(strlen(inputtext) < 3)
			return Dialog_Show(playerid, Register, DIALOG_STYLE_INPUT, " ", "Bem vindo ao %s.\nSERVER: Sua senha deve ser entre três (3) e trinta (30) caracteres.\nINFO: Acesse %s e confira as últimas\natualizações do servidor.", "Prosseguir", "Cancelar", SERVER_NAME, SERVER_SITE);

		new query[150];

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) completou o registro no servidor.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID]);		
		mysql_format(this, query, sizeof(query), "INSERT INTO players (Name, Password) VALUES ('%e', SHA2('%e', 256))", ReturnName(playerid), inputtext);
		mysql_tquery(this, query, "IsPlayerRegistered", "d", playerid);
	}
	else
	{
		KickEx(playerid);
	}

	return 1;
}

Dialog:ChooseSex(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: //Masculino
			{
				PlayerData[playerid][pSex] = 1;
				SetPlayerSkin(playerid, 96);
				PlayerData[playerid][pSkin] = 96;
			}
			case 1://Feminino
			{
				PlayerData[playerid][pSex] = 2;
				SetPlayerSkin(playerid, 190);
				PlayerData[playerid][pSkin] = 190;
			}
		}

		PlayerTextDrawShow(playerid, TelaPreta1[playerid]);
		PlayerTextDrawShow(playerid, TelaPreta2[playerid]);

		SendServerMessage(playerid, "Obrigado por informar. Agora você irá passar por um breve tutorial para conhecer");
		SendClientMessage(playerid, COLOR_WHITE, "... um pouco do nosso servidor.");

		Tutorial_ID[playerid] = 1;
		SetPVarInt(playerid, "TempoTutorial", gettime()+5);
		SetPlayerTutorial(playerid, Tutorial_ID[playerid]);
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	}
	else
	{
		KickEx(playerid);
	}

	return 1;
}

Dialog:Tutorial(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPVarInt(playerid, "TempoTutorial") > gettime())
		{
			SendWarningMessage(playerid, "Por favor, aguarde mais %d segundo(s) para prosseguir com o tutorial.", GetPVarInt(playerid, "TempoTutorial") - gettime());
			return SetPlayerTutorial(playerid, Tutorial_ID[playerid]);
		}
		Tutorial_ID[playerid]++;
	}
	else
	{
		Tutorial_ID[playerid]--;
	}

	SetPlayerTutorial(playerid, Tutorial_ID[playerid]);
	SetPVarInt(playerid, "TempoTutorial", gettime() + 5);

	return 1;
}

Dialog:EstiloLuta(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: SetPVarInt(playerid, "StyleFight_Price", 100), SetPVarInt(playerid, "StyleFight", 4);
			case 1: SetPVarInt(playerid, "StyleFight_Price", 250), SetPVarInt(playerid, "StyleFight", 5);
			case 2: SetPVarInt(playerid, "StyleFight_Price", 500), SetPVarInt(playerid, "StyleFight", 6);
			case 3: SetPVarInt(playerid, "StyleFight_Price", 250), SetPVarInt(playerid, "StyleFight", 7);
			case 4: SetPVarInt(playerid, "StyleFight_Price", 150), SetPVarInt(playerid, "StyleFight", 15);
			case 5: SetPVarInt(playerid, "StyleFight_Price", 150), SetPVarInt(playerid, "StyleFight", 16);
		}

		if(GetScriptedMoney(playerid) < GetPVarInt(playerid, "StyleFight_Price"))
			return SendWarningMessage(playerid, "Você possui %s em mãos.", FormatNumber(GetPVarInt(playerid, "StyleFight_Price")));

		GiveScriptedMoney(playerid, - GetPVarInt(playerid, "StyleFight_Price"));

		PlayerData[playerid][pFightStyle] = GetPVarInt(playerid, "StyleFight");
		SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

		SendGreenMessage(playerid, "Você alterou o seu estilo de luta por %s.", FormatNumber(GetPVarInt(playerid, "StyleFight_Price")));

		DeletePVar(playerid, "StyleFight_Price");
		DeletePVar(playerid, "StyleFight");
	}
	return 1;
}

Dialog:ATM(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new amount, atmid = ATM_Nearest(playerid);

		if(sscanf(inputtext, "d", amount))
			return Dialog_Show(playerid, ATM, DIALOG_STYLE_INPUT, "Menu - ATM", "Digite uma quantia!!\n\nSaldo atual: %s\n\nDigite a quantidade que você deseja sacar da sua conta bancária:", "Sacar", "Cancelar", FormatNumber(PlayerData[playerid][pBank]));

		if(amount < 1 || amount > PlayerData[playerid][pBank])
			return Dialog_Show(playerid, ATM, DIALOG_STYLE_INPUT, "Menu - ATM", "Digite uma quantidade válida!!\n\nSaldo atual: %s\n\nDigite a quantidade que você deseja sacar da sua conta bancária:", "Sacar", "Cancelar", FormatNumber(PlayerData[playerid][pBank]));

		switch(PlayerData[playerid][pVip])
		{
			case 1:
			{
				if(amount > 10000)
					return Dialog_Show(playerid, ATM, DIALOG_STYLE_INPUT, "Menu - ATM", "Você só poder sacar até $10,000 nos ATM.\n\nSaldo atual: %s\n\nDigite a quantidade que você deseja sacar da sua conta bancária:", "Sacar", "Cancelar", FormatNumber(PlayerData[playerid][pBank]));
			}
			case 2:
			{
				if(amount > 15000)
					return Dialog_Show(playerid, ATM, DIALOG_STYLE_INPUT, "Menu - ATM", "Você só poder sacar até $15,000 nos ATM.\n\nSaldo atual: %s\n\nDigite a quantidade que você deseja sacar da sua conta bancária:", "Sacar", "Cancelar", FormatNumber(PlayerData[playerid][pBank]));
			}
			case 3:
			{
				if(amount > 20000)
					return Dialog_Show(playerid, ATM, DIALOG_STYLE_INPUT, "Menu - ATM", "Você só poder sacar até $20,000 nos ATM.\n\nSaldo atual: %s\n\nDigite a quantidade que você deseja sacar da sua conta bancária:", "Sacar", "Cancelar", FormatNumber(PlayerData[playerid][pBank]));
			}
			default:
			{
				if(amount > 5000)
					return Dialog_Show(playerid, ATM, DIALOG_STYLE_INPUT, "Menu - ATM", "Você só poder sacar até $5,000 nos ATM.\n\nSaldo atual: %s\n\nDigite a quantidade que você deseja sacar da sua conta bancária:", "Sacar", "Cancelar", FormatNumber(PlayerData[playerid][pBank]));
			}
		}

		if(!ATMData[atmid][atmMoney])
			return SendWarningMessage(playerid, "Esse caixa eletrônico não está operando.");

		if(ATMData[atmid][atmMoney] < amount)
		{
			SendWarningMessage(playerid, "Esse ATM não possui esta quantia (%s) de dinheiro disponível, seu saque foi de %s.", FormatNumber(amount), FormatNumber(ATMData[atmid][atmMoney]));
			amount = ATMData[atmid][atmMoney];
		}

		GiveScriptedMoney(playerid, amount);
		PlayerData[playerid][pBank] -= amount;

		ATMData[atmid][atmTime] = gettime();
		ATMData[atmid][atmMoney] = (ATMData[atmid][atmMoney] - amount <= 0) ? (0) : (ATMData[atmid][atmMoney] - amount);
		ATM_Save(atmid);

		InsertIntoBankExtract("Conta corrente", amount, "Saque no ATM", playerid);
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) sacou %d no caixa eletrônico (uid: %d) de %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(amount), ATMData[atmid][atmID], GetLocation(ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2]));

		SendGreenMessage(playerid, "Você sacou \"%s\" da sua conta bancária.", FormatNumber(amount));
	}
	return 1;
}

Dialog:MenuBanco(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid, Banco, DIALOG_STYLE_LIST, "Conta corrente", "Ver Saldo\nDepositar\nSacar\nTransferir", "Confirmar", "<<");
			case 1: Dialog_Show(playerid, BancoPoupanca, DIALOG_STYLE_LIST, "Conta poupança", "Ver Saldo\nDepositar na poupança\nSacar tudo da poupança", "Confirmar", "<<");
			case 2: //histórico de transações
			{
				new query[126];
				mysql_format(this, query, sizeof(query), "SELECT * FROM `bank_history` WHERE `player_id` = '%d' ORDER BY `transaction_id` DESC LIMIT 10", PlayerData[playerid][pID]);
				mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_BANK_HISTORY);
			}
		}
	}
	return 1;
}

Dialog:BancoPoupanca(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid,ShowOnly,DIALOG_STYLE_MSGBOX, "Saldo poupança", "Saldo da conta poupança: %s.", "Fechar", "", FormatNumber(PlayerData[playerid][pSavings]));
			case 1: Dialog_Show(playerid,DepositarPoupanca,DIALOG_STYLE_INPUT, "Depositar poupança", "Você pode depositar de $1 até $100,000\nDigite uma quantia para depositar na sua poupança:", "Depositar", "<<");
			case 2: Dialog_Show(playerid,SacarPoupanca,DIALOG_STYLE_MSGBOX, "Sacar poupança", "Você deseja sacar todo o valor da poupança (%s) ?", "Sim", "Não", FormatNumber(PlayerData[playerid][pSavings]));
		}
	}
	else
		Dialog_Show(playerid, MenuBanco, DIALOG_STYLE_LIST, "Banco", "Gerenciar conta corrente (%s)\nGerenciar poupança (%s)\nVer histórico de transações", "Selecionar", "Fechar", FormatNumber(PlayerData[playerid][pBank]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

Dialog:DepositarPoupanca(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new amount;

		if(sscanf(inputtext, "d", amount))
			return Dialog_Show(playerid,DepositarPoupanca,DIALOG_STYLE_INPUT, "Depositar poupança", "Digite uma quantia!!\n\nVocê pode depositar de $1 até $100,000\nDigite uma quantia para depositar na sua poupança:", "Depositar", "<<");
	
		if(PlayerData[playerid][pSavings] != 0)
			return SendWarningMessage(playerid, "Já existe uma quantia em sua poupança.");

		if(!(1 <= amount <= 100000))
			return Dialog_Show(playerid,DepositarPoupanca,DIALOG_STYLE_INPUT, "Depositar poupança", "Você pode depositar de $1 até $100,000\nDigite uma quantia para depositar na sua poupança:", "Depositar", "<<");

		GiveScriptedMoney(playerid, - amount);
		PlayerData[playerid][pSavings] = amount;

		InsertIntoBankExtract("Conta poupança", amount, "Depósito", playerid);
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) depositou %s na sua conta bancária (poupança).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(amount));

		SendGreenMessage(playerid, "Você depositou %s na sua conta poupança.", FormatNumber(amount));
	}
	else
		Dialog_Show(playerid,BancoPoupanca,DIALOG_STYLE_LIST, "Conta poupança", "Ver Saldo\nDepositar na poupança\nSacar tudo da poupança","Confirmar","<<");
	return 1;
}

Dialog:SacarPoupanca(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(PlayerData[playerid][pSavings] == 0)
			return SendWarningMessage(playerid, "Não há o que sacar da sua poupança.");

		SendGreenMessage(playerid, "Você sacou %s da sua conta poupança.", FormatNumber(PlayerData[playerid][pSavings]));

		InsertIntoBankExtract("Conta poupança", PlayerData[playerid][pSavings], "Retirada de valor", playerid);
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) sacou %s da sua conta bancária (poupança).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(PlayerData[playerid][pSavings]));

		GiveScriptedMoney(playerid, PlayerData[playerid][pSavings]);
		PlayerData[playerid][pSavings] = 0;
	}
	else
		Dialog_Show(playerid,BancoPoupanca,DIALOG_STYLE_LIST, "Conta poupança", "Ver Saldo\nDepositar na poupança\nSacar tudo da poupança","Confirmar","<<");
	return 1;
}

Dialog:Banco(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Saldo bancário", "Saldo atual da sua conta corrente é de %s.", "Fechar", "", FormatNumber(PlayerData[playerid][pBank]));
			case 1: Dialog_Show(playerid, BancoDepositar, DIALOG_STYLE_INPUT, "Depositar na conta corrente", "Digite o valor para ser depositado na sua conta corrente:", "Depositar", "<<");
			case 2: Dialog_Show(playerid, BancoSacar, DIALOG_STYLE_INPUT, "Sacar da conta corrente", "Saldo: %s\n\nDigite o valor para ser sacado da sua conta corrente:", "Sacar", "<<", FormatNumber(PlayerData[playerid][pBank]));
			case 3: Dialog_Show(playerid, BancoTransfID, DIALOG_STYLE_INPUT, "Transferência entre contas", "Por favor, informa o ID ou NOME da pessoa que irá receber a transferência:", "Continuar", "<<");
		}
	}
	else
		Dialog_Show(playerid, MenuBanco, DIALOG_STYLE_LIST, "Banco", "Gerenciar conta corrente (%s)\nGerenciar poupança (%s)\nVer histórico de transações", "Selecionar", "Fechar", FormatNumber(PlayerData[playerid][pBank]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

Dialog:BancoDepositar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new amount;

		if(sscanf(inputtext, "d", amount))
			return Dialog_Show(playerid, BancoDepositar, DIALOG_STYLE_INPUT, "Depositar na conta corrente", "Digite uma quantia!!\n\nDigite o valor para ser depositado na sua conta corrente:", "Depositar", "<<");

		if(amount < 1 || amount > GetScriptedMoney(playerid))
			return Dialog_Show(playerid, BancoDepositar, DIALOG_STYLE_INPUT, "Depositar na conta corrente", "Digite uma quantia válida!!\n\nDigite o valor para ser depositado na sua conta corrente:", "Depositar", "<<");

		GiveScriptedMoney(playerid, -amount);
		PlayerData[playerid][pBank] += amount;

		InsertIntoBankExtract("Conta corrente", amount, "Depósito", playerid);
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) depositou %s na sua conta bancária (corrente).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(amount));

		SendGreenMessage(playerid, "Você depositou \"%s\" na sua conta corrente.", FormatNumber(amount));
		SendServerMessage(playerid, "O novo saldo da sua conta corrente agora é de: %s.", FormatNumber(PlayerData[playerid][pBank]));
	}
	else
		Dialog_Show(playerid, Banco, DIALOG_STYLE_LIST, "Conta corrente","Ver Saldo\nDepositar\nSacar\nTransferir", "Confirmar", "<<");

	return 1;
}

Dialog:BancoSacar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new amount;

		if(sscanf(inputtext, "d", amount))
			return Dialog_Show(playerid, BancoSacar, DIALOG_STYLE_INPUT, "Sacar da conta corrente", "Digite uma quantia!!\n\nSaldo: %s\n\nDigite o valor para ser sacado da sua conta corrente:", "Sacar", "<<", FormatNumber(PlayerData[playerid][pBank]));

		if(amount < 1 || amount > PlayerData[playerid][pBank])
			return Dialog_Show(playerid, BancoSacar, DIALOG_STYLE_INPUT, "Sacar da conta corrente", "Digite uma quantia válida!!\n\nSaldo: %s\n\nDigite o valor para ser sacado da sua conta corrente:", "Sacar", "<<", FormatNumber(PlayerData[playerid][pBank]));

		GiveScriptedMoney(playerid, amount);
		PlayerData[playerid][pBank] -= amount;

		InsertIntoBankExtract("Conta corrente", amount, "Saque", playerid);
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) sacou %s da sua conta bancária (corrente).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(amount));

		SendGreenMessage(playerid, "Você sacou \"%s\" da sua conta corrente.", FormatNumber(amount));
		SendServerMessage(playerid, "O novo saldo da sua conta corrente agora é de: %s.", FormatNumber(PlayerData[playerid][pBank]));
	}
	else
		Dialog_Show(playerid, Banco, DIALOG_STYLE_LIST, "Conta corrente", "Ver Saldo\nDepositar\nSacar\nTransferir", "Confirmar", "<<");

	return 1;
}

Dialog:BancoTransfID(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new userid;

		if(sscanf(inputtext, "u", userid))
			return Dialog_Show(playerid, BancoTransfID, DIALOG_STYLE_INPUT, "Transferência entre contas", "Digite um ID ou NOME!!\n\nPor favor, informa o ID ou NOME da pessoa que irá receber a transferência:", "Continuar", "<<");

		if(userid == INVALID_PLAYER_ID || !PlayerData[userid][pLogged])
			return Dialog_Show(playerid, BancoTransfID, DIALOG_STYLE_INPUT, "Transferência entre contas", "ID ou NOME inválido!!\n\nPor favor, informa o ID ou NOME da pessoa que irá receber a transferência:", "Continuar", "<<");

		if(userid == playerid)
			return Dialog_Show(playerid, BancoTransfID, DIALOG_STYLE_INPUT, "Transferência entre contas", "Digite um ID ou NOME válido!!\n\nPor favor, informa o ID ou NOME da pessoa que irá receber a transferência:", "Continuar", "<<");

		SetPVarInt(playerid, "Bank_Transfer_ID", userid);
		Dialog_Show(playerid, BancoTransf, DIALOG_STYLE_INPUT, "Transferência entre contas", "Digite o valor para ser transferido para %s (ID: %d):", "Transferir", "<<", ReturnName(userid, 0), userid);
	}
	else
		Dialog_Show(playerid,Banco,DIALOG_STYLE_LIST,"Conta corrente","Ver Saldo\nDepositar\nSacar\nTransferir","Confirmar","<<");

	return 1;
}

Dialog:BancoTransf(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new userid = GetPVarInt(playerid, "Bank_Transfer_ID"), amount;

		if(sscanf(inputtext, "d", amount))
			return Dialog_Show(playerid, BancoTransf, DIALOG_STYLE_INPUT, "Transferência entre contas", "Digite uma quantia!!\n\nDigite o valor para ser transferido para %s (ID: %d):", "Transferir", "<<", ReturnName(userid, 0), userid);

		if(amount < 1 || amount > PlayerData[playerid][pBank])
			return Dialog_Show(playerid, BancoTransf, DIALOG_STYLE_INPUT, "Transferência entre contas", "Digite uma quantia válida!!\n\nDigite o valor para ser transferido para %s (ID: %d):", "Transferir", "<<", ReturnName(userid, 0), userid);

		if(userid == INVALID_PLAYER_ID || !PlayerData[userid][pLogged])
			return SendWarningMessage(playerid, JogadorOff);

		PlayerData[playerid][pBank] -= amount;
		PlayerData[userid][pBank] += amount;

		InsertIntoBankExtract("Conta corrente", amount, "Transferência entre contas", playerid, userid);
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) transferiu %s para a conta bancária (corrente) de %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(amount), ReturnName(userid), PlayerData[userid][pID]);

		SendGreenMessage(playerid, "Você transferiu \"%s\" para a conta corrente de %s (ID: %d).", FormatNumber(amount), ReturnName(userid, 0), userid);
		SendServerMessage(playerid, "O novo saldo da sua conta corrente agora é de: %s.", FormatNumber(PlayerData[playerid][pBank]));

		SendGreenMessage(userid, "%s (ID: %d) transferiu \"%s\" para a sua conta corrente.", ReturnName(playerid, 0), playerid, FormatNumber(amount));
		SendServerMessage(userid, "O novo saldo da sua conta corrente agora é de: %s.", FormatNumber(PlayerData[userid][pBank]));
	}
	else
		Dialog_Show(playerid, BancoTransfID, DIALOG_STYLE_INPUT, "Transferência entre contas", "Por favor, informa o ID ou NOME da pessoa que irá receber a transferência:", "Continuar", "<<");

	return 1;
}

Dialog:BankExtract(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		Dialog_Show(playerid, MenuBanco, DIALOG_STYLE_LIST, "Banco", "Gerenciar conta corrente (%s)\nGerenciar poupança (%s)\nVer histórico de transações", "Selecionar", "Fechar", FormatNumber(PlayerData[playerid][pBank]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Store(playerid, response, listitem, inputtext[])
{
	new id = -1;
	if(response)
	{
		if((id = Business_Inside(playerid)) != -1)
		{
			if(!BusinessData[id][businessStock])
				return SendWarningMessage(playerid, "Esta empresa está sem produtos.");

			new productid = ListedOptions[playerid][listitem];

			Business_BuyItem(playerid, id, Business_ProductName(BusinessData[id][businessProduct][productid]), Business_ProductID(BusinessData[id][businessProduct][productid]), BusinessData[id][businessProductPrice][productid]);
			
		}
		else return SendWarningMessage(playerid, "Você não está em uma loja.");
	}

	return 1;
}

Dialog:Nascimento(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				PlayerData[playerid][pSpawn] = 0;
				SendGreenMessage(playerid, "Seu novo local de nascimento será: Spawn Civil.");
			}
			case 1:
			{
				if(PlayerData[playerid][pJob] == EMPREGO_Nenhum || PlayerData[playerid][pJob] == EMPREGO_Mecanico || PlayerData[playerid][pJob] == EMPREGO_LadraoCarros)
					return SendWarningMessage(playerid, "Você não faz parte ou seu emprego não possui um local de spawn.");

				PlayerData[playerid][pSpawn] = 2;
				SendGreenMessage(playerid, "Seu novo local de nascimento será: Spawn do Emprego.");
			}
			case 2:
			{
				if(PlayerData[playerid][pFaction] == -1)
					return SendWarningMessage(playerid, "Você não faz parte de nenhuma facção.");

				PlayerData[playerid][pSpawn] = 1;
				SendGreenMessage(playerid, "Seu novo local de nascimento será: Spawn Facção.");
			}
			case 3:
			{
				new count = 0;
				new string[248];

				foreach(new i : Houses)
				{
					if(House_IsOwner(playerid, i))
					{
						format(string, sizeof(string), "%s%s\n", string, HouseData[i][houseAddress]);
						ListedOptions[playerid][count++] = HouseData[i][houseID];
					}
				}

				if(!count)
					return SendWarningMessage(playerid, "Você não possui uma propriedade para poder alterar o spawn.");

				Dialog_Show(playerid, NascimentoCasa, DIALOG_STYLE_LIST, "Escolha uma casa", string, "Selecionar", "<<");
			}
		}
	}
	return 1;
}

Dialog:NascimentoCasa(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayerData[playerid][pSpawn] = ListedOptions[playerid][listitem] + 1000;

		new id = GetHouseByID(ListedOptions[playerid][listitem]);

		SendGreenMessage(playerid, "Seu novo local de nascimento será no endereço: %s.", HouseData[id][houseAddress]);
	}
	else
	{
		Dialog_Show(playerid, Nascimento, DIALOG_STYLE_LIST, "Local de Nascimento", "Padrão\nEmprego\nFacção\nMinhas propriedades", "Selecionar", "Fechar");
	}
	return 1;
}

Dialog:Empregos(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = listitem + 1;
		SetPVarInt(playerid, "PlayerSelectedJob", id);

		Dialog_Show(playerid, EmpregosEscolheu, DIALOG_STYLE_MSGBOX, "Agência de empregos:", "{FFFFFF}Revisão geral da escolha:\n\n\t- Emprego escolhido: %s\n\t- Salário: %s\n\t- INFO: Alguns empregos necessitam de um veículo próprio.\n\t- Para mais informações sobre os empregos acesse:\n\t%s e confira a documentação.\n\nVocê confirma a escolha deste emprego?", "Confirmar", "Cancelar", ReturnJobName(id), FormatNumber(g_aJobs[id][s_J_Paycheck]), SERVER_SITE);
	}
	else
	{
		Dialog_Show(playerid, CityHall, DIALOG_STYLE_TABLIST_HEADERS, "Qual serviço você deseja acessar?", "Opção\nAgência de empregos\nMinhas multas", "Selecionar", "Cancelar");
	}
	return 1;
}

Dialog:EmpregosEscolheu(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayerData[playerid][pJob] = GetPVarInt(playerid, "PlayerSelectedJob");

		SendGreenMessage(playerid, "Você é um '%s' a partir de agora.", ReturnJobName(PlayerData[playerid][pJob]));
		SendServerMessage(playerid, "Para saber os comandos do seu emprego digite: '/ajuda emprego' e se precisar de ajuda chame um admin: /sos.");
	}
	return 1;
}

Dialog:DealershipOptions(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new count;

		sz_MiscString[0] = 0;

		format(sz_MiscString, sizeof(sz_MiscString), "Modelo\tPreço ($)\n");

		for(new i = 0, x = sizeof(g_aDealership); i < x; i++) if(g_aDealership[i][d_Slot] == listitem)
		{
			if(PlayerData[playerid][pVip] != 1 && g_aDealership[i][d_Slot] == 8)//Helicopteros
				return SendWarningMessage(playerid, "Apenas jogadores com benefício Prime(bronze) podem comprar este tipo de veículo.");

			switch(g_aDealership[i][d_Model])
			{
				case 521: //Prata
				{
					format(sz_MiscString, sizeof(sz_MiscString), "%s{BFBFBF}%s\t{BFBFBF}%s\n", sz_MiscString, ReturnVehicleModelName(g_aDealership[i][d_Model]), FormatNumber(g_aDealership[i][d_Price]));
				}
				case 541: //Ouro
				{
					format(sz_MiscString, sizeof(sz_MiscString), "%s{FFA400}%s\t{FFA400}%s\n", sz_MiscString, ReturnVehicleModelName(g_aDealership[i][d_Model]), FormatNumber(g_aDealership[i][d_Price]));
				}
				default:
				{
					format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%s\n", sz_MiscString, ReturnVehicleModelName(g_aDealership[i][d_Model]), FormatNumber(g_aDealership[i][d_Price]));
				}
			}

			PlayerData[playerid][pBuyCar][count++] = i;
		}

		Dialog_Show(playerid, DealershipCarList, DIALOG_STYLE_TABLIST_HEADERS, inputtext, sz_MiscString, "Selecionar", "<<");
	}

	return 1;
}

Dialog:DealershipCarList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pBuyCar][listitem];

		if(!Dealership_CanBuy(playerid, g_aDealership[id][d_Model]))
			return 1;

		Dealership_Show(playerid, g_aDealership[id][d_Model], g_aDealership[id][d_Price], g_aDealership[id][d_Tracao]);
	}
	else
	{
		Dialog_Show(playerid, DealershipOptions, DIALOG_STYLE_LIST, "Opções da concessionária:", DIALOG_LIST_VEHICLES, "Selecionar", "Cancelar");
	}
	return 1;
}

Dialog:VehicleSell(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id;

		if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, id))
		{
			new Float:math, price;

			switch(PlayerData[playerid][pVip])
			{
				case 0: math = float(VehicleData[id][vehiclePrice]) * 0.3;
				case 1: math = float(VehicleData[id][vehiclePrice]) * 0.4;
				case 2: math = float(VehicleData[id][vehiclePrice]) * 0.5;
				case 3: math = float(VehicleData[id][vehiclePrice]) * 0.6;
			}

			price = floatround(math);

			SendGreenMessage(playerid, "Você vendeu o seu veículo \"%s\" por %s.", ReturnVehicleModelName(VehicleData[id][vehicleModel]), FormatNumber(price));
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) vendeu o veículo %s na concessionária por %s.", ReturnName(playerid, 0), playerid, ReturnVehicleModelName(VehicleData[id][vehicleModel]), FormatNumber(price));
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) vendeu o veículo %s na concessionária por %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnVehicleModelName(VehicleData[id][vehicleModel]), FormatNumber(price));

			GiveScriptedMoney(playerid, price);

			VehicleData[id][vehicleParked] = 0;

			Vehicle_Remove(id);
			Vehicle_Destroy(id);

			Iter_Remove(Vehicles, id);
		}
		else
			return SendWarningMessage(playerid, "Você não está dentro de um veículo que te pertence.");
	}

	return 1;
}

Dialog:VehicleUpgrade(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		TempData[playerid][tempID] = ListedOptions[playerid][listitem];

		new id = TempData[playerid][tempID];

		Dialog_Show(playerid, VehicleUpgradeList, DIALOG_STYLE_LIST, sprintf("{FFFFFF}Escolha o upgrade ({00FF00}%s{FFFFFF})", ReturnVehicleModelName(VehicleData[id][vehicleModel])), DIALOG_VEHICLE_UPGRADES, "Selecionar", "Cancelar", VehicleData[id][vehicleLocator], VehicleData[id][vehicleSeguro], VehicleData[id][vehicleTrava], VehicleData[id][vehicleXMRadio]); 
	}

	return 1;
}

Dialog:VehicleUpgradeList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = TempData[playerid][tempID];

		switch(listitem)
		{
			case 0: //Localizador
			{
				SendClientMessage(playerid, -1, "in progress..");
				///Dialog_Show(playerid, UpgradeLocator, DIALOG_STYLE_TABLIST, sprintf("{FFFFFF}Escolha o novo localizador ({00FF00}%s{FFFFFF})", ReturnVehicleModelName(VehicleData[id][vehicleModel])), "{FFFFFF}BasicFinder\t{00FF00}$3,000\n{FFFFFF}EasyLocator\t{00FF00}$7,000\n{FFFFFF}FindCar em tempo real\t{00FF00}$19,000", "Comprar", "<<");
			}
			case 1: //Seguro
			{
				SendClientMessage(playerid, -1, "in progress..");
				//Dialog_Show(playerid, UpgradeSeguro, DIALOG_STYLE_TABLIST, sprintf("{FFFFFF}Escolha o novo seguro ({00FF00}%s{FFFFFF})", ReturnVehicleModelName(VehicleData[id][vehicleModel])), "{FFFFFF}Cobertura simples\t{00FF00}$7,500\n{FFFFFF}Cobertura mediana\t{00FF00}$15,000\n{FFFFFF}Cobertura total\t{00FF00}$35,000", "Comprar", "<<");
			}
			case 2: //Trava
			{
				SendClientMessage(playerid, -1, "in progress..");
				//Dialog_Show(playerid, UpgradeTrava, DIALOG_STYLE_TABLIST, sprintf("{FFFFFF}Escolha a nova trava ({00FF00}%s{FFFFFF})", ReturnVehicleModelName(VehicleData[id][vehicleModel])), "{FFFFFF}Alarme\t{00FF00}$1,000\n{FFFFFF}Alarme + aviso polícia\t{00FF00}$9,000\n{FFFFFF}Alarme + aviso polícia + SMS dono\t{00FF00}$18,000", "Comprar", "<<");
			}
			case 3: //XMRádio
			{
				SendClientMessage(playerid, -1, "in progress..");
				//Dialog_Show(playerid, UpgradeXMRadio, DIALOG_STYLE_TABLIST, sprintf("{FFFFFF}Escolha o novo XMRádio ({00FF00}%s{FFFFFF})", ReturnVehicleModelName(VehicleData[id][vehicleModel])), "{FFFFFF}Rádio básico\t{00FF00}$1,000\n{FFFFFF}Rádio com MP3\t{00FF00}$3,000\n{FFFFFF}Painel multimídia\t{00FF00}$10,000", "Comprar", "<<");
			}
			case 4: //ExpressWay
			{
				if(GetScriptedMoney(playerid) < 250)
					return SendWarningMessage(playerid, "Você não tem $250 em mãos.");

				if(VehicleData[id][vehicleExpressWay])
					return SendWarningMessage(playerid, "Este veículo já possui um ExpressWay instalado, você pode adicionar créditos em uma 24/7.");

				VehicleData[id][vehicleExpressWay] = true;
				VehicleData[id][vehicleExpressMoney] = 150;
				Vehicle_Save(id);

				SendGreenMessage(playerid, "ExpressWay instalado no(na) %s (%s). Você ganhou $150 de crédito.", ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehiclePlate]);
			}
		}
	}

	return 1;
}

Dialog:PlayerVehicleList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetPVarInt(playerid, "PlayerVehicleSpawnCooldown") > gettime())
			return SendWarningMessage(playerid, "Aguarde mais %d segundos para spawnar outro veículo.", GetPVarInt(playerid, "PlayerVehicleSpawnCooldown") - gettime());

		new id = ListedOptions[playerid][listitem], query[75];

		mysql_format(this, query, sizeof(query), "SELECT * FROM carros WHERE vehicleID = '%d' AND ID = '%d'", id, PlayerData[playerid][pID]);
		mysql_tquery(this, query, "OnPlayerSpawnVehicle", "d", playerid);

		SetPVarInt(playerid, "PlayerVehicleSpawnCooldown", gettime() + 5);
	}

	return 1;
}

Dialog:IndustryBuyProduct(playerid, response, listitem, inputtext[])
{
	new id, p_id = ListedOptions[playerid][listitem];

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			if(TempData[playerid][tempHoldingProduct])
				return SendWarningMessage(playerid, "Você já está carregando um produto, coloque-o no porta malas do seu veículo.");

			if(!IndustryData[id][industryProductStock][p_id])
				return SendWarningMessage(playerid, "Esta indústria está sem produtos para vender no momento.");

			if(GetScriptedMoney(playerid) < IndustryData[id][industryProductPrice][p_id])
				return SendWarningMessage(playerid, "Você não possui %s para poder comprar o produto.", FormatNumber(IndustryData[id][industryProductPrice][p_id]));

			SendGreenMessage(playerid, "Você comprou o produto '%s' por %s.", Industry_ProductName(IndustryData[id][industryProduct][p_id]), FormatNumber(IndustryData[id][industryProductPrice][p_id]));

			IndustryData[id][industryProductStock][p_id] -= 1;
			TempData[playerid][tempHoldingProduct] = IndustryData[id][industryProduct][p_id];

			Industry_Save(id);

			Carga_SetAttach(playerid);
		}
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma indústria.");

	return 1;
}

Dialog:ProductTrunkList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new carro_perto = Vehicle_Nearest(playerid);
 
		if(IsLoadableVehicle(carro_perto) == -1)
			return SendWarningMessage(playerid, "Este veículo não consegue transportar cargas.");

		if(TempData[playerid][tempHoldingProduct] == INVALID_INDUSTRY_PRODUCT)
		{
			if(!VehicleData[carro_perto][vehicleCrateSlot][listitem])
			return SendWarningMessage(playerid, "O slot selecionado não possui uma caixa.");

			TempData[playerid][tempHoldingProduct] = VehicleData[carro_perto][vehicleCrateSlot][listitem];
			VehicleData[carro_perto][vehicleCrateSlot][listitem] = 0;

			if(IsValidDynamicObject(VehicleData[carro_perto][vehicleObjectSlot][listitem]))
				DestroyDynamicObject(VehicleData[carro_perto][vehicleObjectSlot][listitem]);
		
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou o produto %s de dentro do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], Industry_ProductName(TempData[playerid][tempHoldingProduct]), ReturnVehicleModelName(VehicleData[carro_perto][vehicleModel]), VehicleData[carro_perto][vehicleID]);
			SendGreenMessage(playerid, "Você pegou o produto '%s' de dentro do compartimento do seu veículo.", Industry_ProductName(TempData[playerid][tempHoldingProduct])); 

			Carga_SetAttach(playerid);	
		}
		else
		{
			if(VehicleData[carro_perto][vehicleCrateSlot][listitem])
				return SendWarningMessage(playerid, "Esse slot já está sendo usado por um outro produto.");

			VehicleData[carro_perto][vehicleCrateSlot][listitem] = TempData[playerid][tempHoldingProduct];

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou o produto %s dentro do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], Industry_ProductName(TempData[playerid][tempHoldingProduct]), ReturnVehicleModelName(VehicleData[carro_perto][vehicleModel]), VehicleData[carro_perto][vehicleID]);
			SendGreenMessage(playerid, "Você colocou o produto '%s' no compartimento do seu veículo.", Industry_ProductName(TempData[playerid][tempHoldingProduct]));

			Industry_VehicleAttach(carro_perto, listitem);

			Carga_UnsetAttach(playerid);
		}
	}
	return 1;
}

//EmpEditar
Dialog:BusinessEdit(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, count;

		sz_MiscString[0] = 0;

		if((id = Business_Nearest(playerid)) != -1)
		{
			switch(listitem)
			{
				case 0://Editar nome da empresa
					Dialog_Show(playerid, BusinessEditName, DIALOG_STYLE_INPUT, "Alterar nome da empresa:", "Digite abaixo o nome nome da a empresa:\n\nINFO: Limite máximo de caracteres (128).", "Salvar", "<<");

				case 1://Alterar dono da empresa
					Dialog_Show(playerid, BusinessEditOwner, DIALOG_STYLE_INPUT, "Alterar dono da empresa:", "Digite o nome ou ID do jogador:\n\nINFO: O jogador tem que estar online e próximo a você.\nPara remover um dono use valor \"-1\".", "Prosseguir", "<<");

				case 2:
					Dialog_Show(playerid, BusinessEditVault, DIALOG_STYLE_LIST, "Alterar valor no cofre:", "Saldo atual do cofre: %s\nAdicionar valor\nRemover valor\nResetar cofre", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));

				case 3:
				{
					format(sz_MiscString, sizeof(sz_MiscString), "Produto\tValor unitário\tEm estoque\tPreço ($) Unit. (Estoque)\n");

					for(new i = 0; i < MAX_BUSINESS_PRODUCT; i++) if(BusinessData[id][businessProduct][i])
					{
						format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%s\t%d\t%s (%d)\n", 
							sz_MiscString, Business_ProductName(BusinessData[id][businessProduct][i]), FormatNumber(BusinessData[id][businessProductPrice][i]), BusinessData[id][businessStock], FormatNumber(BusinessData[id][businessBuyingPrice]), BusinessData[id][businessBuying]);
						
						ListedOptions[playerid][count++] = i;
					}

					Dialog_Show(playerid, BusinessEditProducts, DIALOG_STYLE_TABLIST_HEADERS, "Alterar estoque e preço do(s) produto(s):", sz_MiscString, "Selecionar", "<<");
				}
				case 4:
				{
					for(new i = 0; i < MAX_BUSINESS_PRODUCT; i++)
					{
						if(BusinessData[id][businessProduct][i])
						{
							format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, count + 1, Business_ProductName(BusinessData[id][businessProduct][i]));
						}
						else
						{
							format(sz_MiscString, sizeof(sz_MiscString), "%s%d. Vazio\n", sz_MiscString, count + 1);
						}

						ListedOptions[playerid][count++] = i;
					}

					Dialog_Show(playerid, BusinessChangeProduct, DIALOG_STYLE_LIST, "Alterar produtos da empresa:", sz_MiscString, "Selecionar", "<<");
				}
			}
		}
		else
			return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}

	return 1;
}

Dialog:BusinessChangeProduct(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, count;

		sz_MiscString[0] = 0;

		if((id = Business_Nearest(playerid)) != -1)
		{
			PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];

			new p_id = PlayerData[playerid][pSelectedSlot];

			if(!BusinessData[id][businessProduct][p_id])
			{
				for(new i = 0; i < sizeof(ProductData); i++) if(ProductData[i][productID])
				{
					count++;
					format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, count, ProductData[i][productName]);					
				}

				Dialog_Show(playerid, BusinessSelProduct, DIALOG_STYLE_LIST, "Escolha o produto:", sz_MiscString, "Selecionar", "<<");
			}	
			else
			{
				Dialog_Show(playerid, BusinessDelProduct, DIALOG_STYLE_MSGBOX, sprintf("Deletar produto: %s", Business_ProductName(BusinessData[id][businessProduct][p_id])), "{FFFFFF}Você está prestes a deletar o produto \"%s\"\ndo menu desta empresa.\n\nVocê confirma essa ação?", "Sim", "<<", Business_ProductName(BusinessData[id][businessProduct][p_id]));
			}		
		}
	}
	else
	{
		if(Business_Nearest(playerid) != -1)
		{
			Dialog_Show(playerid, BusinessEdit, DIALOG_STYLE_LIST, "Qual opção você deseja editar?", "Alterar nome\nAlterar dono\nAlterar valores do cofre\nAlterar preço dos produtos\nAlterar produtos", "Selecionar", "Cancelar");
		}
	}
	return 1;
}

Dialog:BusinessSelProduct(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;

		if((id = Business_Nearest(playerid)) != -1)
		{
			new product = listitem + 1, p_id = PlayerData[playerid][pSelectedSlot];

			BusinessData[id][businessProduct][p_id] = ProductData[product][productID];
			BusinessData[id][businessProductPrice][p_id] = 100;

			Business_Save(id);

			SendAdminAction(playerid, "Você adicionou o item \"%s\" no menu de compra desta empresa.", ProductData[product][productName]);
		
			dlg_BusinessEdit(playerid, 1, 4, "\1");
		}		
	}
	else
	{
		dlg_BusinessEdit(playerid, 1, 4, "\1");
	}
	return 1;
}

Dialog:BusinessDelProduct(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;

		if((id = Business_Nearest(playerid)) != -1)
		{
			new p_id = PlayerData[playerid][pSelectedSlot];

			SendAdminAction(playerid, "Você removeu o item \"%s\" do menu de compra desta empresa.", Business_ProductName(BusinessData[id][businessProduct][p_id]));

			BusinessData[id][businessProduct][p_id] = 0;
			BusinessData[id][businessProductPrice][p_id] = 0;

			Business_Save(id);

			dlg_BusinessEdit(playerid, 1, 4, "\1");	
		}
	}
	else
	{
		dlg_BusinessEdit(playerid, 1, 4, "\1");
	}
	return 1;
}

//EmpEditarNome
Dialog:BusinessEditName(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, string[128];

		if((id = Business_Nearest(playerid)) != -1)
		{
			if(sscanf(inputtext, "s[128]", string))
				return Dialog_Show(playerid, BusinessEditName, DIALOG_STYLE_INPUT, "Alterar nome da empresa:", "Digite abaixo o nome nome da a empresa:\n\nINFO: Limite máximo de caracteres (128).", "Salvar", "<<");

			format(BusinessData[id][businessName], 128, string);

			Business_Save(id);
			Business_Refresh(id);

			SendAdminAction(playerid, "Nome da empresa alterado com sucesso para: \"%s\".", string);
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		if(Business_Nearest(playerid) != -1)
		{
			Dialog_Show(playerid, BusinessEdit, DIALOG_STYLE_LIST, "Qual opção você deseja editar?", "Alterar nome\nAlterar dono\nAlterar valores do cofre\nAlterar preço dos produtos\nAlterar produtos", "Selecionar", "Cancelar");
		}
	}

	return 1;
}

//EmpEditarDono
Dialog:BusinessEditOwner(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, userid;

		if((id = Business_Nearest(playerid)) != -1)
		{
			if(sscanf(inputtext, "d", userid))
				return Dialog_Show(playerid, BusinessEditOwner, DIALOG_STYLE_INPUT, "Alterar dono da empresa:", "Digite o nome ou ID do jogador:\n\nINFO: O jogador tem que estar online e próximo a você.\nPara remover um dono use valor \"-1\".", "Prosseguir", "<<");
			
			if(userid == -1)
			{
				if(!BusinessData[id][businessOwnerID])
					return SendWarningMessage(playerid, "Esta empresa não possui um dono para ser removido.");

				format(BusinessData[id][businessOwnerName], 24, "O estado");
				BusinessData[id][businessOwnerID] = 0;

				Business_Save(id);
				Business_Refresh(id);

				SendAdminAction(playerid, "Dono da empresa \"%s\" removido com sucesso.", BusinessData[id][businessName]);
			}
			else
			{
				if(!IsPlayerConnected(userid))
					return Dialog_Show(playerid, BusinessEditOwner, DIALOG_STYLE_INPUT, "Alterar dono da empresa:", "Jogador inválido ou não está conectado!\n\nDigite o nome ou ID do jogador:\n\nINFO: O jogador tem que estar online e próximo a você.\nPara remover um dono use valor \"-1\".", "Prosseguir", "<<");
			
				if(!IsPlayerNearPlayer(playerid, userid, 4.0))
					return Dialog_Show(playerid, BusinessEditOwner, DIALOG_STYLE_INPUT, "Alterar dono da empresa:", "Jogador está longe de você!\n\nDigite o nome ou ID do jogador:\n\nINFO: O jogador tem que estar online e próximo a você.\nPara remover um dono use valor \"-1\".", "Prosseguir", "<<");
			
				if(Business_GetCount(playerid) >= MAX_BUSINESS_PLAYER)
					return Dialog_Show(playerid, BusinessEditOwner, DIALOG_STYLE_INPUT, "Alterar dono da empresa:", "Jogador já possui o máximo de empresas!\n\nDigite o nome ou ID do jogador:\n\nINFO: O jogador tem que estar online e próximo a você.\nPara remover um dono use valor \"-1\".", "Prosseguir", "<<");
			
				format(BusinessData[id][businessOwnerName], 24, ReturnName(userid));
				BusinessData[id][businessOwnerID] = PlayerData[userid][pID];

				Business_Save(id);
				Business_Refresh(id);

				SendAdminAction(playerid, "Dono da empresa \"%s\" alterado para %s (ID: %d) com sucesso.", BusinessData[id][businessName], ReturnName(userid, 0), userid);
			}
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		if(Business_Nearest(playerid) != -1)
		{
			Dialog_Show(playerid, BusinessEdit, DIALOG_STYLE_LIST, "Qual opção você deseja editar?", "Alterar nome\nAlterar dono\nAlterar valores do cofre\nAlterar preço dos produtos\nAlterar produtos", "Selecionar", "Cancelar");
		}
	}

	return 1;
}

Dialog:BusinessEditVault(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;

		if((id = Business_Nearest(playerid)) != -1)
		{
			switch(listitem)
			{
				case 1:
					Dialog_Show(playerid, BusinessIncreaseVault, DIALOG_STYLE_INPUT, "Adicionar valor no cofre:", "Digite abaixo o valor a ser adicionado no cofre da empresa \"%s\".", "Adicionar", "<<", BusinessData[id][businessName]);
				
				case 2:
					Dialog_Show(playerid, BusinessDecreaseVault, DIALOG_STYLE_INPUT, "Remover valor do cofre:", "Digite abaixo o valor a ser removido do cofre da empresa \"%s\".", "Remover", "<<", BusinessData[id][businessName]);
				
				case 3:
					Dialog_Show(playerid, BusinessClearVault, DIALOG_STYLE_MSGBOX, "Confirmar ação:", "Você deseja resetar o cofre da empresa \"%s\"?", "Confirmar", "<<", BusinessData[id][businessName]);
			}
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		if(Business_Nearest(playerid) != -1)
		{
			Dialog_Show(playerid, BusinessEdit, DIALOG_STYLE_LIST, "Qual opção você deseja editar?", "Alterar nome\nAlterar dono\nAlterar valores do cofre\nAlterar preço dos produtos\nAlterar produtos", "Selecionar", "Cancelar");
		}
	}

	return 1;
}

Dialog:BusinessIncreaseVault(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, amount;

		if((id = Business_Nearest(playerid)) != -1)
		{
			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, BusinessDecreaseVault, DIALOG_STYLE_INPUT, "Adicionar valor no cofre:", "Digite abaixo o valor a ser adicionado no cofre da empresa \"%s\".", "Adicionar", "<<", BusinessData[id][businessName]);

			if(amount < 1)
				return Dialog_Show(playerid, BusinessDecreaseVault, DIALOG_STYLE_INPUT, "Adicionar valor no cofre:", "Valor inválido!!\n\nDigite abaixo o valor a ser adicionado no cofre da empresa \"%s\".", "Adicionar", "<<", BusinessData[id][businessName]);

			BusinessData[id][businessVault] += amount;

			Business_Save(id);

			SendAdminAction(playerid, "Valor %s adicionado no cofre da empresa \"%s\" com sucesso.", FormatNumber(amount), BusinessData[id][businessName]);
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		new id = Business_Nearest(playerid);

		Dialog_Show(playerid, BusinessEditVault, DIALOG_STYLE_LIST, "Alterar valor no cofre:", "Saldo atual do cofre: %s\nAdicionar valor\nRemover valor\nResetar cofre", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));
	}

	return 1;
}

Dialog:BusinessDecreaseVault(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, amount;

		if((id = Business_Nearest(playerid)) != -1)
		{
			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, BusinessDecreaseVault, DIALOG_STYLE_INPUT, "Remover valor do cofre:", "Digite abaixo o valor a ser removido do cofre da empresa \"%s\".", "Remover", "<<", BusinessData[id][businessName]);

			if(amount < 1)
				return Dialog_Show(playerid, BusinessDecreaseVault, DIALOG_STYLE_INPUT, "Remover valor do cofre:", "Valor inválido!!\n\nDigite abaixo o valor a ser removido do cofre da empresa \"%s\".", "Remover", "<<", BusinessData[id][businessName]);

			if(amount > BusinessData[id][businessVault])
				return Dialog_Show(playerid, BusinessDecreaseVault, DIALOG_STYLE_INPUT, "Remover valor do cofre:", "Valor informado excede o do cofre!\n\nDigite abaixo o valor a ser removido do cofre da empresa \"%s\".", "Remover", "<<", BusinessData[id][businessName]);

			BusinessData[id][businessVault] -= amount;

			Business_Save(id);

			SendAdminAction(playerid, "Valor %s removido do cofre da empresa \"%s\" com sucesso.", FormatNumber(amount), BusinessData[id][businessName]);
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		new id = Business_Nearest(playerid);

		Dialog_Show(playerid, BusinessEditVault, DIALOG_STYLE_LIST, "Alterar valor no cofre:", "Saldo atual do cofre: %s\nAdicionar valor\nRemover valor\nResetar cofre", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));
	}

	return 1;
}

Dialog:BusinessClearVault(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;

		if((id = Business_Nearest(playerid)) != -1)
		{
			BusinessData[id][businessVault] = 0;

			Business_Save(id);

			SendAdminAction(playerid, "Cofre da empresa \"%s\" resetado com sucesso.", BusinessData[id][businessName]);
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		new id = Business_Nearest(playerid);

		Dialog_Show(playerid, BusinessEditVault, DIALOG_STYLE_LIST, "Alterar valor no cofre:", "Saldo atual do cofre: %s\nAdicionar valor\nRemover valor\nResetar cofre", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));
	}

	return 1;
}

Dialog:BusinessEditProducts(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];
		
		new id = -1, p_id = PlayerData[playerid][pSelectedSlot]; 

		if((id = Business_Nearest(playerid)) != -1)
		{
			Dialog_Show(playerid, BusinessProduct, DIALOG_STYLE_LIST, Business_ProductName(BusinessData[id][businessProduct][p_id]), "Alterar preço unitário", "Selecionar", "<<");
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		if(Business_Nearest(playerid) != -1)
		{
			Dialog_Show(playerid, BusinessEdit, DIALOG_STYLE_LIST, "Qual opção você deseja editar?", "Alterar nome\nAlterar dono\nAlterar valores do cofre\nAlterar preço dos produtos\nAlterar produtos", "Selecionar", "Cancelar");
		}
	}

	return 1;
}

Dialog:BusinessProduct(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, p_id = PlayerData[playerid][pSelectedSlot];

		if((id = Business_Nearest(playerid)) != -1)
		{
			switch(listitem)
			{
				case 0:
					Dialog_Show(playerid, BusinessProductPrice, DIALOG_STYLE_INPUT, "Digite o novo preço para o produto:", "Produto selecionado: %s\n\nInforme o novo preço:", "Alterar", "Cancelar", Business_ProductName(BusinessData[id][businessProduct][p_id]));
			}
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		dlg_BusinessEdit(playerid, 1, 3, "\1");
	}

	return 1;
}

Dialog:BusinessProductPrice(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, p_id = PlayerData[playerid][pSelectedSlot], amount;

		if((id = Business_Nearest(playerid)) != -1)
		{
			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, BusinessProductPrice, DIALOG_STYLE_INPUT, "Digite o novo preço para o produto:", "Produto selecionado: %s\n\nInforme o novo preço:", "Alterar", "Cancelar", Business_ProductName(BusinessData[id][businessProduct][p_id]));

			if(amount < 1)
				return Dialog_Show(playerid, BusinessProductPrice, DIALOG_STYLE_INPUT, "Digite o novo preço para o produto:", "Valor inválido!!\n\nProduto selecionado: %s\n\nInforme o novo preço:", "Alterar", "Cancelar", Business_ProductName(BusinessData[id][businessProduct][p_id]));

			BusinessData[id][businessProductPrice][p_id] = amount;

			Business_Save(id);

			SendAdminAction(playerid, "Preço do produto \"%s\" alterado para %s com sucesso.", BusinessData[id][businessName], FormatNumber(BusinessData[id][businessProductPrice][p_id]));
		}
		else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");
	}
	else
	{
		dlg_BusinessEdit(playerid, 1, 3, "\1");
	}

	return 1;
}

Dialog:DroppedItems(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = ListedOptions[playerid][listitem];

		if(id != -1 && DroppedItems[id][droppedModel])
		{
			if(DroppedItems[id][droppedWeapon] != 0)
			{
				if(PlayerData[playerid][pTimePlayed] < 2)
					return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

				if(PlayerHasWeapon(playerid, DroppedItems[id][droppedWeapon]))
					return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

				if(PlayerHasWeaponInSlot(playerid, DroppedItems[id][droppedWeapon]))
					return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você não pode fazer isso agora.");

				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

				Item_Delete(id);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega a arma %s do chão.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));						
			}
			else if(PickupItem(playerid, id))
			{
				SendGreenMessage(playerid, "Você pegou o item \"%s\".", DroppedItems[id][droppedItem]);

				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do chão.", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
			}
			else
				SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");
		}
		else SendWarningMessage(playerid, "Este item não existe mais.");
	}
	return 1;
}

Dialog:AceitarTaxi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new targetid = strval(inputtext);

		if(!IsPlayerConnected(targetid))
			return SendWarningMessage(playerid, JogadorOff);

		if(!PlayerData[targetid][pTaxiCalled])
			return SendWarningMessage(playerid, "Essa chamada de taxi já foi aceita por outro taxista.");

		new Float:x, Float:y, Float:z, string[73];

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pTaxiCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

		SendClientMessageEx(playerid, COLOR_GREEN, "Você aceitou o chamado de %s.", ReturnName(targetid, 0));

		format(string, sizeof(string), "%s aceitou o seu pedido e está a caminho da sua", ReturnName(playerid, 0));
		Phone_SendMessage(144, Phone_GetNumberByID(PlayerData[targetid][pID]), string);
		Phone_SendMessage(144, Phone_GetNumberByID(PlayerData[targetid][pID]), "localização. Permaneça parado e aguarde.");
	}
	return 1;
}

Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
				Dialog_Show(playerid, GPSCasas, DIALOG_STYLE_INPUT, "Encontrar Casa", "Digite o endereço da casa abaixo:", "Enviar", "<<");
			
			case 1:
				Dialog_Show(playerid, GPSEmpresas, DIALOG_STYLE_LIST, "Encontrar Empresa", "Posto de Combustível\nMercadinho(24/7)\nFast Food\nLoja de Roupas", "Selecionar", "<<");
		
			case 2:
				Dialog_Show(playerid, GPSComplexo, DIALOG_STYLE_INPUT, "Encontrar Complexo", "Digite o nome do complexo abaixo:", "Enviar", "<<");

			case 3:
				Dialog_Show(playerid, GPSPI, DIALOG_STYLE_LIST, "Encontrar pontos de interesse", "Caixa Eletrônico\nBanco\nCity Hall\nAcademia\nDMV\nDelegacia de Polícia\nHospital", "Selecionar", "<<");

			case 4:
			{
				new string[584];

				string = "Adicionar Local\n";

				for(new i = 0; i < MAX_GPS_LOCATIONS; i++) if(LocationData[playerid][i][locationExists]) 
				{
					format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
				}
				Dialog_Show(playerid, GPSCustom, DIALOG_STYLE_LIST, "Meus lugares", string, "Selecionar", "<<");
			}
		}
	}
	return 1;
}

Dialog:GPSCasas(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext) || strlen(inputtext) > 32)
			return Dialog_Show(playerid, GPSCasas, DIALOG_STYLE_INPUT, "Encontrar Casa", "Digite um endereço válido!!\n\nDigite o endereço da casa abaixo:", "Enviar", "<<");

		foreach(new i : Houses)
		{
			if(HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], inputtext, true))
			{
				if(HouseData[i][houseComplex] == -1)
					Waypoint_Set(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
				else
				{
					foreach(new c : Complex) if(HouseData[i][houseComplex] == ComplexData[c][complexID])
						Waypoint_Set(playerid, HouseData[i][houseAddress], ComplexData[c][complexX], ComplexData[c][complexY], ComplexData[c][complexZ]);
				}
				return SendGreenMessage(playerid, "Seu GPS marcou a casa com o endereço \"%s\" no mapa.", HouseData[i][houseAddress]);
			}
		}
		Dialog_Show(playerid, GPSCasas, DIALOG_STYLE_INPUT, "Encontrar Casa", "Não existe uma casa com o endereço: \"%s\".\n\nDigite o endereço da casa abaixo:", "Enviar", "<<", inputtext);
	}
	else callcmd::gps(playerid);
	return 1;
}

Dialog:GPSEmpresas(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new bizid = GetClosestBusiness(playerid, listitem + 1);

		if(bizid != -1)
		{
			Waypoint_Set(playerid, BusinessData[bizid][businessName], BusinessData[bizid][businessX], BusinessData[bizid][businessY], BusinessData[bizid][businessZ]);
			SendGreenMessage(playerid, "Seu GPS marcou a empresa \"%s\" mais próximo no mapa.", inputtext);
		}
		else
		{
			SendWarningMessage(playerid, "Seu GPS não conseguiu localizar nenhuma empresa.");
		}
	}
	else callcmd::gps(playerid);
	return 1;
}

Dialog:GPSComplexo(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext) || strlen(inputtext) > 32)
			return Dialog_Show(playerid, GPSComplexo, DIALOG_STYLE_INPUT, "Encontrar Complexo", "Digite um nome válido!!\n\nDigite o nome do complexo abaixo:", "Enviar", "<<");

		foreach(new i : Complex) if(!strcmp(ComplexData[i][complexName], inputtext, true))
		{
			Waypoint_Set(playerid, ComplexData[i][complexName], ComplexData[i][complexX], ComplexData[i][complexY], ComplexData[i][complexZ]);
			return SendGreenMessage(playerid, "Você marcou o complexo \"%s\" no mapa.", ComplexData[i][complexName]);
		}

		Dialog_Show(playerid, GPSComplexo, DIALOG_STYLE_INPUT, "Encontrar Complexo", "Não existe um complexo chamado: \"%s\".!!\n\nDigite o nome do complexo abaixo:", "Enviar", "<<", inputtext);
	}
	else
		callcmd::gps(playerid);

	return 1;
}

Dialog:GPSPI(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!listitem)
		{
			new id = GetClosestATM(playerid);

			if(id != -1)
			{
				Waypoint_Set(playerid, "Caixa eletrônico", ATMData[id][atmPos][0], ATMData[id][atmPos][1], ATMData[id][atmPos][2]);
				SendGreenMessage(playerid, "Seu GPS marcou o \"%s\" mais próximo a sua localização.", inputtext);
			}
			else
			{
				SendWarningMessage(playerid, "Seu GPS não conseguiu localizar um caixa eletrônico próximo a sua localização.");
			}

			return 1;
		}

		new piid = GetClosestEntrance(playerid, listitem);

		if(piid != -1)
		{
			Waypoint_Set(playerid, EntranceData[piid][entranceName], EntranceData[piid][entrancePos][0], EntranceData[piid][entrancePos][1], EntranceData[piid][entrancePos][2]);
			SendGreenMessage(playerid, "Seu GPS marcou o ponto de interesse \"%s\" mais próximo no mapa.", inputtext);
		}
		else
		{
			SendWarningMessage(playerid, "Seu GPS não conseguiu localizar nenhum ponto de interesse.");
		}
	}
	else callcmd::gps(playerid);
	return 1;
}

Dialog:GPSCustom(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!listitem)
		{
			Dialog_Show(playerid, GPSCustomAdd, DIALOG_STYLE_INPUT, "Adicionar local", "Digite abaixo o nome do local para ser salvo no GPS:", "Adicionar", "<<");
		}
		else
		{
			new id = Location_GetID(playerid, inputtext);

			if(id != -1)
			{
				PlayerData[playerid][pSelectedSlot] = id;

				Dialog_Show(playerid, GPSCustomInfo, DIALOG_STYLE_LIST, inputtext, "Setar rota\nDeletar local", "Selecionar", "<<");
			}
		}
	}
	else callcmd::gps(playerid);
	return 1;
}

Dialog:GPSCustomAdd(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext))
			return Dialog_Show(playerid, GPSCustomAdd, DIALOG_STYLE_INPUT, "Adicionar local", "Digite um nome válido!!\n\nDigite abaixo o nome do local para ser salvo no GPS:", "Adicionar", "<<");

		if(strlen(inputtext) > 32)
			return Dialog_Show(playerid, GPSCustomAdd, DIALOG_STYLE_INPUT, "Adicionar local", "O nome não pode exceder 32 caracteres!!\n\nDigite abaixo o nome do local para ser salvo no GPS:", "Adicionar", "<<");

		new Float:fX, Float:fY, Float:fZ;

		GetPlayerLocationEx(playerid, fX, fY, fZ);

		Location_Add(playerid, inputtext, fX, fY, fZ);

		SendGreenMessage(playerid, "Você adicionou o local \"%s\" no seu GPS.", inputtext);
		dlg_MainGPS(playerid, 1, 3, "\1");
	}
	else dlg_MainGPS(playerid, 1, 3, "\1");
	return 1;
}

Dialog:GPSCustomInfo(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pSelectedSlot];
		switch(listitem)
		{
			case 0:
			{
				Waypoint_Set(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
				SendGreenMessage(playerid, "Seu GPS marcou a posição salva \"%s\" no mapa.", LocationData[playerid][id][locationName]);
			}
			case 1:
			{
				SendGreenMessage(playerid, "Você deletou a posição salva \"%s\" do seu GPS.", LocationData[playerid][id][locationName]);
				Location_Delete(playerid, LocationData[playerid][id][locationName]);
				dlg_MainGPS(playerid, 1, 3, "\1");
			}
		}
	}
	else dlg_MainGPS(playerid, 1, 3, "\1");
	return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid)))
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: House_ShowItems(playerid, houseid);
				case 1: House_WeaponStorage(playerid, houseid);
				case 2: Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Cofre da casa", "Retirar dinheiro do cofre\nDepositar dinheiro no cofre", "Selecionar", "<<");
			}
		}
	}
	return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	new string[64];

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid)))
	{
		if(response)
		{
			if(HouseStorage[houseid][listitem][hItemExists])
			{
				PlayerData[playerid][pStorageItem] = listitem;

				format(string, 64, HouseStorage[houseid][listitem][hItemName]);

				format(string, sizeof(string), "%s (Quantidade: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
				Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Pegar Item\nGuardar Item", "Selecionar", "<<");
			}
			else
			{
				Inventory_Open(playerid);
				PlayerData[playerid][pStorageSelect] = 1;
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	new string[32];

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid)))
	{
		new id = PlayerData[playerid][pInventoryItem];
		format(string, 32, InventoryData[playerid][id][invItem]);

		if(response)
		{
			new amount;
			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Depositar Item", "Digite uma quantidade!!\n\nItem: %s (Quantidade %d)\n\nDigite a quantidade desse item para armazenar na sua casa:", "Armazenar", "<<", string, InventoryData[playerid][id][invQuantity]);
		
			if(amount < 1 || amount > InventoryData[playerid][id][invQuantity])
				return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Depositar Item", "Digite uma quantidade válida!!\n\nItem: %s (Quantidade %d)\n\nDigite a quantidade desse item para armazenar na sua casa:", "Armazenar", "<<", string, InventoryData[playerid][id][invQuantity]);
		
			House_AddItem(houseid, string, InventoryData[playerid][id][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou o item \"%s\" com %d unidades no armazenamento da casa (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], string, amount, HouseData[houseid][houseID]);
			SendServerMessage(playerid, "Você guardou um(a) \"%s\" (Quantia: %d) no armazenamento da sua casa.", string, amount);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no armazenamento da sua casa.", ReturnName(playerid, 0), string);
			House_ShowItems(playerid, houseid);
		}
		else
			House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	new string[32];

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid)))
	{
		new id = PlayerData[playerid][pStorageItem];
		format(string, 32, HouseStorage[houseid][id][hItemName]);

		if(response)
		{
			new amount;
			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Pegar Item", "Digite uma quantidade!!\n\nItem: %s (Quantidade: %d)\n\nDigite a quantidade desse item que você pegar do armazenamento:", "Pegar", "<<", string, HouseStorage[houseid][id][hItemQuantity]);

			if(amount < 1 || amount > HouseStorage[houseid][id][hItemQuantity])
				return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Pegar Item", "Digite uma quantidade válida!!\n\nItem: %s (Quantidade: %d)\n\nDigite a quantidade desse item que você pegar do armazenamento:", "Pegar", "<<", string, HouseStorage[houseid][id][hItemQuantity]);

			new invid = Inventory_Add(playerid, string, HouseStorage[houseid][id][hItemModel], amount);

			if(invid == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			House_RemoveItem(houseid, string, amount);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou o item \"%s\" com %d unidades do armazenamento da casa (ID: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], string, amount, HouseData[houseid][houseID]);
			SendServerMessage(playerid, "Você pegou um(a) \"%s\" (Quantia: %d) do armazenamento da sua casa.", string, amount);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do armazenamento da sua casa.", ReturnName(playerid, 0), string);

			House_ShowItems(playerid, houseid);
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
	new houseid = -1, itemid = -1;

	new string[32];

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid)))
	{
		itemid = PlayerData[playerid][pStorageItem];

		format(string, 32, HouseStorage[houseid][itemid][hItemName]);

		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(HouseStorage[houseid][itemid][hItemQuantity] == 1)
					{
						new id = Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1);

						if(id == -1)
							return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

						House_RemoveItem(houseid, string);

						Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou o item \"%s\" do armazenamento da casa (ID: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], string, HouseData[houseid][houseID]);
						SendServerMessage(playerid, "Você pegou um(a) \"%s\" do armazenamento da sua casa.", string);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do armazenamento da sua casa.", ReturnName(playerid, 0), string);
					}
					else
						Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Pegar Item", "Item: %s (Quantidade: %d)\n\nDigite a quantidade desse item que você pegar do armazenamento:", "Pegar", "<<", string, HouseStorage[houseid][itemid][hItemQuantity]);
				}
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if(id == -1)
					{
						House_ShowItems(playerid, houseid);
						return SendWarningMessage(playerid, "Você não tem esse item no seu inventário.");
					}
					else if(InventoryData[playerid][id][invQuantity] == 1)
					{
						House_AddItem(houseid, string, InventoryData[playerid][id][invModel], 1);
						Inventory_Remove(playerid, string);

						Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou o item \"%s\" no armazenamento da casa (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], string, HouseData[houseid][houseID]);
						SendServerMessage(playerid, "Você guardou um(a) \"%s\" no armazenamento da sua casa.", string);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no armazenamento da sua casa.", ReturnName(playerid, 0), string);
						House_ShowItems(playerid, houseid);
					}
					else if(InventoryData[playerid][id][invQuantity] > 1)
					{
						PlayerData[playerid][pInventoryItem] = id;
						Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Depositar Item", "Item: %s (Quantidade %d)\n\nDigite a quantidade desse item para armazenar na sua casa:", "Armazenar", "<<", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else 
			House_ShowItems(playerid, houseid);
	}
	return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if(response)
		{
			if(HouseData[houseid][houseWeapon][listitem] != 0)
			{
				if(PlayerData[playerid][pTimePlayed] < 2)
					return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

				if(PlayerHasWeapon(playerid, HouseData[houseid][houseWeapon][listitem]))
					return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

				if(PlayerHasWeaponInSlot(playerid, HouseData[houseid][houseWeapon][listitem]))
					return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você não pode fazer isso agora.");

				GiveWeaponToPlayer(playerid, HouseData[houseid][houseWeapon][listitem], HouseData[houseid][houseAmmo][listitem]);

				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou a arma \"%s\" com %d de munição do armazenamento da casa (ID: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(HouseData[houseid][houseWeapon][listitem]), HouseData[houseid][houseWeapon][listitem], HouseData[houseid][houseID]);
				SendServerMessage(playerid, "Você pegou um(a) \"%s\" (Munição: %d) do armazenamento da sua casa.", ReturnWeaponName(HouseData[houseid][houseWeapon][listitem]), HouseData[houseid][houseWeapon][listitem]);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do armazenamento da sua casa.", ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapon][listitem]));

				HouseData[houseid][houseWeapon][listitem] = 0;
				HouseData[houseid][houseAmmo][listitem] = 0;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
			else
			{
				new weaponid = GetWeapon(playerid);
				new ammo = GetAmmo(playerid);

				if(!weaponid)
					return SendWarningMessage(playerid, "Você não está com nenhuma arma em mãos.");

				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você está em serviço e não pode guardar armas no armazenamento da sua casa.");

				ResetWeapon(playerid, weaponid);

				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou a arma \"%s\" com %d de munição no armazenamento da casa (ID: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(weaponid), ammo, HouseData[houseid][houseID]);
				SendServerMessage(playerid, "Você guardou um(a) \"%s\" (Munição: %d) no armazenamento da sua casa.", ReturnWeaponName(weaponid), ammo);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no armazenamento da sua casa.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

				HouseData[houseid][houseWeapon][listitem] = weaponid;
				HouseData[houseid][houseAmmo][listitem] = ammo;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}	
		}
		else
			House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Retirar do cofre da casa", "Saldo: %s\n\nDigite a quantidade que você deseja retirar do cofre da sua casa:", "Retirar", "<<", FormatNumber(HouseData[houseid][houseMoney]));
				case 1: Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Depositar no cofre da casa", "Saldo: %s\n\nDigite a quantidade que você deseja depositar no cofre da sua casa:", "Depositar", "<<", FormatNumber(HouseData[houseid][houseMoney]));
			}
		}
		else
			House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if(response)
		{
			new amount;

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Retirar do cofre da casa", "Digite uma quantia!!\n\nSaldo: %s\n\nDigite a quantidade que você deseja retirar do cofre da sua casa:", "Retirar", "<<", FormatNumber(HouseData[houseid][houseMoney]));

			if(amount < 1 || amount > HouseData[houseid][houseMoney])
				return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Retirar do cofre da casa", "Digite uma quantidade válida!!\n\nSaldo: %s\n\nDigite a quantidade que você deseja retirar do cofre da sua casa:", "Retirar", "<<", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] -= amount;
			GiveScriptedMoney(playerid, amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) retirou %s do cofre da casa (ID: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(amount), HouseData[houseid][houseID]);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s retira %s do cofre da sua casa.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else
			Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Cofre da casa", "Retirar dinheiro do cofre\nDepositar dinheiro no cofre", "Selecionar", "<<");
	}
	return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if(response)
		{
			new amount;

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Depositar no cofre da casa", "Digite uma quantia!!\n\nSaldo: %s\n\nDigite a quantidade que você deseja depositar no cofre da sua casa:", "Depositar", "<<", FormatNumber(HouseData[houseid][houseMoney]));

			if(amount < 1 || amount > GetScriptedMoney(playerid))
				return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Depositar no cofre da casa", "Digite uma quantidade válida!!\n\nSaldo: %s\n\nDigite a quantidade que você deseja depositar no cofre da sua casa:", "Depositar", "<<", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] += amount;
			GiveScriptedMoney(playerid, -amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) depositou %s no cofre da casa (ID: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(amount), HouseData[houseid][houseID]);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s deposita %s no cofre da sua casa.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else
			Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Cofre da casa", "Retirar dinheiro do cofre\nDepositar dinheiro no cofre", "Selecionar", "<<");
	}
	return 1;
}

Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = ListedOptions[playerid][listitem];

		if(!TicketData[playerid][id][ticketExists])
			return SendWarningMessage(playerid, "Não há nenhuma multa no slot selecionado.");

		if(GetScriptedMoney(playerid) < TicketData[playerid][id][ticketFee])
			return SendWarningMessage(playerid, "Você não tem dinheiro para pagar essa multa.");

		GiveScriptedMoney(playerid, -TicketData[playerid][id][ticketFee]);
		Tax_AddMoney(TicketData[playerid][id][ticketFee]);

		SendGreenMessage(playerid, "Você pagou %s da multa: \"%s\".", FormatNumber(TicketData[playerid][id][ticketFee]), TicketData[playerid][id][ticketReason]);

		Ticket_Remove(playerid, id);
	}
	else
	{
		Dialog_Show(playerid, CityHall, DIALOG_STYLE_TABLIST_HEADERS, "Qual serviço você deseja acessar?", "Opção\nAgência de empregos\nMinhas multas", "Selecionar", "Cancelar");
	}
	return 1;
}

Dialog:ShowOnly(playerid, response, listitem, inputtext[])
{
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}

Dialog:InventoryPlayer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new name[48], id = -1;
		PlayerData[playerid][pInventoryItem] = listitem;

		format(name, 48, InventoryData[playerid][listitem][invItem]);

		switch(PlayerData[playerid][pStorageSelect])
		{
			case 1:
			{
				if((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
				{
					if(InventoryData[playerid][listitem][invQuantity] == 0)
					{
						House_ShowItems(playerid, id);
						SendWarningMessage(playerid, "Esse slot do seu inventário está vazio, não há o que armazenar.");
					}
					else if(InventoryData[playerid][listitem][invQuantity] == 1)
					{
						House_AddItem(id, name, InventoryData[playerid][listitem][invModel], 1);
						Inventory_Remove(playerid, name);

						Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou o item \"%s\" no armazenamento da casa (uid: %d).", FormatFullTime(), PlayerData[playerid][pID], name, HouseData[id][houseID]);
						SendServerMessage(playerid, "Você guardou um(a) \"%s\" no armazenamento da sua casa.", name);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no armazenamento da sua casa.", ReturnName(playerid, 0), name);
						House_ShowItems(playerid, id);
					}
					else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Depositar Item", "Item: %s (Quantidade %d)\n\nDigite a quantidade desse item para armazenar na sua casa:", "Armazenar", "<<", name, InventoryData[playerid][listitem][invQuantity]);
					PlayerData[playerid][pStorageSelect] = 0;
				}
			}
			case 2:
			{
				if((id = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID && !VehicleData[id][vehicleLocked])
				{
					if(InventoryData[playerid][listitem][invQuantity] == 0)
					{
						Car_TrunkShow(playerid, id);
						SendWarningMessage(playerid, "Esse slot do seu inventário está vazio, não tem o que armazenar.");
					}
					else if(InventoryData[playerid][listitem][invQuantity] == 1)
					{
						Car_AddItem(id, name, InventoryData[playerid][listitem][invModel], 1);
						Inventory_Remove(playerid, name);

						Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou o item \"%s\" no porta malas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], name, ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehicleID]);
						SendServerMessage(playerid, "Você guardou um(a) \"%s\" no porta malas do veículo.", name);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no porta malas do veículo.", ReturnName(playerid, 0), name);
						Car_TrunkShow(playerid, id);
					}
					else Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Depositar Item", "Item: %s (Quantidade %d)\n\nDigite a quantidade desse item para armazenar no porta malas:", "Armazenar", "<<", name, InventoryData[playerid][listitem][invQuantity]);
					PlayerData[playerid][pStorageSelect] = 0;
				}
			}
			case 3: //Market System
			{
				if(InventoryData[playerid][listitem][invQuantity] == 0)
				{
					SendWarningMessage(playerid, "Esse slot do seu inventário está vázio, não tem o que vender.");
				}
				else if(InventoryData[playerid][listitem][invQuantity] == 1)
				{
					Dialog_Show(playerid, MarketValue, DIALOG_STYLE_INPUT, "Escolher preço unitário", "Digite abaixo o preço unitário para o produto:\n%s (Quantidade %d)", "Vender", "<<", name, InventoryData[playerid][listitem][invQuantity]);
					SetPVarInt(playerid, "marketquantity", 1);
				}
				else
				{
					Dialog_Show(playerid, MarketDeposit, DIALOG_STYLE_INPUT, "Vender Produto", "Produto: %s (Quantidade %d)\n\nDigite a quantidade que deseja vender:", "Próximo", "<<", name, InventoryData[playerid][listitem][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
		}
	}
	return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
	if(PlayerData[playerid][pFactionEdit] == -1)
		return 0;

	if(response)
	{
		new skins[311];

		switch(listitem)
		{
			case 0: Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Adicionar pelo ID do modelo", "Digite ID do modelo da skin abaixo (0-311):", "Adicionar", "Cancelar");
			case 1:
			{
				for(new i = 0; i < sizeof(skins); i++)
				{
					if(i == 74) continue;
					skins[i] = i + 1;
				}

				ShowModelSelectionMenu(playerid, "Adicionar skin", MODEL_SELECTION_ADD_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
			}
			case 2:
			{
				FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);
				
				SendAdminAction(playerid, "Você removeu a skin ID do slot: %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	return 1;
}

Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
		new skin = strval(inputtext);

		if (isnull(inputtext))
			return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Adicionar pelo ID do modelo", "Digite ID do modelo da skin abaixo (0-311):", "Adicionar", "Cancelar");

		if (skin < 0 || skin > 311)
			return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Adicionar pelo ID do modelo", "Digite ID do modelo da skin abaixo (0-311):", "Adicionar", "Cancelar");

		FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		if(skin)
		{
			SendAdminAction(playerid, "Você setou a skin id do slot %d para %d.", PlayerData[playerid][pSelectedSlot] + 1, skin);
		}
		else
		{
			SendAdminAction(playerid, "Você removeu a skin ID do slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(IsValidDynamicObject(FactionData[PlayerData[playerid][pFactionEdit]][factionObject]))
					DestroyDynamicObject(FactionData[PlayerData[playerid][pFactionEdit]][factionObject]);

				new Float:x, Float:y, Float:z;
				GetPlayerPos(playerid, x, y, z);

				GetXYInFrontOfPlayer(playerid, x, y, 2.0);

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerIntVW][0] = GetPlayerInterior(playerid);
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerIntVW][1] = GetPlayerVirtualWorld(playerid);

				PlayerData[playerid][pSelectedSlot] = PlayerData[playerid][pFactionEdit];
				PlayerData[playerid][pEditingMode] = 9;

				FactionData[PlayerData[playerid][pFactionEdit]][factionObject] = CreateDynamicObject(11730, x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

				EditDynamicObject(playerid, FactionData[PlayerData[playerid][pFactionEdit]][factionObject]);

				//Faction_Save(PlayerData[playerid][pFactionEdit]);
				//Faction_RefreshLocker(PlayerData[playerid][pFactionEdit]);
			}
			case 1:
			{
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = 0.0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = 0.0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = 0.0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][3] = 0.0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][4] = 0.0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][5] = 0.0;

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerIntVW][0] = 0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerIntVW][1] = 0;

				if(IsValidDynamicObject(FactionData[PlayerData[playerid][pFactionEdit]][factionObject]))
					DestroyDynamicObject(FactionData[PlayerData[playerid][pFactionEdit]][factionObject]);

				if(IsValidDynamic3DTextLabel(FactionData[PlayerData[playerid][pFactionEdit]][factionText]))
					DestroyDynamic3DTextLabel(FactionData[PlayerData[playerid][pFactionEdit]][factionText]);

				Faction_Save(PlayerData[playerid][pFactionEdit]);

				SendAdminAction(playerid, "Você deletou o locker da facção ID: %d.", PlayerData[playerid][pFactionEdit]);
			}
			case 2:
			{
				new string[300];

				for(new i = 0; i < 10; i++)
				{
					if(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i])
						format(string, sizeof(string), "%sArma %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));
					else
						format(string, sizeof(string), "%sSlot Vazio\n", string);
				}
				Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Armas do Locker", string, "Selecionar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
	if(PlayerData[playerid][pFactionEdit] == -1)
		return 0;

	if(response)
	{
		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Editar Arma", "Setar Arma (%d)\nSetar Munição (%d)\nLimpar Slot", "Selecionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
		return 0;

	if (response)
	{
		switch(listitem)
		{
			case 0: Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Setar Arma", "Arma atual: %s (%d)\n\nDigite a Arma ID para o slot %d:", "Enviar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
			case 1: Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Setar Munição", "Munição atual: %d\n\nDigite a quantidade de munição para o slot %d:", "Enviar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
			case 2:
			{
				FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);

				dlg_FactionLocker(playerid, 1, 2, "\1");

				SendAdminAction(playerid, "Você removeu a arma do slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	else
		dlg_FactionLocker(playerid, 1, 2, "\1");
	return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
	if(PlayerData[playerid][pFactionEdit] == -1)
		return 0;

	if(response)
	{
		new weaponid = strval(inputtext);

		if(isnull(inputtext))
			return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Setar Arma", "Digite um valor!!\n\nArma atual: %s (%d)\n\nDigite a Arma ID para o slot %d:", "Enviar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if(weaponid < 0 || weaponid > 46)
			return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Setar Arma", "Valor informado é inválido!!\n\nArma atual: %s (%d)\n\nDigite a Arma ID para o slot %d:", "Enviar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Editar Arma", "Setar Arma (%d)\nSetar Munição (%d)\nLimpar Slot", "Selecionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);

		if(weaponid)
		{
			SendAdminAction(playerid, "Você setou a arma id no slot %d para %s.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
		}
		else
		{
			SendAdminAction(playerid, "Você removeu a arma do slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
	if(PlayerData[playerid][pFactionEdit] == -1)
		return 0;

	if(response)
	{
		new ammo = strval(inputtext);

		if(isnull(inputtext))
			return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Setar Munição", "Digite um valor!!\n\nMunição atual: %d\n\nDigite a quantidade de munição para o slot %d:", "Enviar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if(ammo < 1 || ammo > 15000)
			return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Setar Munição", "O valor inserido não pode ser menor que 1 e maior que 1500.\n\nMunição atual: %d\n\nDigite a quantidade de munição para o slot %d:", "Enviar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Editar Arma", "Setar Arma (%d)\nSetar Munição (%d)\nLimpar Slot", "Selecionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
		
		SendAdminAction(playerid, "Você setou a quantidade de munição no slot %d para %d.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
	}
	return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Setar Rank", "Rank: %s (%d)\n\nDigite um nome para esse rank abaixo:", "Enviar", "<<", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Setar Rank", "Digite algo!!\n\nRank: %s (%d)\n\nDigite um nome para esse rank abaixo:", "Enviar", "<<", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		if(strlen(inputtext) > 32)
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Setar Rank", "A quantidade de caracteres não pode passar de 32!!\n\nRank: %s (%d)\n\nDigite um nome para esse rank abaixo:", "Enviar", "<<", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

		Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
		
		SendAdminAction(playerid, "Você setou o nome do rank %d para \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:EditPaychecks(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;

		Dialog_Show(playerid, SetPaycheckRank, DIALOG_STYLE_INPUT, "Setar Paycheck", "Rank: %s\nSalário atual: %s\n\nDigite o novo salário para esse rank abaixo:", "Enviar", "<<", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], FormatNumber(FactionData[PlayerData[playerid][pFactionEdit]][factionPaycheck][PlayerData[playerid][pSelectedSlot]]));
	}
	return 1;
}

Dialog:SetPaycheckRank(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new paycheck;

		if(sscanf(inputtext, "d", paycheck))
			return Dialog_Show(playerid, SetPaycheckRank, DIALOG_STYLE_INPUT, "Setar Paycheck", "Digite um valor!!\n\nRank: %s\nSalário atual: %s\n\nDigite o novo salário para esse rank abaixo:", "Enviar", "<<", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], FormatNumber(FactionData[PlayerData[playerid][pFactionEdit]][factionPaycheck][PlayerData[playerid][pSelectedSlot]]));
	
		if(paycheck < 0 || paycheck > 100000)
			return Dialog_Show(playerid, SetPaycheckRank, DIALOG_STYLE_INPUT, "Setar Paycheck", "Não exceda os limites!\nLIMITES: 0 a 100,000.\n\nRank: %s\nSalário atual: %s\n\nDigite o novo salário para esse rank abaixo:", "Enviar", "<<", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], FormatNumber(FactionData[PlayerData[playerid][pFactionEdit]][factionPaycheck][PlayerData[playerid][pSelectedSlot]]));
	
		FactionData[PlayerData[playerid][pFactionEdit]][factionPaycheck][PlayerData[playerid][pSelectedSlot]] = paycheck;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendAdminAction(playerid, "Você alterou o paycheck do Rank: %s (%d) para %s.", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1, FormatNumber(FactionData[PlayerData[playerid][pFactionEdit]][factionPaycheck][PlayerData[playerid][pSelectedSlot]]));
	}
	else Faction_ShowPaycheck(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:Locker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if(factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if(response)
	{
		new skins[28];

		new string[350];

		if(FactionData[factionid][factionType] != FACTION_GANGSTER && FactionData[factionid][factionType] != FACTION_CARTEL && FactionData[factionid][factionType] != FACTION_MOTOCLUB)
		{
			switch(listitem)
			{
				case 0:
				{
					if(!PlayerData[playerid][pOnDuty])
					{
						if(PlayerData[playerid][pOnDutyBlock] > gettime())
							return SendWarningMessage(playerid, "Você não pode entrar em serviço agora, aguarde mais %d segundos.", PlayerData[playerid][pOnDutyBlock] - gettime());

						if(IsPlayerArmed(playerid))
							return SendWarningMessage(playerid, "Você está portando uma arma que não é da corporação, guarde-a primeiro.");

						PlayerData[playerid][pOnDuty] = true;
						SetScriptedArmour(playerid, 100);

						SetFactionColor(playerid);
						
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega seus equipamentos e está agora em serviço.", ReturnName(playerid, 0));
						
						SendFactionMessage(factionid, FactionData[PlayerData[playerid][pFaction]][factionColor], "** DISPATCH: %s %s está agora em serviço.", Faction_GetRank(playerid), ReturnName(playerid, 0));
					}
					else
					{
						PlayerData[playerid][pOnDuty] = false;
						SetScriptedArmour(playerid, 0.0);

						SetPlayerColorEx(playerid, COLOR_WHITE);
						SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
						ResetWeapons(playerid);

						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s retira seus equipamentos e saiu de serviço.", ReturnName(playerid, 0));
						
						SendFactionMessage(factionid, FactionData[PlayerData[playerid][pFaction]][factionColor], "** DISPATCH: %s %s não está mais em serviço.", Faction_GetRank(playerid), ReturnName(playerid, 0));
					}
				}
				case 1:
				{
					if(!PlayerData[playerid][pOnDuty])
						return SendWarningMessage(playerid, "Você não está em serviço.");

					SetScriptedHealth(playerid, 100.0);
					SetScriptedArmour(playerid, 100.0);

					SendGreenMessage(playerid, "Você pegou seus equipamentos de serviço.");
				}
				case 2:
				{
					for(new i = 0; i < sizeof(skins); i++)
						skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Escolha a roupa", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 3:
				{
					if(!PlayerData[playerid][pOnDuty])
						return SendWarningMessage(playerid, "Você não está em serviço.");

					for(new i = 0; i < 10; i++)
					{
						if(FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sArma %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));
						else
							format(string, sizeof(string), "%sSlot Vazio\n", string);
					}
					Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Armas do locker", string, "Selecionar", "Cancelar");
				}
			}
		}
		else
		{
			switch(listitem)
			{
				case 0:
				{
					if(FactionData[PlayerData[playerid][pFaction]][factionType] == FACTION_GANGSTER && War_Gangsters)
						return SendWarningMessage(playerid, "Sua facção está participando de uma guerra, você não pode colocar a roupa agora.");	
					
					else if(FactionData[PlayerData[playerid][pFaction]][factionType] == FACTION_MOTOCLUB && War_Motoclub)
						return SendWarningMessage(playerid, "Sua facção está participando de uma guerra, você não pode colocar a roupa agora.");
					
					else if(FactionData[PlayerData[playerid][pFaction]][factionType] == FACTION_CARTEL && War_Cartel)
						return SendWarningMessage(playerid, "Sua facção está participando de uma guerra, você não pode colocar a roupa agora.");

					for(new i = 0; i < sizeof(skins); i++)
						skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Escolha a skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 1:
				{
					if(!PlayerData[playerid][pIllegalDuty])
						return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

					if(FactionData[PlayerData[playerid][pFaction]][factionType] == FACTION_GANGSTER && War_Gangsters)
						return SendWarningMessage(playerid, "Sua facção está participando de uma guerra, você não pode tirar a roupa agora.");	
					
					else if(FactionData[PlayerData[playerid][pFaction]][factionType] == FACTION_MOTOCLUB && War_Motoclub)
						return SendWarningMessage(playerid, "Sua facção está participando de uma guerra, você não pode tirar a roupa agora.");
					
					else if(FactionData[PlayerData[playerid][pFaction]][factionType] == FACTION_CARTEL && War_Cartel)
						return SendWarningMessage(playerid, "Sua facção está participando de uma guerra, você não pode tirar a roupa agora.");

					SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

					SendGreenMessage(playerid, "Você não está mais com a sua roupa da facção.");

					PlayerData[playerid][pIllegalDuty] = false;
				}
				case 2:
				{
					if(!PlayerData[playerid][pIllegalDuty])
						return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

					for (new i = 0; i < 10; i ++)
					{
					   if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANGSTER && GetFactionType(playerid) != FACTION_CARTEL && GetFactionType(playerid) != FACTION_MOTOCLUB)
							format(string, sizeof(string), "%s(%d): %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else if (FactionData[factionid][factionWeapons][i] && (GetFactionType(playerid) == FACTION_GANGSTER || GetFactionType(playerid) == FACTION_CARTEL || GetFactionType(playerid) == FACTION_MOTOCLUB))
							format(string, sizeof(string), "%sArma %d: %s (Munição: %d)\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i]);

						else format(string, sizeof(string), "%sSlot Vazio\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Armas do locker", string, "Selecionar", "Cancelar");
				}
			}
		}
	}
	return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if(response)
	{
		new weaponid = FactionData[factionid][factionWeapons][listitem],
		ammo = FactionData[factionid][factionAmmo][listitem];

		if(weaponid)
		{
			if(PlayerData[playerid][pTimePlayed] < 2)
				return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

			if(PlayerHasWeapon(playerid, weaponid))
				return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

			if(PlayerHasWeaponInSlot(playerid, weaponid))
				return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

			GiveWeaponToPlayer(playerid, weaponid, ammo);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s abre o locker e equipa uma %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou a arma %s com %d de munição do locker da facção %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(weaponid), ammo, Faction_GetName(playerid), PlayerData[playerid][pFactionID]);

			if(GetFactionType(playerid) == FACTION_GANGSTER || GetFactionType(playerid) == FACTION_CARTEL || GetFactionType(playerid) == FACTION_MOTOCLUB)
			{
				FactionData[factionid][factionWeapons][listitem] = 0;
				FactionData[factionid][factionAmmo][listitem] = 0;

				Faction_Save(factionid);
			}
		}
		else
		{
			if(GetFactionType(playerid) == FACTION_GANGSTER || GetFactionType(playerid) == FACTION_CARTEL || GetFactionType(playerid) == FACTION_MOTOCLUB)
			{
				if((weaponid = GetWeapon(playerid)) == 0)
					return SendWarningMessage(playerid, "Você não está segurando nenhuma arma.");

				FactionData[factionid][factionWeapons][listitem] = weaponid;
				FactionData[factionid][factionAmmo][listitem] = GetAmmo(playerid);

				Faction_Save(factionid);

				ResetWeapon(playerid, weaponid);
				
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega a sua %s e guarda dentro do locker.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
			
				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou a arma %s com %d de munição no locker da facção %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(weaponid), ammo, Faction_GetName(playerid), PlayerData[playerid][pFactionID]);
			}
			else
			{
				SendWarningMessage(playerid, "Esse slot não tem nenhum arma para ser equipado.");
			}
		}
	}
	else
		callcmd::locker(playerid);

	return 1;
}

Dialog:AcceptMechanic(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new targetid = strval(inputtext);

		if(!IsPlayerConnected(targetid))
			return SendWarningMessage(playerid, JogadorOff);

		if(!PlayerData[targetid][pMechanicCalled])
			return SendWarningMessage(playerid, "Essa chamada já foi aceita por um outro mecânico.");

		new Float:x, Float:y, Float:z, string[71];

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pMechanicCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

		SendClientMessageEx(playerid, COLOR_GREEN, "Você aceitou o chamado de mecânico de %s.", ReturnName(targetid, 0));

		format(string, sizeof(string), "%s aceitou o seu chamado e já está a caminho.", ReturnName(playerid, 0));
		Phone_SendMessage(115, Phone_GetNumberByID(PlayerData[targetid][pID]), string);
	}
	return 1;
}

Dialog:Furniture(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: Furniture_Show(playerid, houseid, 1);
				case 1:
				{
					if(PlayerData[playerid][pBlockFurniture] > gettime())
						return SendWarningMessage(playerid, "Você não está autorizado a comprar mobília. Veja o tempo restante em /punicoes.");

					Dialog_Show(playerid, FurnitureCategory, DIALOG_STYLE_LIST, "Comprar mobília", DIALOG_BUY_FURNITURE, "Selecionar", "<<");
				}
				case 2: Dialog_Show(playerid, FurnitureInfo, DIALOG_STYLE_MSGBOX, "Informações sobre a mobília", "{FFFFFF}Slots da mobília: %d/%d\nJogadores com permissão de mobiliar:\n- %s\n- %s", "<<", "", Furniture_GetCount(houseid), Furniture_GetSlots(houseid), ReturnNameByID(HouseData[houseid][houseFurnitureA1]), ReturnNameByID(HouseData[houseid][houseFurnitureA2]));
				case 3:
				{
					if(!House_IsOwner(playerid, houseid))
						return SendWarningMessage(playerid, "Você não tem permissão para acessar esta opção.");

					if(Furniture_GetCount(houseid) >= 25)
						Dialog_Show(playerid, SellAllFurniture, DIALOG_STYLE_MSGBOX, "Vender toda a mobília", "Você realmente deseja vender toda a mobília desta casa?\nInfo: Nesta opção você receberá apenas a metade do valor\npago em cada mobília.", "Vender", "<<");
					else
						return SendWarningMessage(playerid, "Sua propriedade precisa ter pelo menos 25 mobílias para poder usar esta função.");
				}
				case 4:
				{
					if(!House_IsOwner(playerid, houseid))
						return SendWarningMessage(playerid, "Você não tem permissão para acessar esta opção.");

					Dialog_Show(playerid, FurnitureListPermission, DIALOG_STYLE_LIST, "Jogadores permitidos:", "1. %s\n2. %s", "Selecionar", "<<", ReturnNameByID(HouseData[houseid][houseFurnitureA1]), ReturnNameByID(HouseData[houseid][houseFurnitureA2]));
				}
			}
		}
	}
	return 1;
}

//Opções da mobília
Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			if(PlayerData[playerid][pPage] == 1 && !listitem) 
			{
				SetPVarInt(playerid, "SelectObject_Type", 1);
				SendServerMessage(playerid, "Clique na mobília desejada para abrir a ferramenta de edição.");
				return SelectObject(playerid);
			}

			if(listitem == MAX_PAGE_FURNITURE)
				return Furniture_Show(playerid, houseid, PlayerData[playerid][pPage] + 1);

			if(!strcmp(inputtext, "<< Página Anterior", true))
				return Furniture_Show(playerid, houseid, PlayerData[playerid][pPage] - 1);

			new option;
			option = (PlayerData[playerid][pPage] == 1) ? (listitem - 1) : (listitem);

			PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][option];
			Furniture_ShowOptions(playerid);
		}
		else
		{
			callcmd::mobilia(playerid);
		}
	}
	return 1;
}

Dialog:FurnitureOptions(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			new id = PlayerData[playerid][pSelectedSlot];

			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerDistanceFromPoint(playerid, FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ]) > 10.0)
						return SendWarningMessage(playerid, "Você não está próximo desta mobília (10 metros).");

					EditDynamicObject(playerid, id);

					SendFormatMessage(playerid, COLOR_YELLOW, "Dica", "Aperte no {FFFF00}DISQUETE{FFFFFF} para salvar, {FFFF00}ESC{FFFFFF} para cancelar e pressione");
					SendClientMessage(playerid, COLOR_WHITE, "... {FFFF00}ESPAÇO{FFFFFF} para manobrar a câmera.");
					
					PlayerData[playerid][pEditingMode] = 2;
				}
				case 1:
				{
					Dialog_Show(playerid, InfoFurniture, DIALOG_STYLE_MSGBOX, "Informações da mobília:", "{FFFF00}Nome: {FFFFFF}%s\n{FFFF00}Nome original: {FFFFFF}%s\n{FFFF00}Preço: {FFFFFF}%s\n\n{FFFF00}Posições: {FFFFFF}X: %.3f\tY: %.3f\nZ: %.3f\n{FFFF00}Rotações: {FFFFFF}X: %.3f\tY: %.3f\nZ: %.3f\n\n{FFFF00}Modelo: {FFFFFF}%d", "<<", "",
						FurnitureData[furnitureName], FurnitureData[furnitureOriginalName], FormatNumber(FurnitureData[furniturePrice]), FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ], FurnitureData[furnitureRotX], FurnitureData[furnitureRotY], FurnitureData[furnitureRotZ], FurnitureData[furnitureModel]);
				}
				case 2: Dialog_Show(playerid, DeleteFurniture, DIALOG_STYLE_MSGBOX, FurnitureData[furnitureName], "{FFFFFF}Você deseja vender esta mobília por {00FF00}%s{FFFFFF}?", "Sim", "<<", FormatNumber(FurnitureData[furniturePrice]));
				case 3: Dialog_Show(playerid, NameFurniture, DIALOG_STYLE_INPUT, FurnitureData[furnitureName], "Digite um novo nome para esta mobília:", "Renomear", "<<");
				case 4:
				{
					if(PlayerData[playerid][pBlockFurniture] > gettime())
						return SendWarningMessage(playerid, "Você não está autorizado a comprar mobília. Veja o tempo restante em /punicoes.");

					Dialog_Show(playerid, CloneFurniture, DIALOG_STYLE_MSGBOX, FurnitureData[furnitureName], "{FFFFFF}Você deseja clonar a mobília por {00FF00}%s{FFFFFF}?\nINFO: Todas as características (posição, rotação e materiais) também serão clonadas.", "Sim", "<<", FormatNumber(FurnitureData[furniturePrice]));
				}
				case 5: 
				{
					Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %s", FurnitureData[furnitureName]), "Editar texturas\nEditar cores\nLimpar texturas da mobília\nLimpar cores da mobília", "Selecionar", "<<");
				}
				case 6:
				{
					if(GetPlayerDistanceFromPoint(playerid, FurnitureData[furnitureX], FurnitureData[furnitureY], FurnitureData[furnitureZ]) > 5.0)
						return SendWarningMessage(playerid, "Você não está próximo a esta mobília.");
					
					EditDynamicObject(playerid, id);

					SendFormatMessage(playerid, COLOR_YELLOW, "Dica", "Aperte no {FFFF00}DISQUETE{FFFFFF} para salvar, {FFFF00}ESC{FFFFFF} para cancelar e pressione");
					SendClientMessage(playerid, COLOR_WHITE, "... {FFFF00}ESPAÇO{FFFFFF} para manobrar a câmera.");
					
					PlayerData[playerid][pEditingMode] = 11;
				}
			}
		}
		else
		{
			Furniture_Show(playerid, houseid, PlayerData[playerid][pPage]);
			PlayerData[playerid][pSelectedSlot] = 0;
		}
	}
	return 1;
}

Dialog:InfoFurniture(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		Furniture_ShowOptions(playerid);
	}

	return 1;
}

Dialog:DeleteFurniture(playerid, response, listitem, inputtext[])
{
	new houseid = -1, id = PlayerData[playerid][pSelectedSlot];

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			SendGreenMessage(playerid, "Você vendeu a mobília \"%s\" por %s.", FurnitureData[furnitureName], FormatNumber(FurnitureData[furniturePrice]));
			
			GiveScriptedMoney(playerid, FurnitureData[furniturePrice]);

			new query[126];

			mysql_format(this, query, sizeof(query), "DELETE FROM `mobilias` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseData[houseid][houseID], FurnitureData[furnitureID]);
			mysql_tquery(this, query);

			mysql_format(this, query, sizeof(query), "DELETE FROM `mobiliastextura` WHERE `furnitureID` = '%d'", FurnitureData[furnitureID]);
			mysql_tquery(this, query);

			FurnitureData[furnitureModel] = 0;
			FurnitureData[furniturePrice] = 0;
			FurnitureData[furnitureHouse] = 0;
			FurnitureData[furnitureID] = 0;
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			DestroyDynamicObject(id);

			PlayerData[playerid][pSelectedSlot] = 0;
			Dialog_Show(playerid, Furniture, DIALOG_STYLE_LIST, "Opções da mobília", DIALOG_MAIN_FURNITURE, "Selecionar", "Cancelar");
		}
		else
		{
			Furniture_ShowOptions(playerid);
		}
	}
	return 1;
}

Dialog:NameFurniture(playerid, response, listitem, inputtext[])
{
	new houseid = -1, id = PlayerData[playerid][pSelectedSlot];

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			if(strlen(inputtext) < 3 || strlen(inputtext) > 80)
				return Dialog_Show(playerid, NameFurniture, DIALOG_STYLE_INPUT, FurnitureData[furnitureName], "Digite algo e não ultrapasse 80 caracteres!!\n\nDigite um novo nome para esta mobília:", "Renomear", "<<");

			if(!strcmp(inputtext, ">> Próxima Página", true) || !strcmp(inputtext, "<< Página Anterior", true) || !strcmp(inputtext, ">> Selecionar Mobília", true))
				return Dialog_Show(playerid, NameFurniture, DIALOG_STYLE_INPUT, FurnitureData[furnitureName], "Nome inserido é inválido!!\n\nDigite um novo nome para esta mobília:", "Renomear", "<<");

			SendGreenMessage(playerid, "Você trocou o nome da mobília \"%s\" para \"%s\".", FurnitureData[furnitureName], inputtext);

			format(FurnitureData[furnitureName], 80, inputtext);
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			new query[200];
			mysql_format(this, query, sizeof(query), "UPDATE `mobilias` SET `furnitureName` = '%e' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
				FurnitureData[furnitureName], HouseData[houseid][houseID], FurnitureData[furnitureID]);
			mysql_tquery(this, query);

			Furniture_ShowOptions(playerid);
		}
		else
		{
			Furniture_ShowOptions(playerid);
		}
	}
	return 1;
}

Dialog:CloneFurniture(playerid, response, listitem, inputtext[])
{
	new houseid = -1, id = PlayerData[playerid][pSelectedSlot];

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			if(Furniture_GetCount(houseid) >= Furniture_GetSlots(houseid))
				return SendWarningMessage(playerid, "Esta casa já está no limite de mobílias (%d/%d).", Furniture_GetCount(houseid), Furniture_GetSlots(houseid));

			new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;

			for(new j, js = sizeof(g_aFurnitures); j < js; j++) if(g_aFurnitures[j][ftrPrice] == FurnitureData[furniturePrice] && g_aFurnitures[j][ftrModelID] == FurnitureData[furnitureModel])
			{
				PlayerData[playerid][pSelectedSlot] = j;

				GetDynamicObjectPos(id, x, y, z);
				GetDynamicObjectRot(id, rx, ry, rz);

				PlayerData[playerid][pEditingMode] = 1;
				PlayerData[playerid][pFurnitureObject] = CreateDynamicObject(g_aFurnitures[j][ftrModelID], x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

				EditDynamicObject(playerid, PlayerData[playerid][pFurnitureObject]);

				new query[85];

				SetPVarInt(playerid, "CloningFurniture", FurnitureData[furnitureID]);
				CopyFurnitureName(playerid, FurnitureData[furnitureName]);

				mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
				mysql_tquery(this, query, "Furniture_CloneMaterials", "ddd", playerid, false, id);

				ShowBuyInfo(playerid, g_aFurnitures[j][ftrName], g_aFurnitures[j][ftrPrice]);
				
				SendFormatMessage(playerid, COLOR_YELLOW, "Dica", "Aperte no {FFFF00}DISQUETE{FFFFFF} para comprar, {FFFF00}ESC{FFFFFF} para cancelar e pressione");
				SendClientMessage(playerid, COLOR_WHITE, "... {FFFF00}ESPAÇO{FFFFFF} para manobrar a câmera.");

				break;
			}
		}
		else
		{
			Furniture_ShowOptions(playerid);
		}
	}
	return 1;
}

Dialog:FurnitureMaterial(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			new id = PlayerData[playerid][pSelectedSlot];

			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			switch(listitem)
			{
				case 0://textura
				{
					new query[64];

					mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
					mysql_tquery(this, query, "FurnitureCheckTexture", "dd", playerid, id);
				}
				case 1://core
				{
					new query[64];

					mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
					mysql_tquery(this, query, "FurnitureCheckColor", "dd", playerid, id);
				}
				case 2://limpartexturas
				{
					new query[80];

					mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE `furnitureID` = '%d'", FurnitureData[furnitureID]);
					mysql_tquery(this, query, "DeleteFurnitureMaterial", "ddd", playerid, id, 2);
					
					SendGreenMessage(playerid, "Você removeu as texturas da mobília \"%s\" com sucesso.", FurnitureData[furnitureName]);

					Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %s", FurnitureData[furnitureName]), "Editar texturas\nEditar cores\nLimpar texturas da mobília\nLimpar cores da mobília", "Selecionar", "<<");
				}
				case 3:
				{
					new query[80];

					mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE `furnitureID` = '%d'", FurnitureData[furnitureID]);
					mysql_tquery(this, query, "DeleteFurnitureMaterial", "ddd", playerid, id, 3);
					
					SendGreenMessage(playerid, "Você removeu as cores da mobília \"%s\" com sucesso.", FurnitureData[furnitureName]);

					Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %s", FurnitureData[furnitureName]), "Editar texturas\nEditar cores\nLimpar texturas da mobília\nLimpar cores da mobília", "Selecionar", "<<");
				}
			}
		}
		else
		{
			Furniture_ShowOptions(playerid);
		}
	}

	return 1;
}

Dialog:FurnitureTextureSlot(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			PlayerData[playerid][pSelectedIndex] = listitem;

			Dialog_Show(playerid, FurnitureTextureCat, DIALOG_STYLE_LIST, "Escolha a categoria da textura:", DIALOG_LIST_TEXTURE, "Selecionar", "<<");
		}
		else
		{
			new id = PlayerData[playerid][pSelectedSlot];

			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %s", FurnitureData[furnitureName]), "Editar texturas\nEditar cores\nLimpar texturas da mobília\nLimpar cores da mobília", "Selecionar", "<<");
		}
	}

	return 1;
}

Dialog:FurnitureTextureCat(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			if(!listitem)
			{				
				new query[80], id;

				id = PlayerData[playerid][pSelectedSlot];

				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

				mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], PlayerData[playerid][pSelectedIndex]);
				mysql_tquery(this, query, "DeleteFurnitureMaterial", "ddd", playerid, id, 0);
			
				SendGreenMessage(playerid, "Textura da mobília \"%s (Slot: %d)\" removida com sucesso.", FurnitureData[furnitureName], PlayerData[playerid][pSelectedIndex]);
				
				PlayerData[playerid][pSelectedIndex] = 0;

				return 1;
			}

			new count, string[800];

			for(new x, xs = sizeof(g_aTextures); x < xs; x++) if(g_aTextures[x][ltSlot] == listitem-1)
			{
				format(string, sizeof(string), "%s%d. %s\n", string, count + 1, g_aTextures[x][ltName]);
				PlayerData[playerid][pListedTextures][count++] = x;
			}

			Dialog_Show(playerid, FurnitureTextureConf, DIALOG_STYLE_LIST, "Escolha a textura:", string, "Selecionar", "<<");
		}
		else
		{
			new query[64], id;

			id = PlayerData[playerid][pSelectedSlot];

			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
			mysql_tquery(this, query, "FurnitureCheckTexture", "dd", playerid, id);
		}
	}

	return 1;
}

Dialog:FurnitureTextureConf(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			new index = PlayerData[playerid][pSelectedIndex], textureid = PlayerData[playerid][pListedTextures][listitem], id = PlayerData[playerid][pSelectedSlot];

			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			new query[126];

			mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], index);
			mysql_tquery(this, query, "OnFurnitureAddTexture", "ddddsss", playerid, id, index, g_aTextures[textureid][ltMaterial], g_aTextures[textureid][ltTXD], g_aTextures[textureid][ltTName], g_aTextures[textureid][ltName]);

			SendGreenMessage(playerid, "Você adicionou a textura \"%s (Slot: %d)\" na mobília %s.", g_aTextures[textureid][ltName], index, FurnitureData[furnitureName]);

			PlayerData[playerid][pSelectedIndex] = 0;
		}
		else
		{
			Dialog_Show(playerid, FurnitureTextureCat, DIALOG_STYLE_LIST, "Escolha a categoria da textura:", DIALOG_LIST_TEXTURE, "Selecionar", "<<");
		}
	}

	return 1;
}

Dialog:FurnitureColorSlot(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			PlayerData[playerid][pSelectedIndex] = listitem;

			Dialog_Show(playerid, FurnitureColorConf, DIALOG_STYLE_LIST, "Escolha a cor:", DIALOG_COLOR_LIST, "Selecionar", "<<");
		}
		else
		{
			new id = PlayerData[playerid][pSelectedSlot];

			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %s", FurnitureData[furnitureName]), "Editar texturas\nEditar cores\nLimpar texturas da mobília\nLimpar cores da mobília", "Selecionar", "<<");
		}
	}
	return 1;
}

Dialog:FurnitureColorConf(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			new query[128], id = PlayerData[playerid][pSelectedSlot];

			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			if(!listitem)
			{
				mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE `furnitureID` = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], PlayerData[playerid][pSelectedIndex]);
				mysql_tquery(this, query, "DeleteFurnitureMaterial", "ddd", playerid, id, 1);
			
				SendGreenMessage(playerid, "Cor da mobília \"%s (Slot: %d)\" removida com sucesso.", FurnitureData[furnitureName], PlayerData[playerid][pSelectedIndex]);
				
				PlayerData[playerid][pSelectedIndex] = 0;

				return 1;
			}

			new hexcolor;
		
			sscanf(g_aTextureColor[listitem-1][colorRGB], "h", hexcolor);

			mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d' AND textureIndex = '%d'", FurnitureData[furnitureID], PlayerData[playerid][pSelectedIndex]);
			mysql_tquery(this, query, "OnFurnitureAddColor", "dddds", playerid, id, PlayerData[playerid][pSelectedIndex], hexcolor, g_aTextureColor[listitem-1][colorName]);

			SendGreenMessage(playerid, "Você adicionou a cor \"%s (Slot: %d)\" na mobília %s.", g_aTextureColor[listitem-1][colorName], PlayerData[playerid][pSelectedIndex], FurnitureData[furnitureName]);

			PlayerData[playerid][pSelectedIndex] = 0;
		}
		else
		{
			new query[64], id;

			id = PlayerData[playerid][pSelectedSlot];

			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

			mysql_format(this, query, sizeof(query), "SELECT * FROM mobiliastextura WHERE furnitureID = '%d'", FurnitureData[furnitureID]);
			mysql_tquery(this, query, "FurnitureCheckColor", "dd", playerid, id);
		}
	}
	return 1;
}

//Comprar
Dialog:FurnitureCategory(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new houseid = -1, string[500];

		if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
		{
			if(!listitem)
				return Dialog_Show(playerid, FurnitureSearch, DIALOG_STYLE_INPUT, "Buscar por mobília:", "{FFFFFF}Digite a mobília que deseja procurar:\nINFO: O sistema irá listar trinta e cinco (35) resultados\nindependemente da categoria ou sub-categoria.", "Buscar", "<<");
			
			for(new x, xs = sizeof(g_aFurnitures); x < xs; x++) if(!strcmp(inputtext, g_aFurnitures[x][ftrCategory], true))
			{
				if(strfind(string, g_aFurnitures[x][ftrSubcategory], true) != -1)
					continue;

				format(string, sizeof(string), "%s%s\n", string, g_aFurnitures[x][ftrSubcategory]);
			}

			Dialog_Show(playerid, FurnitureBuyList, DIALOG_STYLE_LIST, inputtext, string, "Selecionar", "<<");

			format(PlayerData[playerid][pFurnitureCategory], 32, inputtext);
		}
	}
	else
	{
		Dialog_Show(playerid, Furniture, DIALOG_STYLE_LIST, "Opções da mobília", DIALOG_MAIN_FURNITURE, "Selecionar", "Cancelar");
	}
	return 1;
}

Dialog:FurnitureSearch(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new furniture[64];

		if(sscanf(inputtext, "s[64]", furniture))
			return Dialog_Show(playerid, FurnitureSearch, DIALOG_STYLE_INPUT, "Procurar por mobília:", "{FFFFFF}ERRO: O sistema necessita de informações para prosseguir.\n\n{FFFFFF}Digite a mobília que deseja procurar:\nINFO: O sistema irá listar trinta e cinco (35) resultados\nindependemente da categoria ou sub-categoria.", "Pesquisar", "<<");

		if(strlen(furniture) < 2)
			return Dialog_Show(playerid, FurnitureSearch, DIALOG_STYLE_INPUT, "Procurar por mobília:", "{FFFFFF}ERRO: O critério de busca exige que a palavra informada\ntenha mais que dois (2) caracteres.\n\n{FFFFFF}Digite a mobília que deseja procurar:\nINFO: O sistema irá listar trinta e cinco (35) resultados\nindependemente da categoria ou sub-categoria.", "Pesquisar", "<<");
	
		new count, string[1800], f_Restrict = false;

		for(new x, xs = sizeof(g_aFurnitures); x < xs; x++) if(strfind(g_aFurnitures[x][ftrName], furniture, true) != -1)
		{
			if(count > 34)
				break;

			if(!strcmp(g_aFurnitures[x][ftrSubcategory], "Portas", true) && PlayerData[playerid][pJob] != EMPREGO_Arquiteto)
			{
				f_Restrict = true;
				continue;
			}

			format(string, sizeof(string), "%s%d\t~w~%s %s%s\n", string, g_aFurnitures[x][ftrModelID], FixASCII(g_aFurnitures[x][ftrName]), GetScriptedMoney(playerid) >= g_aFurnitures[x][ftrPrice] ? "~g~" : "~r~", FormatNumber(g_aFurnitures[x][ftrPrice]));
			
			ListedOptions[playerid][count++] = x;
		}

		if(f_Restrict)
		{
			SendWarningMessage(playerid, "Algumas mobílias foram ocultadas por você não ter o emprego de arquiteto.");
		}

		if(!count)
			return Dialog_Show(playerid, FurnitureSearch, DIALOG_STYLE_INPUT, "Procurar por mobília:", "{FF0000}ERRO: Nenhum resultado para: \"%s\"\n\n{FFFFFF}Digite a mobília que deseja procurar:\nINFO: O sistema irá listar trinta e cinco (35) resultados\nindependemente da categoria ou sub-categoria.", "Pesquisar", "<<", furniture);

		ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PREVIEW_MODEL, sprintf("Resultados da busca: %s", FixASCII(furniture)), string, "Selecionar", "<<");
	}
	else
	{
		Dialog_Show(playerid, FurnitureCategory, DIALOG_STYLE_LIST, "Comprar mobília", DIALOG_BUY_FURNITURE, "Selecionar", "<<");
	}

	return 1;
}

Dialog:FurnitureResult(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = ListedOptions[playerid][listitem];

		PlayerData[playerid][pSelectedSlot] = id;

		format(PlayerData[playerid][pFurnitureCategory], 32, g_aFurnitures[id][ftrCategory]);
		format(PlayerData[playerid][pFurnitureSubCategory], 64, g_aFurnitures[id][ftrSubcategory]);

		Dialog_Show(playerid, FurnitureConfirmBuy, DIALOG_STYLE_MSGBOX, "Informações da mobília selecionada:", 
			"{FFFF00}Categoria:\t\t{FFFFFF}%s\n{FFFF00}Sub-Categoria:\t{FFFFFF}%s\n{FFFF00}Mobília:\t\t{FFFFFF}%s\n{FFFF00}Preço:\t\t\t{FFFFFF}%s\n\n{FFFFFF}- Ao clicar em prosseguir, você poderá \"provar\"\na mobília.\n- Para cancelar a compra, basta apertar a tecla\n\"ESC\".", "Prosseguir", "<<", 
			g_aFurnitures[id][ftrCategory], g_aFurnitures[id][ftrSubcategory], g_aFurnitures[id][ftrName], FormatNumber(g_aFurnitures[id][ftrPrice]));

	}
	else
	{
		Dialog_Show(playerid, FurnitureSearch, DIALOG_STYLE_INPUT, "Procurar por mobília:", "{FFFFFF}Digite a mobília que deseja procurar:\nINFO: O sistema irá listar trinta e cinco (35) resultados\nindependemente da categoria ou sub-categoria.", "Pesquisar", "<<");
	}

	return 1;
}

Dialog:FurnitureBuyList(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			if(Furniture_GetCount(houseid) >= Furniture_GetSlots(houseid))
				return SendWarningMessage(playerid, "Esta casa já está no limite de mobílias (%d/%d).", Furniture_GetCount(houseid), Furniture_GetSlots(houseid));

			if(!strcmp(inputtext, "Portas", true) && PlayerData[playerid][pJob] != EMPREGO_Arquiteto)
			{
				new string[400];

				for(new x, xs = sizeof(g_aFurnitures); x < xs; x++) if(!strcmp(PlayerData[playerid][pFurnitureCategory], g_aFurnitures[x][ftrCategory], true))
				{
					if(strfind(string, g_aFurnitures[x][ftrSubcategory], true) != -1)
						continue;

					format(string, sizeof(string), "%s%s\n", string, g_aFurnitures[x][ftrSubcategory]);
				}

				Dialog_Show(playerid, FurnitureBuyList, DIALOG_STYLE_LIST, PlayerData[playerid][pFurnitureCategory], string, "Selecionar", "<<");

				SendWarningMessage(playerid, "Apenas arquitetos tem acesso permitido neste tipo de mobílias.");

				return 1;
			}

			new count;

			sz_MiscString[0] = 0;

			for(new x, xs = sizeof(g_aFurnitures); x < xs; x++) if(!strcmp(inputtext, g_aFurnitures[x][ftrSubcategory], true))
			{
				format(sz_MiscString, sizeof(sz_MiscString), "%s%d\t~w~%s %s%s\n", sz_MiscString, g_aFurnitures[x][ftrModelID], FixASCII(g_aFurnitures[x][ftrName]), GetScriptedMoney(playerid) >= g_aFurnitures[x][ftrPrice] ? "~g~" : "~r~", FormatNumber(g_aFurnitures[x][ftrPrice]));
				PlayerData[playerid][pBuyFurniture][count++] = x;
			}

			format(PlayerData[playerid][pFurnitureSubCategory], 64, inputtext);

			ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PREVIEW_MODEL, FixASCII(inputtext), sz_MiscString, "Selecionar", "<<");
		}
		else
		{
			Dialog_Show(playerid, FurnitureCategory, DIALOG_STYLE_LIST, "Comprar mobília", DIALOG_BUY_FURNITURE, "Selecionar", "<<");
		}
	}
	return 1;
}

Dialog:FurnitureBuy(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		PlayerData[playerid][pSelectedSlot] = PlayerData[playerid][pBuyFurniture][listitem];

		new id = PlayerData[playerid][pSelectedSlot];

		if(response)
		{
			Dialog_Show(playerid, FurnitureConfirmBuy, DIALOG_STYLE_MSGBOX, "Informações da mobília selecionada:", "{FFFF00}Categoria:\t\t{FFFFFF}%s\n{FFFF00}Sub-Categoria:\t{FFFFFF}%s\n{FFFF00}Mobília:\t\t{FFFFFF}%s\n{FFFF00}Preço:\t\t\t{FFFFFF}%s\n\n{FFFFFF}- Ao clicar em prosseguir, você poderá \"provar\"\na mobília.\n- Para cancelar a compra, basta apertar a tecla\n\"ESC\".", "Prosseguir", "<<", 
				g_aFurnitures[id][ftrCategory], g_aFurnitures[id][ftrSubcategory], g_aFurnitures[id][ftrName], FormatNumber(g_aFurnitures[id][ftrPrice]));
		}
		else
		{
			new string[500];

			for(new x, xs = sizeof(g_aFurnitures); x < xs; x++) if(!strcmp(PlayerData[playerid][pFurnitureCategory], g_aFurnitures[x][ftrCategory], true))
			{
				if(strfind(string, g_aFurnitures[x][ftrSubcategory], true) != -1)
					continue;

				format(string, sizeof(string), "%s%s\n", string, g_aFurnitures[x][ftrSubcategory]);
			}

			Dialog_Show(playerid, FurnitureBuyList, DIALOG_STYLE_LIST, PlayerData[playerid][pFurnitureCategory], string, "Selecionar", "<<");
		}
	}
	return 1;
}

Dialog:FurnitureConfirmBuy(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || Furniture_HasAccess(playerid, houseid)))
	{
		if(response)
		{
			new Float:x, Float:y, Float:z, id = PlayerData[playerid][pSelectedSlot];

			GetPlayerPos(playerid, x, y, z);
			GetXYInFrontOfPlayer(playerid, x, y, 4);

			PlayerData[playerid][pEditingMode] = 1;
			PlayerData[playerid][pFurnitureObject] = CreateDynamicObject(g_aFurnitures[id][ftrModelID], x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			
			EditDynamicObject(playerid, PlayerData[playerid][pFurnitureObject]);
			
			ShowBuyInfo(playerid, g_aFurnitures[id][ftrName], g_aFurnitures[id][ftrPrice]);

			SendFormatMessage(playerid, COLOR_YELLOW, "Dica", "Aperte no {FFFF00}DISQUETE{FFFFFF} para comprar, {FFFF00}ESC{FFFFFF} para cancelar e pressione");
			SendClientMessage(playerid, COLOR_WHITE, "... {FFFF00}ESPAÇO{FFFFFF} para manobrar a câmera.");
		}
		else
		{
			new count;

			sz_MiscString[0] = 0;

			for(new x, xs = sizeof(g_aFurnitures); x < xs; x++) if(!strcmp(PlayerData[playerid][pFurnitureSubCategory], g_aFurnitures[x][ftrSubcategory], true))
			{
				format(sz_MiscString, sizeof(sz_MiscString), "%s%d\t~w~%s %s%s\n", sz_MiscString, g_aFurnitures[x][ftrModelID], FixASCII(g_aFurnitures[x][ftrName]), GetScriptedMoney(playerid) >= g_aFurnitures[x][ftrPrice] ? "~g~" : "~r~", FormatNumber(g_aFurnitures[x][ftrPrice]));
				PlayerData[playerid][pBuyFurniture][count++] = x;
			}

			ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PREVIEW_MODEL, FixASCII(PlayerData[playerid][pFurnitureSubCategory]), sz_MiscString, "Selecionar", "<<");
		}
	}

	return 1;
}

//Infoallfurniture
Dialog:FurnitureInfo(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		callcmd::mobilia(playerid);
	}

	return 1;
}

//Sellallfurniture
Dialog:SellAllFurniture(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if(response)
		{
			new query[84];
			mysql_format(this, query, sizeof(query), "SELECT * FROM `mobilias` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
			mysql_tquery(this, query, "House_RemoveAllFurnitures", "ddd", houseid, 1, playerid);
		}
		else
		{
			callcmd::mobilia(playerid);
		}
	}
	return 1;
}

//Permissions
Dialog:FurnitureListPermission(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if(response)
	{
		if((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
		{
			switch(listitem)
			{
				case 0:
				{
					if(HouseData[houseid][houseFurnitureA1] == -1)
						Dialog_Show(playerid, FurnitureAddPermOne, DIALOG_STYLE_INPUT, "Permitir editar a mobília", "Digite o nome ou ID do jogador abaixo:", "Adicionar", "<<");
					else
						Dialog_Show(playerid, FurnitureRemovePermOne, DIALOG_STYLE_MSGBOX, "Remover permissão", "Você está prestes a remover a permissão de %s.\nO jogador não terá mais acesso a mobília.", "Confirmar", "<<", ReturnNameByID(HouseData[houseid][houseFurnitureA1]));
				}
				case 1:
				{
					if(HouseData[houseid][houseFurnitureA2] == -1)
						Dialog_Show(playerid, FurnitureAddPermTwo, DIALOG_STYLE_INPUT, "Permitir editar a mobília", "Digite o nome ou ID do jogador abaixo:", "Adicionar", "<<");
					else
						Dialog_Show(playerid, FurnitureRemovePermTwo, DIALOG_STYLE_MSGBOX, "Remover permissão", "Você está prestes a remover a permissão de %s.\nO jogador não terá mais acesso a mobília.", "Confirmar", "<<", ReturnNameByID(HouseData[houseid][houseFurnitureA2]));
				}
			}
		}
	}
	else
	{
		callcmd::mobilia(playerid);
	}
	return 1;
}

Dialog:FurnitureAddPermOne(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) == -1)
		return SendWarningMessage(playerid, "Você precisa estar dentro da sua casa.");

	if(response)
	{
		new userid;

		if(sscanf(inputtext, "u", userid))
			return Dialog_Show(playerid, FurnitureAddPermOne, DIALOG_STYLE_INPUT, "Permitir editar a mobília", "Valor inválido!\n\nDigite o nome ou ID do jogador abaixo:", "Adicionar", "<<");

		if(!IsPlayerConnected(userid))
			return Dialog_Show(playerid, FurnitureAddPermOne, DIALOG_STYLE_INPUT, "Permitir editar a mobília", "Jogador está desconectado!!\n\nDigite o nome ou ID do jogador abaixo:", "Adicionar", "<<");

		if(userid == playerid)
			return Dialog_Show(playerid, FurnitureAddPermOne, DIALOG_STYLE_INPUT, "Permitir editar a mobília", "Você não pode se adicionar!!\n\nDigite o nome ou ID do jogador abaixo:", "Adicionar", "<<");

		HouseData[houseid][houseFurnitureA1] = PlayerData[userid][pID];
		House_Save(houseid);

		SendGreenMessage(playerid, "Você adicionou \"%s\" nas permissões da mobília.", ReturnName(userid, 0));
	}
	else
	{
		Dialog_Show(playerid, FurnitureListPermission, DIALOG_STYLE_LIST, "Jogadores permitido para mobiliar:", "1. %s\n2. %s", "Selecionar", "<<", ReturnNameByID(HouseData[houseid][houseFurnitureA1]), ReturnNameByID(HouseData[houseid][houseFurnitureA2]));
	}
	return 1;
}

Dialog:FurnitureRemovePermOne(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) == -1)
		return SendWarningMessage(playerid, "Você precisa estar dentro da sua casa.");

	if(response)
	{
		SendGreenMessage(playerid, "Você removeu \"%s\" das permissões da mobília.", ReturnNameByID(HouseData[houseid][houseFurnitureA1]));

		HouseData[houseid][houseFurnitureA1] = -1;
		House_Save(houseid);
	}
	else
	{
		Dialog_Show(playerid, FurnitureListPermission, DIALOG_STYLE_LIST, "Jogadores permitido para mobiliar:", "1. %s\n2. %s", "Selecionar", "<<", ReturnNameByID(HouseData[houseid][houseFurnitureA1]), ReturnNameByID(HouseData[houseid][houseFurnitureA2]));
	}
	return 1;
}

Dialog:FurnitureAddPermTwo(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) == -1)
		return SendWarningMessage(playerid, "Você precisa estar dentro da sua casa.");

	if(response)
	{
		new userid;

		if(sscanf(inputtext, "u", userid))
			return Dialog_Show(playerid, FurnitureAddPermTwo, DIALOG_STYLE_INPUT, "Permitir editar a mobília", "Valor inválido!\n\nDigite o nome ou ID do jogador abaixo:", "Adicionar", "<<");

		if(!IsPlayerConnected(userid))
			return Dialog_Show(playerid, FurnitureAddPermTwo, DIALOG_STYLE_INPUT, "Permitir editar a mobília", "Jogador está desconectado!!\n\nDigite o nome ou ID do jogador abaixo:", "Adicionar", "<<");

		HouseData[houseid][houseFurnitureA2] = PlayerData[userid][pID];
		House_Save(houseid);

		SendGreenMessage(playerid, "Você adicionou \"%s\" nas permissões da mobília.", ReturnName(userid, 0));
	}
	else
	{
		Dialog_Show(playerid, FurnitureListPermission, DIALOG_STYLE_LIST, "Jogadores permitido para mobiliar:", "1. %s\n2. %s", "Selecionar", "<<", ReturnNameByID(HouseData[houseid][houseFurnitureA1]), ReturnNameByID(HouseData[houseid][houseFurnitureA2]));
	}
	return 1;
}

Dialog:FurnitureRemovePermTwo(playerid, response, listitem, inputtext[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) == -1)
		return SendWarningMessage(playerid, "Você precisa estar dentro da sua casa.");

	if(response)
	{
		SendGreenMessage(playerid, "Você removeu \"%s\" das permissões da mobília.", ReturnNameByID(HouseData[houseid][houseFurnitureA2]));

		HouseData[houseid][houseFurnitureA2] = -1;
		House_Save(houseid);
	}
	else
	{
		Dialog_Show(playerid, FurnitureListPermission, DIALOG_STYLE_LIST, "Jogadores permitido para mobiliar:", "1. %s\n2. %s", "Selecionar", "<<", ReturnNameByID(HouseData[houseid][houseFurnitureA1]), ReturnNameByID(HouseData[houseid][houseFurnitureA2]));
	}
	return 1;
}

Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
	new userid = PlayerData[playerid][pTakeItems];

	if(GetFactionType(playerid) != FACTION_POLICE)
		return 0;

	if(response)
	{
		if(!IsPlayerNearPlayer(playerid, userid, 3.0))
			return SendWarningMessage(playerid, "Você não está próximo da pessoa.");

		if(!strcmp(inputtext, "Retirar Armas"))
		{
			ResetWeapons(userid);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s confisca as armas de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
		}
		else if(!strcmp(inputtext, "Retirar Rádio"))
		{
			Inventory_Remove(userid, "Rádio Portátil", -1);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s confisca o rádio portátil de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
		}
		else if(!strcmp(inputtext, "Retirar Drogas"))
		{
			Inventory_Remove(userid, "Marijuana", -1);
			Inventory_Remove(userid, "Cocaína", -1);
			Inventory_Remove(userid, "LSD", -1);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s confisca as drogas de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
		}
		else if(!strcmp(inputtext, "Retirar Gunparts"))
		{
			Inventory_Remove(userid, "Gunparts", -1);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s confisca as partes de armas de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
		}
		else if(!strcmp(inputtext, "Retirar Rádio Portátil"))
		{
			Inventory_Remove(userid, "Rádio Portátil", -1);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s confisca o rádio portátil de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
		}
	}
	return 1;
}

Dialog:CarStorage(playerid, response, listitem, inputtext[])
{
	new carid = -1,
	string[64];

	if((carid = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID && !VehicleData[carid][vehicleLocked])
	{
		if(!IsDoorVehicle(carid))
			return SendWarningMessage(playerid, "Este carro não tem um porta malas.");

		if(response)
		{
			if(listitem == MAX_CAR_INV_STORAGE)
				Car_WeaponStorage(playerid, carid);

			else if(CarStorage[carid][listitem][cItemExists])
			{
				PlayerData[playerid][pStorageItem] = listitem;

				format(string, 32, CarStorage[carid][listitem][cItemName]);

				format(string, sizeof(string), "%s (Quantidade: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
				Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Pegar Item\nGuardar Item", "Selecionar", "<<");
			}
			else
			{
				Inventory_Open(playerid);
				PlayerData[playerid][pStorageSelect] = 2;
			}
		}
	}
	return 1;
}

Dialog:TrunkOptions(playerid, response, listitem, inputtext[])
{
	new carid = -1, itemid = -1, string[32];

	if((carid = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID && !VehicleData[carid][vehicleLocked])
	{
		if(!IsDoorVehicle(carid))
			return SendWarningMessage(playerid, "Este carro não tem um porta malas.");

		itemid = PlayerData[playerid][pStorageItem];

		format(string, 32, CarStorage[carid][itemid][cItemName]);

		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(CarStorage[carid][itemid][cItemQuantity] == 1)
					{
						new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], 1);

						if(id == -1)
							return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

						Car_RemoveItem(carid, string);

						Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou o item \"%s\" do porta malas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], string, ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID]);
						SendServerMessage(playerid, "Você pegou um(a) \"%s\" do porta malas do veículo.", string);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do porta malas do veículo.", ReturnName(playerid, 0), string);
						Car_TrunkShow(playerid, carid);
					}
					else
					{
						Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Pegar item", "Item: %s (Quantidade: %d)\n\nDigite a quantidade que você deseja pegar desse item:", "Pegar", "<<", string, CarStorage[carid][itemid][cItemQuantity]);
					}
				}
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if(id == -1)
					{
						SendWarningMessage(playerid, "Você não possui esse item no seu inventário.");
						
						Car_TrunkShow(playerid, carid);
						
						return 1;
					}
					else if(InventoryData[playerid][id][invQuantity] == 1)
					{
						Car_AddItem(carid, string, InventoryData[playerid][id][invModel], 1);
						Inventory_Remove(playerid, string);

						Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou o item \"%s\" no porta malas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], string, ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID]);
						SendServerMessage(playerid, "Você guardou um(a) \"%s\" no porta malas do veículo.", string);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no porta malas do veículo.", ReturnName(playerid, 0), string);
						Car_TrunkShow(playerid, carid);
					}
					else if(InventoryData[playerid][id][invQuantity] > 1)
					{
						PlayerData[playerid][pInventoryItem] = id;
						Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Depositar item", "Item: %s (Quantidade: %d)\n\nDigite a quantidade que você deseja guardar desse item:", "Guardar", "<<", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
			Car_TrunkShow(playerid, carid);
	}
	return 1;
}

Dialog:CarTake(playerid, response, listitem, inputtext[])
{
	new carid = -1, string[32];

	if((carid = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID && !VehicleData[carid][vehicleLocked])
	{
		if(!IsDoorVehicle(carid))
			return SendWarningMessage(playerid, "Este carro não tem um porta malas.");

		new itemid = PlayerData[playerid][pStorageItem];

		format(string, 32, CarStorage[carid][itemid][cItemName]);

		if(response)
		{
			new amount = strval(inputtext);

			if(amount < 1 || amount > CarStorage[carid][itemid][cItemQuantity])
				return Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Pegar item", "Digite uma quantia válida!!\n\nItem: %s (Quantidade: %d)\n\nDigite a quantidade que você deseja pegar desse item:", "Pegar", "<<", string, CarStorage[carid][itemid][cItemQuantity]);

			new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], amount);

			if(id == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			Car_RemoveItem(carid, string, amount);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou o item \"%s\" com %d unidades do porta malas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], string, amount, ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID]);
			SendServerMessage(playerid, "Você pegou um(a) \"%s\" (Quantia: %d) do porta malas do veículo.", string, amount);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do porta malas do veículo.", ReturnName(playerid, 0), string);
			Car_TrunkShow(playerid, carid);
		}
		else
			Car_TrunkShow(playerid, carid);
	}
	return 1;
}

Dialog:CarDeposit(playerid, response, listitem, inputtext[])
{
	new carid = -1, string[32];

	if((carid = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID && !VehicleData[carid][vehicleLocked])
	{
		if(!IsDoorVehicle(carid))
			return SendWarningMessage(playerid, "Este carro não tem um porta malas.");

		new itemid = PlayerData[playerid][pInventoryItem];

		format(string, 32, InventoryData[playerid][itemid][invItem]);

		if(response)
		{
			new amount = strval(inputtext);

			if(amount < 1 || amount > InventoryData[playerid][itemid][invQuantity])
				return Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Depositar item", "Digite uma quantia válida!!\n\nItem: %s (Quantidade: %d)\n\nDigite a quantidade que você deseja guardar desse item:", "Guardar", "<<", string, InventoryData[playerid][itemid][invQuantity]);
		
			Car_AddItem(carid, string, InventoryData[playerid][itemid][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou o item \"%s\" com %d unidades no porta malas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], string, amount, ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID]);
			SendServerMessage(playerid, "Você guardou um(a) \"%s\" (Quantia: %d) no porta malas do veículo.", string, amount);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no porta malas do veículo.", ReturnName(playerid, 0), string);
			Car_TrunkShow(playerid, carid);
		}
		else
			Car_TrunkShow(playerid, carid);
	}
	return 1;
}

Dialog:TrunkWeapon(playerid, response, listitem, inputtext[])
{
	new carid = Vehicle_Nearest(playerid);

	if(carid != INVALID_VEHICLE_ID && !VehicleData[carid][vehicleLocked])
	{
		if(!IsDoorVehicle(carid))
			return SendWarningMessage(playerid, "Este carro não tem um porta malas.");

		if(response)
		{
			if(!VehicleData[carid][vehicleWeapon][listitem])
			{
				if(!GetWeapon(playerid))
					return SendWarningMessage(playerid, "Você não está segurando nenhuma arma.");

				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você está em serviço e não pode guardar armas no porta malas.");

				VehicleData[carid][vehicleWeapon][listitem] = GetWeapon(playerid);
				VehicleData[carid][vehicleAmmo][listitem] = GetAmmo(playerid);

				ResetWeapon(playerid, VehicleData[carid][vehicleWeapon][listitem]);

				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou a arma %s com %d de munição dentro do porta malas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(VehicleData[carid][vehicleWeapon][listitem]), VehicleData[carid][vehicleAmmo][listitem], ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID]);
				SendServerMessage(playerid, "Você guardou um(a) \"%s\" (Munição: %d) no porta malas do veículo.", ReturnWeaponName(VehicleData[carid][vehicleWeapon][listitem]), VehicleData[carid][vehicleAmmo][listitem]);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no porta malas do veículo.", ReturnName(playerid, 0), ReturnWeaponName(VehicleData[carid][vehicleWeapon][listitem]));
				Vehicle_Save(carid);
				Car_WeaponStorage(playerid, carid);
			}
			else
			{
				if(PlayerData[playerid][pTimePlayed] < 2)
					return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

				if(PlayerHasWeapon(playerid, VehicleData[carid][vehicleWeapon][listitem]))
					return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

				if(PlayerHasWeaponInSlot(playerid, VehicleData[carid][vehicleWeapon][listitem]))
					return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você não pode fazer isso agora.");				

				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou a arma %s com %d de munição de dentro do porta malas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(VehicleData[carid][vehicleWeapon][listitem]), VehicleData[carid][vehicleAmmo][listitem], ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID]);
				SendServerMessage(playerid, "Você pegou um(a) \"%s\" (Munição: %d) do porta malas do veículo.", ReturnWeaponName(VehicleData[carid][vehicleWeapon][listitem]), VehicleData[carid][vehicleAmmo][listitem]);
				GiveWeaponToPlayer(playerid, VehicleData[carid][vehicleWeapon][listitem], VehicleData[carid][vehicleAmmo][listitem]);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do porta malas do veículo.", ReturnName(playerid, 0), ReturnWeaponName(VehicleData[carid][vehicleWeapon][listitem]));

				VehicleData[carid][vehicleWeapon][listitem] = 0;
				VehicleData[carid][vehicleAmmo][listitem] = 0;

				Vehicle_Save(carid);
				Car_WeaponStorage(playerid, carid);
			}
		}
		else
			Car_TrunkShow(playerid, carid);
	}
	return 1;
}

Dialog:PortaluvasWeapon(playerid, response, listitem, inputtext[])
{
	new carid = Vehicle_Inside(playerid);

	if(carid != INVALID_VEHICLE_ID)
	{
		if(response)
		{
			if(!VehicleData[carid][vehicleInteriorWeapon])
			{
				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você está em serviço e não pode guardar armas no porta luvas.");

				new string[32 * 13], count;

				for(new i = 0; i < 13; i++)
				{
					if(!PlayerData[playerid][pWeapon][i])
						continue;

					switch(PlayerData[playerid][pWeapon][i]) //Armas de pequeno porte, apenas!
					{
						case 4, 16, 22, 23, 24, 32:
						{
							format(string, sizeof(string), "%s%d. %s (%d)\n", string, count, ReturnWeaponName(PlayerData[playerid][pWeapon][i]), PlayerData[playerid][pAmmo][i]);
							ListedOptions[playerid][count++] = i;
						}
					}						
				}

				if(!count)
					return SendWarningMessage(playerid, "Você não está equipado com uma arma.");

				Dialog_Show(playerid, PortaluvasWeaponStorage, DIALOG_STYLE_LIST, "Escolha a sua arma:", string, "Selecionar", "<<");
				
			}
			else
			{
				if(PlayerData[playerid][pTimePlayed] < 2)
					return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

				if(PlayerHasWeapon(playerid, VehicleData[carid][vehicleInteriorWeapon]))
					return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

				if(PlayerHasWeaponInSlot(playerid, VehicleData[carid][vehicleInteriorWeapon]))
					return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você não pode fazer isso agora.");

				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou a arma %s com %d de munição de dentro do porta luvas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(VehicleData[carid][vehicleInteriorWeapon]), VehicleData[carid][vehicleInteriorAmmo], ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID]);
				SendServerMessage(playerid, "Você pegou um(a) \"%s\" (Munição: %d) do porta luvas do veículo.", ReturnWeaponName(VehicleData[carid][vehicleInteriorWeapon]), VehicleData[carid][vehicleInteriorAmmo]);
				GiveWeaponToPlayer(playerid, VehicleData[carid][vehicleInteriorWeapon], VehicleData[carid][vehicleInteriorAmmo]);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do porta luvas do veículo.", ReturnName(playerid, 0), ReturnWeaponName(VehicleData[carid][vehicleInteriorWeapon]));

				VehicleData[carid][vehicleInteriorWeapon] = 0;
				VehicleData[carid][vehicleInteriorAmmo] = 0;

				SetPlayerArmedWeapon(playerid, 0);

				Vehicle_Save(carid);
				Car_InsideWeapon(playerid, carid);
			}
		}
	}

	return 1;
}

Dialog:PortaluvasWeaponStorage(playerid, response, listitem, inputtext[])
{
	new carid = Vehicle_Inside(playerid), id;

	if(carid != INVALID_VEHICLE_ID)
	{
		if(response)
		{
			id = ListedOptions[playerid][listitem];

			VehicleData[carid][vehicleInteriorWeapon] = PlayerData[playerid][pWeapon][id];
			VehicleData[carid][vehicleInteriorAmmo] = PlayerData[playerid][pAmmo][id];

			ResetWeapon(playerid, PlayerData[playerid][pWeapon][id]);

			SetPlayerArmedWeapon(playerid, 0);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou a arma %s com %d de munição dentro do porta luvas do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(VehicleData[carid][vehicleInteriorWeapon]), VehicleData[carid][vehicleInteriorAmmo], ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID]);
			SendServerMessage(playerid, "Você guardou um(a) \"%s\" (Munição: %d) no porta luvas do veículo.", ReturnWeaponName(VehicleData[carid][vehicleInteriorWeapon]), VehicleData[carid][vehicleInteriorAmmo]);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no porta luvas do veículo.", ReturnName(playerid, 0), ReturnWeaponName(VehicleData[carid][vehicleInteriorWeapon]));
			Vehicle_Save(carid);
			Car_InsideWeapon(playerid, carid);
		}
		else
		{
			Car_InsideWeapon(playerid, carid);
		}
	}

	return 1;
}

Dialog:MenuCofre(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			switch(listitem)
			{
				case 0: Dialog_Show(playerid, CofreDinheiro, DIALOG_STYLE_LIST, "Gerenciar dinheiro", "Saldo atual: %s\nDepositar\nRetirar", "Selecionar", "<<", FormatNumber(VaultData[id][vaultMoney]));
				case 1: Dialog_Show(playerid, CofreDrogas, DIALOG_STYLE_LIST, "Gerenciar drogas", "Marijuana (%d)\nCocaína (%d)\nLSD (%d)", "Selecionar", "<<", VaultData[id][vaultMarijuana], VaultData[id][vaultCocaine], VaultData[id][vaultLSD]);
				case 2: 
				{
					sz_MiscString[0] = 0;

					for(new i = 0; i < MAX_VAULT_WEAPON; i++)
					{
						if(!VaultData[id][vaultWeapon][i])
							format(sz_MiscString, sizeof(sz_MiscString), "%sSlot Vazio\n", sz_MiscString);
						else
							format(sz_MiscString, sizeof(sz_MiscString), "%s%s (Munição: %d)\n", sz_MiscString, ReturnWeaponName(VaultData[id][vaultWeapon][i]), VaultData[id][vaultAmmo][i]);
					}

					Dialog_Show(playerid, CofreArmas, DIALOG_STYLE_LIST, "Gerenciar armas", sz_MiscString, "Selecionar", "<<");
				}

			}
		}
		else SendWarningMessage(playerid, "Você não está próximo ao cofre.");
	}
	return 1;
}

Dialog:CofreDinheiro(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			switch(listitem)
			{
				case 0: Dialog_Show(playerid, CofreDinheiro, DIALOG_STYLE_LIST, "Gerenciar dinheiro", "Saldo atual: %s\nDepositar\nRetirar", "Selecionar", "<<", FormatNumber(VaultData[id][vaultMoney]));
				case 1: Dialog_Show(playerid, CofreDinheiroDepositar, DIALOG_STYLE_INPUT, "Depositar dinheiro", "Saldo atual: %s\n\nDigite a quantia que você deseja deposita no cofre:", "Depositar", "<<", FormatNumber(VaultData[id][vaultMoney]));
				case 2: Dialog_Show(playerid, CofreDinheiroRetirar, DIALOG_STYLE_INPUT, "Retirar dinheiro", "Saldo atual: %s\n\nDigite a quantia que você deseja retirar do cofre:", "Retirar", "<<", FormatNumber(VaultData[id][vaultMoney]));
			}
		}
		else SendWarningMessage(playerid, "Você não está próximo ao cofre.");
	}
	else
		callcmd::cofre(playerid);

	return 1;
}

Dialog:CofreDinheiroDepositar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			new amount;

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, CofreDinheiroDepositar, DIALOG_STYLE_INPUT, "Depositar dinheiro", "Digite uma quantia!!\n\nSaldo atual: %s\n\nDigite a quantia que você deseja deposita no cofre:", "Depositar", "<<", FormatNumber(VaultData[id][vaultMoney]));
		
			if(amount < 1 || amount > GetScriptedMoney(playerid))
				return Dialog_Show(playerid, CofreDinheiroDepositar, DIALOG_STYLE_INPUT, "Depositar dinheiro", "Digite uma quantia válida!!\n\nSaldo atual: %s\n\nDigite a quantia que você deseja deposita no cofre:", "Depositar", "<<", FormatNumber(VaultData[id][vaultMoney]));

			GiveScriptedMoney(playerid, -amount);
			VaultData[id][vaultMoney] += amount;

			Vault_Save(id);

			SendGreenMessage(playerid, "Você depositou \"%s\" no cofre da sua facção.", FormatNumber(amount));
			
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s deposita \"%s\" no cofre.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else SendWarningMessage(playerid, "Você não está próximo ao cofre.");
	}
	else
		dlg_MenuCofre(playerid, 1, 0, "\1");
	
	return 1;
}

Dialog:CofreDinheiroRetirar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			new amount;

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, CofreDinheiroRetirar, DIALOG_STYLE_INPUT, "Retirar dinheiro", "Digite uma quantia!!\n\nSaldo atual: %s\n\nDigite a quantia que você deseja retirar do cofre:", "Retirar", "<<", FormatNumber(VaultData[id][vaultMoney]));

			if(amount < 1 || amount > VaultData[id][vaultMoney])
				return Dialog_Show(playerid, CofreDinheiroRetirar, DIALOG_STYLE_INPUT, "Retirar dinheiro", "Digite uma quantia válida!!\n\nSaldo atual: %s\n\nDigite a quantia que você deseja retirar do cofre:", "Retirar", "<<", FormatNumber(VaultData[id][vaultMoney]));
		
			GiveScriptedMoney(playerid, amount);
			VaultData[id][vaultMoney] -= amount;

			Vault_Save(id);

			SendGreenMessage(playerid, "Você retirou \"%s\" do cofre da sua facção.", FormatNumber(amount));
			
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s retira \"%s\" do cofre.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else SendWarningMessage(playerid, "Você não está próximo ao cofre.");
	}
	else
		dlg_MenuCofre(playerid, 1, 0, "\1");

	return 1;
}

Dialog:CofreDrogas(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			switch(listitem)
			{
				case 0: Dialog_Show(playerid, CofreDrogasMarijuana, DIALOG_STYLE_LIST, "Gerenciar drogas - Marijuana", "Pegar\nGuardar", "Selecionar", "<<");
				case 1: Dialog_Show(playerid, CofreDrogasCocaine, DIALOG_STYLE_LIST, "Gerenciar drogas - Cocaína", "Pegar\nGuardar", "Selecionar", "<<");
				case 2: Dialog_Show(playerid, CofreDrogasLSD, DIALOG_STYLE_LIST, "Gerenciar drogas - LSD", "Pegar\nGuardar", "Selecionar", "<<");
			}
		}
		else SendWarningMessage(playerid, "Você não está próximo ao cofre.");
	}
	else
		callcmd::cofre(playerid);

	return 1;
}

Dialog:CofreDrogasMarijuana(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			switch(listitem)
			{
				case 0:
				{
					if(!VaultData[id][vaultMarijuana])
					{
						SendWarningMessage(playerid, "Não há marijuana no cofre.");
						Dialog_Show(playerid, CofreDrogasMarijuana, DIALOG_STYLE_LIST, "Gerenciar drogas - Marijuana", "Pegar\nGuardar", "Selecionar", "<<");
						return 1;
					}

					Dialog_Show(playerid, CofreMarijuanaPegar, DIALOG_STYLE_INPUT, "Pegar - Marijuana", "Quantidade: %d\n\nDigite a quantidade de marijuana que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultMarijuana]);
				}
				case 1:
				{
					new slotid = Inventory_GetItemID(playerid, "Marijuana");

					if(!Inventory_HasItem(playerid, "Marijuana"))
					{
						SendWarningMessage(playerid, "Você não tem marijuana para poder guardar no cofre.");
						Dialog_Show(playerid, CofreDrogasMarijuana, DIALOG_STYLE_LIST, "Gerenciar drogas - Marijuana", "Pegar\nGuardar", "Selecionar", "<<");
						return 1;
					}

					Dialog_Show(playerid, CofreMarijuanaGuardar, DIALOG_STYLE_INPUT, "Guardar - Marijuana", "Quantidade: %d\n\nDigite a quantidade de marijuana que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);
				}
			}
		}
		else SendWarningMessage(playerid, "Você não está próximo ao cofre.");
	}
	else
		dlg_MenuCofre(playerid, 1, 1, "\1");

	return 1;
}

Dialog:CofreMarijuanaPegar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			new amount;

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, CofreMarijuanaPegar, DIALOG_STYLE_INPUT, "Pegar - Marijuana", "Digite uma quantia!!\n\nQuantidade: %d\n\nDigite a quantidade de marijuana que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultMarijuana]);

			if(amount < 1 || amount > VaultData[id][vaultMarijuana])
				return Dialog_Show(playerid, CofreMarijuanaPegar, DIALOG_STYLE_INPUT, "Pegar - Marijuana", "Digite uma quantia válida!!\n\nQuantidade: %d\n\nDigite a quantidade de marijuana que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultMarijuana]);

			new inv = Inventory_Add(playerid, "Marijuana", 1578, amount);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			VaultData[id][vaultMarijuana] -= amount;

			Vault_Save(id);

			SendGreenMessage(playerid, "Você pegou \"Marijuana\" do cofre da sua facção.");

			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega \"Marijuana\" do cofre.", ReturnName(playerid, 0));
		}
	}
	else
		Dialog_Show(playerid, CofreDrogasMarijuana, DIALOG_STYLE_LIST, "Gerenciar drogas - Marijuana", "Pegar\nGuardar", "Selecionar", "<<");

	return 1;
}

Dialog:CofreMarijuanaGuardar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			new amount, slotid = Inventory_GetItemID(playerid, "Marijuana");

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, CofreMarijuanaGuardar, DIALOG_STYLE_INPUT, "Guardar - Marijuana", "Digite uma quantia!!\n\nQuantidade: %d\n\nDigite a quantidade de marijuana que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);

			if(amount < 1 || amount > Inventory_Count(playerid, "Marijuana"))
				return Dialog_Show(playerid, CofreMarijuanaGuardar, DIALOG_STYLE_INPUT, "Guardar - Marijuana", "Digite uma quantia válida!!\n\nQuantidade: %d\n\nDigite a quantidade de marijuana que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);

			Inventory_Remove(playerid, "Marijuana", amount);
			VaultData[id][vaultMarijuana] += amount;

			Vault_Save(id);

			SendGreenMessage(playerid, "Você guardou \"Marijuana\" no cofre da sua facção.");
			
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda \"Marijuana\" no cofre.", ReturnName(playerid, 0));
		}
	}
	else
		Dialog_Show(playerid, CofreDrogasMarijuana, DIALOG_STYLE_LIST, "Gerenciar drogas - Marijuana", "Pegar\nGuardar", "Selecionar", "<<");

	return 1;
}

Dialog:CofreDrogasCocaine(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			switch(listitem)
			{
				case 0:
				{
					if(!VaultData[id][vaultCocaine])
					{
						SendWarningMessage(playerid, "Não há cocaína no cofre.");
						Dialog_Show(playerid, CofreDrogasCocaine, DIALOG_STYLE_LIST, "Gerenciar drogas - Cocaína", "Pegar\nGuardar", "Selecionar", "<<");
						return 1;
					}

					Dialog_Show(playerid, CofreCocainePegar, DIALOG_STYLE_INPUT, "Pegar - Cocaína", "Quantidade: %d\n\nDigite a quantidade de cocaína que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultCocaine]);
				}
				case 1:
				{
					new slotid = Inventory_GetItemID(playerid, "Cocaína");

					if(!Inventory_HasItem(playerid, "Cocaína"))
					{
						SendWarningMessage(playerid, "Você não tem cocaína para poder guardar no cofre.");
						
						Dialog_Show(playerid, CofreDrogasCocaine, DIALOG_STYLE_LIST, "Gerenciar drogas - Cocaína", "Pegar\nGuardar", "Selecionar", "<<");
						return 1;
					}

					Dialog_Show(playerid, CofreCocaineGuardar, DIALOG_STYLE_INPUT, "Guardar - Cocaína", "Quantidade: %d\n\nDigite a quantidade de cocaína que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);
				}
			}
		}
		else SendWarningMessage(playerid, "Você não está próximo ao cofre.");
	}
	else
		dlg_MenuCofre(playerid, 1, 1, "\1");

	return 1;
}

Dialog:CofreCocainePegar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			new amount;

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, CofreCocainePegar, DIALOG_STYLE_INPUT, "Pegar - Cocaína", "Digite uma quantia!!\n\nQuantidade: %d\n\nDigite a quantidade de cocaína que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultCocaine]);

			if(amount < 1 || amount > VaultData[id][vaultCocaine])
				return Dialog_Show(playerid, CofreCocainePegar, DIALOG_STYLE_INPUT, "Pegar - Cocaína", "Digite uma quantia válida!!\n\nQuantidade: %d\n\nDigite a quantidade de cocaína que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultCocaine]);

			new inv = Inventory_Add(playerid, "Cocaína", 1575, amount);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			VaultData[id][vaultCocaine] -= amount;

			Vault_Save(id);

			SendGreenMessage(playerid, "Você pegou \"Cocaína\" do cofre da sua facção.");

			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega \"Cocaína\" do cofre.", ReturnName(playerid, 0));
		}
	}
	else
		Dialog_Show(playerid, CofreDrogasCocaine, DIALOG_STYLE_LIST, "Gerenciar drogas - Cocaína", "Pegar\nGuardar", "Selecionar", "<<");

	return 1;
}

Dialog:CofreCocaineGuardar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			new amount, slotid = Inventory_GetItemID(playerid, "Cocaína");

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, CofreCocaineGuardar, DIALOG_STYLE_INPUT, "Guardar - Cocaína", "Digite uma quantia!!\n\nQuantidade: %d\n\nDigite a quantidade de cocaína que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);

			if(amount < 1 || amount > Inventory_Count(playerid, "Cocaína"))
				return Dialog_Show(playerid, CofreCocaineGuardar, DIALOG_STYLE_INPUT, "Guardar - Cocaína", "Digite uma quantia válida!!\n\nQuantidade: %d\n\nDigite a quantidade de cocaína que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);

			Inventory_Remove(playerid, "Cocaína", amount);
			VaultData[id][vaultCocaine] += amount;

			Vault_Save(id);

			SendGreenMessage(playerid, "Você guardou \"Cocaína\" no cofre da sua facção.");

			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda \"Cocaína\" no cofre.", ReturnName(playerid, 0));
		}
	}
	else
		Dialog_Show(playerid, CofreDrogasCocaine, DIALOG_STYLE_LIST, "Gerenciar drogas - Cocaína", "Pegar\nGuardar", "Selecionar", "<<");

	return 1;
}

Dialog:CofreDrogasLSD(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			switch(listitem)
			{
				case 0:
				{
					if(!VaultData[id][vaultLSD])
					{
						SendWarningMessage(playerid, "Não há LSD no cofre.");
						Dialog_Show(playerid, CofreDrogasLSD, DIALOG_STYLE_LIST, "Gerenciar drogas - LSD", "Pegar\nGuardar", "Selecionar", "<<");
						return 1;
					}

					Dialog_Show(playerid, CofreLSDPegar, DIALOG_STYLE_INPUT, "Pegar - LSD", "Quantidade: %d\n\nDigite a quantidade de LSD que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultLSD]);
				}
				case 1:
				{
					new slotid = Inventory_GetItemID(playerid, "LSD");

					if(!Inventory_HasItem(playerid, "LSD"))
					{
						SendWarningMessage(playerid, "Você não tem LSD para poder guardar no cofre.");
						Dialog_Show(playerid, CofreDrogasLSD, DIALOG_STYLE_LIST, "Gerenciar drogas - LSD", "Pegar\nGuardar", "Selecionar", "<<");
						return 1;
					}

					Dialog_Show(playerid, CofreLSDGuardar, DIALOG_STYLE_INPUT, "Guardar - LSD", "Quantidade: %d\n\nDigite a quantidade de LSD que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);
				}
			}
		}
		else SendWarningMessage(playerid, "Você não está próximo ao cofre.");
	}
	else
		dlg_MenuCofre(playerid, 1, 1, "\1");

	return 1;
}

Dialog:CofreLSDPegar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			new amount;

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, CofreLSDPegar, DIALOG_STYLE_INPUT, "Pegar - LSD", "Digite uma quantia!!\n\nQuantidade: %d\n\nDigite a quantidade de LSD que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultLSD]);

			if(amount < 1 || amount > VaultData[id][vaultLSD])
				return Dialog_Show(playerid, CofreLSDPegar, DIALOG_STYLE_INPUT, "Pegar - LSD", "Digite uma quantia válida!!\n\nQuantidade: %d\n\nDigite a quantidade de LSD que você deseja pegar do cofre:", "Pegar", "<<", VaultData[id][vaultLSD]);

			new inv = Inventory_Add(playerid, "LSD", 1577, amount);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			VaultData[id][vaultLSD] -= amount;

			Vault_Save(id);

			SendGreenMessage(playerid, "Você pegou \"LSD\" do cofre da sua facção.");

			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega \"LSD\" do cofre.", ReturnName(playerid, 0));
		}
	}
	else
		Dialog_Show(playerid, CofreDrogasLSD, DIALOG_STYLE_LIST, "Gerenciar drogas - LSD", "Pegar\nGuardar", "Selecionar", "<<");

	return 1;
}

Dialog:CofreLSDGuardar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			new amount, slotid = Inventory_GetItemID(playerid, "LSD");

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, CofreLSDGuardar, DIALOG_STYLE_INPUT, "Guardar - LSD", "Digite uma quantia!!\n\nQuantidade: %d\n\nDigite a quantidade de LSD que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);

			if(amount < 1 || amount > Inventory_Count(playerid, "LSD"))
				return Dialog_Show(playerid, CofreLSDGuardar, DIALOG_STYLE_INPUT, "Guardar - LSD", "Digite uma quantia válida!!\n\nQuantidade: %d\n\nDigite a quantidade de LSD que você deseja guardar no cofre:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);

			Inventory_Remove(playerid, "LSD", amount);
			VaultData[id][vaultLSD] += amount;

			Vault_Save(id);

			SendGreenMessage(playerid, "Você guardou \"LSD\" no cofre da sua facção.");

			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda \"LSD\" no cofre.", ReturnName(playerid, 0));
		}
	}
	else
		Dialog_Show(playerid, CofreDrogasLSD, DIALOG_STYLE_LIST, "Gerenciar drogas - LSD", "Pegar\nGuardar", "Selecionar", "<<");

	return 1;
}

Dialog:CofreArmas(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = Vault_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == VaultData[id][vaultFactionID])
		{
			if(VaultData[id][vaultWeapon][listitem] != 0)
			{
				if(PlayerData[playerid][pTimePlayed] < 2)
					return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

				if(PlayerHasWeapon(playerid, VaultData[id][vaultWeapon][listitem]))
					return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

				if(PlayerHasWeaponInSlot(playerid, VaultData[id][vaultWeapon][listitem]))
					return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

				GiveWeaponToPlayer(playerid, VaultData[id][vaultWeapon][listitem], VaultData[id][vaultAmmo][listitem]);

				SendServerMessage(playerid, "Você pegou um(a) \"%s\" (Munição: %d) do cofre da sua facção.", ReturnWeaponName(VaultData[id][vaultWeapon][listitem]), VaultData[id][vaultAmmo][listitem]);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega um(a) \"%s\" do cofre da sua facção.", ReturnName(playerid, 0), ReturnWeaponName(VaultData[id][vaultWeapon][listitem]));

				VaultData[id][vaultWeapon][listitem] = 0;
				VaultData[id][vaultAmmo][listitem] = 0;

				Vault_Save(id);
				dlg_MenuCofre(playerid, 1, 2, "\1");
			}
			else
			{
				new weaponid = GetWeapon(playerid);
				new ammo = GetAmmo(playerid);

				if(!weaponid)
					return SendWarningMessage(playerid, "Você não está com nenhuma arma em mãos.");

				if(PlayerData[playerid][pOnDuty])
					return SendWarningMessage(playerid, "Você está em serviço e não pode guardar armas no cofre da sua facção.");

				ResetWeapon(playerid, weaponid);

				SendServerMessage(playerid, "Você guardou um(a) \"%s\" (Munição: %d) no cofre da facção.", ReturnWeaponName(weaponid), ammo);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda um(a) \"%s\" no cofre da facção.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

				VaultData[id][vaultWeapon][listitem] = weaponid;
				VaultData[id][vaultAmmo][listitem] = ammo;

				Vault_Save(id);
				dlg_MenuCofre(playerid, 1, 2, "\1");
			}	
		}		
	}
	else
		callcmd::cofre(playerid);

	return 1;
}

Dialog:MenuArmas(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = WH_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == WhData[id][whFactionID])
		{
			switch(listitem)
			{
				case 0: Dialog_Show(playerid, ArmasGunparts, DIALOG_STYLE_LIST, "Gerenciar gunparts", "Quantidade atual: %d\nGuardar\nPegar", "Selecionar", "<<", WhData[id][whGunparts]);
				case 1:
				{
					sz_MiscString[0] = 0;

					format(sz_MiscString, sizeof(sz_MiscString), "Arma\tMunição\tGunparts\n");

					for(new i, o = sizeof(MontarArmas); i < o; i++)
					{
						format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%d\t%d\n", sz_MiscString, ReturnWeaponName(MontarArmas[i][montarID]), MontarArmas[i][montarMunicao], MontarArmas[i][montarGP]);
					}

					Dialog_Show(playerid, ArmasMontar, DIALOG_STYLE_TABLIST_HEADERS, "Montar arma", sz_MiscString, "Montar", "<<");
				}
			}
		}
	}
	return 1;
}

Dialog:ArmasGunparts(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = WH_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == WhData[id][whFactionID])
		{
			switch(listitem)
			{
				case 0: Dialog_Show(playerid, ArmasGunparts, DIALOG_STYLE_LIST, "Gerenciar gunparts", "Quantidade atual: %d\nGuardar\nPegar", "Selecionar", "<<", WhData[id][whGunparts]);
				case 1: 
				{
					new slotid = Inventory_GetItemID(playerid, "Gunparts");

					if(!Inventory_HasItem(playerid, "Gunparts"))
					{
						SendWarningMessage(playerid, "Você não tem gunparts para poder guardar.");
						Dialog_Show(playerid, ArmasGunparts, DIALOG_STYLE_LIST, "Gerenciar gunparts", "Quantidade atual: %d\nGuardar\nPegar", "Selecionar", "<<", WhData[id][whGunparts]);
						return 1;
					}

					Dialog_Show(playerid, GunpartsGuardar, DIALOG_STYLE_INPUT, "Guardar - Gunparts", "Quantidade: %d\n\nDigite a quantidade de gunparts que você deseja guardar:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);
				}
				case 2:
				{
					if(!WhData[id][whGunparts])
					{
						SendWarningMessage(playerid, "Não há gunparts no cofre.");
						Dialog_Show(playerid, ArmasGunparts, DIALOG_STYLE_LIST, "Gerenciar gunparts", "Quantidade atual: %d\nGuardar\nPegar", "Selecionar", "<<", WhData[id][whGunparts]);
						return 1;
					}

					Dialog_Show(playerid, GunpartsPegar, DIALOG_STYLE_INPUT, "Pegar - Gunparts", "Quantidade: %d\n\nDigite a quantidade de gunparts que você deseja pegar:", "Pegar", "<<", WhData[id][whGunparts]);
				}
			}
		}
	}
	else
		callcmd::armas(playerid);

	return 1;
}

Dialog:GunpartsPegar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = WH_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == WhData[id][whFactionID])
		{
			new amount;

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, GunpartsPegar, DIALOG_STYLE_INPUT, "Pegar - Gunparts", "Digite uma quantia!!\n\nQuantidade: %d\n\nDigite a quantidade de gunparts que você deseja pegar:", "Pegar", "<<", WhData[id][whGunparts]);
			
			if(amount < 1 || amount > WhData[id][whGunparts])
				return Dialog_Show(playerid, GunpartsPegar, DIALOG_STYLE_INPUT, "Pegar - Gunparts", "Digite uma quantia válida!!\n\nQuantidade: %d\n\nDigite a quantidade de gunparts que você deseja pegar:", "Pegar", "<<", WhData[id][whGunparts]);

			new inv = Inventory_Add(playerid, "Gunparts", 2040, amount);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			WhData[id][whGunparts] -= amount;

			WH_Save(id);

			SendGreenMessage(playerid, "Você pegou \"Gunparts\" do cofre de armas.");

			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega \"Gunparts\" do cofre de armas.", ReturnName(playerid, 0));
		}
	}
	else
		dlg_MenuArmas(playerid, 1, 0, "\1");

	return 1;
}

Dialog:GunpartsGuardar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = WH_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == WhData[id][whFactionID])
		{
			new amount, slotid = Inventory_GetItemID(playerid, "Gunparts");

			if(sscanf(inputtext, "d", amount))
				return Dialog_Show(playerid, GunpartsGuardar, DIALOG_STYLE_INPUT, "Guardar - Gunparts", "Digite uma quantia!!\n\nQuantidade: %d\n\nDigite a quantidade de gunparts que você deseja guardar:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);

			if(amount < 1 || amount > Inventory_Count(playerid, "Gunparts"))
				return Dialog_Show(playerid, GunpartsGuardar, DIALOG_STYLE_INPUT, "Guardar - Gunparts", "Digite uma quantia válida!!\n\nQuantidade: %d\n\nDigite a quantidade de gunparts que você deseja guardar:", "Guardar", "<<", InventoryData[playerid][slotid][invQuantity]);

			Inventory_Remove(playerid, "Gunparts", amount);
			WhData[id][whGunparts] += amount;

			WH_Save(id);

			SendGreenMessage(playerid, "Você guardou \"Gunparts\" no cofre de armas.");

			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s guarda \"Gunparts\" no cofre de armas.", ReturnName(playerid, 0));
		}
	}
	else
		dlg_MenuArmas(playerid, 1, 0, "\1");

	return 1;
}

Dialog:ArmasMontar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;
		if((id = WH_Nearest(playerid)) != -1 && PlayerData[playerid][pFactionID] == WhData[id][whFactionID])
		{
			if(WhData[id][whGunparts] < MontarArmas[listitem][montarGP])
				return SendWarningMessage(playerid, "Não há gunparts necessário para montar essa arma.");

			if(PlayerData[playerid][pTimePlayed] < 2)
				return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

			if(PlayerHasWeapon(playerid, MontarArmas[listitem][montarID]))
				return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

			if(PlayerHasWeaponInSlot(playerid, MontarArmas[listitem][montarID]))
				return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");			

			GiveWeaponToPlayer(playerid, MontarArmas[listitem][montarID], MontarArmas[listitem][montarMunicao]);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) montou um(a) %s com %d de munição por %d gunparts da facção %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], MontarArmas[listitem][montarGP], Faction_GetName(playerid), PlayerData[playerid][pFactionID]);
			SendGreenMessage(playerid, "Você montou um(a) \"%s\" (munição: %d) por %d gunparts.", ReturnWeaponName(MontarArmas[listitem][montarID]), MontarArmas[listitem][montarMunicao], MontarArmas[listitem][montarGP]);

			WhData[id][whGunparts] -= MontarArmas[listitem][montarGP];

			WH_Save(id);
		}
	}
	else
		callcmd::armas(playerid);

	return 1;
}


Dialog:ObjectMenu(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pSelectedSlot];

		if(Object_Nearest(playerid, id) != -1)
		{
			switch(listitem)
			{
				case 0:
				{
					if(ObjectData[id][objectEditing])
					{
						Dialog_Show(playerid, ObjectMenu, DIALOG_STYLE_LIST, sprintf("Gerenciando objeto ID: %d", id), "Posição\nClonar\nEditar materiais\nDesbugar", "Selecionar", "Cancelar");
						
						return SendWarningMessage(playerid, "Esse objeto já está sendo editado por alguém.");
					}

					PlayerData[playerid][pEditingMode] = 3;
					ObjectData[id][objectEditing] = true;
					EditDynamicObject(playerid, ObjectData[id][objectObject]);

					SendAdminAction(playerid, "Você está editando o objeto ID: %d.", id);
				}
				case 1:
				{
					new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;

					GetDynamicObjectPos(ObjectData[id][objectObject], x, y, z);
					GetDynamicObjectRot(ObjectData[id][objectObject], rx, ry, rz);

					new objid = Object_Clone(playerid, ObjectData[id][objectModel], x, y, z, rx, ry, rz);

					if(objid == -1)
						return SendWarningMessage(playerid, "O servidor já atingiu o máximo de objetos criados.");

					SendAdminAction(playerid, "Objeto ID: %d clonado, editando o objeto ID: %d.", id, objid);
				}
				case 2:
				{
					if(ObjectData[id][objectEditing])
					{
						Dialog_Show(playerid, ObjectMenu, DIALOG_STYLE_LIST, sprintf("Gerenciando objeto ID: %d", id), "Posição\nClonar\nEditar materiais\nDesbugar", "Selecionar", "Cancelar");
						
						return SendWarningMessage(playerid, "Esse objeto está sendo editado, não é possível fazer a alteração do material.");
					}

					Dialog_Show(playerid, ObjectMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %d", id), "Editar texturas\nEditar cores\nLimpar texturas do objeto\nLimpar cores do objeto", "Selecionar", "<<");
				}
				case 3:
				{
					if(ObjectData[id][objectEditing])
					{
						ObjectData[id][objectEditing] = false;
						Object_Delete(id);

						SendAdminAction(playerid, "Objeto ID: %d desbugado e deletado.", id);
					}
					else
					{
						SendWarningMessage(playerid, "Objeto ID: %d não está sendo editado por um jogador inválido.", id);

						Dialog_Show(playerid, ObjectMenu, DIALOG_STYLE_LIST, sprintf("Gerenciando objeto ID: %d", id), "Posição\nClonar\nEditar materiais\nDesbugar", "Selecionar", "Cancelar");
					}
				}
			}
		}
		else
		{
			SendWarningMessage(playerid, "Você não está próximo do objeto.");
		}
	}
	else
	{
		PlayerData[playerid][pSelectedSlot] = 0;
	}

	return 1;
}

Dialog:ObjectMaterial(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pSelectedSlot];

		switch(listitem)
		{
			case 0:
			{
				new query[65];

				mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[id][objectID]);
				mysql_tquery(this, query, "ObjectCheckTexture", "dd", playerid, id);
			}
			case 1:
			{
				new query[65];

				mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[id][objectID]);
				mysql_tquery(this, query, "ObjectCheckColor", "dd", playerid, id);
			}
			case 2:
			{
				new query[80];

				mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE `objectID` = '%d'", ObjectData[id][objectID]);
				mysql_tquery(this, query, "DeleteObjectMaterial", "ddd", playerid, id, 2);

				SendAdminAction(playerid,  "Você removeu as texturas do objeto ID \"%d\" com sucesso.", id);

				Dialog_Show(playerid, ObjectMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %d", id), "Editar texturas\nEditar cores\nLimpar texturas do objeto\nLimpar cores do objeto", "Selecionar", "<<");
			}
			case 3:
			{
				new query[80];

				mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE `objectID` = '%d'", ObjectData[id][objectID]);
				mysql_tquery(this, query, "DeleteObjectMaterial", "ddd", playerid, id, 3);

				SendAdminAction(playerid,  "Você removeu as cores do objeto ID \"%d\" com sucesso.", id);

				Dialog_Show(playerid, ObjectMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %d", id), "Editar texturas\nEditar cores\nLimpar texturas do objeto\nLimpar cores do objeto", "Selecionar", "<<");
			}
		}
	}
	else
	{
		new id = PlayerData[playerid][pSelectedSlot];

		Dialog_Show(playerid, ObjectMenu, DIALOG_STYLE_LIST, sprintf("Gerenciando objeto ID: %d", id), "Posição\nClonar\nEditar materiais\nDesbugar", "Selecionar", "Cancelar");
	}

	return 1;
}

Dialog:ObjectTextureSlot(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayerData[playerid][pSelectedIndex] = listitem;

		Dialog_Show(playerid, ObjectTextureCat, DIALOG_STYLE_LIST, "Escolha a categoria da textura:", DIALOG_LIST_TEXTURE, "Selecionar", "<<");
	}
	else
	{
		new id = PlayerData[playerid][pSelectedSlot];

		Dialog_Show(playerid, ObjectMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %d", id), "Editar texturas\nEditar cores\nLimpar texturas do objeto\nLimpar cores do objeto", "Selecionar", "<<");
	}

	return 1;
}

Dialog:ObjectTextureCat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!listitem)
		{
			new query[85], id = PlayerData[playerid][pSelectedSlot];

			mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], PlayerData[playerid][pSelectedIndex]);
			mysql_tquery(this, query, "DeleteObjectMaterial", "ddd", playerid, id, 0);

			SendAdminAction(playerid, "Textura do objeto ID \"%d (Slot: %d)\" removida com sucesso.", id, PlayerData[playerid][pSelectedIndex]);

			PlayerData[playerid][pSelectedIndex] = 0;

			return 1;
		}
		new count;

		sz_MiscString[0]  = 0;

		for(new x, xs = sizeof(g_aTextures); x < xs; x++) if(g_aTextures[x][ltSlot] == listitem-1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, count + 1, g_aTextures[x][ltName]);
			PlayerData[playerid][pListedTextures][count++] = x;
		}

		Dialog_Show(playerid, ObjectTextureConf, DIALOG_STYLE_LIST, "Escolha a textura:", sz_MiscString, "Selecionar", "<<");
	}
	else
	{
		new query[65], id = PlayerData[playerid][pSelectedSlot];

		mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[id][objectID]);
		mysql_tquery(this, query, "ObjectCheckTexture", "dd", playerid, id);
	}

	return 1;
}

Dialog:ObjectTextureConf(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new index = PlayerData[playerid][pSelectedIndex], id = PlayerData[playerid][pSelectedSlot], textureid = PlayerData[playerid][pListedTextures][listitem];
	
		new query[126];

		mysql_format(this, query, sizeof(query), "SELECT * FROM `objetostextura` WHERE `objectID` = '%d' AND `textureIndex` = '%d'", ObjectData[id][objectID], index);
		mysql_tquery(this, query, "OnObjectAddTexture", "ddddsss", playerid, id, index, g_aTextures[textureid][ltMaterial], g_aTextures[textureid][ltTXD], g_aTextures[textureid][ltTName], g_aTextures[textureid][ltName]);

		SendAdminAction(playerid, "Você adicionou a textura \"%s (Slot: %d)\" no objeto ID: %d", g_aTextures[textureid][ltName], index, id);
	
		PlayerData[playerid][pSelectedIndex] = 0;
	}
	else
	{
		Dialog_Show(playerid, ObjectTextureCat, DIALOG_STYLE_LIST, "Escolha a categoria da textura:", DIALOG_LIST_TEXTURE, "Selecionar", "<<");
	}

	return 1;
}

Dialog:ObjectColorSlot(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayerData[playerid][pSelectedIndex] = listitem;

		Dialog_Show(playerid, ObjectColorConf, DIALOG_STYLE_LIST, "Escolha a cor:", DIALOG_COLOR_LIST, "Selecionar", "<<");
	}
	else
	{
		new id = PlayerData[playerid][pSelectedSlot];

		Dialog_Show(playerid, ObjectMaterial, DIALOG_STYLE_LIST, sprintf("Editar Material: %d", id), "Editar texturas\nEditar cores\nLimpar texturas do objeto\nLimpar cores do objeto", "Selecionar", "<<");
	}

	return 1;
}

Dialog:ObjectColorConf(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new query[128], id = PlayerData[playerid][pSelectedSlot];

		if(!listitem)
		{
			mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE `objectID` = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], PlayerData[playerid][pSelectedIndex]);
			mysql_tquery(this, query, "DeleteObjectMaterial", "ddd", playerid, id, 1);

			SendAdminAction(playerid, "Cor do objeto ID \"%d (Slot: %d)\" removida com sucesso.", id, PlayerData[playerid][pSelectedIndex]);

			return 1;
		}

		new hexcolor;

		sscanf(g_aTextureColor[listitem-1][colorRGB], "h", hexcolor);

		mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d' AND textureIndex = '%d'", ObjectData[id][objectID], PlayerData[playerid][pSelectedIndex]);
		mysql_tquery(this, query, "OnObjectAddColor", "dddds", playerid, id, PlayerData[playerid][pSelectedIndex], hexcolor, g_aTextureColor[listitem-1][colorName]);
	
		SendAdminAction(playerid, "Você adicionou a cor \"%s (Slot: %d)\" no objeto ID: %d", g_aTextureColor[listitem-1][colorName], PlayerData[playerid][pSelectedIndex], id);
	
		PlayerData[playerid][pSelectedIndex] = 0;
	}
	else
	{
		new query[65], id = PlayerData[playerid][pSelectedSlot];

		mysql_format(this, query, sizeof(query), "SELECT * FROM objetostextura WHERE objectID = '%d'", ObjectData[id][objectID]);
		mysql_tquery(this, query, "ObjectCheckColor", "dd", playerid, id);
	}
	return 1;
}

Dialog:Licencas(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: //Voo
			{
				if(GetScriptedMoney(playerid) < 1200)
					return SendWarningMessage(playerid, "Você não possui $1200 em mãos.");

				if(PlayerData[playerid][pFlyLicense])
					return SendWarningMessage(playerid, "Você já possui a licença de avião.");

				GiveScriptedMoney(playerid, -1200);
				PlayerData[playerid][pFlyLicense] = 1;

				SendGreenMessage(playerid, "Você comprou a licença de pilotar aeronaves por $15,000.");
			}

			case 1: //Barco
			{
				if(GetScriptedMoney(playerid) < 600)
					return SendWarningMessage(playerid, "Você não possui $600 em mãos.");

				if(PlayerData[playerid][pBoatLicense])
					return SendWarningMessage(playerid, "Você já possui a licença de barcos.");

				GiveScriptedMoney(playerid, -600);
				PlayerData[playerid][pBoatLicense] = 1;
				SendGreenMessage(playerid, "Você comprou a licença de navegar barcos por $600.");
			}

			case 2: //Carro
			{
				if(PlayerData[playerid][pDrivingTest])
					return SendWarningMessage(playerid, "Você já começou um teste de direção.");

				if(PlayerData[playerid][pCarLicense])
					return SendWarningMessage(playerid, "Você já possui a licença de veículos terrestres.");

				if(GetScriptedMoney(playerid) < 150)
					return SendWarningMessage(playerid, "Você não possui $150 em mãos.");

				GetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
				GetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

				PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
				PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

				PlayerData[playerid][pTestCar] = CreateVehicle(410, 1981.0078, -1990.8728, 13.2558, 90.4743, 1, 1, -1);
				SetVehicleNumberPlate(PlayerData[playerid][pTestCar], "DMV");
				PlayerData[playerid][pTestWarns] = 0;

				if(PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
				{
					PlayerData[playerid][pDrivingTest] = true;
					PlayerData[playerid][pTestStage] = 0;

					VehicleData[PlayerData[playerid][pTestCar]][vehicleFuel] = 5.0;

					SetPlayerVirtualWorld(playerid, (2000 + playerid));

					AC_SetPlayerPos(playerid, 1981.2131, -1985.6646, 13.5469);
					SetPlayerFacingAngle(playerid, 177.4223);

					GiveScriptedMoney(playerid, -150);

					SetVehicleVirtualWorld(PlayerData[playerid][pTestCar], (2000 + playerid));

					Waypoint_Remove(playerid);
					SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[0][0], g_arrDrivingCheckpoints[0][1], g_arrDrivingCheckpoints[0][2], 3.0);

					SendGreenMessage(playerid, "Você pagou $150 para iniciar o teste de direção. Entre no 'Manana' para começar o teste!");
					SendFormatMessage(playerid, COLOR_YELLOW, "Dica", "Evite ultrapassar o limite de velocidade (50 mp/h) e qualquer dano no veículo resul");
					SendClientMessage(playerid, COLOR_WHITE, "...tará na perda o teste.");

					SetPlayerInterior(playerid, 0);
				}
				else
				{
					CancelDrivingTest(playerid);
					SendWarningMessage(playerid, "Erro DMV-01. Contate um administrador ou developer.");
				}
			}
		}
	}
	return 1;
}

Dialog:LeaveTest(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		CancelDrivingTest(playerid);
		SendClientMessage(playerid, COLOR_WARNING, "Você desistiu do teste de direção.");
	}
	else
	{
		AC_PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);
	}
	return 1;
}

Dialog:GatePass(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = Gate_Nearest(playerid);

		if(id == -1)
			return 0;

		new pass;

		if(sscanf(inputtext, "d", pass))
			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Insira a senha", "Digite uma senha!!\n\nDigite a senha para poder abrir esse portão:", "Abrir", "Cancelar");

		if(GateData[id][gatePassword] != pass)
			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Insira a senha", "Senha inválida!!\n\nDigite a senha para poder abrir esse portão:", "Abrir", "Cancelar");

		Gate_Operate(id);
	}
	return 1;
}

Dialog:ToggleImpound(playerid, response, listitem, inputtext[])
{
	if(!response)
		return DeletePVar(playerid, "ImpoundedID");

	SetPVarInt(playerid, "ImpoundedID", ListedOptions[playerid][listitem]);

	new query[64];

	mysql_format(this, query, sizeof(query), "SELECT * FROM `carrosapreendidos` WHERE `id` = '%d'", GetPVarInt(playerid, "ImpoundedID"));
	mysql_tquery(this, query, "OnImpoundedVehicleSearch", "d", playerid);

	return 1;
}

Dialog:ImpoundConfirm(playerid, response, listitem, inputtext[])
{
	if(!response)
		return DeletePVar(playerid, "ImpoundedID");

	new query[64];

	mysql_format(this, query, sizeof(query), "SELECT * FROM `carrosapreendidos` WHERE `id` = '%d'", GetPVarInt(playerid, "ImpoundedID"));
	mysql_tquery(this, query, "OnImpoundedVehicleConfirmSearch", "d", playerid);

	return 1;
}

Dialog:LojaRoupa(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new skins[5];

				if(PlayerData[playerid][pSex] == 1)
					skins = {1, 2, 26, 95, 154};
				else
					skins = {12, 40, 41, 55, 56};

				ShowModelSelectionMenu(playerid, "Comprar Roupa", MODEL_SELECTION_BUY_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
			}
			case 1:
			{
				SendClientMessage(playerid, COLOR_WARNING, "As skins da versão 0.3.DL estão sendo adicionadas.");
			}
		}
	}

	return 1;
}

Dialog:BuyItem(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new count = 0;

		sz_MiscString[0] = 0;

		format(sz_MiscString, sizeof(sz_MiscString), "Acessório\tPreço ($)\n");

		for(new x, xs = sizeof(g_aAttachItems); x < xs; x++) if(g_aAttachItems[x][E_Slot] == listitem)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%s\n", sz_MiscString, g_aAttachItems[x][E_Name], FormatNumber(g_aAttachItems[x][E_Price]));
			PlayerData[playerid][pBuyItems][count++] = x;
		}

		Dialog_Show(playerid, SelectItem, DIALOG_STYLE_TABLIST_HEADERS, inputtext, sz_MiscString, "Selecionar", "<<");
	}

	return 1;
}

Dialog:SelectItem(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(Attach_GetCount(playerid) >= Attach_GetSlots(playerid))
			return SendWarningMessage(playerid, "Você já possui o máximo de acessórios (%d).", Attach_GetSlots(playerid));

		PlayerData[playerid][pSelectedSlot] = PlayerData[playerid][pBuyItems][listitem];

		new id = PlayerData[playerid][pSelectedSlot];

		SetPlayerAttachedObject(playerid, 9, g_aAttachItems[id][E_ObjectID], g_aAttachItems[id][E_Bone]);

		PlayerData[playerid][pEditingMode] = 1;
		EditAttachedObject(playerid, 9);

		ShowBuyInfo(playerid, g_aAttachItems[id][E_Name], g_aAttachItems[id][E_Price]);
		
		SendFormatMessage(playerid, COLOR_YELLOW, "Dica", "Aperte no {FFFF00}DISQUETE{FFFFFF} para comprar, {FFFF00}ESC{FFFFFF} para cancelar e pressione");
		SendClientMessage(playerid, COLOR_WHITE, "... {FFFF00}ESPAÇO{FFFFFF} para manobrar a câmera.");
	}
	else
	{
		Dialog_Show(playerid, BuyItem, DIALOG_STYLE_LIST, "Comprar acessórios", DIALOG_BUY_ITEMS, "Selecionar", "Fechar");
	}

	return 1;
}

Dialog:PlayerItems(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new count = 0;

		if(!listitem)
		{
			if(PlayerData[playerid][pJailed])
				return SendWarningMessage(playerid, "Você não pode colocar seus itens agora.");
			
			for(new i = 0; i < MAX_ITEM_PLAYER; i++) if(AttachData[playerid][i][attachExists] && AttachData[playerid][i][attachUsing])
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, AttachData[playerid][i][attachIndex]))
					continue;

				SetPlayerAttachedObject(playerid, 
					AttachData[playerid][i][attachIndex], 
					AttachData[playerid][i][attachObject], 
					AttachData[playerid][i][attachBone], 
					AttachData[playerid][i][attachX], 
					AttachData[playerid][i][attachY], 
					AttachData[playerid][i][attachZ], 
					AttachData[playerid][i][attachRX], 
					AttachData[playerid][i][attachRY], 
					AttachData[playerid][i][attachRZ], 
					AttachData[playerid][i][attachSX], 
					AttachData[playerid][i][attachSY], 
					AttachData[playerid][i][attachSZ]);

				count++;
			}
			if(!count)
			{
				SendWarningMessage(playerid, "Nenhum acessório acoplado em seu corpo.");
			}
			else 
			{
				SendGreenMessage(playerid, "%d acessório(s) acoplado(s) em seu corpo.", count);
			}
			
			return 1;
		}

		PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];

		new id = PlayerData[playerid][pSelectedSlot];

		Attach_ReturnOptions(playerid, id);
	}

	return 1;
}

Dialog:PlayerItemsOptions(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pSelectedSlot];

		switch(listitem)
		{
			case 0:
			{
				if(!IsPlayerAttachedObjectSlotUsed(playerid, AttachData[playerid][id][attachIndex]) && !AttachData[playerid][id][attachUsing])
					return SendWarningMessage(playerid, "Você precisa estar com o item acoplado em seu corpo para poder editar.");

				PlayerData[playerid][pEditingMode] = 2;
				EditAttachedObject(playerid, AttachData[playerid][id][attachIndex]);
			}
			case 1:
			{
				if(!AttachData[playerid][id][attachUsing])
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, AttachData[playerid][id][attachIndex]))
					{
						Attach_ReturnOptions(playerid, id);
						SendWarningMessage(playerid, "O index deste acessório já está sendo ocupado por outro.");
						return 1;
					}

					AttachData[playerid][id][attachUsing] = 1;
					Attach_Save(playerid, id);

					SetPlayerAttachedObject(playerid, 
					AttachData[playerid][id][attachIndex], 
					AttachData[playerid][id][attachObject], 
					AttachData[playerid][id][attachBone], 
					AttachData[playerid][id][attachX], 
					AttachData[playerid][id][attachY], 
					AttachData[playerid][id][attachZ], 
					AttachData[playerid][id][attachRX], 
					AttachData[playerid][id][attachRY], 
					AttachData[playerid][id][attachRZ], 
					AttachData[playerid][id][attachSX], 
					AttachData[playerid][id][attachSY], 
					AttachData[playerid][id][attachSZ]);

					SendClientMessageEx(playerid, COLOR_WHITE, "Você acoplou o acessório {FFFF00}%s {FFFFFF}no seu corpo.", AttachData[playerid][id][attachName]);
				}
				else
				{
					RemovePlayerAttachedObject(playerid, AttachData[playerid][id][attachIndex]);
					AttachData[playerid][id][attachUsing] = 0;
					Attach_Save(playerid, id);

					SendClientMessageEx(playerid, COLOR_WHITE, "Você retirou o acessório {FFFF00}%s {FFFFFF}do seu corpo.", AttachData[playerid][id][attachName]);
				}

				Attach_ReturnOptions(playerid, id);
			}
			case 2:
			{
				Dialog_Show(playerid, ItemChangeBone, DIALOG_STYLE_LIST, "Alterar bone slot do acessório:", "Coluna\nCabeça\nBraço esquerdo\nBraço direito\nMão esquerda\nMão direita\nCoxa esquerda\nCoxa direta\nPé esquerdo\nPé direito\nPanturrilha direta\nPanturrilha esquerda\nAntebraço direito\nAntebraço direito\nOmbro esquerdo\nOmbro direto\nPescoço\nMandíbula", "Selecionar", "<<");
			}
			case 3:
			{
				if(!PlayerData[playerid][pVip])
					Dialog_Show(playerid, ItemChangeIndex, DIALOG_STYLE_LIST, "Alterar index slot do acessório:", "Index Slot: 0\nIndex Slot: 1\nIndex Slot: 2\nIndex Slot: 3\nIndex Slot: 4", "Selecionar", "<<");
				else
					Dialog_Show(playerid, ItemChangeIndex, DIALOG_STYLE_LIST, "Alterar index slot do acessório:", "Index Slot: 0\nIndex Slot: 1\nIndex Slot: 2\nIndex Slot: 3\nIndex Slot: 4\nIndex Slot: 5\nIndex Slot: 6", "Selecionar", "<<");
			}
			case 4: Dialog_Show(playerid, ItemDelete, DIALOG_STYLE_MSGBOX, "Confirmar exclusão do acessório:", "Você deseja deletar o acessório \"%s\"?\nINFO: Esta ação é irreversível e seu acessório será deletado permanentemente.", "Confirmar", "<<", AttachData[playerid][id][attachName]);
		}
	}
	else
	{
		callcmd::itens(playerid);
		PlayerData[playerid][pSelectedSlot] = 0;
	}

	return 1;
}

Dialog:ItemChangeBone(playerid, response, listitem, inputtext[])
{
	new id = PlayerData[playerid][pSelectedSlot];

	if(response)
	{
		if(AttachData[playerid][id][attachUsing])
		{
			SendWarningMessage(playerid, "Você precisa remover o acessório do seu corpo para alterar o bone slot.");
			Attach_ReturnOptions(playerid, id);
			return 1;
		}

		AttachData[playerid][id][attachBone] = listitem + 1;

		SendClientMessageEx(playerid, COLOR_WHITE, "Você alterou o bone slot do acessório {FFFF00}%s{FFFFFF} para {FFFF00}%s{FFFFFF}.", AttachData[playerid][id][attachName], inputtext);
		Attach_ReturnOptions(playerid, id);
	}
	else
	{
		Attach_ReturnOptions(playerid, id);
	}

	return 1;
}

Dialog:ItemChangeIndex(playerid, response, listitem, inputtext[])
{
	new id = PlayerData[playerid][pSelectedSlot];

	if(response)
	{
		if(AttachData[playerid][id][attachUsing])
		{
			SendWarningMessage(playerid, "Você precisa remover o acessório do seu corpo para alterar o index slot.");
			Attach_ReturnOptions(playerid, id);
			return 1;
		}

		AttachData[playerid][id][attachIndex] = listitem;

		SendClientMessageEx(playerid, COLOR_WHITE, "Você alterou o index slot do acessório {FFFF00}%s{FFFFFF} para {FFFF00}%s{FFFFFF}.", AttachData[playerid][id][attachName], inputtext);
		Attach_ReturnOptions(playerid, id);
	}
	else
	{
		Attach_ReturnOptions(playerid, id);
	}

	return 1;
}

Dialog:ItemDelete(playerid, response, listitem, inputtext[])
{
	new id = PlayerData[playerid][pSelectedSlot];

	if(response)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, AttachData[playerid][id][attachIndex]))
			RemovePlayerAttachedObject(playerid, AttachData[playerid][id][attachIndex]);

		SendClientMessageEx(playerid, COLOR_WHITE, "Você deletou o acessório {FFFF00}%s{FFFFFF}.", AttachData[playerid][id][attachName]);
		Attach_Delete(playerid, id);
	}
	else
	{
		Attach_ReturnOptions(playerid, id);
	}

	return 1;
}

//Dialog_Show(playerid, BusinessOwnerOptions, DIALOG_STYLE_LIST, "Qual opção você deseja acessar?", "Comprar produtos (estocar)\nAlterar preço dos produtos\nAcessar o cofre\nInformações da empresa", "Selecionar", "<<");
Dialog:BusinessOwnerOptions(playerid, response, listitem, inputtext[])
{
	new id = Business_Nearest(playerid);

	if(id == -1)
		return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");

	if(response)
	{
		switch(listitem)
		{
			case 0:
				Dialog_Show(playerid, BusinessStockOptions, DIALOG_STYLE_LIST, "Comprar estoque:", "Alterar quantidade a ser comprada\nAlterar preço unitário\n{00FF00}>> Salvar alterações\n{FF0000}>> Parar de comprar", "Selecionar", "<<");

			case 1:
			{
				new count;

				sz_MiscString[0] = 0;

				format(sz_MiscString, sizeof(sz_MiscString), "Produto\tPreço ($)\n");

				for(new i = 0; i < MAX_BUSINESS_PRODUCT; i++)
				{
					if(!BusinessData[id][businessProduct][i])
						continue;

					format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%s\n", sz_MiscString, Business_ProductName(BusinessData[id][businessProduct][i]), FormatNumber(BusinessData[id][businessProductPrice][i]));
				
					ListedOptions[playerid][count++] = i;
				}

				Dialog_Show(playerid, BusinessProductOptions, DIALOG_STYLE_TABLIST_HEADERS, "Escolha o produto para alterar o valor:", sz_MiscString, "Selecionar", "<<");
			}

			case 2:
				Dialog_Show(playerid, BusinessVaultOptions, DIALOG_STYLE_LIST, "Escolha uma das opções:", "Saldo atual: %s\nAdicionar valor\nRetirar valor", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));
		
			case 3:
				Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Informações sobre a sua empresa:",
					"{FFFF00}Nome:{FFFFFF} %s\n\
					{FFFF00}Tipo:{FFFFFF} %s\n\n\
					{FFFF00}Estoque atual:{FFFFFF} %d\n\
					{FFFF00}Produtos a comprar:{FFFFFF} %d\n\
					{FFFF00}Preço de compra:{FFFFFF} %s por produto",
					"Fechar", "",
					BusinessData[id][businessName],
					Business_GetType(id),
					BusinessData[id][businessStock],
					BusinessData[id][businessBuying],
					FormatNumber(BusinessData[id][businessBuyingPrice]));
		}
	}

	return 1;
}

Dialog:BusinessStockOptions(playerid, response, listitem, inputtext[])
{
	new id = -1;

	if(response)
	{
		if((id = Business_Nearest(playerid)) != -1)
		{
			switch(listitem)
			{	
				case 0:
					Dialog_Show(playerid, BusinessStockQuantity, DIALOG_STYLE_INPUT, "Comprar estoque - quantia:", "Digite abaixo a quantidade que você comprar para a sua empresa:", "Salvar", "<<");

				case 1:
					Dialog_Show(playerid, BusinessStockValue, DIALOG_STYLE_INPUT, "Comprar estoque - valor unitário:", "Digite abaixo o valor a ser pago em cada produto comprado:", "Salvar", "<<");
			
				case 2:
				{
					if(!TempData[playerid][tempProduct])
						return SendWarningMessage(playerid, "Você não setou uma quantia de produtos para ser comprada.");

					if(!TempData[playerid][tempPrice])
						return SendWarningMessage(playerid, "Você não setou um valor para a compra de cada produto.");

					if(BusinessData[id][businessBuying])
						return SendWarningMessage(playerid, "Sua empresa já está comprando por produtos.");

					new total_value = TempData[playerid][tempProduct] * TempData[playerid][tempPrice];

					if(total_value > BusinessData[id][businessVault])
						return SendWarningMessage(playerid, "Erro ao processar a sua compra, o cofre da sua empresa não possui essa quantia.");

					BusinessData[id][businessVault] -= total_value;

					BusinessData[id][businessBuying] = TempData[playerid][tempProduct];
					BusinessData[id][businessBuyingPrice] = TempData[playerid][tempPrice];

					TempData[playerid][tempProduct] = 0;
					TempData[playerid][tempPrice] = 0;

					Business_Save(id);
					Business_Refresh(id);

					SendGreenMessage(playerid, "Sua empresa está comprando, a partir de agora, %d produto(s) por %s/unit", BusinessData[id][businessBuying], FormatNumber(BusinessData[id][businessBuyingPrice]));
					SendGreenMessage(playerid, "...dando um total de %s. O valor total já foi descontado do cofre.", FormatNumber(total_value));
					SendServerMessage(playerid, "Sua empresa foi listada no TPDA dos caminhoneiros.");
				}
				case 3:
				{
					if(!BusinessData[id][businessBuyingPrice])
						return SendWarningMessage(playerid, "O valor de compra é nulo ou inválido.");

					if(!BusinessData[id][businessBuying])
						return SendWarningMessage(playerid, "A quantidade de produto(s) a ser comprado é nulo ou inválido.");

					new total_value = BusinessData[id][businessBuying] * BusinessData[id][businessBuyingPrice];

					BusinessData[id][businessVault] += total_value;

					BusinessData[id][businessBuying] = 0;
					BusinessData[id][businessBuyingPrice] = 0;

					Business_Save(id);
					Business_Refresh(id);

					SendGreenMessage(playerid, "Sua empresa parou de comprar os produtos. Foi estornado o valor de %s para", FormatNumber(total_value));
					SendGreenMessage(playerid, "...o cofre.");
					SendServerMessage(playerid, "Sua empresa foi retirada do TPDA dos caminhoneiros.");
				}
			}
		}
		else return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");
	}
	else
	{
		Dialog_Show(playerid, BusinessOwnerOptions, DIALOG_STYLE_LIST, "Qual opção você deseja acessar?", "Comprar produtos (estocar)\nAlterar preço dos produtos\nAcessar o cofre\nInformações da empresa", "Selecionar", "<<");
	}

	return 1;
}

Dialog:BusinessStockQuantity(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = Business_Nearest(playerid), quantity;

		if(id == -1)
			return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");

		if(sscanf(inputtext, "d", quantity))
			return Dialog_Show(playerid, BusinessStockQuantity, DIALOG_STYLE_INPUT, "Comprar estoque - quantia:", "Digite abaixo a quantidade que você comprar para a sua empresa:", "Salvar", "<<");

		if(quantity < 1 || quantity >= 99999)
			return Dialog_Show(playerid, BusinessStockQuantity, DIALOG_STYLE_INPUT, "Comprar estoque - quantia:", "Digite abaixo a quantidade que você comprar para a sua empresa:", "Salvar", "<<");

		TempData[playerid][tempProduct] = quantity;

		SendGreenMessage(playerid, "Você configurou a quantidade de produto(s) a ser(em) comprado(s) para %d.", quantity);

		Dialog_Show(playerid, BusinessStockOptions, DIALOG_STYLE_LIST, "Comprar estoque:", "Alterar quantidade a ser comprada\nAlterar preço unitário\n{00FF00}>> Salvar alterações\n{FF0000}>> Parar de comprar", "Selecionar", "<<");
	}
	else
	{
		Dialog_Show(playerid, BusinessStockOptions, DIALOG_STYLE_LIST, "Comprar estoque:", "Alterar quantidade a ser comprada\nAlterar preço unitário\n{00FF00}>> Salvar alterações\n{FF0000}>> Parar de comprar", "Selecionar", "<<");
	}

	return 1;
}

Dialog:BusinessStockValue(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = Business_Nearest(playerid), value;

		if(id == -1)
			return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");

		if(sscanf(inputtext, "d", value))
			return Dialog_Show(playerid, BusinessStockValue, DIALOG_STYLE_INPUT, "Comprar estoque - valor unitário:", "Digite abaixo o valor a ser pago em cada produto comprado:", "Salvar", "<<");

		if(value < 1 || value >= 99999)
			return Dialog_Show(playerid, BusinessStockValue, DIALOG_STYLE_INPUT, "Comprar estoque - valor unitário:", "Digite abaixo o valor a ser pago em cada produto comprado:", "Salvar", "<<");

		TempData[playerid][tempPrice] = value;

		SendGreenMessage(playerid, "Você configurou o valor unitário do(s) produto(s) a ser(em) comprado(s) em %s.", FormatNumber(value));

		Dialog_Show(playerid, BusinessStockOptions, DIALOG_STYLE_LIST, "Comprar estoque:", "Alterar quantidade a ser comprada\nAlterar preço unitário\n{00FF00}>> Salvar alterações\n{FF0000}>> Parar de comprar", "Selecionar", "<<");
	}
	else
	{
		Dialog_Show(playerid, BusinessStockOptions, DIALOG_STYLE_LIST, "Comprar estoque:", "Alterar quantidade a ser comprada\nAlterar preço unitário\n{00FF00}>> Salvar alterações\n{FF0000}>> Parar de comprar", "Selecionar", "<<");
	}

	return 1;
}

Dialog:BusinessProductOptions(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, p_id;

		PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];

		if((id = Business_Nearest(playerid)) != -1)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			Dialog_Show(playerid, BusinessEditPrice, DIALOG_STYLE_INPUT, "Escolha o novo preço para o produto:", "Produto selecionado: %s\nPreço atual: %s\n\nDigite abaixo o novo preço:", "Salvar", "Cancelar", Business_ProductName(BusinessData[id][businessProduct][p_id]), FormatNumber(BusinessData[id][businessProductPrice][p_id]));
		}
		else return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");
	}
	else
	{
		Dialog_Show(playerid, BusinessOwnerOptions, DIALOG_STYLE_LIST, "Qual opção você deseja acessar?", "Comprar produtos (estocar)\nAlterar preço dos produtos\nAcessar o cofre\nInformações da empresa", "Selecionar", "<<");
	}

	return 1;
}

Dialog:BusinessEditPrice(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1, p_id, value;

		if((id = Business_Nearest(playerid)) != -1)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, BusinessEditPrice, DIALOG_STYLE_INPUT, "Escolha o novo preço para o produto:", "Produto selecionado: %s\nPreço atual: %s\n\nDigite abaixo o novo preço:", "Salvar", "Cancelar", Business_ProductName(BusinessData[id][businessProduct][p_id]), FormatNumber(BusinessData[id][businessProductPrice][p_id]));

			if(value < 1)
				return Dialog_Show(playerid, BusinessEditPrice, DIALOG_STYLE_INPUT, "Escolha o novo preço para o produto:", "Produto selecionado: %s\nPreço atual: %s\n\nDigite abaixo o novo preço:", "Salvar", "Cancelar", Business_ProductName(BusinessData[id][businessProduct][p_id]), FormatNumber(BusinessData[id][businessProductPrice][p_id]));

			BusinessData[id][businessProductPrice][p_id] = value;

			Business_Save(id);

			foreach(new i : Pumps) if(PumpData[i][pumpBusinessID] == BusinessData[id][businessID])
			{
				Pump_Refresh(i);
			}

			SendGreenMessage(playerid, "Preço do \"%s\" foi modificado para %s com sucesso.", Business_ProductName(BusinessData[id][businessProduct][p_id]), FormatNumber(BusinessData[id][businessProductPrice][p_id]));
		}
		else return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");
	}

	return 1;
}

//Dialog_Show(playerid, BusinessVaultOptions, DIALOG_STYLE_LIST, "Escolha uma das opções:", "Saldo atual: %s\nAdicionar valor\nRetirar valor", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));
Dialog:BusinessVaultOptions(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = -1;

		if((id = Business_Nearest(playerid)) != -1)
		{
			switch(listitem)
			{
				case 0:
					Dialog_Show(playerid, BusinessVaultOptions, DIALOG_STYLE_LIST, "Escolha uma das opções:", "Saldo atual: %s\nAdicionar valor\nRetirar valor", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));

				case 1:
					Dialog_Show(playerid, BusinessVaultDeposit, DIALOG_STYLE_INPUT, "Cofre da empresa - depositar:", "Digite uma quantia para ser depositada no cofre da empresa:", "Depositar", "<<");

				case 2:
					Dialog_Show(playerid, BusinessVaultWithdraw, DIALOG_STYLE_INPUT, "Cofre da empresa - retirar:", "Digite uma quantia para ser retirada do cofre da empresa:", "Retirar", "<<");

			}
		}
		else return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");
	}
	else
	{
		Dialog_Show(playerid, BusinessOwnerOptions, DIALOG_STYLE_LIST, "Qual opção você deseja acessar?", "Comprar produtos (estocar)\nAlterar preço dos produtos\nAcessar o cofre\nInformações da empresa", "Selecionar", "<<");
	}

	return 1;
}

Dialog:BusinessVaultDeposit(playerid, response, listitem, inputtext[])
{
	new id = -1, value;

	if((id = Business_Nearest(playerid)) != -1)
	{
		if(response)
		{
			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, BusinessVaultDeposit, DIALOG_STYLE_INPUT, "Cofre da empresa - depositar:", "Digite uma quantia para ser depositada no cofre da empresa:", "Depositar", "<<");

			if(value < 1 || value > GetScriptedMoney(playerid))
				return Dialog_Show(playerid, BusinessVaultDeposit, DIALOG_STYLE_INPUT, "Cofre da empresa - depositar:", "Digite uma quantia para ser depositada no cofre da empresa:", "Depositar", "<<");

			BusinessData[id][businessVault] += value;
			GiveScriptedMoney(playerid, - value);

			Business_Save(id);

			SendGreenMessage(playerid, "Valor %s foi depositado com sucesso no cofre da empresa.", FormatNumber(value));
		}
		else
		{
			Dialog_Show(playerid, BusinessVaultOptions, DIALOG_STYLE_LIST, "Escolha uma das opções:", "Saldo atual: %s\nAdicionar valor\nRetirar valor", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));
		}
	}
	else return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");

	return 1;
}

Dialog:BusinessVaultWithdraw(playerid, response, listitem, inputtext[])
{
	new id = -1, value;

	if((id = Business_Nearest(playerid)) != -1)
	{
		if(response)
		{
			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, BusinessVaultWithdraw, DIALOG_STYLE_INPUT, "Cofre da empresa - retirar:", "Digite uma quantia para ser retirada do cofre da empresa:", "Retirar", "<<");

			if(value < 1 || value > BusinessData[id][businessVault])
				return Dialog_Show(playerid, BusinessVaultWithdraw, DIALOG_STYLE_INPUT, "Cofre da empresa - retirar:", "Digite uma quantia para ser retirada do cofre da empresa:", "Retirar", "<<");

			BusinessData[id][businessVault] -= value;
			GiveScriptedMoney(playerid, value);

			Business_Save(id);

			SendGreenMessage(playerid, "Valor %s foi retirado com sucesso do cofre da empresa.", FormatNumber(value));
		}
		else
		{
			Dialog_Show(playerid, BusinessVaultOptions, DIALOG_STYLE_LIST, "Escolha uma das opções:", "Saldo atual: %s\nAdicionar valor\nRetirar valor", "Selecionar", "<<", FormatNumber(BusinessData[id][businessVault]));
		}
	}
	else return SendWarningMessage(playerid, "Você não está próximo a entrada da sua empresa ou não é o proprietário.");

	return 1;
}

Dialog:IndustryEdit(playerid, response, listitem, inputtext[])
{
	new id, count;

	sz_MiscString[0] = 0;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
					Dialog_Show(playerid, IndustryEditName, DIALOG_STYLE_INPUT, "Editar nome:", "Digite abaixo o novo nome para a indústria:\nINFO: O limite de caractéres é de 128.", "Editar", "<<");

				case 1: //Venda
				{
					for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++) if(IndustryData[id][industryProduct][i])
					{
						format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, i + 1,  Industry_ProductName(IndustryData[id][industryProduct][i]));
						ListedOptions[playerid][count++] = i;
					}

					if(!count)
						return SendWarningMessage(playerid, "Essa indústria não vende produto.");

					Dialog_Show(playerid, IndustrySellList, DIALOG_STYLE_LIST, "Escolha o produto a ser editado:", sz_MiscString, "Selecionar", "<<");
				}

				case 2: //Compra
				{
					for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++) if(IndustryData[id][industryBuying][i])
					{
						format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, i + 1,  Industry_ProductName(IndustryData[id][industryBuying][i]));
						ListedOptions[playerid][count++] = i;
					}

					if(!count)
						return SendWarningMessage(playerid, "Essa indústria não compra produto.");

					Dialog_Show(playerid, IndustryBuyList, DIALOG_STYLE_LIST, "Escolha o produto a ser editado:", sz_MiscString, "Selecionar", "<<");
				}
			}
		}
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustryEditName(playerid, response, listitem, inputtext[])
{
	new id, string[128];

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			if(sscanf(inputtext, "s[128]", string))
				return Dialog_Show(playerid, IndustryEditName, DIALOG_STYLE_INPUT, "Editar nome:", "Digite abaixo o novo nome para a indústria:\nINFO: O limite de caractéres é de 128.", "Editar", "<<");

			format(IndustryData[id][industryName], 128, string);

			Industry_Save(id);
			Industry_Refresh(id);

			SendAdminAction(playerid, "Nome da indústria alterado para \"%s\" com sucesso.", string);
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustrySellList(playerid, response, listitem, inputtext[])
{
	new id, p_id;

	PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			Dialog_Show(playerid, IndustrySellOptions, DIALOG_STYLE_LIST, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Preço de venda\nEstoque\nEstoque máximo", "Selecionar", "Cancelar");
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustrySellOptions(playerid, response, listitem, inputtext[])
{
	new id, p_id;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			switch(listitem)
			{
				case 0:
					Dialog_Show(playerid, IndustrySellPrice, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Preço atual: %s\n\nDigite o novo preço abaixo:", "Salvar", "Cancelar", FormatNumber(IndustryData[id][industryProductPrice][p_id]));

				case 1:
					Dialog_Show(playerid, IndustrySellStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Estoque atual: %d\n\nDigite o novo preço abaixo:", "Salvar", "Cancelar", IndustryData[id][industryProductStock][p_id]);

				case 2:
					Dialog_Show(playerid, IndustrySellMaxStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Estoque máximo atual: %d\n\nDigite o novo preço abaixo:", "Salvar", "Cancelar", IndustryData[id][industryProductMaxStock][p_id]);
			}
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustrySellPrice(playerid, response, listitem, inputtext[])
{
	new id, p_id, value;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];
			
			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, IndustrySellPrice, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Preço atual: %s\n\nDigite o novo preço abaixo:", "Salvar", "Cancelar", FormatNumber(IndustryData[id][industryProductPrice][p_id]));

			if(value < 0 || value > 1000)
				return Dialog_Show(playerid, IndustrySellPrice, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Preço atual: %s\n\nDigite o novo preço abaixo:", "Salvar", "Cancelar", FormatNumber(IndustryData[id][industryProductPrice][p_id]));

			IndustryData[id][industryProductPrice][p_id] = value;

			Industry_Save(id);

			SendAdminAction(playerid, "Preço do produto alterado para %s com sucesso.", FormatNumber(value));
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustrySellStock(playerid, response, listitem, inputtext[])
{
	new id, p_id, value;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];
		
			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, IndustrySellStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Estoque atual: %d\n\nDigite o novo estoque abaixo:", "Salvar", "Cancelar", IndustryData[id][industryProductStock][p_id]);

			if(value < 0 || value > 1000)
				return Dialog_Show(playerid, IndustrySellStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Estoque atual: %d\n\nDigite o novo estoque abaixo:", "Salvar", "Cancelar", IndustryData[id][industryProductStock][p_id]);

			IndustryData[id][industryProductStock][p_id] = value;

			Industry_Save(id);

			SendAdminAction(playerid, "Estoque do produto alterado para %d com sucesso.", value);
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustrySellMaxStock(playerid, response, listitem, inputtext[])
{
	new id, p_id, value;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, IndustrySellMaxStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Estoque máximo atual: %d\n\nDigite o novo máximo de estoque:", "Salvar", "Cancelar", IndustryData[id][industryProductMaxStock][p_id]);

			if(value < 0 || value > 1000)
				return Dialog_Show(playerid, IndustrySellMaxStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Estoque máximo atual: %d\n\nDigite o novo máximo de estoque:", "Salvar", "Cancelar", IndustryData[id][industryProductMaxStock][p_id]);

			IndustryData[id][industryProductMaxStock][p_id] = value;

			Industry_Save(id);

			SendAdminAction(playerid, "Estoque máximo do produto alterado para %d com sucesso.", value);
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustryBuyList(playerid, response, listitem, inputtext[])
{
	new id, p_id;

	PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			Dialog_Show(playerid, IndustryBuyOptions, DIALOG_STYLE_LIST, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Preço de venda\nEstoque\nEstoque máximo", "Selecionar", "Cancelar");
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustryBuyOptions(playerid, response, listitem, inputtext[])
{
	new id, p_id;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			switch(listitem)
			{
				case 0:
					Dialog_Show(playerid, IndustryBuyPrice, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Preço atual: %s\n\nDigite o novo preço abaixo:", "Salvar", "Cancelar", FormatNumber(IndustryData[id][industryBuyingPrice][p_id]));

				case 1:
					Dialog_Show(playerid, IndustryBuyStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Estoque atual: %d\n\nDigite o novo estoque abaixo:", "Salvar", "Cancelar", IndustryData[id][industryBuyingStock][p_id]);

				case 2:
					Dialog_Show(playerid, IndustryBuyMaxStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryProduct][p_id])), "Estoque máximo atual: %d\n\nDigite o novo máximo de estoque:", "Salvar", "Cancelar", IndustryData[id][industryBuyingMaxStock][p_id]);
			}
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustryBuyPrice(playerid, response, listitem, inputtext[])
{
	new id, p_id, value;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];
			
			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, IndustryBuyPrice, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryBuying][p_id])), "Preço atual: %s\n\nDigite o novo preço abaixo:", "Salvar", "Cancelar", FormatNumber(IndustryData[id][industryBuyingPrice][p_id]));

			if(value < 0 || value > 1000)
				return Dialog_Show(playerid, IndustryBuyPrice, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryBuying][p_id])), "Preço atual: %s\n\nDigite o novo preço abaixo:", "Salvar", "Cancelar", FormatNumber(IndustryData[id][industryBuyingPrice][p_id]));

			IndustryData[id][industryBuyingPrice][p_id] = value;

			Industry_Save(id);

			SendAdminAction(playerid, "Preço do produto alterado para %s com sucesso.", FormatNumber(value));
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustryBuyStock(playerid, response, listitem, inputtext[])
{
	new id, p_id, value;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, IndustryBuyStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryBuying][p_id])), "Estoque atual: %d\n\nDigite o novo estoque abaixo:", "Salvar", "Cancelar", IndustryData[id][industryBuyingStock][p_id]);

			if(value < 0 || value > 1000)
				return Dialog_Show(playerid, IndustryBuyStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryBuying][p_id])), "Estoque atual: %d\n\nDigite o novo estoque abaixo:", "Salvar", "Cancelar", IndustryData[id][industryBuyingStock][p_id]);

			IndustryData[id][industryBuyingStock][p_id] = value;

			Industry_Save(id);

			SendAdminAction(playerid, "Estoque do produto alterado para %d com sucesso.", value);
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:IndustryBuyMaxStock(playerid, response, listitem, inputtext[])
{
	new id, p_id, value;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(response)
		{
			p_id = PlayerData[playerid][pSelectedSlot];

			if(sscanf(inputtext, "d", value))
				return Dialog_Show(playerid, IndustryBuyMaxStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryBuying][p_id])), "Estoque máximo atual: %d\n\nDigite o novo máximo de estoque:", "Salvar", "Cancelar", IndustryData[id][industryBuyingMaxStock][p_id]);

			if(value < 0 || value > 1000)
				return Dialog_Show(playerid, IndustryBuyMaxStock, DIALOG_STYLE_INPUT, sprintf("Editar produto (%s):", Industry_ProductName(IndustryData[id][industryBuying][p_id])), "Estoque máximo atual: %d\n\nDigite o novo máximo de estoque:", "Salvar", "Cancelar", IndustryData[id][industryBuyingMaxStock][p_id]);

			IndustryData[id][industryBuyingMaxStock][p_id] = value;

			Industry_Save(id);

			SendAdminAction(playerid, "Estoque máximo do produto alterado para %d com sucesso.", value);
		}
		else
			callcmd::editarindustria(playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup da indústria.");

	return 1;
}

Dialog:TeleportList(playerid, response, listitem, inputtext[])
{
	new id;

	if(response)
	{
		if(!listitem)
			return Dialog_Show(playerid, TeleportRequest, DIALOG_STYLE_INPUT, "Buscar por teleporte:", "Digite abaixo o nome do teleporte:\nINFO: Limite mínimo de 3 e máximo de 10 caracteres.", "Pesquisar", "<<");

		if(!strcmp(inputtext, ">> Próxima Página", true))
			return Teleport_Show(playerid, PlayerData[playerid][pPage] + 1);

		if(!strcmp(inputtext, "<< Página Anterior", true))
			return Teleport_Show(playerid, PlayerData[playerid][pPage] - 1);

		id = ListedOptions[playerid][listitem];

		if(IsPlayerInAnyVehicle(playerid))
		{
			AC_SetVehiclePos(GetPlayerVehicleID(playerid), TeleportData[id][teleportX], TeleportData[id][teleportY], TeleportData[id][teleportZ]);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), TeleportData[id][teleportInterior]);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), TeleportData[id][teleportWorld]);
		}
		else
		{
			AC_SetPlayerPos(playerid, TeleportData[id][teleportX], TeleportData[id][teleportY], TeleportData[id][teleportZ]);
		}
		
		SetPlayerInterior(playerid, TeleportData[id][teleportInterior]);
		SetPlayerVirtualWorld(playerid, TeleportData[id][teleportWorld]);
		PlayerData[playerid][pEntrance] = -1;
		PlayerData[playerid][pHouse] = -1;
		PlayerData[playerid][pBusiness] = -1;
		PlayerData[playerid][pComplex] = -1;

		SendAdminAction(playerid, "Você teleportou até: \"%s\".", TeleportData[id][teleportDesc]);
	}
	return 1;
}

Dialog:TeleportRequest(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new query[100], string[10 + 1];

		if(sscanf(inputtext, "s[11]", string))
			return Dialog_Show(playerid, TeleportRequest, DIALOG_STYLE_INPUT, "Buscar por teleporte:", "Digite abaixo o nome do teleporte:\nINFO: Limite mínimo de 3 e máximo de 10 caracteres..", "Pesquisar", "<<");

		if(strlen(string) < 3 || strlen(string) > 10)
			return Dialog_Show(playerid, TeleportRequest, DIALOG_STYLE_INPUT, "Buscar por teleporte:", "Digite abaixo o nome do teleporte:\nINFO: Limite mínimo de 3 e máximo de 10 caracteres.", "Pesquisar", "<<");

		mysql_format(this, query, sizeof(query), "SELECT * FROM teleportes WHERE teleportDesc LIKE '%s%s%s' LIMIT 15", "%%", string, "%%");
		mysql_tquery(this, query, "OnTeleportRequest", "d", playerid);
	}
	else
	{
		Teleport_Show(playerid, PlayerData[playerid][pPage]);
	}

	return 1;
}

Dialog:TeleportRequestList(playerid, response, listitem, inputtext[])
{
	new id;

	if(response)
	{
		id = ListedOptions[playerid][listitem];

		if(IsPlayerInAnyVehicle(playerid))
		{
			AC_SetVehiclePos(GetPlayerVehicleID(playerid), TeleportData[id][teleportX], TeleportData[id][teleportY], TeleportData[id][teleportZ]);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), TeleportData[id][teleportInterior]);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), TeleportData[id][teleportWorld]);
		}
		else
		{
			AC_SetPlayerPos(playerid, TeleportData[id][teleportX], TeleportData[id][teleportY], TeleportData[id][teleportZ]);
		}
		
		SetPlayerInterior(playerid, TeleportData[id][teleportInterior]);
		SetPlayerVirtualWorld(playerid, TeleportData[id][teleportWorld]);
		PlayerData[playerid][pEntrance] = -1;
		PlayerData[playerid][pHouse] = -1;
		PlayerData[playerid][pBusiness] = -1;
		PlayerData[playerid][pComplex] = -1;

		SendAdminAction(playerid, "Você teleportou até: \"%s\".", TeleportData[id][teleportDesc]);
	}
	else
	{
		Teleport_Show(playerid, PlayerData[playerid][pPage]);
	}
	return 1;
}

Dialog:TPDA(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new count;

		sz_MiscString[0] = 0;

		switch(listitem)
		{
			case 0: //ind. primaria
			{
				foreach(new i : Industry) if(IndustryData[i][industryType] == INDUSTRY_PRIMARIA)
				{
					format(sz_MiscString, sizeof(sz_MiscString), "%s%s\n", sz_MiscString, IndustryData[i][industryName]);
					ListedOptions[playerid][count++] = i;
				}

				Dialog_Show(playerid, TPDASelectIndustry, DIALOG_STYLE_LIST, "Escolha a indústria primária:", sz_MiscString, "Selecionar", "<<");
			}
			case 1: //ind secundaria
			{
				foreach(new i : Industry) if(IndustryData[i][industryType] == INDUSTRY_SECUNDARIA)
				{
					format(sz_MiscString, sizeof(sz_MiscString), "%s%s\n", sz_MiscString, IndustryData[i][industryName]);
					ListedOptions[playerid][count++] = i;
				}

				Dialog_Show(playerid, TPDASelectIndustry, DIALOG_STYLE_LIST, "Escolha a indústria secundária:", sz_MiscString, "Selecionar", "<<");
			}
			case 2: //empresas comprando prod
			{
				format(sz_MiscString, sizeof(sz_MiscString), "Empresa\tProduto\tPreço ($) / caixa\tQuantidade\n");
				foreach(new i : Business) if(BusinessData[i][businessBuying])
				{
					format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%s\t%s\t%d unidades\n", sz_MiscString, BusinessData[i][businessName], Industry_ProductName(BusinessData[i][businessBuyingProduct]), FormatNumber(BusinessData[i][businessBuyingPrice]), BusinessData[i][businessBuying]);
					ListedOptions[playerid][count++] = i;
				}

				if(!count)
					return SendWarningMessage(playerid, "O sistema TPDA não conseguiu encontrar uma empresa comprando por produtos.");

				Dialog_Show(playerid, TPDABusiness, DIALOG_STYLE_TABLIST_HEADERS, "Escolha a empresa:", sz_MiscString, "Selecionar", "<<");
			}
			case 3: //inf sobre exportacao
			{
				format(sz_MiscString, sizeof(sz_MiscString), "{FFFFFF}Bem vindo a {FFFF00}P.R Import&Export LLC{FFFFFF}.\n\nProgramação do navio (horários aproximados):\nO navio tem seu estoque resetado a cada hora zerada.\n\n{FFFFFF}Não vendemos produtos.\n\nEstamos à procura de:\n");

				format(sz_MiscString, sizeof(sz_MiscString), "%s{828893}Produto\t\tPreço ($)\t\tEstoque atual (máximo)\n", sz_MiscString);
				
				foreach(new i : Industry) if(IndustryData[i][industrySection] == SECTION_EXPORT)
				{
					for(new a = 0; a < MAX_INDUSTRY_PRODUCT; a++) if(IndustryData[i][industryBuying][a])
					{
						format(sz_MiscString, sizeof(sz_MiscString), "%s{FFFFFF}%s\t\t%s\t\t%d (%d)\n", sz_MiscString, Industry_ProductName(IndustryData[i][industryBuying][a]), FormatNumber(IndustryData[i][industryBuyingPrice][a]), IndustryData[i][industryBuyingStock][a], IndustryData[i][industryBuyingMaxStock][a]);
					}

					break;
				}

				Dialog_Show(playerid, TPDAExport, DIALOG_STYLE_MSGBOX, "Informações de exportação:", sz_MiscString, "Fechar", "<<");
			}
		}
	}

	return 1;
}

Dialog:TPDASelectIndustry(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = ListedOptions[playerid][listitem];

		Waypoint_Set(playerid, IndustryData[id][industryName], IndustryData[id][industryX], IndustryData[id][industryY], IndustryData[id][industryZ]);

		SendGreenMessage(playerid, "Indústria \"%s\" foi marcada no seu mini-mapa.", IndustryData[id][industryName]);
	}
	else
	{
		callcmd::tpda(playerid);
	}

	return 1;
}

Dialog:TPDABusiness(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = ListedOptions[playerid][listitem];

		Waypoint_Set(playerid, BusinessData[id][businessName], BusinessData[id][businessX], BusinessData[id][businessY], BusinessData[id][businessZ]);

		SendGreenMessage(playerid, "Empresa \"%s\" foi marcada no seu mini-mapa.", BusinessData[id][businessName]);
	}
	else
	{
		callcmd::tpda(playerid);
	}

	return 1;
}

Dialog:TPDAExport(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		callcmd::tpda(playerid);
	}

	return 1;
}

Dialog:EditAnticheat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];

		Dialog_Show(playerid, OptionAnticheat, DIALOG_STYLE_LIST, inputtext, "Alterar para: alerta no painel\nAlterar para: kickar jogador\nAlterar para: banir jogador", "Salvar", "<<");
	}

	return 1;
}

Dialog:OptionAnticheat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pSelectedSlot], string[34];

		switch(listitem)
		{
			case 0:
			{
				ServerAC[id][acAction] = AC_WARN;
				format(string, sizeof(string), "alertar no painel administrativo.");
			}
			case 1:
			{
				ServerAC[id][acAction] = AC_KICK;
				format(string, sizeof(string), "kickar o jogador suspeito.");
			}
			case 2:
			{
				ServerAC[id][acAction] = AC_BAN;
				format(string, sizeof(string), "banir o jogador suspeito.");
			}
		}

		SendAdminAction(playerid, "Anticheat \"%s\" configurado para: %s", ServerAC[id][acName], string);

		SendAdminMessage(COLOR_WARNING, "ServerAC: Admin %s (ID: %d) alterou a configuração do \"%s\" para: %s", ReturnName(playerid, 0), playerid, ServerAC[id][acName], string);
	
		AC_Save();
	}
	else
	{
		callcmd::editaranticheat(playerid);
	}

	return 1;
}

Dialog:AdList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!strcmp(inputtext, ">> Próxima Página", true))
			return Ad_Show(playerid, PlayerData[playerid][pPage] + 1);

		if(!strcmp(inputtext, "<< Página Anterior", true))
			return Ad_Show(playerid, PlayerData[playerid][pPage] - 1);

		if(PlayerData[playerid][pAdmin])
		{
			PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];
			Dialog_Show(playerid, AdListEdit, DIALOG_STYLE_LIST, "Escolha a opção:", "Remover anúncio", "Selecionar", "<<");
		}
	}

	return 1;
}

Dialog:AdListEdit(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pSelectedSlot];
		switch(listitem)
		{
			case 0:
			{
				SendAdminAction(playerid, "Anúncio removido da lista com sucesso.");

				new query[75];

				mysql_format(this, query, sizeof(query), "UPDATE advertisements SET adInQueue = '0' WHERE adID = '%d'", id);
				mysql_tquery(this, query);

				PlayerData[playerid][pSelectedSlot] = 0;
			}
		}
	}
	else
	{
		Ad_Show(playerid, PlayerData[playerid][pPage]);
	}

	return 1;
}

Dialog:PrimeAccount(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		Dialog_Show(playerid, PrimeList, DIALOG_STYLE_TABLIST, "Seus benefícios:", "Trocas de nomes\t%d\nPlaca personalizada\t%d\nCriar família\t%d", "Selecionar", "Cancelar", PlayerData[playerid][pNameChange], PlayerData[playerid][pCustomPlate], PlayerData[playerid][pCreateFamily]);
	}

	return 1;
}

Dialog:PrimeList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(!PlayerData[playerid][pNameChange])
					return SendWarningMessage(playerid, "Não há \"namechanges\" disponíveis na sua conta.");

				Dialog_Show(playerid, NamechangeCheck, DIALOG_STYLE_INPUT, "Alterar nome:", "Digite abaixo o novo nome para o seu personagem:\nINFO: Siga o formato Nome_Sobrenome", "Confirmar", "<<");
			}
			case 1:
			{
				if(!PlayerData[playerid][pCustomPlate])
					return SendWarningMessage(playerid, "Não há \"trocas de placa\" disponíveis na sua conta.");

				new string[300], count;

				foreach(new i : Vehicles) if(Vehicle_IsOwner(playerid, i))
				{
					format(string, sizeof(string), "%s%s (%s)\n", string, ReturnVehicleModelName(VehicleData[i][vehicleModel]), VehicleData[i][vehiclePlate]);
					ListedOptions[playerid][count++] = i;
				}

				if(!count)
					return SendWarningMessage(playerid, "Você não tem um veículo ou não está spawnado.");

				Dialog_Show(playerid, CustomplateSelect, DIALOG_STYLE_LIST, "Escolha o veículo:", string, "Selecionar", "<<");

			}
			case 2:
			{
				if(!PlayerData[playerid][pCreateFamily])
					return SendWarningMessage(playerid, "Não há \"criar família\" disponíveis na sua conta.");

				Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Criar uma família:", "{FFFFFF}Para criar uma família, siga os passos abaixos:\n\t- Use o comando /criarfamília;\n\t- Os parâmetros são: Sigla e Nome da Família.\n\t- Exemplo: /criarfamilia ABC Abcdário\n\nApós criado, será lhe concedido acesso total ao menu /gerenciarfamilia.", "Entendi", "");
			}
		}
	}

	return 1;
}

Dialog:NamechangeCheck(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new newname[MAX_PLAYER_NAME], query[80];

		if(sscanf(inputtext, "s[24]", newname))
			return Dialog_Show(playerid, NamechangeCheck, DIALOG_STYLE_INPUT, "Alterar nome:", "Digite abaixo o novo nome para o seu personagem:\nINFO: Siga o formato Nome_Sobrenome", "Confirmar", "<<");

		if(!IsValidRoleplayName(newname))
			return Dialog_Show(playerid, NamechangeCheck, DIALOG_STYLE_INPUT, "Alterar nome:", "Nome inválido!!\n\nDigite abaixo o novo nome para o seu personagem:\nINFO: Siga o formato Nome_Sobrenome", "Confirmar", "<<");

		if(strlen(newname) < 6 || strlen(newname) > 24)
			return Dialog_Show(playerid, NamechangeCheck, DIALOG_STYLE_INPUT, "Alterar nome:", "Nome inválido!!\n\nDigite abaixo o novo nome para o seu personagem:\nINFO: Siga o formato Nome_Sobrenome", "Confirmar", "<<");
	
		mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Name = '%e'", newname);
		mysql_tquery(this, query, "OnNameCheck", "ds", playerid, newname);
	}
	else
	{
		Dialog_Show(playerid, PrimeList, DIALOG_STYLE_TABLIST, "Seus benefícios:", "Trocas de nomes\t%d\nPlaca personalizada\t%d\nCriar família\t%d", "Selecionar", "Cancelar", PlayerData[playerid][pNameChange], PlayerData[playerid][pCustomPlate], PlayerData[playerid][pCreateFamily]);
	}
	return 1;
}

Dialog:NameExists(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		Dialog_Show(playerid, NamechangeCheck, DIALOG_STYLE_INPUT, "Alterar nome:", "Digite abaixo o novo nome para o seu personagem:\nINFO: Siga o formato Nome_Sobrenome", "Confirmar", "<<");
	}

	return 1;
}

Dialog:NameNoExists(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new formername[MAX_PLAYER_NAME], newname[MAX_PLAYER_NAME], query[152];
		GetPVarString(playerid, "NewName", newname, MAX_PLAYER_NAME);
		format(formername, sizeof(formername), ReturnName(playerid));

		//Trocar nome da Database, Puta que pariu quanta coisa (devo indexar em player_id :thinking: ??????)
		mysql_format(this, query, sizeof(query), "INSERT INTO namechanges (UserID, OldName, NewName, Date) VALUES ('%d', '%e', '%e', NOW())", PlayerData[playerid][pID], formername, newname);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE player_banned SET Name = '%e' WHERE Name = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE players SET Name = '%e' WHERE Name = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE mascaras_atuais SET maskOwner = '%e' WHERE maskOwner = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE mascaras_antigas SET maskLastOwner = '%e' WHERE maskLastOwner = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE carros SET vehicleOwnerName = '%e' WHERE vehicleOwnerName = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE casas SET houseOwnerName = '%e' WHERE houseOwnerName = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE business SET businessOwnerName = '%e' WHERE businessOwnerName = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE player_banned SET Admin = '%e' WHERE Admin = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE multas SET ticketBy = '%e' WHERE ticketBy = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE carrosapreendidos SET officer = '%e' WHERE officer = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE itensdropados SET itemPlayer = '%e' WHERE itemPlayer = '%e'", newname, formername);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE refunds SET refundAdmin = '%e' WHERE refundAdmin = '%e'", newname, formername);
		mysql_tquery(this, query);

		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Troca de nome efetuatada com sucesso", "Seu nome foi alterado com sucesso para: \"%s\".\nTodos os registros foram atualizados para o seu novo nome.", "Fechar", "", newname);
	
		foreach(new i : Business) if(BusinessData[i][businessOwnerID] == PlayerData[playerid][pID])
		{
			format(BusinessData[i][businessOwnerName], 24, newname);
			Business_Refresh(i);
		}

		foreach(new i : Houses) if(HouseData[i][houseOwner] == PlayerData[playerid][pID])
		{
			format(HouseData[i][houseOwnerName], 24, newname);
		}

		foreach(new i : Vehicles) if(VehicleData[i][vehicleOwnerID] == PlayerData[playerid][pID])
		{
			format(VehicleData[i][vehicleOwnerName], 24, newname);
		}

		SetPlayerName(playerid, newname);

		PlayerData[playerid][pNameChange]--;

		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou o nome para: %s.", formername, newname);
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) alterou o seu nome para %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], newname);
	}
	else
	{
		Dialog_Show(playerid, NamechangeCheck, DIALOG_STYLE_INPUT, "Alterar nome:", "Digite abaixo o novo nome para o seu personagem:\nINFO: Siga o formato Nome_Sobrenome", "Confirmar", "<<");
	}

	return 1;
}

Dialog:CustomplateSelect(playerid, response, listitem, inputtext[])
{//dialog_PrimeList(playerid, 1, 2, "\1");
	if(response)
	{
		PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];

		new id = PlayerData[playerid][pSelectedSlot];

		Dialog_Show(playerid, CustomplateCheck, DIALOG_STYLE_INPUT, "Alterar placa:", "Digite a nova placa para o veículo \"%s\".\nINFO: Não exceda o limite de 8 caracteres.", "Confirmar", "<<", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
	}
	else
	{
		Dialog_Show(playerid, PrimeList, DIALOG_STYLE_TABLIST, "Seus benefícios:", "Trocas de nomes\t%d\nPlaca personalizada\t%d\nCriar família\t%d", "Selecionar", "Cancelar", PlayerData[playerid][pNameChange], PlayerData[playerid][pCustomPlate], PlayerData[playerid][pCreateFamily]);
	}

	return 1;
}

Dialog:CustomplateCheck(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new newplate[16], id = PlayerData[playerid][pSelectedSlot], query[80];

		if(sscanf(inputtext, "s[16]", newplate))
			return Dialog_Show(playerid, CustomplateCheck, DIALOG_STYLE_INPUT, "Alterar placa:", "Digite a nova placa para o veículo \"%s\".\nINFO: Não exceda o limite de 8 caracteres.", "Confirmar", "<<", ReturnVehicleModelName(VehicleData[id][vehicleModel]));

		if(strlen(newplate) > 8)
			return Dialog_Show(playerid, CustomplateCheck, DIALOG_STYLE_INPUT, "Alterar placa:", "Digite a nova placa para o veículo \"%s\".\nINFO: Não exceda o limite de 8 caracteres.", "Confirmar", "<<", ReturnVehicleModelName(VehicleData[id][vehicleModel]));

		if(!strcmp(newplate, "GOV", true) || !strcmp(newplate, "POLICE", true) || !strcmp(newplate, "SAE", true) || !strcmp(newplate, "O estado", true))
			return Dialog_Show(playerid, CustomplateCheck, DIALOG_STYLE_INPUT, "Alterar placa:", "Digite a nova placa para o veículo \"%s\".\nINFO: Não exceda o limite de 8 caracteres.", "Confirmar", "<<", ReturnVehicleModelName(VehicleData[id][vehicleModel]));

		mysql_format(this, query, sizeof(query), "SELECT * FROM carros WHERE vehiclePlate = '%e'", newplate);
		mysql_tquery(this, query, "OnPlateCheck", "ds", playerid, newplate);
	}
	else
	{
		dlg_PrimeList(playerid, 1, 1, "\1");
	}

	return 1;
}

this::OnPlateCheck(playerid, newplate[])
{
	new rows, id = PlayerData[playerid][pSelectedSlot];
	cache_get_row_count(rows);

	if(rows)
	{
		Dialog_Show(playerid, PlateExists, DIALOG_STYLE_MSGBOX, "Erro ao trocar placa:", "A placa informada \"%s\" já está sendo utilizada por outro veículo.\nEscolha uma outra placa e refaça o procedimento.", "<<", "Fechar", newplate);
	}
	else
	{
		SetPVarString(playerid, "NewPlate", newplate);

		Dialog_Show(playerid, PlateNoExists, DIALOG_STYLE_MSGBOX, "Alterar placa do veículo:", "A placa \"%s\" está disponível.\nVocê está prestes a trocar a placa do veículo \"%s\".\nVocê confirma a troca da placa?", "Sim", "Não", newplate, ReturnVehicleModelName(VehicleData[id][vehicleModel]));
	}

	return 1;
}

Dialog:PlateExists(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pSelectedSlot];

		Dialog_Show(playerid, CustomplateCheck, DIALOG_STYLE_INPUT, "Alterar placa:", "Digite a nova placa para o veículo \"%s\".\nINFO: Não exceda o limite de 8 caracteres.", "Confirmar", "<<", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
	}

	return 1;
}

Dialog:PlateNoExists(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = PlayerData[playerid][pSelectedSlot], query[80], newplate[10];

		GetPVarString(playerid, "NewPlate", newplate, 10);

		mysql_format(this, query, sizeof(query), "UPDATE carros SET vehiclePlate = '%e' WHERE vehiclePlate = '%e'", newplate, VehicleData[id][vehiclePlate]);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE carrosapreendidos SET plate = '%e' WHERE plate = '%e'", newplate, VehicleData[id][vehiclePlate]);
		mysql_tquery(this, query);

		PlayerData[playerid][pCustomPlate]--;

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) alterou a placa do veículo %s (uid: %d) de %s para %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehicleID], VehicleData[id][vehiclePlate], newplate);

		format(VehicleData[id][vehiclePlate], 10, newplate);
		SetVehicleNumberPlate(id, VehicleData[id][vehiclePlate]);

		Vehicle_Save(id);		

		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Troca da placa efetuada com sucesso", "Você alterou a placa do seu veículo \"%s\" para a placa \"%s\".", "Fechar", "", ReturnVehicleModelName(VehicleData[id][vehicleModel]), newplate);
	}
	else
	{
		Dialog_Show(playerid, PrimeList, DIALOG_STYLE_TABLIST, "Seus benefícios:", "Trocas de nomes\t%d\nPlaca personalizada\t%d\nCriar família\t%d", "Selecionar", "Cancelar", PlayerData[playerid][pNameChange], PlayerData[playerid][pCustomPlate], PlayerData[playerid][pCreateFamily]);
	}

	return 1;
}

Dialog:HouseInteriorList(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = ListedOptions[playerid][listitem];
		
		if(!strcmp(inputtext, ">> Próxima Página", true))
			return HouseInterior_Show(playerid, PlayerData[playerid][pPage] + 1);

		if(!strcmp(inputtext, "<< Página Anterior", true))
			return HouseInterior_Show(playerid, PlayerData[playerid][pPage] - 1);

		AC_SetPlayerPos(playerid, arrHouseInteriors[id][eHouseX], arrHouseInteriors[id][eHouseY], arrHouseInteriors[id][eHouseZ]);
		SetPlayerInterior(playerid, arrHouseInteriors[id][eHouseInterior]);

		SendAdminAction(playerid, "Você teleportou até o interior: %s.", arrHouseInteriors[id][eHouseIntName]);
		SendClientMessageEx(playerid, COLOR_ADMIN, "INFO: Para setar este interior em uma casa use o ID: %d.", id);
	}

	return 1;
}

Dialog:EditChopshop(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id;

		if((id = Chopshop_Nearest(playerid)) != -1)
		{
			PlayerData[playerid][pSelectedSlot] = listitem;

			Dialog_Show(playerid, EditCSWantedCar, DIALOG_STYLE_INPUT, "Alterar veículo:", "Veículo atual: %s\n\nDigite o modelo do veículo:", "Salvar", "<<", ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][listitem]));
		}
		else
		{
			SendWarningMessage(playerid, "Você não está próximo de um desmanche.");
		}
	}

	return 1;
}

Dialog:EditCSWantedCar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id;

		if((id = Chopshop_Nearest(playerid)) != -1)
		{
			new model, slotid = PlayerData[playerid][pSelectedSlot];

			if(sscanf(inputtext, "d", model))
				return Dialog_Show(playerid, EditCSWantedCar, DIALOG_STYLE_INPUT, "Alterar veículo:", "Digite o Modelo ID!!\n\nVeículo atual: %s\n\nDigite o modelo do veículo:", "Salvar", "<<", ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][slotid]));

			if(model < 400 || model > 611)
				return Dialog_Show(playerid, EditCSWantedCar, DIALOG_STYLE_INPUT, "Alterar veículo:", "ID Inválido!!\nUse de 400 à 611\n\n.Veículo atual: %s\n\nDigite o modelo do veículo:", "Salvar", "<<", ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][slotid]));
			
			SendAdminAction(playerid, "Você alterou o Slot ID: %d do desmanche para %s com sucesso.", slotid + 1, ReturnVehicleModelName(model));

			ChopshopData[id][chopshopCarWanted][slotid] = model;
			Chopshop_Refresh(id);
			Chopshop_Save(id);
		}
		else
		{
			SendWarningMessage(playerid, "Você não está próximo de um desmanche.");
		}
	}
	else
	{
		callcmd::editardesmanche(playerid);
	}

	return 1;
}

Dialog:EditGroup(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, EditGroupName, DIALOG_STYLE_INPUT, "Editar nome do grupo:", "Digite o novo nome para o grupo:\nINFO: Limite máximo de 64 caracteres.", "Alterar", "<<");
			}
			case 1:
			{
				new query[65];

				mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d' AND GrupoRank < 4", PlayerData[playerid][pGroupID]);
				mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 1);
			}
			case 2:
			{
				new string[32 * 3];

				for(new i = 0; i < 4; i++)
				{
					format(string, sizeof(string), "%s%d. %s\n", string, i + 1, GroupRanks[PlayerData[playerid][pGroup]][i]);
				}

				Dialog_Show(playerid, ManageGroupRanks, DIALOG_STYLE_LIST, "Gerenciar funções:", string, "Selecionar", "<<");
			}
			case 3:
			{
				Dialog_Show(playerid, DeleteGroup, DIALOG_STYLE_MSGBOX, "Confirmar exclusão do grupo:", "{FFFFFF}Você deseja excluir o grupo: \"{00FF00}%s{FFFFFF}\"?", "Confirmar", "<<", Group_GetName(playerid));
			}
		}
	}
	
	return 1;
}

Dialog:EditGroupName(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new name[64];

		if(sscanf(inputtext, "s[64]", name))
			return Dialog_Show(playerid, EditGroupName, DIALOG_STYLE_INPUT, "Editar nome do grupo:", "Digite um nome!!\n\nDigite o novo nome para o grupo:\nINFO: Limite máximo de 64 caracteres.", "Alterar", "<<");
	
		format(GroupData[PlayerData[playerid][pGroup]][groupName], 64, name);

		Group_Save(PlayerData[playerid][pGroup]);

		SendGreenMessage(playerid, "Nome do grupo alterado com sucesso para: \"%s\".", name);
	}
	else
	{
		Dialog_Show(playerid, EditGroup, DIALOG_STYLE_LIST, "Escolha a opção para gerenciar:", "Alterar nome\nGerenciar membros\nGerenciar funções\n{FFFF00}Deletar grupo", "Selecionar", "Cancelar");
	}

	return 1;
}

Dialog:ManageGroupMembers(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(!listitem)
		{	
			new query[45];

			mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d'", PlayerData[playerid][pGroupID]);
			return mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 2);	
		}

		PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];

		Dialog_Show(playerid, SelectedMemberGroup, DIALOG_STYLE_LIST, inputtext, "Alterar função\n{FFFF00}Remover do grupo", "Selecionar", "<<");
	}
	else
	{
		Dialog_Show(playerid, EditGroup, DIALOG_STYLE_LIST, "Escolha a opção para gerenciar:", "Alterar nome\nGerenciar membros\nGerenciar funções\n{FFFF00}Deletar grupo", "Selecionar", "Cancelar");
	}

	return 1;
}

Dialog:SelectedMemberGroup(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new group = PlayerData[playerid][pGroup],
					string[3 * 32];

				for(new i = 0; i < 3; i++)
				{
					format(string, sizeof(string), "%s%s\n", string, GroupRanks[group][i]);
				}

				Dialog_Show(playerid, RankMemberGroup, DIALOG_STYLE_LIST, "Escolha a função:", string, "Setar", "<<");
			}
			case 1:
			{
				Dialog_Show(playerid, DeleteMemberGroup, DIALOG_STYLE_MSGBOX, "Confirmar exclusão:", "Você deseja remover o membro \"%s\" do seu grupo?", "Sim", "<<", ReturnNameByID(PlayerData[playerid][pSelectedSlot]));
			}
		}
	}
	else
	{
		new query[65];

		mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d' AND GrupoRank < 4", PlayerData[playerid][pGroupID]);
		mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 1);
	}

	return 1;
}

Dialog:RankMemberGroup(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new query[60], pname[24];

		format(pname, 24, ReturnNameByID(PlayerData[playerid][pSelectedSlot]));

		mysql_format(this, query, sizeof(query), "UPDATE players SET GrupoRank = '%d' WHERE UserID = '%d'", listitem + 1, PlayerData[playerid][pSelectedSlot]);
		mysql_tquery(this, query);

		foreach(new i : Player) if(PlayerData[i][pID] == PlayerData[playerid][pSelectedSlot])
			PlayerData[i][pGroupRank] = listitem + 1;

		SendGreenMessage(playerid, "Função do membro %s alterado para %s com sucesso.", pname, inputtext);
	}
	else
	{
		new query[65];

		mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d' AND GrupoRank < 4", PlayerData[playerid][pGroupID]);
		mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 1);
	}

	return 1;
}

Dialog:DeleteMemberGroup(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new query[80], pname[24];

		format(pname, 24, ReturnNameByID(PlayerData[playerid][pSelectedSlot]));

		mysql_format(this, query, sizeof(query), "UPDATE players SET Grupo = '-1', GrupoRank = '-1' WHERE UserID = '%d'", PlayerData[playerid][pSelectedSlot]);
		mysql_tquery(this, query);

		foreach(new i : Player) if(PlayerData[i][pID] == PlayerData[playerid][pSelectedSlot])
			ResetGroup(i);

		SendGreenMessage(playerid, "Membro %s removido do grupo com sucesso.", pname);

		SendGroupMessage(PlayerData[playerid][pGroup], COLOR_YELLOW, "* %s foi removido do grupo.", pname);
	}
	else
	{
		new query[65];

		mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d' AND GrupoRank < 4", PlayerData[playerid][pGroupID]);
		mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 1);
	}

	return 1;
}

Dialog:InsertMemberToGroup(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new userid;

		if(sscanf(inputtext, "u", userid))
		{
			new query[45];

			mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d'", PlayerData[playerid][pGroupID]);
			return mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 2);
		}

		if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		{
			new query[45];

			SendWarningMessage(playerid, JogadorOff);

			mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d'", PlayerData[playerid][pGroupID]);
			return mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 2);
		}

		if(PlayerData[userid][pGroup] != -1)
		{
			new query[45];

			SendWarningMessage(playerid, "Esse personagem já faz parte de um grupo.");

			mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d'", PlayerData[playerid][pGroupID]);
			return mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 2);
		}

		SetGroup(userid, PlayerData[playerid][pGroup]);

		SendWarningMessage(playerid, "%s foi adicionado no seu grupo com sucesso.", ReturnName(userid, 0));
		SendGreenMessage(userid, "Você foi adicionado no grupo do %s [%s].", ReturnName(playerid, 0), Group_GetName(playerid));
	}
	else
	{
		new query[65];

		mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Grupo = '%d' AND GrupoRank < 4", PlayerData[playerid][pGroupID]);
		mysql_tquery(this, query, "ListPlayerGroup", "dd", playerid, 1);
	}

	return 1;
}

Dialog:ManageGroupRanks(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayerData[playerid][pSelectedSlot] = listitem;

		Dialog_Show(playerid, SetGroupRankName, DIALOG_STYLE_INPUT, "Setar nome da função:", "Função: %s (%d)\nDigite um novo nome para essa função:", "Salvar", "<<", GroupRanks[PlayerData[playerid][pGroup]][listitem], listitem + 1);
	}
	else
	{
		Dialog_Show(playerid, EditGroup, DIALOG_STYLE_LIST, "Escolha a opção para gerenciar:", "Alterar nome\nGerenciar membros\nGerenciar funções\n{FFFF00}Deletar grupo", "Selecionar", "Cancelar");
	}

	return 1;
}

Dialog:SetGroupRankName(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new rankname[32];

		if(sscanf(inputtext, "s[32]", rankname))
			return Dialog_Show(playerid, SetGroupRankName, DIALOG_STYLE_INPUT, "Setar nome da função:", "Digite algo!!\n\nFunção: %s (%d)\nDigite um novo nome para essa função:", "Salvar", "<<", GroupRanks[PlayerData[playerid][pGroup]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	
		if(strlen(rankname) > 32)
			return Dialog_Show(playerid, SetGroupRankName, DIALOG_STYLE_INPUT, "Setar nome da função:", "Não ultrapasse 32 caracteres!!\n\nFunção: %s (%d)\nDigite um novo nome para essa função:", "Salvar", "<<", GroupRanks[PlayerData[playerid][pGroup]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	
		format(GroupRanks[PlayerData[playerid][pGroup]][PlayerData[playerid][pSelectedSlot]], 32, rankname);
		Group_SaveRanks(PlayerData[playerid][pGroup]);

		dlg_EditGroup(playerid, 1, 2, "\1");
		SendGreenMessage(playerid, "Você alterou o nome da função(%d) para \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, rankname);
	}
	else
	{
		dlg_EditGroup(playerid, 1, 2, "\1");
	}

	return 1;
}

Dialog:DeleteGroup(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SendGreenMessage(playerid, "Grupo \"%s\" deletado com sucesso.", Group_GetName(playerid));
		
		Group_Delete(PlayerData[playerid][pGroup]);
	}
	else
	{
		Dialog_Show(playerid, EditGroup, DIALOG_STYLE_LIST, "Escolha a opção para gerenciar:", "Alterar nome\nGerenciar membros\nGerenciar funções\n{FFFF00}Deletar grupo", "Selecionar", "Cancelar");
	}

	return 1;
}

Dialog:GroupRob(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, GroupRobPlace, DIALOG_STYLE_LIST, "Escolha o local de roubo:", "1. Los Santos Bank", "Selecionar", "<<");
			}
			case 1:
			{
				Dialog_Show(playerid, GroupRobStyle, DIALOG_STYLE_LIST, "Escolha o método de roubo:", "1. Barulhento\n2. Silencioso", "Selecionar", "<<");
			}
			case 2:
			{
				new id;

				if((id = Sewer_Nearest(playerid)) != -1)
				{
					GroupData[PlayerData[playerid][pGroup]][groupRobOut] = id;

					Group_Save(PlayerData[playerid][pGroup]);

					SendGreenMessage(playerid, "Você definiu este bueiro \"%s\" como rota de fuga.", SewerData[id][sewerName]);
				}
				else
				{
					SendWarningMessage(playerid, "Você não está próximo a bueiro.");
				}
			}
		}
	}

	return 1;
}

Dialog:GroupRobPlace(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				GroupData[PlayerData[playerid][pGroup]][groupRobPlace] = 1;
				SendGreenMessage(playerid, "Você definiu o local de roubo: Los Santos Bank.");
			}
		}

		Group_Save(PlayerData[playerid][pGroup]);
	}
	else
	{
		new playergroup = PlayerData[playerid][pGroup];
		Dialog_Show(playerid, GroupRob, DIALOG_STYLE_LIST, "Planejar roubo", "Local de roubo%s\nExecução%s\nRota de fuga%s", "Selecionar", "Fechar", Group_GetRobName(playergroup), Group_GetRobStyle(playergroup), Group_GetOut(playergroup));
	}
	return 1;
}

Dialog:GroupRobStyle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				GroupData[PlayerData[playerid][pGroup]][groupRobStyle] = 1;
				SendGreenMessage(playerid, "Você definiu o método de execução como: Barulhento.");
			}
			case 1:
			{
				GroupData[PlayerData[playerid][pGroup]][groupRobStyle] = 2;
				SendGreenMessage(playerid, "Você definiu o método de execução como: Silencioso.");
			}
		}

		Group_Save(PlayerData[playerid][pGroup]);
	}
	else
	{
		new playergroup = PlayerData[playerid][pGroup];
		Dialog_Show(playerid, GroupRob, DIALOG_STYLE_LIST, "Planejar roubo", "Local de roubo%s\nExecução%s\nRota de fuga%s", "Selecionar", "Fechar", Group_GetRobName(playergroup), Group_GetRobStyle(playergroup), Group_GetOut(playergroup));
	}
	return 1;
}

Dialog:FamilyShowRanks(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		PlayerData[playerid][pSelectedSlot] = listitem;

		Dialog_Show(playerid, FamilyEditRank, DIALOG_STYLE_INPUT, "Alterar nome do rank:", "Digite um novo nome para o rank:\nINFO: Respeite o limite máximo de caracteres (32).", "Salvar", "<<");
	}

	return 1;
}

Dialog:FamilyEditRank(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new string[32];

		if(sscanf(inputtext, "s[32]", string))
			return Dialog_Show(playerid, FamilyEditRank, DIALOG_STYLE_INPUT, "Alterar nome do rank:", "Digite um novo nome para o rank:\nINFO: Respeite o limite máximo de caracteres (32).", "Salvar", "<<");

		if(strlen(string) > 32)
			return Dialog_Show(playerid, FamilyEditRank, DIALOG_STYLE_INPUT, "Alterar nome do rank:", "Erro ao salvar!!\n\nDigite um novo nome para o rank:\nINFO: Respeite o limite máximo de caracteres (32).", "Salvar", "<<");

		new rank = PlayerData[playerid][pSelectedSlot],
		family = PlayerData[playerid][pFamily];

		format(FamilyRanks[family][rank], 32, string);

		SendGreenMessage(playerid, "Você alterou o nome do rank %d para \"%s\" com sucesso.", rank + 1, string);

		Family_SaveRanks(family);
	}
	else
	{
		Family_ManageRanks(playerid, PlayerData[playerid][pFamily]);
	}

	return 1;
}

Dialog:CityHall(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: //Agencia de empregos
			{
				if(PlayerData[playerid][pJob] != EMPREGO_Nenhum)
					return SendWarningMessage(playerid, "Você já faz parte de um emprego.");

				new count;

				sz_MiscString[0] = 0;

				for(new i = 0; i < sizeof(g_aJobs); i++) if(g_aJobs[i][s_J_ID])
				{
					count++;
					format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, count, g_aJobs[i][s_J_Name]);
				}

				Dialog_Show(playerid, Empregos, DIALOG_STYLE_LIST, "Agência de Empregos", sz_MiscString, "Selecionar", "<<");
			}
			case 1:
			{
				new count;

				sz_MiscString[0] = 0;

				for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
				{
					if(TicketData[playerid][i][ticketExists])
					{
						format(sz_MiscString, sizeof(sz_MiscString), "%s%s (%s - %s)\n", sz_MiscString, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
					
						ListedOptions[playerid][count++] = i;
					}
				}

				if(!count)
					return SendWarningMessage(playerid, "Você não possui uma multa em aberto.");

				Dialog_Show(playerid, MyTickets, DIALOG_STYLE_LIST, "Minhas multas", sz_MiscString, "Pagar", "<<");
			}
		}
	}
	return 1;
}

Dialog:CellphoneBuy(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = ListedOptions[playerid][listitem];

		if(GetScriptedMoney(playerid) < g_aPhoneList[id][cellPrice])
			return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(g_aPhoneList[id][cellPrice]));

		GiveScriptedMoney(playerid, - g_aPhoneList[id][cellPrice]);

		SendGreenMessage(playerid, "Você comprou o aparelho de telefone: \"%s\" por %s.", g_aPhoneList[id][cellName], FormatNumber(g_aPhoneList[id][cellPrice]));
		PlayerData[playerid][pCellphoneItem] = g_aPhoneList[id][cellItem];
	}

	return 1;
}

Dialog:FishBait(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(GetScriptedMoney(playerid) < 30)
			return SendWarningMessage(playerid, "Você não possui $30 em mãos.");

		if(PlayerData[playerid][pFishBait] >= 70)
			return SendWarningMessage(playerid, "Você só pode carregar, no máximo, 70 iscas.");

		SendGreenMessage(playerid, "Você comprou 10 iscas por $30.");
		GiveScriptedMoney(playerid, -30);

		PlayerData[playerid][pFishBait] += 10;
	}
	return 1;
}

Dialog:VerifyState(playerid, response, listitem, inputtext[])
{
	if(response) 
	{
		switch(listitem)
		{
			case 0:
			{
				mysql_tquery(this, "SELECT * FROM atm WHERE atmRobbed = '1' OR atmMoney = '0'", "OnGOVCheckATMs", "d", playerid);
			}
		}
	}
	return 1;
}

Dialog:ATMS_Problem(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		//todo: finalizar sistema junto ao novo emprego de transportador de valores.
		PlayerData[playerid][pSelectedSlot] = ListedOptions[playerid][listitem];
		new id = PlayerData[playerid][pSelectedSlot];

		SendClientMessageEx(playerid, -1, "DEBUG: Você escolhou o ATM DBID: %d! xD", id);
	}
	else
	{
		callcmd::verificarestado(playerid);
	}
	return 1;
}

Dialog:Player_Log(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new uid = GetPVarInt(playerid, "Log_Player_ID");

		if(!strcmp(inputtext, ">> Próxima Página", true))
			return ShowPlayerLog(playerid, uid, PlayerData[playerid][pPage] + 1);

		if(!strcmp(inputtext, "<< Página Anterior", true))
			return ShowPlayerLog(playerid, uid, PlayerData[playerid][pPage] - 1);

		if(PlayerData[playerid][pPage] == 1 && !listitem)
			return SetPlayerDialog(playerid, "search_log");
		
		new option = (PlayerData[playerid][pPage] == 1) ? (listitem - 1) : (listitem);
		new id = ListedOptions[playerid][option], query[131];

		mysql_format(this, query, sizeof(query), "SELECT (SELECT Name FROM players WHERE UserID = '%d') as PlayerName, player_log.* FROM player_log WHERE LogID = '%d'", uid, id);
		mysql_tquery(this, query, "OnAdminViewLog", "d", playerid);

	}
	return 1;
}

Dialog:Player_Log_Search(playerid, response, listitem, inputtext[])
{
	new uid = GetPVarInt(playerid, "Log_Player_ID");
	if(response)
	{
		new search[64];

		if(sscanf(inputtext, "s[64]", search)) 
		{
			SendWarningMessage(playerid, "É necessário informar algo para ser pesquisado.");
			return SetPlayerDialog(playerid, "search_log");
		}

		if(strlen(search) > 64) 
		{
			SendWarningMessage(playerid, "Limite máximo de caracteres atingido (32).");
			return SetPlayerDialog(playerid, "search_log");
		}

		new opt[2][32];
		sscanf(search, "p<|>s[32]s[32]", opt[0], opt[1]);

		new query[183];
		mysql_format(this, query, sizeof(query), "SELECT * FROM player_log WHERE PlayerID = '%d' AND Log LIKE '%s%s%s' AND Log LIKE '%s%s%s' ORDER BY LogID DESC LIMIT 45", uid, "%%", opt[0], "%%", "%%", opt[1], "%%");
		mysql_tquery(this, query, "OnAdminSearchLog", "ds", playerid, search);
	}
	else
	{
		ShowPlayerLog(playerid, uid, PlayerData[playerid][pPage]);
	}
	return 1;
}

Dialog:Player_Log_Result(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new uid = GetPVarInt(playerid, "Log_Player_ID");

		new id = ListedOptions[playerid][listitem], query[131];

		mysql_format(this, query, sizeof(query), "SELECT (SELECT Name FROM players WHERE UserID = '%d') as PlayerName, player_log.* FROM player_log WHERE LogID = '%d'", uid, id);
		mysql_tquery(this, query, "OnAdminViewLog", "d", playerid);
	}
	else
	{
		SetPlayerDialog(playerid, "search_log");
	}
	return 1;
}

Dialog:Player_Log_Info(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new uid = GetPVarInt(playerid, "Log_Player_ID");
		ShowPlayerLog(playerid, uid, PlayerData[playerid][pPage]);
	}
	else
	{
		new parts[6][121], count;

		sz_MiscString[0] = 0;

		GetPVarString(playerid, "VAR_PlayerLogInfo_Str", sz_MiscString, 400);

		count = strexplode(parts, sz_MiscString, "\n");

		for(new i = 0; i < count; i++)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, parts[i]);
		}
	}
	return 1;
}

Dialog:Tog_Player(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: PlayerData[playerid][pTogFaction] = PlayerData[playerid][pTogFaction] ? false : true;
			case 1: PlayerData[playerid][pTogNews] = PlayerData[playerid][pTogNews] ? false : true;
			case 2: PlayerData[playerid][pTogAd] = PlayerData[playerid][pTogAd] ? false : true;
			case 3:
			{
				if(!PlayerData[playerid][pAdmin])
					return SendWarningMessage(playerid, "Você não é um administrador.");

				PlayerData[playerid][pTogAdmin] = PlayerData[playerid][pTogAdmin] ? false : true;
			}
			case 4:
			{
				if(!PlayerData[playerid][pAdmin])
					return SendWarningMessage(playerid, "Você não é um administrador.");


				PlayerData[playerid][pTogPM] = PlayerData[playerid][pTogPM] ? false : true;
			}
			case 5:
			{
				PlayerData[playerid][pTogHUD] = PlayerData[playerid][pTogHUD] ? false : true;

				if(!PlayerData[playerid][pTogHUD])
					ShowHungryTextdraw(playerid, 1);
				else
					ShowHungryTextdraw(playerid, 0);
			}
			case 6: PlayerData[playerid][pTogHitmark] = PlayerData[playerid][pTogHitmark] ? false : true;
		}
		Tog_ShowList(playerid);
	}
	return 1;
}

Dialog:RefundPlayer(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = ListedOptions[playerid][listitem], query[53];

		mysql_format(this, query, sizeof(query), "SELECT * FROM refunds WHERE refundID = '%d'", id);
		mysql_tquery(this, query, "OnPlayerUseRefund", "ddd", playerid, id, 0);
	}

	return 1;
}

Dialog:RefundPlayer_Confirm(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = GetPVarInt(playerid, "VAR_RefundSelected_ID"), query[53];

		mysql_format(this, query, sizeof(query), "SELECT * FROM refunds WHERE refundID = '%d'", id);
		mysql_tquery(this, query, "OnPlayerUseRefund", "ddd", playerid, id, 1);
	}
	else
	{
		callcmd::refundos(playerid);
	}

	return 1;
}

Dialog:Refund_Create(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SetPVarInt(playerid, "VAR_Refund_Type", listitem + 1);

		Dialog_Show(playerid, Refund_Create_Player, DIALOG_STYLE_INPUT, "Informe o nome do jogador:", "Refundo selecionado: %s\n\nDigite abaixo o nome do jogador:\nINFO: É necessário seguir o formato: Nome_Sobrenome.", ">>", "<<", Refund_GetType(listitem + 1));
	}

	return 1;
}

Dialog:Refund_Create_Player(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new type = GetPVarInt(playerid, "VAR_Refund_Type"), name[24];

		if(sscanf(inputtext, "s[24]", name))
			return Dialog_Show(playerid, Refund_Create_Player, DIALOG_STYLE_INPUT, "Informe o nome do jogador:", "Informe um nome válido!!\n\nRefundo selecionado: %s\n\nDigite abaixo o nome do jogador:\nINFO: É necessário seguir o formato: Nome_Sobrenome.", ">>", "<<", Refund_GetType(type));

		if(strlen(name) > 24)
			Dialog_Show(playerid, Refund_Create_Player, DIALOG_STYLE_INPUT, "Informe o nome do jogador:", "Não exceda o limite máximo de 24 caracteres!!\n\nRefundo selecionado: %s\n\nDigite abaixo o nome do jogador:\nINFO: É necessário seguir o formato: Nome_Sobrenome.", ">>", "<<", Refund_GetType(type));
	
		if(!IsValidRoleplayName(name))
			return Dialog_Show(playerid, Refund_Create_Player, DIALOG_STYLE_INPUT, "Informe o nome do jogador:", "Formato inválido!!\n\nRefundo selecionado: %s\n\nDigite abaixo o nome do jogador:\nINFO: É necessário seguir o formato: Nome_Sobrenome.", ">>", "<<", Refund_GetType(type));
	
		if(ReturnIDByName(name) == -1)
			return Dialog_Show(playerid, Refund_Create_Player, DIALOG_STYLE_INPUT, "Informe o nome do jogador:", "Player inexistente.\n\nRefundo selecionado: %s\n\nDigite abaixo o nome do jogador:\nINFO: É necessário seguir o formato: Nome_Sobrenome.", ">>", "<<", Refund_GetType(type));

		SetPVarString(playerid, "VAR_Refund_Player", name);

		if(type == REFUND_WEAPON)
		{
			Dialog_Show(playerid, Refund_Create_Weapon, DIALOG_STYLE_INPUT, "Informe o modelo da arma:", "Refundo selecionado: %s\nPlayer: %s\n\nDigite abaixo o modelo ID da arma:\nDICA: https://wiki.sa-mp.com/wiki/Weapons", ">>", "<<", Refund_GetType(type), name);
		}
		else if(type == REFUND_VEHICLE)
		{
			Dialog_Show(playerid, Refund_Create_Vehicle, DIALOG_STYLE_INPUT, "Informe o modelo do veículo:", "Refundo selecionado: %s\nPlayer: %s\n\nDigite abaixo o modelo ID do veículo:\nDICA: https://wiki.sa-mp.com/wiki/Vehicles:All", ">>", "<<", Refund_GetType(type), name);
		}
		else
		{
			Dialog_Show(playerid, Refund_Create_Others, DIALOG_STYLE_INPUT, "Informe a quantidade:", "Refundo selecionado: %s\nPlayer: %s\n\nInforme a quantidade:\nINFO: Limite de 1 a 1,000,000.", ">>", "<<", Refund_GetType(type), name);
		}
	}
	else
	{
		callcmd::criarrefundo(playerid);
	}

	return 1;
}

Dialog:Refund_Create_Weapon(playerid, response, listitem, inputtext[])
{
	new type, name[24];

	GetPVarString(playerid, "VAR_Refund_Player", name, 24);
	type = GetPVarInt(playerid, "VAR_Refund_Type");

	if(response)
	{
		new weaponid;

		if(sscanf(inputtext, "d", weaponid))
			return Dialog_Show(playerid, Refund_Create_Weapon, DIALOG_STYLE_INPUT, "Informe o modelo da arma:", "Digite um modelo ID!!\n\nRefundo selecionado: %s\nPlayer: %s\n\nDigite abaixo o modelo ID da arma:\nDICA: https://wiki.sa-mp.com/wiki/Weapons", ">>", "<<", Refund_GetType(type), name);
	
		if(!(1 <= weaponid <= 43))
			return Dialog_Show(playerid, Refund_Create_Weapon, DIALOG_STYLE_INPUT, "Informe o modelo da arma:", "Modelo ID inválido!!\n\nRefundo selecionado: %s\nPlayer: %s\n\nDigite abaixo o modelo ID da arma:\nDICA: https://wiki.sa-mp.com/wiki/Weapons", ">>", "<<", Refund_GetType(type), name);
	
		SetPVarInt(playerid, "VAR_Refund_WeaponID", weaponid);

		Dialog_Show(playerid, Refund_Create_Ammo, DIALOG_STYLE_INPUT, "Informe a quantidade de munição:", "Refundo selecionado: %s\nPlayer: %s\nArma: %s\n\nDigite a quantidade de munição:", ">>", "<<", Refund_GetType(type), name, ReturnWeaponName(weaponid));
	}
	else
	{
		Dialog_Show(playerid, Refund_Create_Player, DIALOG_STYLE_INPUT, "Informe o nome do jogador:", "Refundo selecionado: %s\n\nDigite abaixo o nome do jogador:\nINFO: É necessário seguir o formato: Nome_Sobrenome.", ">>", "<<", Refund_GetType(type));
	}

	return 1;
}

Dialog:Refund_Create_Ammo(playerid, response, listitem, inputtext[])
{
	new type, name[24], weaponid;

	type = GetPVarInt(playerid, "VAR_Refund_Type");
	GetPVarString(playerid, "VAR_Refund_Player", name, 24);
	weaponid = GetPVarInt(playerid, "VAR_Refund_WeaponID");

	if(response)
	{
		new ammo;

		if(sscanf(inputtext, "d", ammo))
			return Dialog_Show(playerid, Refund_Create_Ammo, DIALOG_STYLE_INPUT, "Informe a quantidade de munição:", "Digite a quantidade de munição!!\n\nRefundo selecionado: %s\nPlayer: %s\nArma: %s\n\nDigite a quantidade de munição:", ">>", "<<", Refund_GetType(type), name, ReturnWeaponName(weaponid));

		if(!(1 <= ammo <= 999))
			return Dialog_Show(playerid, Refund_Create_Ammo, DIALOG_STYLE_INPUT, "Informe a quantidade de munição:", "Quantidade inválida!!\n\nRefundo selecionado: %s\nPlayer: %s\nArma: %s\n\nDigite a quantidade de munição:", ">>", "<<", Refund_GetType(type), name, ReturnWeaponName(weaponid));
	
		SetPVarInt(playerid, "VAR_Refund_Ammo", ammo);

		Dialog_Show(playerid, Refund_Create_Confirm, DIALOG_STYLE_MSGBOX, "Informações do refundo:", "Refundo selecionado: %s\nPlayer: %s\nArma: %s (ID: %d)\nMunição: %d\n\nVocê confirma a criação deste refundo?", "Confirmo", "<<", Refund_GetType(type), name, ReturnWeaponName(weaponid), weaponid, ammo);
	}
	else
	{
		Dialog_Show(playerid, Refund_Create_Weapon, DIALOG_STYLE_INPUT, "Informe o modelo da arma:", "Refundo selecionado: %s\nPlayer: %s\n\nDigite abaixo o modelo ID da arma:\nDICA: https://wiki.sa-mp.com/wiki/Weapons", ">>", "<<", Refund_GetType(type), name);
	}
	return 1;
}

Dialog:Refund_Create_Vehicle(playerid, response, listitem, inputtext[])
{
	new type, name[24];

	GetPVarString(playerid, "VAR_Refund_Player", name, 24);
	type = GetPVarInt(playerid, "VAR_Refund_Type");

	if(response)
	{
		new model;

		if(sscanf(inputtext, "d", model))
			return Dialog_Show(playerid, Refund_Create_Vehicle, DIALOG_STYLE_INPUT, "Informe o modelo do veículo:", "Digite um modelo!!\n\nRefundo selecionado: %s\nPlayer: %s\n\nDigite abaixo o modelo ID do veículo:\nDICA: https://wiki.sa-mp.com/wiki/Vehicles:All", ">>", "<<", Refund_GetType(type), name);
	
		if(!(400 <= model <= 611))
			return Dialog_Show(playerid, Refund_Create_Vehicle, DIALOG_STYLE_INPUT, "Informe o modelo do veículo:", "Modelo inválido!!\nLIMITES: 400 a 611.\n\nRefundo selecionado: %s\nPlayer: %s\n\nDigite abaixo o modelo ID do veículo:\nDICA: https://wiki.sa-mp.com/wiki/Vehicles:All", ">>", "<<", Refund_GetType(type), name);
	
		SetPVarInt(playerid, "VAR_Refund_Model", model);

		Dialog_Show(playerid, Refund_Create_Confirm, DIALOG_STYLE_MSGBOX, "Informações do refundo:", "Refundo selecionado: %s\nPlayer: %s\nVeículo: %s (Modelo: %d)\n\nVocê confirma a criação deste refundo?", "Confirmo", "<<", Refund_GetType(type), name, ReturnVehicleModelName(model), model);
	}
	else
	{
		Dialog_Show(playerid, Refund_Create_Player, DIALOG_STYLE_INPUT, "Informe o nome do jogador:", "Refundo selecionado: %s\n\nDigite abaixo o nome do jogador:\nINFO: É necessário seguir o formato: Nome_Sobrenome.", ">>", "<<", Refund_GetType(type));
	}

	return 1;
}

Dialog:Refund_Create_Others(playerid, response, listitem, inputtext[])
{
	new type, name[24];

	GetPVarString(playerid, "VAR_Refund_Player", name, 24);
	type = GetPVarInt(playerid, "VAR_Refund_Type");

	if(response)
	{
		new quantity;

		if(sscanf(inputtext, "d", quantity))
			return Dialog_Show(playerid, Refund_Create_Others, DIALOG_STYLE_INPUT, "Informe a quantidade:", "Digite uma quantia!!\n\nRefundo selecionado: %s\nPlayer: %s\n\nInforme a quantidade:\nINFO: Limite de 1 a 1,000,000.", ">>", "<<", Refund_GetType(type), name);
	
		if(!(1 <= quantity <= 1000000))
			return Dialog_Show(playerid, Refund_Create_Others, DIALOG_STYLE_INPUT, "Informe a quantidade:", "Não exceda os limites!!\n\nRefundo selecionado: %s\nPlayer: %s\n\nInforme a quantidade:\nINFO: Limite de 1 a 1,000,000.", ">>", "<<", Refund_GetType(type), name);
	
		SetPVarInt(playerid, "VAR_Refund_Quantity", quantity);

		if(type == REFUND_MONEY)
			Dialog_Show(playerid, Refund_Create_Confirm, DIALOG_STYLE_MSGBOX, "Informações do refundo:", "Refundo selecionado: %s\nPlayer: %s\nQuantidade: %s\n\nVocê confirma a criação deste refundo?", "Confirmo", "<<", Refund_GetType(type), name, FormatNumber(quantity));
		else 
			Dialog_Show(playerid, Refund_Create_Confirm, DIALOG_STYLE_MSGBOX, "Informações do refundo:", "Refundo selecionado: %s\nPlayer: %s\nQuantidade: %d\n\nVocê confirma a criação deste refundo?", "Confirmo", "<<", Refund_GetType(type), name, quantity);
	}
	else
	{
		Dialog_Show(playerid, Refund_Create_Player, DIALOG_STYLE_INPUT, "Informe o nome do jogador:", "Refundo selecionado: %s\n\nDigite abaixo o nome do jogador:\nINFO: É necessário seguir o formato: Nome_Sobrenome.", ">>", "<<", Refund_GetType(type));
	}

	return 1;
}

Dialog:Refund_Create_Confirm(playerid, response, listitem, inputtext[])
{
	new type, name[24], weaponid, ammo, model, quantity;

	type = GetPVarInt(playerid, "VAR_Refund_Type");
	GetPVarString(playerid, "VAR_Refund_Player", name, 24);
	weaponid = GetPVarInt(playerid, "VAR_Refund_WeaponID");
	ammo = GetPVarInt(playerid, "VAR_Refund_Ammo");
	model = GetPVarInt(playerid, "VAR_Refund_Model");
	quantity = GetPVarInt(playerid, "VAR_Refund_Quantity");

	if(response)
	{
		new query[310];

		mysql_format(this, query, sizeof(query), "INSERT INTO refunds (refundOwnerID, refundAdmin, refundType, refundQuantity, refundWeapon, refundAmmo, refundVehicleModel) VALUES ('%d', '%e', '%d', '%d', '%d', '%d', '%d')",
			ReturnIDByName(name), ReturnName(playerid), type, quantity, weaponid, ammo, model);
		mysql_tquery(this, query);

		if(type == REFUND_WEAPON)
		{
			SendAdminAction(playerid, "Você criou o refundo de arma %s (munição: %d) para %s.", ReturnWeaponName(weaponid), ammo, name);
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) criou o refundo de arma \"%s (ammo: %d)\" para %s.", ReturnName(playerid, 0), playerid, ReturnWeaponName(weaponid), ammo, name);
		}
		else if(type == REFUND_VEHICLE)
		{
			SendAdminAction(playerid, "Você criou o refundo de veículo %s para %s.", ReturnVehicleModelName(model), name);
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) criou o refundo de veículo \"%s\" para %s.", ReturnName(playerid, 0), playerid, ReturnVehicleModelName(model), name);
		}
		else
		{
			SendAdminAction(playerid, "Você criou o refundo de %s (quantidade: %d) para %s.", Refund_GetType(type), quantity, name);
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) criou o refundo de \"%s (quantidade: %d)\" para %s.", ReturnName(playerid, 0), playerid, Refund_GetType(type), quantity);
		}

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) criou um refundo: %s(qntd: %d, ammo:%d(wep:%d), modelid: %d) para %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], Refund_GetType(type), quantity, ammo, weaponid, model, name, ReturnIDByName(name));
	}
	else
	{
		if(type == REFUND_WEAPON)
		{
			Dialog_Show(playerid, Refund_Create_Ammo, DIALOG_STYLE_INPUT, "Informe a quantidade de munição:", "Refundo selecionado: %s\nPlayer: %s\nArma: %s\n\nDigite a quantidade de munição:", "Prosseguir", "<<", Refund_GetType(type), name, ReturnWeaponName(weaponid));
		}
		else if(type == REFUND_VEHICLE)
		{
			Dialog_Show(playerid, Refund_Create_Vehicle, DIALOG_STYLE_INPUT, "Informe o modelo do veículo:", "Refundo selecionado: %s\nPlayer: %s\n\nDigite abaixo o modelo ID do veículo:\nDICA: https://wiki.sa-mp.com/wiki/Vehicles:All", ">>", "<<", Refund_GetType(type), name);
		}
		else
		{
			Dialog_Show(playerid, Refund_Create_Others, DIALOG_STYLE_INPUT, "Informe a quantidade:", "Refundo selecionado: %s\nPlayer: %s\n\nInforme a quantidade:\nINFO: Limite de 1 a 1,000,000.", ">>", "<<", Refund_GetType(type), name);
		}
	}

	return 1;
}

// =============================================================== STOCKS DO SERVIDOR ======== ================================================= //
Reset_OPC(playerid)
{
	//Anticheat
	AC_ResetVariables(playerid);
	ResetPlayerMoney(playerid);
	//Dados
	PlayerData[playerid][pLogged] = false;
	PlayerData[playerid][pID] = -1;
	PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pMoney] = 0;
	PlayerData[playerid][pLevel] = 0;
	PlayerData[playerid][pEXP] = 0;
	PlayerData[playerid][pSex] = 0;
	PlayerData[playerid][pTutorial] = 0;
	PlayerData[playerid][pSkin] = 0;
	PlayerData[playerid][pFlyLicense] = 0;
	PlayerData[playerid][pBoatLicense] = 0;
	PlayerData[playerid][pCarLicense] = 0;
	PlayerData[playerid][pFightStyle] = 0;
	PlayerData[playerid][pAdminStatus] = false;
	PlayerData[playerid][pBank] = 0;
	PlayerData[playerid][pSavings] = 0;
	PlayerData[playerid][pCellphone] = 0;
	PlayerData[playerid][pJailed] = 0;
	PlayerData[playerid][pJailTime] = 0;
	PlayerData[playerid][pWarns] = 0;
	PlayerData[playerid][pJob] = 0;
	PlayerData[playerid][pPaycheck] = 0;
	PlayerData[playerid][pTimePlayed] = 0;
	PlayerData[playerid][pVip] = 0;
	PlayerData[playerid][pVipTime] = 0;
	PlayerData[playerid][pTaxiFee] = 0;
	PlayerData[playerid][pTaxiTime] = 0;
	PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTaxiDuty] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pSelectedSlot] = 0;
	PlayerData[playerid][pStorageSelect] = 0; 
	PlayerData[playerid][pStorageItem] = 0;
	PlayerData[playerid][pSpeedTime] = 0;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = -1;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pFactionMod] = 0;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pOnDutyBlock] = 0;
	PlayerData[playerid][pEntrance] = -1;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pBusiness] = -1;
	PlayerData[playerid][pComplex] = -1;
	PlayerData[playerid][pMechanicCalled] = 0;
	PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShowFooter] = 0;
	PlayerData[playerid][pFurnitureObject] = -1;
	PlayerData[playerid][pFurnitureCategory] = EOS;
	PlayerData[playerid][pFurnitureSubCategory] = EOS;
	PlayerData[playerid][pEditingMode] = 0;
	PlayerData[playerid][pLastLogin] = EOS;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
	PlayerData[playerid][pState] = 1;
	PlayerData[playerid][pDeathTime] = 0;
	PlayerData[playerid][pPosX] = 0.0;
	PlayerData[playerid][pPosY] = 0.0;
	PlayerData[playerid][pPosZ] = 0.0;
	PlayerData[playerid][pPosA] = 0.0;
	PlayerData[playerid][pInterior] = 0;
	PlayerData[playerid][pWorld] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pTied] = 0;
	PlayerData[playerid][pReportTime] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pBlackMarket] = 0;
	PlayerData[playerid][pDrugUsed] = 0;
	PlayerData[playerid][pDrugTime] = 0;
	PlayerData[playerid][pCare] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCareTime] = 0;
	PlayerData[playerid][pHospital] = 0;
	PlayerData[playerid][pHospitalTime] = 0;
	PlayerData[playerid][pSelectedIndex] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTestStage] = 0;
	PlayerData[playerid][pTestWarns] = 0;
	PlayerData[playerid][pBeanBag] = 0;
	PlayerData[playerid][pStunned] = 0;
	PlayerData[playerid][pColor1Car] = -1;
	PlayerData[playerid][pColor2Car] = -1;
	PlayerData[playerid][pEditingCar] = 0;
	PlayerData[playerid][pHealthCar] = 0.0;
	PlayerData[playerid][pCarSiren] = 0;
	PlayerData[playerid][pIllegalDuty] = 0;
	PlayerData[playerid][pInWar] = 0;
	PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pVehicleSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMechanicRepair] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDrugSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pWeaponSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMechanicEngine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pFixVehicle] = 0;
	PlayerData[playerid][pLoopAnim] = 0;
	PlayerData[playerid][pMask] = 0;
	PlayerData[playerid][pMasked] = 0;
	PlayerData[playerid][pPage] = 1;
	PlayerData[playerid][pRefuelling] = false;
	PlayerData[playerid][pRefuellingPrice] = 0;
	PlayerData[playerid][pLoginTries] = 0;
	PlayerData[playerid][pPMMuted] = 0;
	PlayerData[playerid][pCarrying] = false;
	PlayerData[playerid][pLastUpdate] = 0;
	PlayerData[playerid][pHealth] = 0.0;
	PlayerData[playerid][pArmor] = 0.0;
	PlayerData[playerid][pJustLoggedIn] = true;
	PlayerData[playerid][pNameChange] = 0;
	PlayerData[playerid][pCustomPlate] = 0;
	PlayerData[playerid][pBlockFurniture] = 0;
	PlayerData[playerid][pBlockBuyVehicle] = 0;
	PlayerData[playerid][pBlockMoney] = 0;
	PlayerData[playerid][pMoneyBlocked] = 0;
	PlayerData[playerid][pLabel] = false;
	PlayerData[playerid][pFreezed] = false;
	PlayerData[playerid][pMuted] = false;
	PlayerData[playerid][pCrashed] = false;
	PlayerData[playerid][pBreakinVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pUnscrambling] = false;
	PlayerData[playerid][pUnscrambleTime] = 0;
	PlayerData[playerid][pUnscrambleID] = 0;
	PlayerData[playerid][pScrambleFailed] = 0;
	PlayerData[playerid][pScrambleSuccess] = 0;
	PlayerData[playerid][pInMission] = MISSION_NONE;
	PlayerData[playerid][pMissionTime] = 0;
	PlayerData[playerid][pMissionReward] = 0;
	PlayerData[playerid][pMissionTarget][0] = -1;
	PlayerData[playerid][pMissionTarget][1] = -1;
	PlayerData[playerid][pInsurance] = 0;
	PlayerData[playerid][pDesync] = false;
	PlayerData[playerid][pGroup] = -1;
	PlayerData[playerid][pGroupID] = -1;
	PlayerData[playerid][pGroupRank] = -1;
	PlayerData[playerid][pTogNews] = false;
	PlayerData[playerid][pTogAdmin] = false;
	PlayerData[playerid][pTogFaction] = false;
	PlayerData[playerid][pTogAd] = false;
	PlayerData[playerid][pHitmark] = false;
	PlayerData[playerid][pTogPM] = false;
	PlayerData[playerid][pTogHitmark] = false;
	PlayerData[playerid][pTogHUD] = false;
	PlayerData[playerid][pFamily] = -1;
	PlayerData[playerid][pFamilyID] = -1;
	PlayerData[playerid][pFamilyRank] = -1;
	PlayerData[playerid][pFamilyInvite] = -1;
	PlayerData[playerid][pFamilyOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDamage] = 0;
	PlayerData[playerid][pLastDamage][0] = -1;
	PlayerData[playerid][pLastDamage][1] = -1;
	PlayerData[playerid][pAdminHide] = 0;
	PlayerData[playerid][pLawyer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pLawyerBlock] = true;
	PlayerData[playerid][pLawyerTime] = 0;
	PlayerData[playerid][pFishing] = false;
	PlayerData[playerid][pFishingWeight] = 0;
	PlayerData[playerid][pFishBait] = 0;
	PlayerData[playerid][pSpy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCellphoneItem] = 330;
	PlayerData[playerid][pRobPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pThirst] = 100;
	PlayerData[playerid][pThirstTime] = 0;
	PlayerData[playerid][pHungry] = 100;
	PlayerData[playerid][pHungryTime] = 0;
	PlayerData[playerid][pOWBusiness] = -1;
	PlayerData[playerid][pTaskID] = -1;
	PlayerData[playerid][pTaskQuantity] = 0;
	PlayerData[playerid][pRobbing] = 0;
	PlayerData[playerid][pRobbingID] = -1;
	PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
	PlayerData[playerid][pLocation] = EOS;
	PlayerData[playerid][pWaypoint] = 0;
	PlayerData[playerid][pWaypointPos][0] = 0.0;
	PlayerData[playerid][pWaypointPos][1] = 0.0;
	PlayerData[playerid][pWaypointPos][2] = 0.0;
	PlayerData[playerid][pWarn1] = EOS;
	PlayerData[playerid][pWarn2] = EOS;
	//Outras variaveis
	ACData[playerid][acAirbreakUpdateTick] = gettime();

	BoomboxData[playerid][boomboxPlaced] = false;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;

	for(new i = 0; i != MAX_INVENTORY; i++)
	{
		InventoryData[playerid][i][invExists] = false;
		InventoryData[playerid][i][invModel] = 0;
		InventoryData[playerid][i][invQuantity] = 0;
	}

	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++)
	{
	    LocationData[playerid][i][locationExists] = false;
	    LocationData[playerid][i][locationID] = 0;
	}

	for(new i = 0; i < 13; i++)
	{
		PlayerData[playerid][pWeapon][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}

	for(new i = 0; i != MAX_PLAYER_TICKETS; i++)
	{
		TicketData[playerid][i][ticketID] = 0;
		TicketData[playerid][i][ticketExists] = false;
		TicketData[playerid][i][ticketFee] = 0;
	}

	for(new i = 0; i < 60; i++)
	{
		ListedOptions[playerid][i] = -1;
	}

	for(new i = 0; i < MAX_INVENTORY; i++)
	{
		format(InventoryData[playerid][i][invItem], 32, "Vazio");
		InventoryData[playerid][i][invQuantity] = 0;
	}

	for(new i = 0; i < MAX_ITEM_PLAYER; i++)
	{
		AttachData[playerid][i][attachExists] = false;
		AttachData[playerid][i][attachID] = 0;
	}

	RemoveAllAttachedObjects(playerid);
	Tutorial_ID[playerid] = 0;
	VW_Player_Update[playerid] = 0;
	MostrandoTextsObjeto[playerid] = false;
	Temp_ResetData(playerid);
	Damage_Clear(playerid);
	Phone_OnPlayerConnect(playerid);
	//Timers
	return 1;
}

Reset_OPD(playerid)
{
	if(BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);

	if(PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
		LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);

	if(PlayerData[playerid][pDrivingTest])
		DestroyVehicle(PlayerData[playerid][pTestCar]);

	if(PlayerData[playerid][pEditingCar])
		DestroyVehicle(PlayerData[playerid][pCreateCar]);

	if(PlayerData[playerid][pFixVehicle])
	{
		KillTimer(PlayerData[playerid][pFixVehicleTimer]);
		PlayerData[playerid][pFixVehicle] = false;
	}
	if(PlayerData[playerid][pRefuelling])
	{
		Pump_StopFuelling(playerid);
	}

	if(PlayerData[playerid][pInWar])
	{
		War_Members[PlayerData[playerid][pFaction]]--;
		if(War_Members[PlayerData[playerid][pFaction]] <= 0)
		{
			War_Kills[PlayerData[playerid][pFaction]] = 0;

			if(GetFactionType(playerid) == FACTION_GANGSTER)
			{
				War_GangstersTeams--;
				if(War_GangstersTeams == 1)
					FinalizarGuerra(FACTION_GANGSTER);
			}
			else if(GetFactionType(playerid) == FACTION_MOTOCLUB)
			{
				War_MotoclubTeams--;
				if(War_MotoclubTeams == 1)
					FinalizarGuerra(FACTION_MOTOCLUB);
			}
			else if(GetFactionType(playerid) == FACTION_CARTEL)
			{
				War_CartelTeams--;
				if(War_CartelTeams == 1)
					FinalizarGuerra(FACTION_CARTEL);
			}
		}		
	}

	if(PlayerData[playerid][pState] == PLAYER_STATE_ALIVE)
	{
		if(PlayerData[playerid][pJailed] > 1)
		{
			GetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
			GetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

			PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
		else if(PlayerData[playerid][pJailed] == 0 && !PlayerData[playerid][pDrivingTest] && PlayerData[playerid][pSpectator] == INVALID_PLAYER_ID)
		{
			GetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
			GetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

			PlayerData[playerid][pRespawnTime] = gettime() + 300;
			PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
	}	

	foreach(new i : Player)
	{
		if(PlayerData[i][pFactionOffer] == playerid)
		{
			PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
			PlayerData[i][pFactionOffered] = -1;
		}

		if(PlayerData[i][pBusinessSeller] == playerid)
			PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;

		if(PlayerData[i][pVehicleSeller] == playerid)
			PlayerData[i][pVehicleSeller] = INVALID_PLAYER_ID;

		if(PlayerData[i][pHouseSeller] == playerid)
			PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;

		if(PlayerData[i][pDrugSeller] == playerid)
			PlayerData[i][pDrugSeller] = INVALID_PLAYER_ID;

		if(PlayerData[i][pMechanicRepair] == playerid)
			PlayerData[i][pMechanicRepair] = INVALID_PLAYER_ID;

		if(PlayerData[i][pMechanicEngine] == playerid)
			PlayerData[i][pMechanicEngine] = INVALID_PLAYER_ID;

		if(PlayerData[i][pWeaponSeller] == playerid)
			PlayerData[i][pWeaponSeller] = INVALID_PLAYER_ID;

		if(PlayerData[i][pDraggedBy] == playerid)
		{
			KillTimer(PlayerData[i][pDragTimer]);
			PlayerData[i][pDragged] = 0;
			PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}

		if(PlayerData[i][pTakeItems] == playerid)
		{
			PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
		}

		if(PlayerData[i][pRobPlayer] == playerid)
		{
			PlayerData[i][pRobPlayer] = INVALID_PLAYER_ID;
		}

		if(PlayerData[i][pSpectator] == playerid)
		{
			SendClientMessageEx(i, COLOR_WARNING, "TV: %s (ID: %d) se desconectou.", ReturnName(playerid, 0), playerid);

			PlayerSpectatePlayer(i, INVALID_PLAYER_ID);
			PlayerSpectateVehicle(i, INVALID_VEHICLE_ID);

			PlayerData[i][pSpectator] = INVALID_PLAYER_ID;

			SetPlayerToSpawn(i);
		}

		if(PlayerData[i][pSpy] == playerid)
		{
			SendClientMessageEx(i, COLOR_WARNING, "SPY: %s (ID: %d) se desconectou.", ReturnName(playerid, 0), playerid);

			PlayerData[i][pSpy] = INVALID_PLAYER_ID;
		}

		if(PlayerData[i][pFamilyOffer] == playerid)
		{
			PlayerData[i][pFamilyOffer] = INVALID_PLAYER_ID;
			PlayerData[i][pFamilyInvite] = -1;
		}

		if(PlayerData[i][pLawyer] == playerid)
		{
			PlayerData[i][pLawyer] = INVALID_PLAYER_ID;
		}
	}

	for(new i = 0; i < MAX_3DTEXT_OBJECT; i++)
	{
		if(MostrandoTextsObjeto[playerid])
			DestroyDynamic3DTextLabel(TextoObjetos[playerid][i]);
	}

	foreach(new i : Barrier) if(RoadData[i][roadCreated] && RoadData[i][roadPlayer] == playerid)
	{
		RoadBlock_Delete(i);
	}

	if(PlayerData[playerid][pEditingMode])
		CancelEdit(playerid);

	RemoveAllAttachedObjects(playerid);

	if(IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
	{
		DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);
	}
	
	Report_Clear(playerid);
	//Timers
	KillTimer(PlayerData[playerid][pFreezeTimer]);
	KillTimer(PlayerData[playerid][pFactionSupply]);

	if(PlayerData[playerid][pShowFooter])
	{
		KillTimer(PlayerData[playerid][pFooterTimer]);
	}

	if(PlayerData[playerid][pDragged])
	{
		KillTimer(PlayerData[playerid][pDragTimer]);
	}

	new breakin_id = PlayerData[playerid][pBreakinVehicle];

	if(breakin_id != INVALID_VEHICLE_ID && IsValidVehicle(breakin_id))
	{
		VehicleData[breakin_id][vehiclePhysicalAttack] = false;
		DestroyDynamic3DTextLabel(VehicleData[breakin_id][vehicleLabel]);
		VehicleData[breakin_id][vehicleCooldown] = false;
		PlayerData[playerid][pBreakinVehicle] = INVALID_VEHICLE_ID;
	}

	if(IsValidDynamicObject(PlayerData[playerid][pFurnitureObject]))
	{
		DestroyDynamicObject(PlayerData[playerid][pFurnitureObject]);
		CancelEdit(playerid);
	}

	ResetPlayerRob(playerid);
	Phone_Close(playerid);
	OnPlayerSave(playerid);

	return 1;
}

ResetarEstatisticas(playerid)
{
	Temp_ResetData(playerid);

	//PDATA
	foreach(new i : Player) if(PlayerData[i][pDraggedBy] == playerid)
	{
		StopDragging(i);
	}
	if(PlayerData[playerid][pDragged])
	{
		StopDragging(playerid);
	}
	if(PlayerData[playerid][pDrivingTest])
		DestroyVehicle(PlayerData[playerid][pTestCar]);

	Waypoint_Remove(playerid);

	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pStorageItem] = 0;
	PlayerData[playerid][pStorageSelect] = 0;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pFamilyOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFamilyInvite] = -1;
	PlayerData[playerid][pCarrying] = false;

	if(PlayerData[playerid][pIllegalDuty])
		PlayerData[playerid][pIllegalDuty] = false;

	if(PlayerData[playerid][pInWar])
	{
		War_Members[PlayerData[playerid][pFaction]]--;
		if(War_Members[PlayerData[playerid][pFaction]] <= 0)
		{
			War_Kills[PlayerData[playerid][pFaction]] = 0;

			if(GetFactionType(playerid) == FACTION_GANGSTER)
			{
				War_GangstersTeams--;
				if(War_GangstersTeams == 1)
					FinalizarGuerra(FACTION_GANGSTER);
			}
			else if(GetFactionType(playerid) == FACTION_MOTOCLUB)
			{
				War_MotoclubTeams--;
				if(War_MotoclubTeams == 1)
					FinalizarGuerra(FACTION_MOTOCLUB);
			}
			else if(GetFactionType(playerid) == FACTION_CARTEL)
			{
				War_CartelTeams--;
				if(War_CartelTeams == 1)
					FinalizarGuerra(FACTION_CARTEL);
			}
		}
		PlayerData[playerid][pInWar] = false;
	}

	if(PlayerData[playerid][pOnDuty])
	{
		PlayerData[playerid][pOnDuty] = false;
		PlayerData[playerid][pOnDutyBlock] = gettime() + 300;
	}

	if(PlayerData[playerid][pEditingMode])
		CancelEdit(playerid);

	if(PlayerData[playerid][pFixVehicle])
	{
		KillTimer(PlayerData[playerid][pFixVehicleTimer]);
		PlayerData[playerid][pFixVehicle] = false;
	}

	if(PlayerData[playerid][pInMission] != MISSION_NONE)
	{
		PlayerData[playerid][pInMission] = MISSION_NONE;
		PlayerData[playerid][pMissionTime] = 0;
		PlayerData[playerid][pMissionReward] = 0;
		PlayerData[playerid][pMissionTarget][0] = -1;
		PlayerData[playerid][pMissionTarget][1] = -1;

		SendWarningMessage(playerid, "Você foi forçado a abandonar a missão em que estava!");
	}

	foreach(new i : Player)
	{
		if(PlayerData[i][pLawyer] == playerid)
		{
			PlayerData[i][pLawyer] = INVALID_PLAYER_ID;
		}

		if(PlayerData[i][pRobPlayer] == playerid)
		{
			PlayerData[i][pRobPlayer] = INVALID_PLAYER_ID;
		}
	}

	if(IsValidDynamicObject(PlayerData[playerid][pFurnitureObject]))
	{
		DestroyDynamicObject(PlayerData[playerid][pFurnitureObject]);
		CancelEdit(playerid);
	}
	//Timers
	KillTimer(PlayerData[playerid][pFactionSupply]);

	//VARIAVEIS
	ResetPlayerRob(playerid);
	SetPlayerColorEx(playerid, COLOR_WHITE);
	Dialog_Close(playerid);
	RemoveAllAttachedObjects(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);
	ResetWeapons(playerid);
	//Hallo_Reset(playerid);
	Phone_Close(playerid);

	return 1;
}

PlayerPaycheck(playerid)
{
	new
		PayCheck,
		PropertiesTax = 0,
		Interest
	;
	//Salários
	PayCheck = GetPlayerPaycheck(playerid);

	if(doubleExp)
	{
		PayCheck = PayCheck * 2;
	}

	PlayerData[playerid][pBank] += PayCheck;

	//Juros
	if(PlayerData[playerid][pSavings] > 0)
	{
		switch(PlayerData[playerid][pVip])
		{
			case 1: Interest = floatround((float(PlayerData[playerid][pSavings]) / 100) * 0.3);
			case 2: Interest = floatround((float(PlayerData[playerid][pSavings]) / 100) * 0.4);
			case 3: Interest = floatround((float(PlayerData[playerid][pSavings]) / 100) * 0.5);
			default: Interest = floatround((float(PlayerData[playerid][pSavings]) / 100) * 0.2);
		}

		if(doubleExp)
		{
			Interest = Interest * 2;
		}

		PlayerData[playerid][pSavings] += Interest;
	}

	//Taxas
	if(House_GetCount(playerid) != 0)
	{
		foreach(new i : Houses) if(House_IsOwner(playerid, i))
		{
			PropertiesTax += 50;
		}
	}
	if(Business_GetCount(playerid) != 0)
	{
		foreach(new i : Business) if(Business_IsOwner(playerid, i))
		{
			PropertiesTax += 100;
		}
	}
	new count;
	if((count = Vehicle_GetCount(playerid)) != 0)
	{
		for(new i = 0; i < count; i++)
			PropertiesTax += 35;
	}
	PlayerData[playerid][pBank] -= PropertiesTax;

	//Mensagem Paycheck
	SendClientMessage(playerid, COLOR_WHITE, "|_____ EXTRATO _____|");

	SendClientMessageEx(playerid, COLOR_GREY, "Saldo: %s", FormatNumber(PlayerData[playerid][pBank] + PropertiesTax - PayCheck));

	if(PayCheck > 0)
		SendClientMessageEx(playerid, COLOR_GREY, "Salário: %s", FormatNumber(PayCheck));
	
	if(PlayerData[playerid][pSavings] > 0)
		SendClientMessageEx(playerid, COLOR_GREY, "Savings: %s", FormatNumber(Interest));
	
	if(PropertiesTax > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Taxas: %s", FormatNumber(PropertiesTax));
		Tax_AddMoney(PropertiesTax);
	}

	SendClientMessage(playerid, COLOR_WHITE, "|____________________|");
	SendClientMessageEx(playerid, COLOR_GREY, "Novo saldo: %s", FormatNumber(PlayerData[playerid][pBank]));

	if(doubleExp)
	{
		PlayerData[playerid][pEXP] += 2;
	}
	else
	{
		PlayerData[playerid][pEXP]++;
	}

	new str[28], PaycheckStatus;
	PaycheckStatus = PayCheck - PropertiesTax;

	format(str, sizeof(str), "~w~Paycheck~n~%s$%d", (PaycheckStatus < 0) ? ("~r~") : ("~g~"), PaycheckStatus);

	GameTextForPlayer(playerid, str, 3000, 1); 
}

GetPlayerPaycheck(playerid)
{
	new Paycheck;

	for(new i = 0; i < sizeof(g_aJobs); i++) if(PlayerData[playerid][pJob] == g_aJobs[i][s_J_ID])
	{
		Paycheck = g_aJobs[i][s_J_Paycheck];
		break;
	}
 
	if(PlayerData[playerid][pLevel] <= 2) Paycheck += 250;

	if(PlayerData[playerid][pFaction] != -1)
	{
		Paycheck += FactionData[PlayerData[playerid][pFaction]][factionPaycheck][PlayerData[playerid][pFactionRank] - 1];
	}

	return Paycheck;
}

ClearPlayerChat(playerid, lines)
{
	if(!IsPlayerConnected(playerid))
		return 0;

	for(new i = 0; i < lines; i++)
	{
		SendClientMessage(playerid, -1, "");
	}

	return 1;
}

Float:GetPlayerSpeed(playerid)
{
	new Float:vx, Float:vy, Float:vz, Float:result;

	if(IsPlayerInAnyVehicle(playerid))
		GetVehicleVelocity(GetPlayerVehicleID(playerid), vx, vy, vz);
	else
		GetPlayerVelocity(playerid, vx, vy, vz);

	result = floatsqroot(floatpower(vx, 2.0) + floatpower(vy, 2.0) + floatpower(vz, 2.0)) * 180.0;

	return (result / 1.609344); //remover equacao = km/h
}

Float:ReturnVehicleTopSpeed(modelid)
{
	return (g_aVehicleTopSpeed[modelid - 400] / 1.609344); //remover equacao = km/h
}

ReturnName(playerid, underscore = 1)
{
	new playername[MAX_PLAYER_NAME + 2];
	GetPlayerName(playerid, playername, sizeof(playername));

	if(!underscore)
	{
		if(PlayerData[playerid][pMasked])
		{
			format(playername, sizeof(playername), "Mascarado_#%d", MaskData[playerid][maskNumber]);
		}
		else
		{
			for(new i = 0, j = strlen(playername); i < j; i++)
			{
				if(playername[i] == '_')
				{
					playername[i] = ' ';
				}
			}
		}
	}

	return playername;
}

PlayerIP(playerid)
{
	static IP[16];

	GetPlayerIp(playerid, IP, 16);

	return IP;
}

SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player) if (PlayerData[i][pJob] == jobid) 
		{
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach(new i : Player) if (PlayerData[i][pJob] == jobid) 
	{
		SendClientMessage(i, color, str);
	}
	return 1;
}

IsNumber(string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

RemoveAllAttachedObjects(playerid)
{
	for(new i = 0; i < 10; i++)
		RemovePlayerAttachedObject(playerid, i);

	return 1;
}

ResetPlayerAdmin(playerid)
{
	SendWarningMessage(playerid, "Você não é mais um membro ativo da administração do servidor.");

	if(PlayerData[playerid][pAdminStatus])
		SetPlayerColorEx(playerid, COLOR_WHITE);

	PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pAdminStatus] = false;

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	
	return 1;
}

GetPlayerID(string[])
{
	new NomeJogador[MAX_PLAYER_NAME];
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{			
			GetPlayerName(i, NomeJogador, sizeof(NomeJogador));
			if(strcmp(NomeJogador, string, true) == 0)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

PlayerIsOnline(nome[])
{
	new NomeJogador[MAX_PLAYER_NAME];
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && PlayerData[i][pLogged])
		{
			GetPlayerName(i, NomeJogador, sizeof(NomeJogador));
			if(strcmp(nome, NomeJogador, true) == 0)
			{
				return 1;
			}
		}
	}
	return 0;
}

SetPlayerTutorial(playerid, tutorialid)
{
	switch(tutorialid)
	{
		case 0:
		{
			SendWarningMessage(playerid, "O tutorial inicial é obrigatório, por favor, leia-o com atenção!");
			KickEx(playerid);
			DeletePVar(playerid, "TempoTutorial");
		}
		case 1:
		{
			Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "Tutorial - Início", "Primeiras impressões do nosso servidor deverá ser mostrada\nnesta tela. Alguns pontos fortes devem ser destacados, devemos instruir o\njogador de que o servidor é um pouco do modo RP, diferenciando-se do restante.", ">>", "Cancelar");
		}
		case 2:
		{
			Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "Tutorial - Informações", "Orientar o jogador sobre os nossos sistemas e aonde\nele pode encontrar a documentação para conhecer melhor cada\num deles!", ">>", "<<");
		}
		case 3:
		{
			Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "Tutorial - Fim", "Obrigado por ler o tutorial.\n\n\
				A partir de agora caso tenha alguma dúvida, entre em contato com um administrador utilizando o comando: /sos\n\n\
				Crie sua conta em nosso fórum para se manter atualizado sobre o que está acontecendo em nosso servidor.\n\
				Lembrando que o fórum é uma parte fundamental para se jogar aqui.\n\n\
				Desejamos a você um bom jogo.\n\
				Obrigado por jogar em nosso servidor.", "Bem Vindo", "<<");
		}
		case 4:
		{
			if(!PlayerData[playerid][pTutorial])
			{
				SetPlayerToSpawn(playerid);
				
				ClearPlayerChat(playerid, 20);
				
				SendServerMessage(playerid, "Olá %s, seja muito bem vindo ao %s.", ReturnName(playerid, 0), SERVER_NAME);
				SendServerMessage(playerid, "Caso tenha dúvidas contate um administrador através do /sos.");
				
				ResetPlayerMoney(playerid);
				GiveScriptedMoney(playerid, 200);

				new cellphonenumber = RandomizePlayerNumber();

				PlayerData[playerid][pCellphone] = cellphonenumber;
				PlayerData[playerid][pTutorial] = 1;
				PlayerData[playerid][pBank] = 500;
				PlayerData[playerid][pLevel] = 1;

				SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
				Tutorial_ID[playerid] = 0;
				DeletePVar(playerid, "TempoTutorial");
				SetPlayerFreezed(playerid, true);
				SetTimerEx("SpawnTimer", 3000, false, "d", playerid);
				return 1;
			}
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) pode estar usando dialog spoof no dialog final do tutorial.", ReturnName(playerid, 0), playerid);
		}
	}
	return 1;
}

PreloadAnims(playerid)
{
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}

Vehicle_Save(id)
{
	new string_tunning[128], string_weapons[128], query[1620];

	for(new i = 0; i < 14; i++)
	{
		VehicleData[id][vehicleMod][i] = GetVehicleComponentInSlot(id, i);
		format(string_tunning, sizeof(string_tunning), "%s%d|", string_tunning, VehicleData[id][vehicleMod][i]);
	}

	for(new i = 0; i < Car_TrunkWeaponSlots(VehicleData[id][vehicleModel]); i++)
	{
		format(string_weapons, sizeof(string_weapons), "%s%d|%d|", string_weapons, VehicleData[id][vehicleWeapon][i], VehicleData[id][vehicleAmmo][i]);
	}

	mysql_format(this, query, sizeof(query), "UPDATE carros SET vehicleOwnerName = '%e', ID = '%d', vehiclePlate = '%e', vehicleLocked = '%d', vehicleLocator = '%d', vehicleParked = '%d'", 
		VehicleData[id][vehicleOwnerName], VehicleData[id][vehicleOwnerID], VehicleData[id][vehiclePlate], VehicleData[id][vehicleLocked], VehicleData[id][vehicleLocator], VehicleData[id][vehicleParked]);

	mysql_format(this, query, sizeof(query), "%s, vehicleSeguro = '%d', vehicleTrava = '%d', vehicleXMRadio = '%d', vehicleMileage = '%f', vehicleEngine = '%f', vehicleSiren = '%d'", 
		query, VehicleData[id][vehicleSeguro], VehicleData[id][vehicleTrava], VehicleData[id][vehicleXMRadio], VehicleData[id][vehicleMileage], VehicleData[id][vehicleEngine], VehicleData[id][vehicleSiren]);

	mysql_format(this, query, sizeof(query), "%s, vehicleParked_X = '%f', vehicleParked_Y = '%f', vehicleParked_Z = '%f', vehicleParked_A = '%f', vehicleParkedVW = '%d'",
		query, VehicleData[id][vehicleParkedPos][0], VehicleData[id][vehicleParkedPos][1], VehicleData[id][vehicleParkedPos][2], VehicleData[id][vehicleParkedPos][3], VehicleData[id][vehicleParkedVW]);

	mysql_format(this, query, sizeof(query), "%s, vehicleModel = '%d', vehicleFuel = '%f', vehicleFaction = '%d', vehiclePrice = '%d', vehicleColor1 = '%d', vehicleColor2 = '%d'", 
		query, VehicleData[id][vehicleModel], VehicleData[id][vehicleFuel], VehicleData[id][vehicleFaction], VehicleData[id][vehiclePrice], VehicleData[id][vehicleColor][0], VehicleData[id][vehicleColor][1]);

	mysql_format(this, query, sizeof(query), "%s, vehicleMod = '%e', vehicleWeapon = '%e', vehicleMaxHealth = '%f', vehicleJob = '%d', vehicleInteriorWeapon = '%d', vehicleInteriorAmmo = '%d'",
		 query, string_tunning, string_weapons, VehicleData[id][vehicleMaxHealth], VehicleData[id][vehicleJob], VehicleData[id][vehicleInteriorWeapon], VehicleData[id][vehicleInteriorAmmo]);

	GetVehicleHealth(id, VehicleData[id][vehicleHealth]);
	GetVehicleDamageStatus(id, VehicleData[id][vehicleDamage][0], VehicleData[id][vehicleDamage][1], VehicleData[id][vehicleDamage][2], VehicleData[id][vehicleDamage][3]);

	mysql_format(this, query, sizeof(query), "%s, vehicleHealth = '%f', vehicleDamage1 = '%d', vehicleDamage2 = '%d', vehicleDamage3 = '%d', vehicleDamage4 = '%d', vehicleExpressWay = '%d', vehicleExpressMoney = '%d' WHERE vehicleID = '%d'", 
		query, VehicleData[id][vehicleHealth], VehicleData[id][vehicleDamage][0], VehicleData[id][vehicleDamage][1], VehicleData[id][vehicleDamage][2], VehicleData[id][vehicleDamage][3], VehicleData[id][vehicleExpressWay], VehicleData[id][vehicleExpressMoney], VehicleData[id][vehicleID]);

	mysql_tquery(this, query);

	return 1;
}

Vehicle_GetCount(playerid)
{
	new query[43];

	mysql_format(this, query, sizeof(query), "SELECT * FROM carros WHERE ID = '%d'", PlayerData[playerid][pID]);
	mysql_query(this, query);

	return cache_num_rows();
}

Vehicle_GetSlots(playerid)
{
	switch(PlayerData[playerid][pVip])
	{
		case 0: return 2;
		case 1: return 4;
		case 2: return 5;
		case 3: return 6;
	}

	return 0;
}

Vehicle_IsOwner(playerid, carid)
{
	if(!PlayerData[playerid][pLogged])
		return 0;

	if(VehicleData[carid][vehicleOwnerID] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Vehicle_Nearest(playerid, owner = 0)
{
	new Float:pos[3], Float:Spos[3], Float:Radius;

	foreach(new i : Vehicles)
	{
		if(VehicleData[i][vehicleParked] == 1)
		{
			GetVehiclePos(i, pos[0], pos[1], pos[2]);

			GetVehicleModelInfo(VehicleData[i][vehicleModel], VEHICLE_MODEL_INFO_SIZE, Spos[0], Spos[1], Spos[2]);

			Radius = floatsqroot((Spos[0] + Spos[0]) + (Spos[1] + Spos[1]));

			if(!owner)
			{
				if(IsPlayerInRangeOfPoint(playerid, Radius, pos[0], pos[1], pos[2]) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(i))
					return i;
			}
			else
			{
				if(IsPlayerInRangeOfPoint(playerid, Radius, pos[0], pos[1], pos[2]) && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(i) && PlayerData[playerid][pID] == VehicleData[i][vehicleOwnerID])
					return i;
			}
		}
	}

	return INVALID_VEHICLE_ID;
}

Vehicle_Inside(playerid)
{
	if(PlayerData[playerid][pDrivingTest])
		return -1;

	new carid;

	if(IsPlayerInAnyVehicle(playerid) && (carid = GetPlayerVehicleID(playerid)))
		return carid;

	return INVALID_VEHICLE_ID;
}

Vehicle_SetMod(carid)
{
	for(new i = 0; i < 14; i++)
	{
		if(!VehicleData[carid][vehicleMod][i])
			continue;

		AddVehicleComponent(carid, VehicleData[carid][vehicleMod][i]);		
	} 

	return 1;
}

Vehicle_SetLocked(carid)
{
	if(VehicleData[carid][vehicleLocked])
		SetDoorStatus(carid, true);
	else
		SetDoorStatus(carid, false);

	return 1;
}

Vehicle_IncreaseMileage(playerid, vehicleid)
{
	if(!IsValidVehicle(vehicleid))
		return 0;

	if(GetEngineStatus(vehicleid))
	{
		if(!VehicleData[vehicleid][vehicleFaction] && VehicleData[vehicleid][vehicleJob] == -1)
		{
			VehicleData[vehicleid][vehicleMileage] += GetPlayerSpeed(playerid) * 0.00055678474; // -> 3.34 miles per hour at 100mph (constant)
		}		
	}

	return 1;
}

Vehicle_Stolen(id)
{
	switch(VehicleData[id][vehicleSeguro])
	{
		case 0:
		{
			VehicleData[id][vehicleParked] = 0;
			Vehicle_Remove(id);
		}
		default:
		{
			VehicleData[id][vehicleParked] = 3;
			Vehicle_Save(id);
		}
	}

	SetEngineStatus(id, false);
	SetLightStatus(id, false);

	Vehicle_Destroy(id);

	return 1;
}

Vehicle_GetSpawned(playerid)
{
	new count;

	foreach(new i : Vehicles) if(Vehicle_IsOwner(playerid, i) && VehicleData[i][vehicleParked] == 1)
		count++;

	return count;
}

Vehicle_GetSpawnedSlot(playerid)
{
	switch(PlayerData[playerid][pVip])
	{
		case 1,2: return 3;
		case 3: return 4;
		default: return 2;
	}

	return 0;
}

Vehicle_GetCrates(vehicleid)
{
	new count, vehicle_load = IsLoadableVehicle(vehicleid);

	for(new i = 0; i < vehicle_load; i++) if(VehicleData[vehicleid][vehicleCrateSlot][i])
		count++;

	return count;
}

Vehicle_Remove(vehicleid)
{
	new query[55];

	mysql_format(this, query, sizeof(query), "DELETE FROM carros WHERE vehicleID = '%d'", vehicleid);
	mysql_tquery(this, query);

	Vehicle_RemoveAllItems(vehicleid);

	return 1;
}

Vehicle_Destroy(vehicleid, safe = 0)
{
	if(!IsValidVehicle(vehicleid))
		return 0;

	VehicleData[vehicleid][vehicleID] = 0;
	VehicleData[vehicleid][vehiclePlate] = EOS;
	VehicleData[vehicleid][vehicleOwnerID] = 0;

	for(new i = 0; i != MAX_CAR_INV_STORAGE; i++)
	{
		CarStorage[vehicleid][i][cItemExists] = false;
		CarStorage[vehicleid][i][cItemModel] = 0;
		CarStorage[vehicleid][i][cItemQuantity] = 0;
	}

	DestroyVehicle(vehicleid);

	if(!safe)
		Iter_Remove(Vehicles, vehicleid);

	return 1;
}

Business_Save(bizid)
{
	if(!BusinessData[bizid][businessExists])
		return 0;

	new query[1080], string_products[128], string_products_price[128];

	for(new i = 0; i < MAX_BUSINESS_PRODUCT; i++)
	{
		format(string_products, sizeof(string_products), "%s%d|", string_products, BusinessData[bizid][businessProduct][i]);
		format(string_products_price, sizeof(string_products_price), "%s%d|", string_products_price, BusinessData[bizid][businessProductPrice][i]);
	}

	mysql_format(this, query, sizeof(query), "UPDATE business SET businessType = '%d', businessPrice = '%d', businessVW = '%d', businessInterior = '%d', businessVault = '%d'",
		BusinessData[bizid][businessType], BusinessData[bizid][businessPrice], BusinessData[bizid][businessVW], BusinessData[bizid][businessInterior], BusinessData[bizid][businessVault]);

	mysql_format(this, query, sizeof(query), "%s, businessOwnerID = '%d', businessStock = '%d', businessFuel = '%d', businessBuying = '%d', businessBuyingPrice = '%d'",
		query, BusinessData[bizid][businessOwnerID], BusinessData[bizid][businessStock], BusinessData[bizid][businessFuel], BusinessData[bizid][businessBuying], BusinessData[bizid][businessBuyingPrice]);

	mysql_format(this, query, sizeof(query), "%s, businessOwnerName = '%e', businessName = '%e', businessProduct = '%e', businessProductPrice = '%e', businessBuyingProduct = '%d'",
		query, BusinessData[bizid][businessOwnerName], BusinessData[bizid][businessName], string_products, string_products_price, BusinessData[bizid][businessBuyingProduct]);

	mysql_format(this, query, sizeof(query), "%s, businessX = '%f', businessY = '%f', businessZ = '%f', businessIntX = '%f', businessIntY = '%f', businessIntZ = '%f' WHERE businessID = '%d'",
		query, BusinessData[bizid][businessX], BusinessData[bizid][businessY], BusinessData[bizid][businessZ], BusinessData[bizid][businessIntX], BusinessData[bizid][businessIntY], BusinessData[bizid][businessIntZ], BusinessData[bizid][businessID]);

	mysql_tquery(this, query);

	return 1;
}

Business_Refresh(bizid)
{
	if(!BusinessData[bizid][businessExists])
		return 0;

	if(IsValidDynamicCP(BusinessData[bizid][businessCP]))
		DestroyDynamicCP(BusinessData[bizid][businessCP]);

	if(IsValidDynamicPickup(BusinessData[bizid][businessPickup]))
		DestroyDynamicPickup(BusinessData[bizid][businessPickup]);

	BusinessData[bizid][businessPickup] = CreateDynamicPickup(1239, 23, BusinessData[bizid][businessX], BusinessData[bizid][businessY], BusinessData[bizid][businessZ]);

	BusinessData[bizid][businessCP] = CreateDynamicCP(BusinessData[bizid][businessX], BusinessData[bizid][businessY], BusinessData[bizid][businessZ]-0.7, 1.0, 0, 0, -1, 1.7);
	Streamer_SetIntData(STREAMER_TYPE_CP, BusinessData[bizid][businessCP], E_STREAMER_EXTRA_ID, bizid);

	return 1;
}

Business_Delete(bizid)
{
	if(!BusinessData[bizid][businessExists])
		return 0;

	new query[126];

	mysql_format(this, query, sizeof(query), "DELETE FROM business WHERE businessID = '%d'", BusinessData[bizid][businessID]);
	mysql_tquery(this, query);

	if(IsValidDynamicCP(BusinessData[bizid][businessCP]))
		DestroyDynamicCP(BusinessData[bizid][businessCP]);

	if(IsValidDynamicPickup(BusinessData[bizid][businessPickup]))
		DestroyDynamicPickup(BusinessData[bizid][businessPickup]);

	BusinessData[bizid][businessExists] = false;

	Iter_Remove(Business, bizid);

	return 1;
}

Business_GetType(bizid)
{
	new type_name[32];

	switch(BusinessData[bizid][businessType])
	{
		case BUSINESS_INVALID: type_name = "Empresa inválida";
		case BUSINESS_FUEL: type_name = "Posto de combustível";
		case BUSINESS_247: type_name = "Mercadinho";
		case BUSINESS_CLOTHSHOP: type_name = "Loja de roupas";
		case BUSINESS_RESTAURANT: type_name = "Restaurante";
	}

	return type_name;
}

Tax_Percent(price)
{
	return floatround((float(price) / 100) * 85);
}

Business_GetCount(playerid)
{
	new count = 0;

	foreach(new i : Business)
	{
		if(Business_IsOwner(playerid, i))
			count++;
	}
	return count;
}

Business_Nearest(playerid)
{
	foreach(new i : Business) if(BusinessData[i][businessExists])
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[i][businessX], BusinessData[i][businessY], BusinessData[i][businessZ]))
			return i;	
	}
	return -1;
}

Business_Inside(playerid)
{
	if(PlayerData[playerid][pOWBusiness] != -1)
		return PlayerData[playerid][pOWBusiness];

	if(PlayerData[playerid][pBusiness] != -1)
	{
		foreach(new i : Business) if(BusinessData[i][businessExists])
		{
			if(BusinessData[i][businessID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][businessInterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][businessVW])
				return i;
		}
	}
	return -1;
}

Business_IsOwner(playerid, empid)
{
	if(!PlayerData[playerid][pLogged] || !BusinessData[empid][businessExists])
		return 0;

	if(BusinessData[empid][businessOwnerID] != 0 && BusinessData[empid][businessOwnerID] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Business_BuyItem(playerid, bizid, itemname[], itemid, price)
{
	if(!PlayerData[playerid][pLogged] || !BusinessData[bizid][businessExists])
		return 0;

	if(GetScriptedMoney(playerid) < price)
		return SendWarningMessage(playerid, "Você não tem %s para poder comprar um(a) %s.", FormatNumber(price), itemname);

	if(!strcmp(itemname, "Máscara", true))
	{
		if(PlayerData[playerid][pMasked])
			return SendWarningMessage(playerid, "Você está com uma máscara equipada.");

		if(!PlayerData[playerid][pVip] && PlayerData[playerid][pMask])
			return SendWarningMessage(playerid, "Apenas jogadores Prime podem trocar a númeração da máscara.");

		new query[256];

		if(PlayerData[playerid][pVip] >= 1 && PlayerData[playerid][pMask])
		{
			mysql_format(this, query, sizeof(query), "INSERT INTO `mascaras_antigas` (`maskLastOwner`, `maskChangedDate`, `maskNumber`) VALUES ('%e', '%e', '%d')", MaskData[playerid][maskOwner], ReturnDate(), MaskData[playerid][maskNumber]);
			mysql_tquery(this, query);
		}

		new mask_random = RandomizeMaskID();

		MaskData[playerid][maskNumber] = mask_random;
		format(MaskData[playerid][maskBought], 32, ReturnDate());
		format(MaskData[playerid][maskOwner], 24, ReturnName(playerid));

		Mask_Save(playerid);

		GiveScriptedMoney(playerid, - price);

		SendGreenMessage(playerid, "Você comprou um(a) Máscara (ID: %d) por %s.", mask_random, FormatNumber(price));
		PlayerData[playerid][pMask] = 1;

		mysql_format(this, query, sizeof(query), "UPDATE players SET Mask = '%d' WHERE UserID = '%d'", PlayerData[playerid][pMask], PlayerData[playerid][pID]);
		mysql_tquery(this, query);
	}
	else
	{
		new item = Inventory_Add(playerid, itemname, itemid);

		if(item == -1)
			return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

		GiveScriptedMoney(playerid, - price);

		SendGreenMessage(playerid, "Você comprou um(a) %s por %s.", itemname, FormatNumber(price));
	}

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s paga %s para o atendente e recebe um(a) %s.", ReturnName(playerid, 0), FormatNumber(price), itemname);

	BusinessData[bizid][businessStock] -= 1;
	Business_IncreaseVault(bizid, price);

	return 1;
}

Business_IncreaseVault(bizid, price)
{
	if(!price || !BusinessData[bizid][businessExists])
		return 0;

	BusinessData[bizid][businessVault] += Tax_Percent(price); //Para o cofre, liquidando impostos

	Tax_AddPercent(price); // Governo

	Business_Save(bizid);

	return 1;
}

Business_ProductName(productid)
{
	new string[32] = "Produto inválido";

	if(ProductData[productid][productID] == productid)
	{
		format(string, sizeof(string), ProductData[productid][productName]);
	}

	return string;
}

Business_ProductID(productid)
{
	if(ProductData[productid][productID] == productid)
	{
		return ProductData[productid][productItem];
	}

	return 0;
}

GetBusinessByID(sqlid)
{
	foreach(new i : Business) if(BusinessData[i][businessExists])
	{
		if(BusinessData[i][businessID] == sqlid)
			return i;
	}

	return -1;
}

GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	new Float:fPos[4], Float:fSize[3];

	if(!IsValidVehicle(vehicleid))
	{
		x = 0;
		y = 0;
		z = 0;

		return 0;
	}
	else
	{
		GetVehiclePos(vehicleid, fPos[0], fPos[1], fPos[2]);
		GetVehicleZAngle(vehicleid, fPos[3]);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]);

		x = fPos[0] - (floatsqroot(fSize[1] + fSize[1]) * floatsin(-fPos[3], degrees));
		y = fPos[1] - (floatsqroot(fSize[1] + fSize[1]) * floatcos(-fPos[3], degrees));
		z = fPos[2];
	}

	return 1;
}

IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

IsLoadableVehicle(vehicleid)
{
	new slotcarga = -1;
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
		//com objetos
		case 422: slotcarga = 2;
		case 478: slotcarga = 4;
		case 554: slotcarga = 4;
		case 600: slotcarga = 2;
		case 543: slotcarga = 2;
		//sem objetos
		case 413: slotcarga = 5;
		case 459: slotcarga = 5;
		case 482: slotcarga = 5;
		case 440: slotcarga = 5;
		case 414: slotcarga = 13;
		case 499: slotcarga = 13;
		case 456: slotcarga = 20;
		case 455: slotcarga = 23;
	}
	return slotcarga;
}

SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
		args,
		str[144];

	/*
	*  Custom function that uses #emit to format variables into a string.
	*  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
		SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendChatMessage(Float:radius, playerid, const text[], {Float, _}:...)
{
	static
		args,
		str[192];

	if((args = numargs()) <= 3)
	{
		LocalChat(playerid, radius, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL		5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 	2
			#emit ADD.C 		12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 	format
		#emit LCTRL 		5
		#emit SCTRL 		4

		LocalChat(playerid, radius, str);

		#emit RETN
	}
	return 1;
}

SendAdminMessage(color, const str[], {Float,_}:...)
{
	static
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 8); end > start; end -= 4)
		{
		#emit LREF.pri end
		#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 && !PlayerData[i][pTogAdmin])
			{
				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach(new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 && !PlayerData[i][pTogAdmin])
		{
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid) && PlayerData[targetid][pSpectator] == INVALID_PLAYER_ID) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

IsPlayerNearVehicle(playerid, vehicleid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehiclePos(vehicleid, fX, fY, fZ);

	return IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 16); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) 
			{
				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach(new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius))
		{
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

FormatNumber(number, prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++)
		{
			if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
		strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

DropPlayerItem(playerid, itemid, quantity = 1)
{
	if(itemid == -1 || !InventoryData[playerid][itemid][invExists])
		return 0;

	new Float:x, Float:y, Float:z, Float:angle, string[32];

	format(string, 32, InventoryData[playerid][itemid][invItem]);

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);
	GetXYInFrontOfPlayer(playerid, x, y, 1);

	DropItem(string, ReturnName(playerid), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	Inventory_Remove(playerid, string, quantity);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s joga um(a) \"%s\" no chão.", ReturnName(playerid, 0), string);
	return 1;
}

DropItem(item[], player[], model, quantity, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0)
{
	new query[300], i;

	if((i = Iter_Free(DItems)) < MAX_DROPPED_ITEMS)
	{
		format(DroppedItems[i][droppedItem], 32, item);
		format(DroppedItems[i][droppedPlayer], 24, player);

		DroppedItems[i][droppedModel] = model;
		DroppedItems[i][droppedQuantity] = quantity;
		DroppedItems[i][droppedWeapon] = weaponid;
		DroppedItems[i][droppedAmmo] = ammo;
		DroppedItems[i][droppedPos][0] = x;
		DroppedItems[i][droppedPos][1] = y;
		DroppedItems[i][droppedPos][2] = z;

		DroppedItems[i][droppedInt] = interior;
		DroppedItems[i][droppedWorld] = world;

		if(IsWeaponModel(model)) 
		{
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
		}
		else
		{
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
		}

		mysql_format(this, query, sizeof(query), "INSERT INTO `itensdropados` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`) VALUES('%e', '%e', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world);
		mysql_tquery(this, query, "OnDroppedItem", "d", i);

		Iter_Add(DItems, i);

		return i;
	}
	return -1;
}

Item_Nearest(playerid)
{
	foreach(new i : DItems) if(DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
	{
		if(GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
			return i;
	}
	return -1;
}

Item_SetQuantity(itemid, amount)
{
	new
		string[75];

	if(itemid != -1 && DroppedItems[itemid][droppedModel])
	{
		DroppedItems[itemid][droppedQuantity] = amount;

		mysql_format(this, string, sizeof(string), "UPDATE `itensdropados` SET `itemQuantity` = '%d' WHERE `ID` = '%d'", amount, DroppedItems[itemid][droppedID]);
		mysql_tquery(this, string);
	}
	return 1;
}

Item_Delete(itemid)
{
	static
		query[64];

	if(itemid != -1 && DroppedItems[itemid][droppedModel])
	{
		DroppedItems[itemid][droppedModel] = 0;
		DroppedItems[itemid][droppedQuantity] = 0;
		DroppedItems[itemid][droppedPos][0] = 0.0;
		DroppedItems[itemid][droppedPos][1] = 0.0;
		DroppedItems[itemid][droppedPos][2] = 0.0;
		DroppedItems[itemid][droppedInt] = 0;
		DroppedItems[itemid][droppedWorld] = 0;

		DestroyDynamicObject(DroppedItems[itemid][droppedObject]);

		mysql_format(this, query, sizeof(query), "DELETE FROM `itensdropados` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]);
		mysql_tquery(this, query);

		Iter_Remove(DItems, itemid);
	}
	return 1;
}

PickupItem(playerid, itemid)
{
	if(itemid != -1 && DroppedItems[itemid][droppedModel])
	{
		new id = Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]);

		if (id == -1)
			return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

		Item_Delete(itemid);
	}
	return 1;
}

Inventory_Open(playerid)
{
	new count = 0;

	sz_MiscString[0] = 0;

	for(new i = 0; i < MAX_INVENTORY; i++)
	{
		format(sz_MiscString, sizeof(sz_MiscString), "%s%s (Quantidade: %d)\n", sz_MiscString, InventoryData[playerid][i][invItem], InventoryData[playerid][i][invQuantity]);
		ListedOptions[playerid][count++] = i;
	}
	Dialog_Show(playerid, InventoryPlayer, DIALOG_STYLE_LIST, "Escolha o item", sz_MiscString, "Selecionar", "Cancelar");
	return 1;
}

Inventory_Clear(playerid)
{
	new string[64];

	for(new i = 0; i < MAX_INVENTORY; i++)
	{
		if (InventoryData[playerid][i][invExists])
		{
			InventoryData[playerid][i][invExists] = 0;
			InventoryData[playerid][i][invModel] = 0;
			InventoryData[playerid][i][invQuantity] = 0;
			format(InventoryData[playerid][i][invItem], 32, "Vazio");
		}
	}
	mysql_format(this, string, sizeof(string), "DELETE FROM `inventario` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	mysql_tquery(this, string);

	return 1;
}

Inventory_Set(playerid, item[], model, amount)
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid == -1 && amount > 0)
		Inventory_Add(playerid, item, model, amount);

	else if (amount > 0 && itemid != -1)
		Inventory_SetQuantity(playerid, item, amount);

	else if (amount < 1 && itemid != -1)
		Inventory_Remove(playerid, item, -1);

	return 1;
}

Inventory_GetItemID(playerid, item[])
{
	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
		if (!InventoryData[playerid][i][invExists])
			continue;

		if (!strcmp(InventoryData[playerid][i][invItem], item)) return i;
	}
	return -1;
}

Inventory_GetFreeID(playerid)
{
	if (Inventory_Items(playerid) >= MAX_INVENTORY)
		return -1;

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
		if (!InventoryData[playerid][i][invExists])
			return i;
	}
	return -1;
}

Inventory_Items(playerid)
{
	new count;

	for (new i = 0; i != MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) 
	{
		count++;
	}
	return count;
}

Inventory_Count(playerid, item[])
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid != -1)
	    return InventoryData[playerid][itemid][invQuantity];

	return 0;
}

Inventory_HasItem(playerid, item[])
{
	return (Inventory_GetItemID(playerid, item) != -1);
}

Inventory_SetQuantity(playerid, item[], quantity)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid != -1)
	{
		mysql_format(this, string, sizeof(string), "UPDATE `inventario` SET `invQuantity` = '%d' WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
		mysql_tquery(this, string);

		InventoryData[playerid][itemid][invQuantity] = quantity;
	}
	return 1;
}

Inventory_Add(playerid, item[], model, quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid == -1)
	{
		itemid = Inventory_GetFreeID(playerid);

		if (itemid != -1)
		{
			InventoryData[playerid][itemid][invExists] = true;
			InventoryData[playerid][itemid][invModel] = model;
			InventoryData[playerid][itemid][invQuantity] = quantity;

			format(InventoryData[playerid][itemid][invItem], 32, item);

			mysql_format(this, string, sizeof(string), "INSERT INTO `inventario` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%e', '%d', '%d')", PlayerData[playerid][pID], item, model, quantity);
			mysql_tquery(this, string, "OnInventoryAdd", "dd", playerid, itemid);

			return itemid;
		}
		return -1;
	}
	else
	{
		mysql_format(this, string, sizeof(string), "UPDATE `inventario` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
		mysql_tquery(this, string);

		InventoryData[playerid][itemid][invQuantity] += quantity;
	}
	return itemid;
}

Inventory_Remove(playerid, item[], quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid != -1)
	{
		if (InventoryData[playerid][itemid][invQuantity] > 0)
		{
			InventoryData[playerid][itemid][invQuantity] -= quantity;
		}
		if (quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
		{
			InventoryData[playerid][itemid][invExists] = false;
			InventoryData[playerid][itemid][invModel] = 0;
			InventoryData[playerid][itemid][invQuantity] = 0;
			format(InventoryData[playerid][itemid][invItem], 32, "Vazio");

			mysql_format(this, string, sizeof(string), "DELETE FROM `inventario` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
			mysql_tquery(this, string);
		}
		else if (quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
		{
			mysql_format(this, string, sizeof(string), "UPDATE `inventario` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
			mysql_tquery(this, string);
		}
		return 1;
	}
	return 0;
}

IsWeaponModel(model)
{
	new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
	};
	for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if (g_aWeaponModels[i] == model) 
	{
		return 1;
	}
	return 0;
}

GetWeaponModel(weaponid)
{
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if (1 <= weaponid <= 46)
	   return g_aWeaponModels[weaponid];

	return 0;
}

PlayerPlaySoundEx(playerid, sound, Float:range = 5.0)
{
	new
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach(new i : Player) if(IsPlayerInRangeOfPoint(i, range, x, y, z) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid) && GetPlayerInterior(i) == GetPlayerInterior(playerid))
	{
		PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

GetNumberOwner(number)
{
	foreach(new i : Player) if(PlayerData[i][pCellphone] == number && Inventory_HasItem(i, "Celular")) 
	{
		return i;
	}
	return INVALID_PLAYER_ID;
}

ReturnWeaponName(weaponid)
{
	new name[32];

	GetWeaponName(weaponid, name, sizeof(name));

	if(!weaponid)
		name = "Nenhum";

	else if(weaponid == 18)
		name = "Coquetel Molotov";

	else if (weaponid == 44)
		name = "Nightvision";

	else if (weaponid == 45)
		name = "Infrared";

	return name;
}

Float:GetXYInFrontOfPlayer(playerid, &Float:q, &Float:w, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, q, w, a);
	if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	else GetPlayerFacingAngle(playerid, a);
	q += (distance * floatsin(-a, degrees));
	w += (distance * floatcos(-a, degrees));
	return a;
}

Taxi_ShowCalls(playerid)
{
	sz_MiscString[0] = 0;

	foreach(new i : Player) if(PlayerData[i][pTaxiCalled])
	{
		format(sz_MiscString, sizeof(sz_MiscString), "%s%d: %s (%s)\n", sz_MiscString, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	if(!strlen(sz_MiscString))
	{
		SendWarningMessage(playerid, "Não há chamados de taxi para ser aceito.");
	}
	else Dialog_Show(playerid, AceitarTaxi, DIALOG_STYLE_LIST, "Lista de chamados", sz_MiscString, "Aceitar", "Cancelar");

	return 1;
}

LeaveTaxi(playerid, driverid)
{
	if(driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
	{
		GiveScriptedMoney(playerid,  - PlayerData[playerid][pTaxiFee]);
		GiveScriptedMoney(driverid, PlayerData[playerid][pTaxiFee]);

		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s sai do taxi e paga %s para o taxista.", ReturnName(playerid, 0), FormatNumber(PlayerData[playerid][pTaxiFee]));

		AC_RemovePlayerFromVehicle(playerid);
		PlayerData[playerid][pTaxiFee] = 0;
		PlayerData[playerid][pTaxiTime] = 0;
		PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	foreach(new i : Player)
	{
		if((i != playerid) && (PlayerData[i][pJob] == EMPREGO_Taxista && PlayerData[i][pTaxiDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
			return 1;
	}
	return 0;
}

Get_TaxiOnDuty()
{
	new count = -1;

	foreach(new i : Player) if(PlayerData[i][pJob] == EMPREGO_Taxista && PlayerData[i][pTaxiDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		count++;
	
	return count;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
	{
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
	new id = -1;

	if((id = House_Inside(playerid)) != -1)
	{
		if(HouseData[id][houseComplex] == -1)
		{
			fX = HouseData[id][housePos][0];
			fY = HouseData[id][housePos][1];
			fZ = HouseData[id][housePos][2];
		}
		else
		{
			foreach(new i : Complex) if(HouseData[id][houseComplex] == ComplexData[i][complexID])
			{
				fX = ComplexData[i][complexX];
				fY = ComplexData[i][complexY];
				fZ = ComplexData[i][complexZ];
				break;
			}
		}
	}
	else if((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][businessX];
		fY = BusinessData[id][businessY];
		fZ = BusinessData[id][businessZ];
	}
	else if((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else if((id = Complex_Inside(playerid)) != -1)
	{
		fX = ComplexData[id][complexX];
		fY = ComplexData[id][complexY];
		fZ = ComplexData[id][complexZ];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}

GetPlayerLocation(playerid)
{
	new Float:fX, Float:fY, Float:fZ, string[32];

	GetPlayerLocationEx(playerid, fX, fY, fZ);
	format(string, 32, GetLocation(fX, fY, fZ));

	return string;
}

GetVehicleLocation(vehicleid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ,
		string[32];

	GetVehiclePos(vehicleid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

GetLocation(Float:fX, Float:fY, Float:fZ)
{
 	enum e_ZoneData
	{
		e_ZoneName[32 char],
		Float:e_ZoneArea[6]
	};
	static const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new
		name[32] = "San Andreas";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) 
	{
		strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}

GetEntranceByID(sqlid)
{
	foreach(new i : Entrances) if(EntranceData[i][entranceID] == sqlid)
		return i;

	return -1;
}

Entrance_Create(playerid, name[])
{
	new i = Iter_Free(Entrances), Float:x, Float:y, Float:z;

	if(i < MAX_ENTRANCES && GetPlayerPos(playerid, x, y, z))
	{
		EntranceData[i][entranceExists] = true;

		EntranceData[i][entranceType] = 0;
		format(EntranceData[i][entranceName], 128, name);

		EntranceData[i][entrancePos][0] = x;
		EntranceData[i][entrancePos][1] = y;
		EntranceData[i][entrancePos][2] = z;

		EntranceData[i][entranceExit][0] = 0.0;
		EntranceData[i][entranceExit][1] = 0.0;
		EntranceData[i][entranceExit][2] = 0.0;
		EntranceData[i][entranceInterior] = 0;
		EntranceData[i][entranceVW] = 0;

		Entrance_Refresh(i);

		mysql_tquery(this, "INSERT INTO entradas (entranceID) VALUES (null)", "OnEntranceCreated", "d", i);

		Iter_Add(Entrances, i);
		
		return i;
	}

	return -1;
}

Entrance_Save(entranceid)
{
	new query[438];

	mysql_format(this, query, sizeof(query), "UPDATE entradas SET entranceType = '%d', entranceName = '%e', entranceX = '%f', entranceY = '%f', entranceZ = '%f', entranceIntX = '%f', entranceIntY = '%f', entranceIntZ = '%f', entranceInterior = '%d', entranceVW = '%d' WHERE entranceID = '%d'",
		EntranceData[entranceid][entranceType], EntranceData[entranceid][entranceName], EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExit][0], EntranceData[entranceid][entranceExit][1], EntranceData[entranceid][entranceExit][2], EntranceData[entranceid][entranceInterior], EntranceData[entranceid][entranceVW], EntranceData[entranceid][entranceID]);

	mysql_tquery(this, query);

	return 1;
}

Entrance_Delete(entranceid)
{
	if(entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
			DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if(IsValidDynamicCP(EntranceData[entranceid][entranceCP]))
			DestroyDynamicCP(EntranceData[entranceid][entranceCP]);

		new query[64];
		mysql_format(this, query, sizeof(query), "DELETE FROM entradas WHERE entranceID = '%d'", EntranceData[entranceid][entranceID]);
		mysql_tquery(this, query);

		EntranceData[entranceid][entranceExists] = false;

		Iter_Remove(Entrances, entranceid);
	}

	return 1;
}

Entrance_Refresh(entranceid)
{
	if(EntranceData[entranceid][entranceExists])
	{
		if(IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
			DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if(IsValidDynamicCP(EntranceData[entranceid][entranceCP]))
			DestroyDynamicCP(EntranceData[entranceid][entranceCP]);
		
		EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(19133, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2] + 0.2);
		
		EntranceData[entranceid][entranceCP] = CreateDynamicCP(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2] - 0.7, 1.0, 0, 0, -1, 1.7);
		Streamer_SetIntData(STREAMER_TYPE_CP, EntranceData[entranceid][entranceCP], E_STREAMER_EXTRA_ID, entranceid);
	}

	return 1;
}

Entrance_Nearest(playerid)
{
	foreach(new i : Entrances) if(EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
		return i;

	return -1;
}

Entrance_Inside(playerid)
{
	if(PlayerData[playerid][pEntrance] != -1)
	{
		foreach(new i : Entrances) if(EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceVW])
			return i;
	}	
	return -1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
	new query[192];

	for(new i = 0; i < MAX_GPS_LOCATIONS; i++) if(!LocationData[playerid][i][locationExists])
	{
		LocationData[playerid][i][locationExists] = true;
		format(LocationData[playerid][i][locationName], 32, name);

		LocationData[playerid][i][locationPos][0] = x;
		LocationData[playerid][i][locationPos][1] = y;
		LocationData[playerid][i][locationPos][2] = z;

		mysql_format(this, query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES ('%d', '%e', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], name, x, y, z);
		mysql_tquery(this, query, "OnLocationAdd", "dd", playerid, i);
		return i;
	}
	return -1;
}

Location_GetID(playerid, name[])
{
	for(new i = 0; i < MAX_GPS_LOCATIONS; i++) if(LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true))
	{
		return i;
	}
	return -1;
}

Location_Delete(playerid, name[])
{
	new query[96];

	for(new i = 0; i < MAX_GPS_LOCATIONS; i++) if(LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true))
	{
		LocationData[playerid][i][locationExists] = false;

		LocationData[playerid][i][locationPos][0] = 0.0;
		LocationData[playerid][i][locationPos][1] = 0.0;
		LocationData[playerid][i][locationPos][2] = 0.0;

		mysql_format(this, query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
		mysql_tquery(this, query);
		return 1;
	}
	return 0;
}

GetClosestEntrance(playerid, type)
{
	new Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1;

	foreach(new i : Entrances) if(EntranceData[i][entranceType] == type)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

		if(fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

GetClosestATM(playerid)
{
	new Float:fDistance[2] = {300.0, 0.0},
	iIndex = -1;

	foreach(new i : ATM) if(ATMData[i][atmExists])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]);

		if(fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

GetClosestBusiness(playerid, type)
{
	new Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1;

	foreach(new i : Business) if(BusinessData[i][businessType] == type)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, BusinessData[i][businessX], BusinessData[i][businessY], BusinessData[i][businessZ]);

		if(fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

House_Save(houseid)
{
	new query[1700];

	mysql_format(this, query, sizeof(query), "UPDATE `casas` SET `houseOwner` = '%d', `housePrice` = '%d', `houseOwnerName` = '%e', `houseAddress` = '%e', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseVW` = '%d'",
		HouseData[houseid][houseOwner],
		HouseData[houseid][housePrice],
		HouseData[houseid][houseOwnerName],
		HouseData[houseid][houseAddress],
		HouseData[houseid][housePos][0],
		HouseData[houseid][housePos][1],
		HouseData[houseid][housePos][2],
		HouseData[houseid][housePos][3],
		HouseData[houseid][houseInt][0],
		HouseData[houseid][houseInt][1],
		HouseData[houseid][houseInt][2],
		HouseData[houseid][houseInt][3],
		HouseData[houseid][houseInterior],
		HouseData[houseid][houseVW]);

	for(new i = 0; i < MAX_HOUSES_WEAPON; i++)
	{
		mysql_format(this, query, sizeof(query), "%s, `houseWeapon%d` = '%d', `houseAmmo%d` = '%d'", query, i + 1, HouseData[houseid][houseWeapon][i], i + 1, HouseData[houseid][houseAmmo][i]);
	}

	mysql_format(this, query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d', `houseFurnitureA1` = '%d', `houseFurnitureA2` = '%d', `houseComplex` = '%d', `houseExtInterior` = '%d', `houseExtVW` = '%d' WHERE `houseID` = '%d'",
		query,
		HouseData[houseid][houseLocked],
		HouseData[houseid][houseMoney],
		HouseData[houseid][houseFurnitureA1],
		HouseData[houseid][houseFurnitureA2],
		HouseData[houseid][houseComplex],
		HouseData[houseid][houseExtInterior],
		HouseData[houseid][houseExtVW],
		HouseData[houseid][houseID]);

	mysql_tquery(this, query);
	return 1;
}

House_Inside(playerid)
{	
	if(PlayerData[playerid][pHouse] != -1)
	{
		foreach(new i : Houses)
		{
			if(HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseVW])
				return i;
		}
	}
	return -1;
}

House_Nearest(playerid)
{
	foreach(new i : Houses) if(HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]) && GetPlayerInterior(playerid) == HouseData[i][houseExtInterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExtVW])
		return i;

	return -1;
}

House_Closest(playerid)
{
	foreach(new i : Houses) if(HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 25.0, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
		return i;

	return -1;
}

House_Refresh(houseid)
{
	if(houseid != -1 && HouseData[houseid][houseExists])
	{
		if(IsValidDynamicPickup(HouseData[houseid][housePickup]))
			DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if(IsValidDynamicCP(HouseData[houseid][houseCP]))
			DestroyDynamicCP(HouseData[houseid][houseCP]);

		if(!HouseData[houseid][houseOwner])
			HouseData[houseid][housePickup] = CreateDynamicPickup(19470, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2] - 0.3, HouseData[houseid][houseExtVW], HouseData[houseid][houseExtInterior]);

		HouseData[houseid][houseCP] = CreateDynamicCP(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2]-0.7, 1.0, HouseData[houseid][houseExtVW], HouseData[houseid][houseExtInterior], -1, 1.7);
		Streamer_SetIntData(STREAMER_TYPE_CP, HouseData[houseid][houseCP], E_STREAMER_EXTRA_ID, houseid);
	}
	return 1;
}

House_GetCount(playerid)
{
	new count = 0;
	foreach(new i : Houses)
	{
		if(HouseData[i][houseExists] && House_IsOwner(playerid, i))
			count++;
	}
	return count;
}

GetHouseByID(uid)
{
	foreach(new i : Houses) if(HouseData[i][houseExists] && HouseData[i][houseID] == uid)
		return i;

	return -1;
}

House_Create(playerid, address[], price)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		new i;
		if((i = Iter_Free(Houses)) < MAX_HOUSES)
		{
			HouseData[i][houseExists] = true;
			HouseData[i][houseOwner] = 0;
			HouseData[i][housePrice] = price;
			HouseData[i][houseMoney] = 0;

			format(HouseData[i][houseAddress], 32, address);
			format(HouseData[i][houseOwnerName], 24, "O estado");

			HouseData[i][houseFurnitureA1] = -1;
			HouseData[i][houseFurnitureA2] = -1;

			HouseData[i][housePos][0] = x;
			HouseData[i][housePos][1] = y;
			HouseData[i][housePos][2] = z;
			HouseData[i][housePos][3] = angle;

			HouseData[i][houseInt][0] = 2269.8772;
			HouseData[i][houseInt][1] = -1210.3240;
			HouseData[i][houseInt][2] = 1047.5625;
			HouseData[i][houseInt][3] = 90.0000;

			HouseData[i][houseInterior] = 10;
			HouseData[i][houseComplex] = PlayerData[playerid][pComplex];
			HouseData[i][houseExtVW] = GetPlayerVirtualWorld(playerid);
			HouseData[i][houseExtInterior] = GetPlayerInterior(playerid);

			HouseData[i][houseLocked] = false;

			House_Refresh(i);

			Iter_Add(Houses, i);

			mysql_tquery(this, "INSERT INTO `casas` (`houseOwner`) VALUES (0)", "OnHouseCreated", "d", i);
			return i;
		}
	}
	return -1;
}

House_Delete(houseid, adminid, safe = 0)
{
	if(houseid != -1 && HouseData[houseid][houseExists])
	{
		new string[84];

		mysql_format(this, string, sizeof(string), "DELETE FROM `casas` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(this, string);

		if(IsValidDynamicPickup(HouseData[houseid][housePickup]))
			DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if(IsValidDynamicCP(HouseData[houseid][houseCP]))
			DestroyDynamicCP(HouseData[houseid][houseCP]);

		House_RemoveAllItems(houseid);

		mysql_format(this, string, sizeof(string), "SELECT * FROM `mobilias` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(this, string, "House_RemoveAllFurnitures", "dd", houseid, 0);

		new pconnected;

		if((pconnected = GetPlayerID(HouseData[houseid][houseOwnerName])) != INVALID_PLAYER_ID && PlayerData[pconnected][pLogged])
		{
			SendServerMessage(pconnected, "%s deletou a sua casa \"%s\".", ReturnName(adminid, 0), HouseData[houseid][houseAddress]);
			if(PlayerData[pconnected][pSpawn] == HouseData[houseid][houseID] + 1000)
			{
				PlayerData[pconnected][pSpawn] = 0;
				SendServerMessage(pconnected, "Seu novo local nascimento foi alterado automáticamente para: Spawn Civil.");
			}
		}
		else
		{
			mysql_format(this, string, sizeof(string), "UPDATE players SET Spawn = 0 WHERE UserID = '%d'", HouseData[houseid][houseOwner]);
			mysql_tquery(this, string);
		}

		HouseData[houseid][houseExists] = false;
		HouseData[houseid][houseOwner] = 0;
		HouseData[houseid][houseID] = 0;

		if(!safe)
			Iter_Remove(Houses, houseid);
	}
	return 1;
}

House_IsOwner(playerid, houseid)
{
	if(!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
		return 0;

	if((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

House_WeaponStorage(playerid, houseid)
{
	if(houseid == -1 || !HouseData[houseid][houseExists])
		return 0;

	new string[320];

	for(new i = 0; i < MAX_HOUSES_WEAPON; i++)
	{
		if(!HouseData[houseid][houseWeapon][i])
			format(string, sizeof(string), "%s%d. Slot Vazio\n", string, i + 1);
		else
			format(string, sizeof(string), "%s%d. %s (Munição: %d)\n", string, i + 1, ReturnWeaponName(HouseData[houseid][houseWeapon][i]), HouseData[houseid][houseAmmo][i]);
	}
	Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Armazenamento de armas", string, "Selecionar", "<<");
	return 1;
}

House_ShowItems(playerid, houseid)
{
	if(houseid == -1 || !HouseData[houseid][houseExists])
		return 0;

	new string[MAX_HOUSES_STORAGE * 32],
	name[32];

	for(new i = 0; i != MAX_HOUSES_STORAGE; i++)
	{
		if(!HouseStorage[houseid][i][hItemExists])
			format(string, sizeof(string), "%s%d. Slot Vazio\n", string, i + 1);
		else
		{
			format(name, 32, HouseStorage[houseid][i][hItemName]);

			if(HouseStorage[houseid][i][hItemQuantity] == 1)
				format(string, sizeof(string), "%s%d. %s\n", string, i + 1, name);
			else
				format(string, sizeof(string), "%s%d. %s (Quantidade: %d)\n", string, i + 1, name, HouseStorage[houseid][i][hItemQuantity]);
		}
	}
	Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Armazenamento de itens", string, "Selecionar", "<<");
	return 1;
}

House_OpenStorage(playerid, houseid)
{
	if(houseid == -1 || !HouseData[houseid][houseExists])
		return 0;

	new string[MAX_HOUSES_STORAGE * 32],
	items[2];

	for(new i = 0; i != MAX_HOUSES_STORAGE; i++) if(HouseStorage[houseid][i][hItemExists])
	{
		items[0]++;
	}
	for(new i = 0; i < MAX_HOUSES_WEAPON; i++) if(HouseData[houseid][houseWeapon][i])
	{
		items[1]++;
	}

	if(!House_IsOwner(playerid, houseid))
		format(string, sizeof(string), "Armazenamento de itens (%d/%d)\nArmazenamento de armas (%d/%d)", items[0], MAX_HOUSES_STORAGE, items[1], MAX_HOUSES_WEAPON);
	else
		format(string, sizeof(string), "Armazenamento de itens (%d/%d)\nArmazenamento de armas (%d/%d)\nArmazenamento de dinheiro (%s)", items[0], MAX_HOUSES_STORAGE, items[1], MAX_HOUSES_WEAPON, FormatNumber(HouseData[houseid][houseMoney]));

	Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "Armazenamento da casa", string, "Selecionar", "Cancelar");
	return 1;
}

House_GetItemID(houseid, item[])
{
	if(houseid == -1 || !HouseData[houseid][houseExists])
		return 0;

	for(new i = 0; i < MAX_HOUSES_STORAGE; i++)
	{
		if(!HouseStorage[houseid][i][hItemExists])
			continue;

		if(!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
	}
	return -1;
}

House_GetFreeID(houseid)
{
	if(houseid == -1 || !HouseData[houseid][houseExists])
		return 0;

	for(new i = 0; i < MAX_HOUSES_STORAGE; i++)
	{
		if(!HouseStorage[houseid][i][hItemExists])
			return i;
	}
	return -1;
}

House_AddItem(houseid, item[], model, quantity, slotid = -1)
{
	if(houseid == -1 || !HouseData[houseid][houseExists])
		return 0;

	new itemid = House_GetItemID(houseid, item),
	string[128];

	if(itemid == -1)
	{
		itemid = House_GetFreeID(houseid);

		if(itemid != -1)
		{
			if(slotid != -1)
				itemid = slotid;

			HouseStorage[houseid][itemid][hItemExists] = true;
			HouseStorage[houseid][itemid][hItemModel] = model;
			HouseStorage[houseid][itemid][hItemQuantity] = quantity;

			format(HouseStorage[houseid][itemid][hItemName], 32, item);

			mysql_format(this, string, sizeof(string), "INSERT INTO `armazemcasa` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES ('%d', '%e', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
			mysql_tquery(this, string, "OnStorageAdd", "dd", houseid, itemid);

			return itemid;
		}
		return -1;
	}
	else
	{
		mysql_format(this, string, sizeof(string), "UPDATE `armazemcasa` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
		mysql_tquery(this, string);

		HouseStorage[houseid][itemid][hItemQuantity] += quantity;
	}
	return itemid;
}

House_RemoveItem(houseid, item[], quantity = 1)
{
	if(houseid == -1 || !HouseData[houseid][houseExists])
		return 0;

	new itemid = House_GetItemID(houseid, item),
	string[128];

	if(itemid != -1)
	{
		if(HouseStorage[houseid][itemid][hItemQuantity] > 0)
			HouseStorage[houseid][itemid][hItemQuantity] -= quantity;

		if(quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
		{
			HouseStorage[houseid][itemid][hItemExists] = false;
			HouseStorage[houseid][itemid][hItemModel] = 0;
			HouseStorage[houseid][itemid][hItemQuantity] = 0;

			mysql_format(this, string, sizeof(string), "DELETE FROM `armazemcasa` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
			mysql_tquery(this, string);
		}
		else if(quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
		{
			mysql_format(this, string, sizeof(string), "UPDATE `armazemcasa` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
			mysql_tquery(this, string);
		}
		return 1;
	}
	return 0;
}

House_RemoveAllItems(houseid)
{
	new query[64];

	for (new i = 0; i != MAX_HOUSES_STORAGE; i ++) 
	{
		HouseStorage[houseid][i][hItemExists] = false;
		HouseStorage[houseid][i][hItemModel] = 0;
		HouseStorage[houseid][i][hItemQuantity] = 0;
	}

	mysql_format(this, query, sizeof(query), "DELETE FROM `armazemcasa` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_tquery(this, query);

	for(new i = 0; i < MAX_HOUSES_WEAPON; i++)
	{
		HouseData[houseid][houseWeapon][i] = 0;
		HouseData[houseid][houseAmmo][i] = 0;
	}
	return 1;
}

GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if(1 <= weaponid <= 46 && PlayerData[playerid][pWeapon][g_aWeaponSlots[weaponid]] == weaponid)
		return weaponid;

	return 0;
}

GetAmmo(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	return PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]];
}

UpdateWeapons(playerid)
{
	for(new i = 0; i < 13; i++) if(PlayerData[playerid][pWeapon][i])
	{
		if((i == 2 && PlayerData[playerid][pBeanBag]))
			continue;

		GetPlayerWeaponData(playerid, i, PlayerData[playerid][pWeapon][i], PlayerData[playerid][pAmmo][i]);

		if(PlayerData[playerid][pWeapon][i] != 0 && !PlayerData[playerid][pAmmo][i]) 
		{
			PlayerData[playerid][pWeapon][i] = 0;
		}
	}
	return 1;
}

PlayerHasWeapon(playerid, weaponid)
{
	new
		weapon,
		ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pWeapon][i] == weaponid) 
	{
		GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (weapon == weaponid && ammo > 0) return 1;
	}
	return 0;
}

PlayerHasWeaponInSlot(playerid, weaponid)
{
	if(PlayerData[playerid][pWeapon][g_aWeaponSlots[weaponid]] > 0) return 1;

	return 0;
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pWeapon][i] > 0 && PlayerData[playerid][pAmmo][i] > 0) 
	{
		GivePlayerWeapon(playerid, PlayerData[playerid][pWeapon][i], PlayerData[playerid][pAmmo][i]);
	}

	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) 
	{
		PlayerData[playerid][pWeapon][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}

ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for(new i = 0; i < 13; i++)
	{
		if(PlayerData[playerid][pWeapon][i] != weaponid)
		{
			GivePlayerWeapon(playerid, PlayerData[playerid][pWeapon][i], PlayerData[playerid][pAmmo][i]);
		}
		else
		{
			PlayerData[playerid][pWeapon][i] = 0;
			PlayerData[playerid][pAmmo][i] = 0;
		}
	}

	return 1;
}

GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if(weaponid < 0 || weaponid > 46)
		return 0;

	PlayerData[playerid][pWeapon][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] += ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

Object_Delete(objectid)
{
	if(objectid != -1 && ObjectData[objectid][objectExists])
	{
		new string[64];

		mysql_format(this, string, sizeof(string), "DELETE FROM `objetos` WHERE `objectID` = '%d'", ObjectData[objectid][objectID]);
		mysql_tquery(this, string);

		mysql_format(this, string, sizeof(string), "DELETE FROM `objetostextura` WHERE `objectID` = '%d'", ObjectData[objectid][objectID]);
		mysql_tquery(this, string);

		if(IsValidDynamicObject(ObjectData[objectid][objectObject]))
			DestroyDynamicObject(ObjectData[objectid][objectObject]);

		ObjectData[objectid][objectExists] = false;
		ObjectData[objectid][objectID] = 0;

		foreach(new i : Player)
		{
			if(MostrandoTextsObjeto[i])
			{
				HideObjectInfo(i);
				ShowObjectInfo(i);
			}
		}

		Iter_Remove(Objects, objectid);
	}
	return 1;
}

Object_Nearest(playerid, objectid)
{
	if(ObjectData[objectid][objectExists] && IsPlayerInRangeOfPoint(playerid, 30.0, ObjectData[objectid][objectPos][0], ObjectData[objectid][objectPos][1], ObjectData[objectid][objectPos][2]))
	{
		if(GetPlayerInterior(playerid) == ObjectData[objectid][objectInterior] && GetPlayerVirtualWorld(playerid) == ObjectData[objectid][objectWorld])
			return 1;
	}
	return -1;
}

Object_GetID(dbid)
{
	foreach(new i : Objects) if(ObjectData[i][objectExists] && ObjectData[i][objectID] == dbid)
		return i;

	return -1;
}

Object_Create(playerid, modelid)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		new i;

		if((i = Iter_Free(Objects)) < MAX_OBJECTDATA)
		{
			ObjectData[i][objectExists] = true;

			x += 4.0 * floatsin(-angle, degrees);
			y += 4.0 * floatcos(-angle, degrees);

			ObjectData[i][objectPos][0] = x;
			ObjectData[i][objectPos][1] = y;
			ObjectData[i][objectPos][2] = z;
			ObjectData[i][objectRPos][0] = 0.0;
			ObjectData[i][objectRPos][1] = 0.0;
			ObjectData[i][objectRPos][2] = angle;
			ObjectData[i][objectModel] = modelid;

			ObjectData[i][objectInterior] = GetPlayerInterior(playerid);
			ObjectData[i][objectWorld] = GetPlayerVirtualWorld(playerid);

			Object_Refresh(i);
			mysql_tquery(this, "INSERT INTO `objetos` (`objectInterior`) VALUES (0)", "OnObjectCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 3;
			PlayerData[playerid][pSelectedSlot] = i;
			ObjectData[i][objectEditing] = true;
			EditDynamicObject(playerid, ObjectData[i][objectObject]);

			Iter_Add(Objects, i);

			return i;
		}
	}
	return -1;
}

Object_Clone(playerid, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new i;
	if((i = Iter_Free(Objects)) < MAX_OBJECTDATA)
	{
		ObjectData[i][objectExists] = true;

		ObjectData[i][objectPos][0] = x;
		ObjectData[i][objectPos][1] = y;
		ObjectData[i][objectPos][2] = z;
		ObjectData[i][objectRPos][0] = rx;
		ObjectData[i][objectRPos][1] = ry;
		ObjectData[i][objectRPos][2] = rz;
		ObjectData[i][objectModel] = modelid;

		ObjectData[i][objectInterior] = GetPlayerInterior(playerid);
		ObjectData[i][objectWorld] = GetPlayerVirtualWorld(playerid);

		Object_Refresh(i);
		mysql_tquery(this, "INSERT INTO `objetos` (`objectInterior`) VALUES (0)", "OnObjectCreated", "d", i);

		PlayerData[playerid][pEditingMode] = 3;
		PlayerData[playerid][pSelectedSlot] = i;
		ObjectData[i][objectEditing] = true;
		EditDynamicObject(playerid, ObjectData[i][objectObject]);

		Iter_Add(Objects, i);

		return i;
	}
	return -1;
}

Object_Refresh(objectid)
{
	if(objectid != -1 && ObjectData[objectid][objectExists])
	{
		if(IsValidDynamicObject(ObjectData[objectid][objectObject]))
			DestroyDynamicObject(ObjectData[objectid][objectObject]);

		ObjectData[objectid][objectObject] = CreateDynamicObject(ObjectData[objectid][objectModel], ObjectData[objectid][objectPos][0], ObjectData[objectid][objectPos][1], ObjectData[objectid][objectPos][2], ObjectData[objectid][objectRPos][0], ObjectData[objectid][objectRPos][1], ObjectData[objectid][objectRPos][2], ObjectData[objectid][objectWorld], ObjectData[objectid][objectInterior]);
		
		new query[75];
		mysql_format(this, query, sizeof(query), "SELECT * FROM `objetostextura` WHERE `objectID` = '%d'", ObjectData[objectid][objectID]);
		mysql_tquery(this, query, "OnLoadObjectTextures", "d", objectid);

		return 1;
	}
	return 0;
}

Object_Save(objectid)
{
	new query[320];

	mysql_format(this, query, sizeof(query), "UPDATE `objetos` SET `objectModel` = '%d', `objectX` = '%f', `objectY` = '%f', `objectZ` = '%f', `objectRX` = '%f', `objectRY` = '%f', `objectRZ` = '%f', `objectInterior` = '%d', `objectWorld` = '%d' WHERE `objectID` = '%d'",
		ObjectData[objectid][objectModel],
		ObjectData[objectid][objectPos][0],
		ObjectData[objectid][objectPos][1],
		ObjectData[objectid][objectPos][2],
		ObjectData[objectid][objectRPos][0],
		ObjectData[objectid][objectRPos][1],
		ObjectData[objectid][objectRPos][2],
		ObjectData[objectid][objectInterior],
		ObjectData[objectid][objectWorld],
		ObjectData[objectid][objectID]);

	return mysql_tquery(this, query);
}

Camera_Delete(cameraid)
{
	if(cameraid != -1 && CameraData[cameraid][cameraExists])
	{
		new string[64];

		mysql_format(this, string, sizeof(string), "DELETE FROM `cameras` WHERE `cameraID` = '%d'", CameraData[cameraid][cameraID]);
		mysql_tquery(this, string);

		if(IsValidDynamicObject(CameraData[cameraid][cameraObject]))
			DestroyDynamicObject(CameraData[cameraid][cameraObject]);

		CameraData[cameraid][cameraExists] = false;
		CameraData[cameraid][cameraID] = 0;

		Iter_Remove(SecurityCam, cameraid);
	}
	return 1;
}

Camera_Nearest(playerid)
{
	foreach(new i : SecurityCam) if(CameraData[i][cameraExists] && IsPlayerInRangeOfPoint(playerid, 35.0, CameraData[i][cameraPos][0], CameraData[i][cameraPos][1], CameraData[i][cameraPos][2]))
	{
		if(GetPlayerInterior(playerid) == CameraData[i][cameraInterior] && GetPlayerVirtualWorld(playerid) == CameraData[i][cameraWorld])
			return i;
	}
	return -1;
}

Camera_Create(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		new i;
		if((i = Iter_Free(SecurityCam)) < MAX_SECURITY_CAM)
		{
			CameraData[i][cameraExists] = true;

			x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

			CameraData[i][cameraPos][0] = x;
			CameraData[i][cameraPos][1] = y;
			CameraData[i][cameraPos][2] = z;

			CameraData[i][cameraInterior] = GetPlayerInterior(playerid);
			CameraData[i][cameraWorld] = GetPlayerVirtualWorld(playerid);

			Camera_Refresh(i);
			mysql_tquery(this, "INSERT INTO `cameras` (`cameraInterior`) VALUES (0)", "OnCameraCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 5;
			PlayerData[playerid][pSelectedSlot] = i;
			EditDynamicObject(playerid, CameraData[i][cameraObject]);

			Iter_Add(SecurityCam, i);

			return i;
		}
	}
	return -1;
}

Camera_Refresh(cameraid)
{
	if(cameraid != -1 && CameraData[cameraid][cameraExists])
	{
		if(IsValidDynamicObject(CameraData[cameraid][cameraObject]))
			DestroyDynamicObject(CameraData[cameraid][cameraObject]);

		CameraData[cameraid][cameraObject] = CreateDynamicObject(1886, CameraData[cameraid][cameraPos][0], CameraData[cameraid][cameraPos][1], CameraData[cameraid][cameraPos][2], CameraData[cameraid][cameraRPos][0], CameraData[cameraid][cameraRPos][1], CameraData[cameraid][cameraRPos][2], CameraData[cameraid][cameraWorld], CameraData[cameraid][cameraInterior]);
		return 1;
	}
	return 0;
}

Camera_Save(cameraid)
{
	new query[250];

	mysql_format(this, query, sizeof(query), "UPDATE `cameras` SET `cameraX` = '%.4f', `cameraY` = '%.4f', `cameraZ` = '%.4f', `cameraRX` = '%.4f', `cameraRY` = '%.4f', `cameraRZ` = '%.4f', `cameraInterior` = '%d', `cameraWorld` = '%d' WHERE `cameraID` = '%d'",
		CameraData[cameraid][cameraPos][0],
		CameraData[cameraid][cameraPos][1],
		CameraData[cameraid][cameraPos][2],
		CameraData[cameraid][cameraRPos][0],
		CameraData[cameraid][cameraRPos][1],
		CameraData[cameraid][cameraRPos][2],
		CameraData[cameraid][cameraInterior],
		CameraData[cameraid][cameraWorld],
		CameraData[cameraid][cameraID]);

	return mysql_tquery(this, query);
}

ATM_Delete(atmid)
{
	if(atmid != -1 && ATMData[atmid][atmExists])
	{
		new string[64];

		mysql_format(this, string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]);
		mysql_tquery(this, string);

		if(IsValidDynamicObject(ATMData[atmid][atmObject]))
			DestroyDynamicObject(ATMData[atmid][atmObject]);

		ATMData[atmid][atmExists] = false;
		ATMData[atmid][atmID] = 0;

		Iter_Remove(ATM, atmid);
	}
	return 1;
}

ATM_Nearest(playerid)
{
	foreach(new i : ATM) if(ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.0, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
	{
		if(GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
			return i;
	}
	return -1;
}

ATM_Create(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		new i;
		if((i = Iter_Free(ATM)) < MAX_ATM_MACHINES)
		{
			ATMData[i][atmExists] = true;

			x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

			ATMData[i][atmPos][0] = x;
			ATMData[i][atmPos][1] = y;
			ATMData[i][atmPos][2] = z;

			ATMData[i][atmInterior] = GetPlayerInterior(playerid);
			ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);
			ATMData[i][atmMoney] = 1000;
			ATMData[i][atmRobbed] = 0;

			ATM_Refresh(i);
			mysql_tquery(this, "INSERT INTO `atm` (`atmInterior`) VALUES (0)", "OnATMCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 6;
			PlayerData[playerid][pSelectedSlot] = i;
			EditDynamicObject(playerid, ATMData[i][atmObject]);

			Iter_Add(ATM, i);

			return i;
		}
	}
	return -1;
}

ATM_Refresh(atmid)
{
	if(atmid != -1 && ATMData[atmid][atmExists])
	{
		if(IsValidDynamicObject(ATMData[atmid][atmObject]))
			DestroyDynamicObject(ATMData[atmid][atmObject]);

		ATMData[atmid][atmObject] = CreateDynamicObject(19324, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], ATMData[atmid][atmRPos][0], ATMData[atmid][atmRPos][1], ATMData[atmid][atmRPos][2], ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
		return 1;
	}
	return 0;
}

ATM_Save(atmid)
{
	new query[320];

	mysql_format(this, query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmRX` = '%.4f', `atmRY` = '%.4f', `atmRZ` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d', atmMoney = '%d', atmRobbed = '%d', atmTime = '%d' WHERE `atmID` = '%d'",
		ATMData[atmid][atmPos][0],
		ATMData[atmid][atmPos][1],
		ATMData[atmid][atmPos][2],
		ATMData[atmid][atmRPos][0],
		ATMData[atmid][atmRPos][1],
		ATMData[atmid][atmRPos][2],
		ATMData[atmid][atmInterior],
		ATMData[atmid][atmWorld],
		ATMData[atmid][atmMoney],
		ATMData[atmid][atmRobbed],
		ATMData[atmid][atmTime],
		ATMData[atmid][atmID]);

	return mysql_tquery(this, query);
}

Speed_Refresh(speedid)
{
	if(speedid != -1 && SpeedData[speedid][speedExists])
	{
		new string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "[RADAR %d]\n{FFFFFF}Limite de Velocidade: %.0f mp/h", speedid, SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, COLOR_WARNING, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
	}
	return 1;
}

Speed_Save(speedid)
{
	new query[256];

	mysql_format(this, query, sizeof(query), "UPDATE `radar` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(this, query);
}

Speed_Nearest(playerid)
{
	foreach(new i : SpeedCameras) if(SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
		return i;

	return -1;
}

Speed_Delete(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
		new
			string[64];

		if(IsValidDynamicObject(SpeedData[speedid][speedObject]))
			DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if(IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
			DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		mysql_format(this,string, sizeof(string), "DELETE FROM `radar` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(this, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;

		Iter_Remove(SpeedCameras, speedid);
	}
	return 1;
}

Speed_Create(playerid, Float:limit, Float:range)
{
	new
		Float:x,
		Float:y,
		Float:z,
		Float:angle,
		i
	;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	if((i = Iter_Free(SpeedCameras)) < MAX_SPEED_CAMERAS)
	{
		SpeedData[i][speedExists] = true;
		SpeedData[i][speedRange] = range;
		SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
		SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
		SpeedData[i][speedPos][2] = z - 1.2;
		SpeedData[i][speedPos][3] = angle;

		Speed_Refresh(i);
		Iter_Add(SpeedCameras, i);
		mysql_tquery(this, "INSERT INTO `radar` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
		return i;
	}
	return -1;
}

PlayerText:ShowPlayerBox(playerid, color)
{
	new
		PlayerText:textid;

	textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

ReturnDate()
{
	new
		date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

FormatFullTime()
{
	new
		date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d:%02d", date[0], date[1], date[2], date[3], date[4], date[5]);
	return date;
}

Ticket_Add(suspectid, officer[], price, reason[])
{
	new string[260];

	for(new i = 0; i != MAX_PLAYER_TICKETS; i++) if(!TicketData[suspectid][i][ticketExists])
	{
		TicketData[suspectid][i][ticketExists] = true;
		TicketData[suspectid][i][ticketFee] = price;

		format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
		format(TicketData[suspectid][i][ticketReason], 64, reason);

		mysql_format(this, string, sizeof(string), "INSERT INTO `multas` (`ID`, `ticketFee`, `ticketDate`, `ticketBy`, `ticketReason`) VALUES ('%d', '%d', '%e', '%e', '%e')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], officer, reason);
		mysql_tquery(this, string, "OnTicketCreated", "dd", suspectid, i);
		return i;
	}
	return -1;
}

Ticket_Remove(playerid, ticketid)
{
	if(ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
	{
		new string[90];

		mysql_format(this, string, sizeof(string), "DELETE FROM `multas` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
		mysql_tquery(this, string);

		TicketData[playerid][ticketid][ticketExists] = false;
		TicketData[playerid][ticketid][ticketID] = 0;
		TicketData[playerid][ticketid][ticketFee] = 0;
	}
	return 1;
}

ViewFactions(playerid)
{
	new string[1040];
	
	foreach(new i : Factions) if(FactionData[i][factionExists])
		format(string, sizeof(string), "%s{FFFFFF}Facção: ({00FF00}%i{FFFFFF}) | %s\n", string, i, FactionData[i][factionName]);
	
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Lista das facções", string, "Fechar", "");
	return 1;
}

Faction_GetName(playerid)
{
	new factionid = PlayerData[playerid][pFaction], name[64] = "Nenhuma";

	if(factionid == -1)
		return name;

	format(name, 64, FactionData[factionid][factionName]);
	return name;
}

Faction_GetRank(playerid)
{
	new factionid = PlayerData[playerid][pFaction],
	rank[32] = "Nenhum";

	if(factionid == -1)
		return rank;

	format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] - 1]);
	return rank;
}

Faction_Update(factionid)
{
	if(factionid != -1 || FactionData[factionid][factionExists])
	{
		foreach(new i : Player) if(PlayerData[i][pFaction] == factionid)
		{
			if(GetFactionType(i) == FACTION_POLICE && PlayerData[i][pOnDuty])
				SetFactionColor(i);
		}
	}
	return 1;
}

Faction_RefreshLocker(factionid)
{
	if(factionid != -1 && FactionData[factionid][factionExists])
	{
		if(FactionData[factionid][factionLockerPos][0] != 0.0 && FactionData[factionid][factionLockerPos][1] != 0.0 && FactionData[factionid][factionLockerPos][2] != 0.0)
		{
			new string[126];

			if(IsValidDynamicObject(FactionData[factionid][factionObject]))
			    DestroyDynamicObject(FactionData[factionid][factionObject]);

		    if(IsValidDynamic3DTextLabel(FactionData[factionid][factionText]))
				DestroyDynamic3DTextLabel(FactionData[factionid][factionText]);

			//FactionData[factionid][factionPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerIntVW][1], FactionData[factionid][factionLockerIntVW][0]);
			FactionData[factionid][factionObject] = CreateDynamicObject(11730, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerPos][3], FactionData[factionid][factionLockerPos][4], FactionData[factionid][factionLockerPos][5], FactionData[factionid][factionLockerIntVW][1], FactionData[factionid][factionLockerIntVW][0]);

			format(string, sizeof(string), "[%s]\nDigite /locker para acessar.", FactionData[factionid][factionName]);
			FactionData[factionid][factionText] = CreateDynamic3DTextLabel(string, COLOR_RP2, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]+0.8, 4.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, FactionData[factionid][factionLockerIntVW][1], FactionData[factionid][factionLockerIntVW][0]);
		}
	}
	return 1;
}

Faction_Save(factionid)
{
	new query[2048], spawn[64], lockers[64];

	format(spawn, sizeof(spawn), "%f|%f|%f|%d|%d|%d|", FactionData[factionid][factionSpawn][0], FactionData[factionid][factionSpawn][1], FactionData[factionid][factionSpawn][2], FactionData[factionid][factionSpawnIntVW][0], FactionData[factionid][factionSpawnIntVW][1], FactionData[factionid][factionSpawnIntVW][2]);

	format(lockers, sizeof(lockers), "%f|%f|%f|%f|%f|%f|%d|%d|", FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerPos][3], FactionData[factionid][factionLockerPos][4], FactionData[factionid][factionLockerPos][5], FactionData[factionid][factionLockerIntVW][0], FactionData[factionid][factionLockerIntVW][1]);

	mysql_format(this, query, sizeof(query), "UPDATE `factions` SET `factionName` = '%e', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `Locker` = '%e', `Spawn` = '%e'",
		FactionData[factionid][factionName],
		FactionData[factionid][factionColor],
		FactionData[factionid][factionType],
		FactionData[factionid][factionRanks],
		lockers,
		spawn
	);
	for(new i = 0; i < 10; i++)
	{
		mysql_format(this, query, sizeof(query), "%s, `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);
	}
	for(new i = 0; i < 28; i++)
	{
		mysql_format(this, query, sizeof(query), "%s, `factionSkin%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i]);
	}
	mysql_format(this, query, sizeof(query), "%s WHERE `factionID` = '%d'", query, FactionData[factionid][factionID]);
	mysql_tquery(this, query);

	//Paychecks
	for(new i = 0; i < 15; i++)
	{
		if(!i)
			mysql_format(this, query, sizeof(query), "UPDATE factions SET factionPaycheck%d = '%d'", i + 1, FactionData[factionid][factionPaycheck][i]);
		else
			mysql_format(this, query, sizeof(query), "%s, factionPaycheck%d = '%d'", query, i + 1, FactionData[factionid][factionPaycheck][i]);
	}
	mysql_format(this, query, sizeof(query), "%s WHERE factionID = '%d'", query, FactionData[factionid][factionID]);
	mysql_tquery(this, query);

	return 1;
}

Faction_SaveRanks(factionid)
{
	new query[768];

	mysql_format(this, query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%e', `factionRank2` = '%e', `factionRank3` = '%e', `factionRank4` = '%e', `factionRank5` = '%e', `factionRank6` = '%e', `factionRank7` = '%e', `factionRank8` = '%e', `factionRank9` = '%e', `factionRank10` = '%e', `factionRank11` = '%e', `factionRank12` = '%e', `factionRank13` = '%e', `factionRank14` = '%e', `factionRank15` = '%e' WHERE `factionID` = '%d'",
		FactionRanks[factionid][0],
		FactionRanks[factionid][1],
		FactionRanks[factionid][2],
		FactionRanks[factionid][3],
		FactionRanks[factionid][4],
		FactionRanks[factionid][5],
		FactionRanks[factionid][6],
		FactionRanks[factionid][7],
		FactionRanks[factionid][8],
		FactionRanks[factionid][9],
		FactionRanks[factionid][10],
		FactionRanks[factionid][11],
		FactionRanks[factionid][12],
		FactionRanks[factionid][13],
		FactionRanks[factionid][14],
		FactionData[factionid][factionID]
	);
	return mysql_tquery(this, query);
}

Faction_Delete(factionid)
{
	if(factionid != -1 && FactionData[factionid][factionExists])
	{
		new string[95];

		mysql_format(this, string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(this, string);

		mysql_format(this, string, sizeof(string), "UPDATE `players` SET `Faction` = '-1', `FactionRank` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(this, string);

		mysql_format(this, string, sizeof(string), "DELETE FROM `carros` WHERE `vehicleFaction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(this, string);

		foreach(new i : Vehicles) if(VehicleData[i][vehicleFaction] == FactionData[factionid][factionID])
		{
			VehicleData[i][vehicleID] = 0;
			VehicleData[i][vehiclePlate] = EOS;
			VehicleData[i][vehicleParked] = 0;
			VehicleData[i][vehicleOwnerID] = 0;
			VehicleData[i][vehicleFaction] = 0;

			Vehicle_RemoveAllItems(i);

			SetEngineStatus(i, false);
			SetLightStatus(i, false);

			Vehicle_Destroy(i, 1);
			Iter_SafeRemove(Vehicles, i, i);
		}

		foreach(new i : Player)
		{
			if(PlayerData[i][pFaction] == factionid)
			{
				ResetFaction(i);
			}
			if(PlayerData[i][pFactionEdit] == factionid)
			{
				PlayerData[i][pFactionEdit] = -1;
			}
		}

		if(IsValidDynamicObject(FactionData[factionid][factionObject]))
			DestroyDynamicObject(FactionData[factionid][factionObject]);

		if(IsValidDynamic3DTextLabel(FactionData[factionid][factionText]))
			DestroyDynamic3DTextLabel(FactionData[factionid][factionText]);

		FactionData[factionid][factionExists] = false;
		FactionData[factionid][factionType] = 0;
		FactionData[factionid][factionID] = 0;

		Iter_Remove(Factions, factionid);
	}
	return 1;
}

GetFactionType(playerid)
{
	if(PlayerData[playerid][pFaction] == -1)
		return 0;

	return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

Faction_ShowRanks(playerid, factionid)
{
	if(factionid != -1 && FactionData[factionid][factionExists])
	{
		new string[640];

		for(new i = 0; i < FactionData[factionid][factionRanks]; i++)
			format(string, sizeof(string), "%sRank %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Trocar", "Cancelar");
	}
	return 1;
}

Faction_ShowPaycheck(playerid, factionid)
{
	if(factionid != -1 && FactionData[factionid][factionExists])
	{
		new string[640];

		for(new i = 0; i < FactionData[factionid][factionRanks]; i++)
			format(string, sizeof(string), "%s%s: %s\n", string, FactionRanks[factionid][i], FormatNumber(FactionData[factionid][factionPaycheck][i]));
	
		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditPaychecks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Alterar", "Cancelar");
	}
	return 1;
}

Faction_Create(name[], type)
{
	new i;
	if((i = Iter_Free(Factions)) < MAX_FACTIONS)
	{
		format(FactionData[i][factionName], 64, name);

		FactionData[i][factionExists] = true;
		FactionData[i][factionColor] = 0xFFFFFF00;
		FactionData[i][factionType] = type;
		FactionData[i][factionRanks] = 5;

		FactionData[i][factionLockerPos][0] = 0.0;
		FactionData[i][factionLockerPos][1] = 0.0;
		FactionData[i][factionLockerPos][2] = 0.0;
		FactionData[i][factionLockerPos][3] = 0.0;
		FactionData[i][factionLockerPos][4] = 0.0;
		FactionData[i][factionLockerPos][5] = 0.0;
		FactionData[i][factionLockerIntVW][0] = 0;
		FactionData[i][factionLockerIntVW][1] = 0;

		for(new j = 0; j < 15; j++)
			FactionData[i][factionSkins][j] = 0;

		for(new j = 0; j < 10; j++)
		{
		FactionData[i][factionWeapons][j] = 0;
		FactionData[i][factionAmmo][j] = 0;
		}

		for(new j = 0; j < 15; j++)
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);

		Iter_Add(Factions, i);

		mysql_tquery(this, "INSERT INTO `factions` (`factionType`) VALUES (0)", "OnFactionCreated", "d", i);
		return i;
	}
	return -1;
}

ResetFaction(playerid)
{
	if(PlayerData[playerid][pInWar])
	{
		War_Members[PlayerData[playerid][pFaction]]--;
		if(War_Members[PlayerData[playerid][pFaction]] <= 0)
		{
			War_Kills[PlayerData[playerid][pFaction]] = 0;

			if(GetFactionType(playerid) == FACTION_GANGSTER)
			{
				War_GangstersTeams--;
				if(War_GangstersTeams == 1)
					FinalizarGuerra(FACTION_GANGSTER);
			}
			else if(GetFactionType(playerid) == FACTION_MOTOCLUB)
			{
				War_MotoclubTeams--;
				if(War_MotoclubTeams == 1)
					FinalizarGuerra(FACTION_MOTOCLUB);
			}
			else if(GetFactionType(playerid) == FACTION_CARTEL)
			{
				War_CartelTeams--;
				if(War_CartelTeams == 1)
					FinalizarGuerra(FACTION_CARTEL);
			}
		}
		PlayerData[playerid][pInWar] = false;
	}

	for(new r = 0; r < 4; r++)
	{
		PlayerData[playerid][pRadioSlot][r] = 0;
	}

	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = -1;
	ResetWeapons(playerid);
	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	SetScriptedArmour(playerid, 0.0);
	PlayerData[playerid][pOnDuty] = false;
	PlayerData[playerid][pIllegalDuty] = false;
	SetPlayerColorEx(playerid, COLOR_WHITE);
	new query[150];
	mysql_format(this, query, sizeof(query), "UPDATE `players` SET `Faction` = '%d', `FactionRank` = '%d' WHERE `Name` = '%e'", PlayerData[playerid][pFactionID], PlayerData[playerid][pFactionRank], ReturnName(playerid));
	mysql_tquery(this, query);
}

SendFactionAlert(color, const str[], {Float,_}:...)
{
	static 
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 8); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player)
		{
			if ((PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) && !PlayerData[i][pTogAdmin])
			{
				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach(new i : Player)
	{
		if ((PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) && !PlayerData[i][pTogAdmin]) 
		{
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
	static
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pTogFaction]) 
		{
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach(new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pTogFaction]) 
	{
		SendClientMessage(i, color, str);
	}
	return 1;
}

SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
	static
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pTogFaction]) 
		{
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach(new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pTogFaction]) 
	{
		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendPagerMessage(factionid, color, const str[], {Float,_}:...)
{
	static
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pTogFaction])
		{
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach(new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pTogFaction])
	{
		SendClientMessage(i, color, str);
	}
	return 1;
}

IsNearFactionLocker(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if(factionid == -1)
		return 0;

	if(IsPlayerInRangeOfPoint(playerid, 2.0, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionLockerIntVW][0] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionLockerIntVW][1])
		return 1;

	return 0;
}

GetFactionByID(sqlid)
{
	foreach(new i : Factions) if(FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
		return i;

	return -1;
}

SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		PlayerData[playerid][pFaction] = id;
		PlayerData[playerid][pFactionID] = FactionData[id][factionID];
		new query[114];
		mysql_format(this, query, sizeof(query), "UPDATE `players` SET `Faction` = '%d', `FactionRank` = '%d' WHERE `Name` = '%e'", PlayerData[playerid][pFactionID], PlayerData[playerid][pFactionRank], ReturnName(playerid));
		mysql_tquery(this, query);
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
		return SetPlayerColorEx(playerid, FactionData[factionid][factionColor]);

	return 0;
}

SendPlayerToPlayer(playerid, targetid)
{
	new
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(targetid, x, y, z);

	if(IsPlayerInvisible(targetid))
		return 0;

	if (IsPlayerInAnyVehicle(playerid))
	{
		AC_SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
	}
	else
		AC_SetPlayerPos(playerid, x + 1, y, z);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
	PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
	PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
	PlayerData[playerid][pComplex] = PlayerData[targetid][pComplex];

	return 1;
}

Save_All() //apenas os importantes!!
{
	foreach(new i : Vehicles)
	{
		Vehicle_Save(i);
	}
	foreach(new i : Houses) if(HouseData[i][houseExists])
	{
		House_Save(i);
	}
	foreach(new i : Business) if(BusinessData[i][businessExists])
	{
		Business_Save(i);
	}
	foreach(new i : Factions) if(FactionData[i][factionExists])
	{
		Faction_Save(i);
	}
	foreach(new i : Industry) if(IndustryData[i][industryExists])
	{
		Industry_Save(i);
	}
	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		OnPlayerSave(i);
	}
	return 1;
}

Mechanic_ShowCalls(playerid)
{
	sz_MiscString[0] = 0;

	foreach(new i : Player) if(PlayerData[i][pMechanicCalled])
		format(sz_MiscString, sizeof(sz_MiscString), "%s%d: %s (%s)\n", sz_MiscString, i, ReturnName(i, 0), GetPlayerLocation(i));

	if(!strlen(sz_MiscString))
		SendWarningMessage(playerid, "Não há chamados de mecânico para ser aceito.");
	else
		Dialog_Show(playerid, AcceptMechanic, DIALOG_STYLE_LIST, "Lista de chamados", sz_MiscString, "Aceitar", "Cancelar");
	return 1;
}

IsPlayerNearHood(playerid, vehicleid)
{
	new Float:fX, Float:fY, Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
		return (x = 0.0, y = 0.0, z = 0.0), 0;

	new Float:pos[7];
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
	z = pos[5];

	return 1;
}

CriarTextdraws(playerid)
{
	Velocimetro[playerid] = CreatePlayerTextDraw(playerid,524.000000, 378.000000, "-"); PlayerTextDrawBackgroundColor(playerid,Velocimetro[playerid], 255); PlayerTextDrawFont(playerid,Velocimetro[playerid], 3); PlayerTextDrawLetterSize(playerid,Velocimetro[playerid], 0.310000, 1.400000);
	PlayerTextDrawColor(playerid,Velocimetro[playerid], -7536385); PlayerTextDrawSetOutline(playerid,Velocimetro[playerid], 1); PlayerTextDrawSetProportional(playerid,Velocimetro[playerid], 1);

	TelaPreta1[playerid] = CreatePlayerTextDraw(playerid,642.000000, 1.000000, "_"); PlayerTextDrawLetterSize(playerid,TelaPreta1[playerid], 0.500000, 12.200006); PlayerTextDrawUseBox(playerid,TelaPreta1[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TelaPreta1[playerid], 81); PlayerTextDrawTextSize(playerid,TelaPreta1[playerid], -2.000000, -77.000000);

	TelaPreta2[playerid] = CreatePlayerTextDraw(playerid,642.000000, 340.000000, "_"); PlayerTextDrawLetterSize(playerid,TelaPreta2[playerid], 0.500000, 12.200006); PlayerTextDrawUseBox(playerid,TelaPreta2[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TelaPreta2[playerid], 81); PlayerTextDrawTextSize(playerid,TelaPreta2[playerid], -2.000000, -77.000000);

	BuyInfo_CreatePlayer(playerid);
	Phone_Initialize(playerid);
	Unscramble_CreateTD(playerid);
	Player_CreateTD(playerid);
	Daily_CreateTD(playerid);
	Dealership_CreateTD(playerid);

	return 1;
}

ShowPlayerFooter(playerid, string[], time = 5000)
{
	if(PlayerData[playerid][pShowFooter])
	{
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraw][0]);
		KillTimer(PlayerData[playerid][pFooterTimer]);
	}

	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraw][0], FixASCII(string));
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraw][0]);

	PlayerData[playerid][pShowFooter] = true;
	PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}

Furniture_Show(playerid, houseid, page)
{
	PlayerData[playerid][pPage] = page; page--;

	new query[126];

	mysql_format(this, query, sizeof(query), "SELECT * FROM `mobilias` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_tquery(this, query, "Furniture_ShowList", "dd", playerid, page);
	
	return 1;
}

Furniture_ShowOptions(playerid)
{
	new id = PlayerData[playerid][pSelectedSlot];

	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, FurnitureData);

	if(OpenableDoor(FurnitureData[furnitureModel]) == -1)		
		Dialog_Show(playerid, FurnitureOptions, DIALOG_STYLE_LIST, sprintf("Opções da Mobília: %s", FurnitureData[furnitureName]), "Posição\nInformações\nVender\nRenomear\nClonar\nEditar material", "Selecionar", "<<");
	else
		Dialog_Show(playerid, FurnitureOptions, DIALOG_STYLE_LIST, sprintf("Opções da Mobília: %s", FurnitureData[furnitureName]), "Posição\nInformações\nVender\nRenomear\nClonar\nEditar material\nDefinir rotação da porta", "Selecionar", "<<");
	
	return 1;
}

Furniture_GetCount(houseid)
{
	new query[128];

	mysql_format(this, query, sizeof(query), "SELECT * FROM `mobilias` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_query(this, query);

	return cache_num_rows();
}

Furniture_GetSlots(houseid)
{
	new slots = 50, rows, query[100], Cache:Result, p_VipLevel;

	mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE UserID = '%d' AND VipLevel > 0 AND VipTime > '%d'", HouseData[houseid][houseOwner], gettime());
	Result = mysql_query(this, query);

	cache_get_row_count(rows);

	if(rows)
	{
		cache_get_value_name_int(0, "VipLevel", p_VipLevel);
		switch(p_VipLevel)
		{
			case 1: slots = 100;
			case 2: slots = 150;
			case 3: slots = 200;
		}
	}

	cache_delete(Result);

	return slots;
}

Furniture_HasAccess(playerid, houseid)
{
	if(!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
		return 0;

	if((HouseData[houseid][houseExists]) && (HouseData[houseid][houseFurnitureA1] == PlayerData[playerid][pID] || HouseData[houseid][houseFurnitureA2] == PlayerData[playerid][pID]))
		return 1;

	return 0;
}

IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) 
	{
	    case 523, 548, 563, 427, 490, 528, 596..599, 426, 579, 416, 560, 405, 428, 497, 525, 541, 566: return 1;
	}
	return 0;
}

GetNearestVehicle(playerid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	foreach(new i : Vehicles) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}

StopDragging(playerid)
{
	if(PlayerData[playerid][pDragged])
	{
		PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);
	}
	return 1;
}

GetVehicleMaxSeats(vehicleid)
{
	static const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
		model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
		return g_arrMaxSeats[model - 400];

	return 0;
}

GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) 
	{
		return i;
	}
	return -1;
}

IsVehicleSeatUsed(vehicleid, seat)
{
	foreach(new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) 
	{
		return 1;
	}
	return 0;
}

GetWeaponCount(playerid)
{
	new
		count,
		weapon,
		ammo;

	for (new i = 0; i < 12; i ++)
	{
		GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (weapon > 0 && ammo > 0) count++;
	}
	return count;
}

SetTrunkStatus(vehicleid, status)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

GetTrunkStatus(vehicleid)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
		return 0;

	return 1;
}

GetLightStatus(vehicleid)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}

SetLightStatus(vehicleid, status)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

GetEngineStatus(vehicleid)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}

SetEngineStatus(vehicleid, status)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

SetDoorStatus(vehicleid, status)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, status, bonnet, boot, objective);
}

GetHoodStatus(vehicleid)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}

SetHoodStatus(vehicleid, status)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) 
	{
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
			return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
			return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

Car_GetItemID(carid, item[])
{
	if(!IsValidVehicle(carid))
		return 0;

	for(new i = 0; i < MAX_CAR_INV_STORAGE; i++)
	{
		if(!CarStorage[carid][i][cItemExists])
			continue;

		if(!strcmp(CarStorage[carid][i][cItemName], item)) return i;
	}
	return -1;
}

Car_GetFreeID(carid)
{
	if(!IsValidVehicle(carid))
		return 0;

	for(new i = 0; i < MAX_CAR_INV_STORAGE; i++)
	{
		if(!CarStorage[carid][i][cItemExists])
			return i;

	}
	return -1;
}

Car_AddItem(carid, item[], model, quantity = 1, slotid = -1)
{
	if(!IsValidVehicle(carid))
		return 0;

	new itemid = Car_GetItemID(carid, item), string[128];

	if(itemid == -1)
	{
		itemid = Car_GetFreeID(carid);

		if(itemid != -1)
		{
		
			if(slotid != -1)
				itemid = slotid;

			CarStorage[carid][itemid][cItemExists] = true;
			CarStorage[carid][itemid][cItemModel] = model;
			CarStorage[carid][itemid][cItemQuantity] = quantity;

			format(CarStorage[carid][itemid][cItemName], 32, item);

			mysql_format(this, string, sizeof(string), "INSERT INTO `portamalas` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES ('%d', '%e', '%d', '%d')", VehicleData[carid][vehicleID], item, model, quantity);
			mysql_tquery(this, string, "OnCarStorageAdd", "dd", carid, itemid);
		}
		return -1;
	}
	else
	{
		mysql_format(this, string, sizeof(string), "UPDATE `portamalas` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, VehicleData[carid][vehicleID], CarStorage[carid][itemid][cItemID]);
		mysql_tquery(this, string);

		CarStorage[carid][itemid][cItemQuantity] += quantity;
	}
	return itemid;
}

Car_RemoveItem(carid, item[], quantity = 1)
{
	if(!IsValidVehicle(carid))
		return 0;

	new itemid = Car_GetItemID(carid, item), string[128];
	if(itemid != -1)
	{
		if(CarStorage[carid][itemid][cItemQuantity] > 0)
			CarStorage[carid][itemid][cItemQuantity] -= quantity;
		if(quantity == -1 || CarStorage[carid][itemid][cItemQuantity] < 1)
		{
			CarStorage[carid][itemid][cItemExists] = false;
			CarStorage[carid][itemid][cItemModel] = 0;
			CarStorage[carid][itemid][cItemQuantity] = 0;

			mysql_format(this, string, sizeof(string), "DELETE FROM `portamalas` WHERE `ID` = '%d' AND `itemID` = '%d'", VehicleData[carid][vehicleID], CarStorage[carid][itemid][cItemID]);
			mysql_tquery(this, string);
		}
		else if(quantity != -1 && CarStorage[carid][itemid][cItemQuantity] > 0)
		{
			mysql_format(this, string, sizeof(string), "UPDATE `portamalas` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, VehicleData[carid][vehicleID], CarStorage[carid][itemid][cItemID]);
			mysql_tquery(this, string);
		}
		return 1;
	}
	return 0;
}

Vehicle_RemoveAllItems(carid)
{
	new query[64];

	for(new i = 0; i != MAX_CAR_INV_STORAGE; i++)
	{
		CarStorage[carid][i][cItemExists] = false;
		CarStorage[carid][i][cItemModel] = 0;
		CarStorage[carid][i][cItemQuantity] = 0;
	}
	mysql_format(this, query, sizeof(query), "DELETE FROM `portamalas` WHERE `ID` = '%d'", VehicleData[carid][vehicleID]);
	mysql_tquery(this, query);

	for(new i = 0; i < Car_TrunkWeaponSlots(VehicleData[carid][vehicleModel]); i++)
	{
		VehicleData[carid][vehicleWeapon][i] = 0;
		VehicleData[carid][vehicleAmmo][i] = 0;
	}

	VehicleData[carid][vehicleInteriorWeapon] = 0;
	VehicleData[carid][vehicleInteriorAmmo] = 0;
	return 1;
}

Car_TrunkWeaponSlots(modelid)
{
	switch(modelid)
	{
		case 400: return 13;
		case 401: return 8;
		case 402: return 7;
		case 403: return 30;
		case 404, 405: return 10;
		case 406: return 30;
		case 407, 408: return 20;
		case 409: return 15;
		case 411: return 7;
		case 410, 412: return 10;
		case 413: return 20;
		case 414: return 25;
		case 415: return 7;
		case 416: return 20;
		case 417: return 30;
		case 418: return 15;
		case 419: return 6;
		case 420, 421: return 10;
		case 422, 423: return 15;
		case 424: return 3;
		case 425: return 30;
		case 426: return 10;
		case 427: return 20;
		case 428: return 20;
		case 429: return 6;
		case 430: return 10;
		case 431: return 30;
		case 432, 433: return 20;
		case 434: return 6;
		case 436: return 7;
		case 437: return 20;
		case 438: return 10;
		case 439: return 6;
		case 440: return 20;
		case 441: return 1;
		case 442: return 15;
		case 444: return 6;
		case 443: return 8;
		case 446, 447: return 10;
		case 448: return 2;
		case 449: return 5;
		case 451: return 6;
		case 452: return 8;
		case 453, 454: return 10;
		case 455: return 20;
		case 456: return 30;
		case 590, 591, 435, 450: return 30;
		case 457: return 2;
		case 458: return 11;
		case 459: return 18;
		case 460: return 3;
		case 461: return 3;
		case 462: return 2;
		case 463: return 3;
		case 464, 465: return 1;
		case 466, 467: return 8;
		case 468: return 2;
		case 469: return 5;
		case 470: return 10;
		case 471: return 3;
		case 472: return 15;
		case 473: return 2;
		case 474, 475: return 6;
		case 476, 477: return 5;
		case 478: return 13;
		case 479: return 11;
		case 480: return 6;
		case 481: return 0;
		case 482: return 18;
		case 483: return 14;
		case 485: return 2;
		case 486: return 2;
		case 487, 488: return 7;
		case 489, 490: return 10;
		case 491: return 6;
		case 492: return 9;
		case 493: return 5;
		case 494: return 7;
		case 495: return 6;
		case 496: return 6;
		case 497: return 7;
		case 498: return 25;
		case 499: return 21;
		case 500: return 5;
		case 501: return 0;
		case 502, 503, 504: return 5;
		case 505: return 10;
		case 506: return 6;
		case 507: return 9;
		case 508: return 15;
		case 509, 510: return 0;
		case 512, 513: return 2;
		case 514, 515: return 15;
		case 517, 518: return 7;
		case 519, 520: return 35;
		case 522: return 3;
		case 523: return 2;
		case 524: return 15;
		case 525: return 10;
		case 526, 527: return 8;
		case 528: return 9;
		case 529: return 7;
		case 530, 531: return 1;		
		case 533, 534, 535: return 5;
		case 537, 538: return 5;
		case 539: return 2;
		case 540: return 8;
		case 541: return 5;
		case 542: return 8;
		case 543: return 9;
		case 544: return 25;
		case 545: return 4;
		case 546, 547: return 8;
		case 548: return 20;
		case 549, 550, 551: return 8;
		case 554: return 10;
		case 555: return 7;
		case 556, 557: return 4;
		case 558, 559: return 6;
		case 560: return 8;
		case 561: return 9;
		case 562: return 6;
		case 563: return 20;
		case 564: return 0;
		case 566, 567: return 9;
		case 568: return 1;
		case 571: return 0;
		case 572: return 1;
		case 573: return 20;
		case 574: return 2;
		case 575: return 6;
		case 576: return 8;
		case 577: return 35;
		case 578: return 4;
		case 579: return 10;
		case 580: return 9;
		case 581: return 3;
		case 582: return 15;
		case 583: return 1;
		case 585: return 8;
		case 586: return 3;
		case 587: return 7;
		case 588: return 15;
		case 589: return 7;
		case 592: return 35;
		case 593: return 5;
		case 595: return 15;
		case 596, 597, 598, 599, 601: return 10;
		case 600, 602, 603, 604, 605: return 8;
		case 609: return 25;
		default: return 3;
	}

	return 0;
}

Car_TrunkShow(playerid, carid)
{
	new name[32];

	sz_MiscString[0] = 0;

	for(new i = 0; i < MAX_CAR_INV_STORAGE; i++)
	{
		if(!CarStorage[carid][i][cItemExists])
			format(sz_MiscString, sizeof(sz_MiscString), "%s%d. Slot Vazio\n", sz_MiscString, i + 1);
		else
		{
			format(name, 32, CarStorage[carid][i][cItemName]);

			if(CarStorage[carid][i][cItemQuantity] == 1)
				format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, i + 1, name);
			else
				format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s (%d)\n", sz_MiscString, i + 1, name, CarStorage[carid][i][cItemQuantity]);
		}
	}
	strcat(sz_MiscString, "Armazenamento de armas");

	new carname[50];
	format(carname, sizeof(carname), "Porta malas (%s)", ReturnVehicleModelName(VehicleData[carid][vehicleModel]));

	PlayerData[playerid][pStorageSelect] = 0;
	Dialog_Show(playerid, CarStorage, DIALOG_STYLE_LIST, carname, sz_MiscString, "Selecionar", "Cancelar");
	return 1;
}

Car_WeaponStorage(playerid, carid)
{
	if(!IsValidVehicle(carid) || VehicleData[carid][vehicleLocked])
		return 0;

	sz_MiscString[0] = 0;

	for(new i = 0; i < Car_TrunkWeaponSlots(VehicleData[carid][vehicleModel]); i++)
	{
		if(22 <= VehicleData[carid][vehicleWeapon][i] <= 38)
			format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s - Munição: %d\n", sz_MiscString, i + 1, ReturnWeaponName(VehicleData[carid][vehicleWeapon][i]), VehicleData[carid][vehicleAmmo][i]);
		else
			format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, i + 1, (VehicleData[carid][vehicleWeapon][i]) ? (ReturnWeaponName(VehicleData[carid][vehicleWeapon][i])) : ("Slot Vazio"));
	}
	Dialog_Show(playerid, TrunkWeapon, DIALOG_STYLE_LIST, "Armazenamento de armas porta malas", sz_MiscString, "Selecionar", "Cancelar");
	return 1;
}

Car_InsideWeapon(playerid, carid)
{
	if(!IsValidVehicle(carid))
		return 0;

	new string[32];

	if(22 <= VehicleData[carid][vehicleInteriorWeapon] <= 38)
		format(string, sizeof(string), "%s - Munição: %d", ReturnWeaponName(VehicleData[carid][vehicleInteriorWeapon]), VehicleData[carid][vehicleInteriorAmmo]);
	else
		format(string, sizeof(string), "%s", (VehicleData[carid][vehicleInteriorWeapon]) ? (ReturnWeaponName(VehicleData[carid][vehicleInteriorWeapon])) : ("Slot Vazio"));

	Dialog_Show(playerid, PortaluvasWeapon, DIALOG_STYLE_LIST, "Armazenamento de arma no porta luvas:", string, "Selecionar", "Cancelar");

	return 1;
}

IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) 
{

	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

IsPlayerArmed(playerid)
{
	new weapon, ammo;

	for(new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, weapon, ammo);

		if(ammo > 0)
		{
			switch(weapon)
			{
				case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
			}
		}
	}
	return 0;
}

Arrest_Delete(arrestid)
{
	if(arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
		new string[64];

		if(IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
			DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if(IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
			DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		mysql_format(this, string, sizeof(string), "DELETE FROM `pontosdeprisao` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
		mysql_tquery(this, string);

		ArrestData[arrestid][arrestExists] = false;
		ArrestData[arrestid][arrestID] = 0;

		Iter_Remove(Arrests, arrestid);
	}
	return 1;
}

Arrest_Create(Float:x, Float:y, Float:z, interior, world, type)
{
	new i;
	if((i = Iter_Free(Arrests)) < MAX_ARREST_POINTS)
	{
		ArrestData[i][arrestExists] = true;
		ArrestData[i][arrestPos][0] = x;
		ArrestData[i][arrestPos][1] = y;
		ArrestData[i][arrestPos][2] = z;
		ArrestData[i][arrestInterior] = interior;
		ArrestData[i][arrestWorld] = world;
		ArrestData[i][arrestType] = type;

		mysql_tquery(this, "INSERT INTO `pontosdeprisao` (`arrestInterior`) VALUES (0)", "OnArrestCreated", "d", i);
		Arrest_Refresh(i);
		Iter_Add(Arrests, i);
		return i;
	}
	return -1;
}

Arrest_Save(arrestid)
{
	new query[220];

	mysql_format(this, query, sizeof(query), "UPDATE `pontosdeprisao` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%.4f', `arrestWorld` = '%.4f', `arrestType` = '%d' WHERE `arrestID` = '%d'",
		ArrestData[arrestid][arrestPos][0],
		ArrestData[arrestid][arrestPos][1],
		ArrestData[arrestid][arrestPos][2],
		ArrestData[arrestid][arrestInterior],
		ArrestData[arrestid][arrestWorld],
		ArrestData[arrestid][arrestType],
		ArrestData[arrestid][arrestID]);

	return mysql_tquery(this, query);
}

Arrest_Refresh(arrestid)
{
	if(arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
		new string[64];

		if(IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
			DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if(IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
			DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "[Ponto de Prisão %d]\n/prender para prender o suspeito.", arrestid);

		ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
		ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
	}
	return 1;
}

Arrest_Nearest(playerid)
{
	foreach(new i : Arrests) if(ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
	{
		if(GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
			return i;
	}
	return -1;
}

IsPlayerNearArrest(playerid)
{
	new id = Arrest_Nearest(playerid);

	return (id != -1);
}

Tax_AddMoney(amount)
{
	gov_TaxVault = gov_TaxVault + amount;

	GOV_Save();

	return 0;
}

Tax_AddPercent(price)
{
	new money = (price - Tax_Percent(price));

	gov_TaxVault = gov_TaxVault + money;

	GOV_Save();

	return 1;
}

GOV_Save()
{
	new query[75];

	mysql_format(this, query, sizeof(query), "UPDATE `server_config` SET `active` = '%d' WHERE `entry_id` = '4'", gov_TaxVault);
	mysql_tquery(this, query);

	return 1;
}

Report_GetCount(playerid)
{
	new count;

	foreach(new i : Reports) if(ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
		count++;

	return count;
}

Report_Clear(playerid)
{
	foreach(new i : Reports) if(ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
		Report_Remove(i);

	return 1;
}

Report_Add(playerid, text[], type = 1)
{
	new i;
	if((i = Iter_Free(Reports)) < MAX_REPORTS)
	{
		ReportData[i][rExists] = true;
		ReportData[i][rType] = type;
		ReportData[i][rPlayer] = playerid;
		ReportData[i][rGetTime] = gettime();

		format(ReportData[i][rText], 128, text);

		Iter_Add(Reports, i);

		return i;
	}
	return -1;
}

Report_Remove(reportid)
{
	if(reportid != -1 && ReportData[reportid][rExists])
	{
		ReportData[reportid][rExists] = false;
		ReportData[reportid][rPlayer] = INVALID_PLAYER_ID;

		Iter_Remove(Reports, reportid);
	}
	return 1;
}

GetDuration(time)
{
	new str[32];

	if(time < 0 || time == gettime())
	{
		format(str, sizeof(str), "Nunca");
		return str;
	}

	else if(time >= 0 && time < 60)
		format(str, sizeof(str), (time != 1) ? ("%d segundos") : ("%d segundo"), time);

	else if(time >= 60 && time < 3600)
		format(str, sizeof(str), (time >= 120) ? ("%d minutos") : ("%d minuto"), time / 60);

	else if(time >= 3600 && time < 86400)
		format(str, sizeof(str), (time >= 7200) ? ("%d horas") : ("%d hora"), time / 3600);

	else if(time >= 86400 && time < 2592000)
 		format(str, sizeof(str), (time >= 172800) ? ("%d dias") : ("%d dia"), time / 86400);

	else if(time >= 2592000 && time < 31536000)
 		format(str, sizeof(str), (time >= 5184000) ? ("%d meses") : ("%d mês"), time / 2592000);

	else if(time >= 31536000)
		format(str, sizeof(str), (time >= 63072000) ? ("%d anos") : ("%d ano"), time / 31536000);

	strcat(str, " atrás");

	return str;
}

WH_Create(factionid, Float:x, Float:y, Float:z, interior, world)
{
	new query[128], i;
	if((i = Iter_Free(WeaponHouse)) < MAX_WH)
	{
		WhData[i][whExists] = true;
		WhData[i][whFactionID] = FactionData[factionid][factionID];
		WhData[i][whGunparts] = 0;
		WhData[i][whPos][0] = x;
		WhData[i][whPos][1] = y;
		WhData[i][whPos][2] = z;
		WhData[i][whInterior] = interior;
		WhData[i][whWorld] = world;

		mysql_format(this, query, sizeof(query), "INSERT INTO `whorg` (`ID`) VALUES ('%d')", WhData[i][whFactionID]);
		mysql_tquery(this, query, "OnWHCreated", "d", i);
		Iter_Add(WeaponHouse, i);
		WH_Refresh(i);
		return i;
	}
	return -1;
}

WH_Save(whid)
{
	new query[230];

	mysql_format(this, query, sizeof(query), "UPDATE `whorg` SET `whGunparts` = '%d', whX = '%.4f', whY = '%.4f', whZ = '%.4f', whInterior = '%d', whWorld = '%d' WHERE `whID` = '%d' AND `ID` = '%d'",
		WhData[whid][whGunparts],
		WhData[whid][whPos][0],
		WhData[whid][whPos][1],
		WhData[whid][whPos][2],
		WhData[whid][whInterior],
		WhData[whid][whWorld],
		WhData[whid][whID],
		WhData[whid][whFactionID]);

	return mysql_tquery(this, query);
}

WH_Delete(whid)
{
	if(whid != -1 && WhData[whid][whExists])
	{
		new string[75];

		if(IsValidDynamicPickup(WhData[whid][whPickup]))
			DestroyDynamicPickup(WhData[whid][whPickup]);

		if(IsValidDynamic3DTextLabel(WhData[whid][wh3dtext]))
			DestroyDynamic3DTextLabel(WhData[whid][wh3dtext]);

		mysql_format(this, string, sizeof(string), "DELETE FROM `whorg` WHERE `whID` = '%d' AND `ID` = '%d'", WhData[whid][whID], WhData[whid][whFactionID]);
		mysql_tquery(this, string);

		WhData[whid][whExists] = false;
		WhData[whid][whID] = 0;
		WhData[whid][whFactionID] = 0;

		Iter_Remove(WeaponHouse, whid);
	}
	return 1;
}

WH_Refresh(whid)
{
	if(whid != -1 && WhData[whid][whExists])
	{
		new string[64], facid = GetFactionByID(WhData[whid][whFactionID]);

		if(IsValidDynamicPickup(WhData[whid][whPickup]))
			DestroyDynamicPickup(WhData[whid][whPickup]);

		if(IsValidDynamic3DTextLabel(WhData[whid][wh3dtext]))
			DestroyDynamic3DTextLabel(WhData[whid][wh3dtext]);

		format(string, sizeof(string), "[%s]\nDigite /armas para acessar", FactionData[facid][factionName]);

		WhData[whid][whPickup] = CreateDynamicPickup(2044, 23, WhData[whid][whPos][0], WhData[whid][whPos][1], WhData[whid][whPos][2], WhData[whid][whWorld], WhData[whid][whInterior]);
		WhData[whid][wh3dtext] = CreateDynamic3DTextLabel(string, COLOR_WHITE, WhData[whid][whPos][0], WhData[whid][whPos][1], WhData[whid][whPos][2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, WhData[whid][whWorld], WhData[whid][whInterior]);
	}
	return 1;
}

WH_Nearest(playerid)
{
	foreach(new i : WeaponHouse) if(WhData[i][whExists] && IsPlayerInRangeOfPoint(playerid, 2.0, WhData[i][whPos][0], WhData[i][whPos][1], WhData[i][whPos][2]))
	{
		if(GetPlayerInterior(playerid) == WhData[i][whInterior] && GetPlayerVirtualWorld(playerid) == WhData[i][whWorld])
			return i;
	}
	return -1;
}

Vault_Create(playerid, factionid, Float:x, Float:y, Float:z, interior, world)
{
	new query[128], i;

	if((i = Iter_Free(Vault)) < MAX_VAULT)
	{
		VaultData[i][vaultExists] = true;
		VaultData[i][vaultFactionID] = FactionData[factionid][factionID];
		VaultData[i][vaultPos][0] = x;
		VaultData[i][vaultPos][1] = y;
		VaultData[i][vaultPos][2] = z;
		VaultData[i][vaultInterior] = interior;
		VaultData[i][vaultWorld] = world;
		VaultData[i][vaultMoney] = 0;
		VaultData[i][vaultMarijuana] = 0;
		VaultData[i][vaultCocaine] = 0;
		VaultData[i][vaultLSD] = 0;
		for(new a = 0; a < 20; a++)
		{
			VaultData[i][vaultWeapon][a] = 0;
			VaultData[i][vaultAmmo][a] = 0;
		}

		mysql_format(this, query, sizeof(query), "INSERT INTO `cofreorg` (`ID`) VALUES ('%d')", VaultData[i][vaultFactionID]);
		mysql_tquery(this, query, "OnVaultCreated", "d", i);
		Vault_Refresh(i);

		PlayerData[playerid][pEditingMode] = 10;
		PlayerData[playerid][pSelectedSlot] = i;
		EditDynamicObject(playerid, VaultData[i][vaultObject]);

		Iter_Add(Vault, i);

		return i;
	}
	return -1;
}

Vault_Save(vaultid)
{
	new weapon_string[200], drug_string[50], query[550];

	for(new i = 0; i < MAX_VAULT_WEAPON; i++)
		format(weapon_string, sizeof(weapon_string), "%s%d|%d|", weapon_string, VaultData[vaultid][vaultWeapon][i], VaultData[vaultid][vaultAmmo][i]);

	format(drug_string, sizeof(drug_string), "%d|%d|%d|", VaultData[vaultid][vaultMarijuana], VaultData[vaultid][vaultCocaine], VaultData[vaultid][vaultLSD]);

	mysql_format(this, query, sizeof(query), "UPDATE `cofreorg` SET `cofreDinheiro` = '%d', `cofreArmas` = '%e', `cofreDrogas` = '%e', `cofreX` = '%.4f', `cofreY` = '%.4f', `cofreZ` = '%.4f', `cofreRX` = '%.4f', `cofreRY` = '%.4f', `cofreRZ` = '%.4f', `cofreInterior` = '%d', `cofreWorld` = '%d' WHERE `cofreID` = '%d' AND `ID` = '%d'",
		VaultData[vaultid][vaultMoney],
		weapon_string,
		drug_string,
		VaultData[vaultid][vaultPos][0],
		VaultData[vaultid][vaultPos][1],
		VaultData[vaultid][vaultPos][2],
		VaultData[vaultid][vaultRPos][0],
		VaultData[vaultid][vaultRPos][1],
		VaultData[vaultid][vaultRPos][2],
		VaultData[vaultid][vaultInterior],
		VaultData[vaultid][vaultWorld],
		VaultData[vaultid][vaultID],
		VaultData[vaultid][vaultFactionID]);

	return mysql_tquery(this, query);
}

Vault_Delete(vaultid)
{
	if(vaultid != -1 && VaultData[vaultid][vaultExists])
	{
		new string[75];

		if(IsValidDynamicObject(VaultData[vaultid][vaultObject]))
			DestroyDynamicObject(VaultData[vaultid][vaultObject]);

		if(IsValidDynamic3DTextLabel(VaultData[vaultid][Vault3dtext]))
			DestroyDynamic3DTextLabel(VaultData[vaultid][Vault3dtext]);

		mysql_format(this, string, sizeof(string), "DELETE FROM `cofreorg` WHERE `cofreID` = '%d' AND `ID` = '%d'", VaultData[vaultid][vaultID], VaultData[vaultid][vaultFactionID]);
		mysql_tquery(this, string);

		VaultData[vaultid][vaultExists] = false;
		VaultData[vaultid][vaultID] = 0;
		VaultData[vaultid][vaultFactionID] = 0;

		Iter_Remove(Vault, vaultid);
	}
	return 1;
}

Vault_Refresh(vaultid)
{
	if(vaultid != -1 && VaultData[vaultid][vaultExists])
	{
		new string[64], facid = GetFactionByID(VaultData[vaultid][vaultFactionID]);

		if(IsValidDynamicObject(VaultData[vaultid][vaultObject]))
			DestroyDynamicObject(VaultData[vaultid][vaultObject]);

		if(IsValidDynamic3DTextLabel(VaultData[vaultid][Vault3dtext]))
			DestroyDynamic3DTextLabel(VaultData[vaultid][Vault3dtext]);

		format(string, sizeof(string), "[%s]\nDigite /cofre para acessar", FactionData[facid][factionName]);

		//VaultData[vaultid][vaultPickup] = CreateDynamicPickup(19559, 23, VaultData[vaultid][vaultPos][0], VaultData[vaultid][vaultPos][1], VaultData[vaultid][vaultPos][2], VaultData[vaultid][vaultWorld], VaultData[vaultid][vaultInterior]);
		VaultData[vaultid][vaultObject] = CreateDynamicObject(2332, VaultData[vaultid][vaultPos][0], VaultData[vaultid][vaultPos][1], VaultData[vaultid][vaultPos][2], VaultData[vaultid][vaultRPos][0], VaultData[vaultid][vaultRPos][1], VaultData[vaultid][vaultRPos][2], VaultData[vaultid][vaultWorld], VaultData[vaultid][vaultInterior]);
		VaultData[vaultid][Vault3dtext] = CreateDynamic3DTextLabel(string, COLOR_WHITE, VaultData[vaultid][vaultPos][0], VaultData[vaultid][vaultPos][1], VaultData[vaultid][vaultPos][2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VaultData[vaultid][vaultWorld], VaultData[vaultid][vaultInterior]);
	}
	return 1;
}

Vault_Nearest(playerid)
{
	foreach(new i : Vault) if(VaultData[i][vaultExists] && IsPlayerInRangeOfPoint(playerid, 2.0, VaultData[i][vaultPos][0], VaultData[i][vaultPos][1], VaultData[i][vaultPos][2]))
	{
		if(GetPlayerInterior(playerid) == VaultData[i][vaultInterior] && GetPlayerVirtualWorld(playerid) == VaultData[i][vaultWorld])
			return i;
	}
	return -1;
}

Crate_Nearest(playerid, Float:radius = 2.0)
{
	foreach(new i : Crate) if(CrateData[i][crateExists] && IsPlayerInRangeOfPoint(playerid, radius, CrateData[i][cratePos][0], CrateData[i][cratePos][1], CrateData[i][cratePos][2]))
	{
		if(GetPlayerInterior(playerid) == CrateData[i][crateInterior] && GetPlayerVirtualWorld(playerid) == CrateData[i][crateWorld])
			return i;
	}
	return -1;
}

Crate_Refresh(crateid)
{
	if(crateid != -1 && CrateData[crateid][crateExists])
	{
		if(IsValidDynamicObject(CrateData[crateid][crateObject]))
			DestroyDynamicObject(CrateData[crateid][crateObject]);

		CrateData[crateid][crateObject] = CreateDynamicObject(964, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2], 0.0, 0.0, CrateData[crateid][cratePos][3], CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);
	}
	return 1;
}

Crate_Delete(crateid)
{
	if(crateid != -1 && CrateData[crateid][crateExists])
	{
		new query[64];

		mysql_format(this, query, sizeof(query), "DELETE FROM `caixas` WHERE `crateID` = '%d'", CrateData[crateid][crateID]);
		mysql_tquery(this, query);

		if(IsValidDynamicObject(CrateData[crateid][crateObject]))
			DestroyDynamicObject(CrateData[crateid][crateObject]);

		CrateData[crateid][crateExists] = false;
		CrateData[crateid][crateID] = 0;

		Iter_Remove(Crate, crateid);
	}
	return 1;
}

Crate_Save(crateid)
{
	new query[255];

	mysql_format(this, query, sizeof(query), "UPDATE `caixas` SET `crateType` = '%d', `crateQuantity` = '%d', `crateX` = '%.4f', `crateY` = '%.4f', `crateZ` = '%.4f', `crateA` = '%.4f', `crateInterior` = '%d', `crateWorld` = '%d' WHERE `crateID` = '%d'",
		CrateData[crateid][crateType],
		CrateData[crateid][crateQuantity],
		CrateData[crateid][cratePos][0],
		CrateData[crateid][cratePos][1],
		CrateData[crateid][cratePos][2],
		CrateData[crateid][cratePos][3],
		CrateData[crateid][crateInterior],
		CrateData[crateid][crateWorld],
		CrateData[crateid][crateID]);

	return mysql_tquery(this, query);
}

Crate_Create(type, quantity, Float:x, Float:y, Float:z, Float:a)
{
	new i;
	if((i = Iter_Free(Crate)) < MAX_CRATES)
	{
		CrateData[i][crateExists] = true;
		CrateData[i][crateType] = type;
		CrateData[i][crateQuantity] = quantity;

		CrateData[i][cratePos][0] = x;
		CrateData[i][cratePos][1] = y;
		CrateData[i][cratePos][2] = z;
		CrateData[i][cratePos][3] = a;

		CrateData[i][crateInterior] = 0;
		CrateData[i][crateWorld] = 0;

		mysql_tquery(this, "INSERT INTO `caixas` (`crateInterior`) VALUES (0)", "OnCrateCreated", "d", i);
		Crate_Refresh(i);
		Iter_Add(Crate, i);
		return i;
	}
	return -1;
}

IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

	if (modelid < 400 || modelid > 611)
		return 0;

	return (g_aEngineStatus[modelid - 400]);
}

IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid))
	{
		return 0;
	}
	return 1;
}

RoadBlock_Create(playerid, object, Float:x, Float:y, Float:z)
{
	new i;

	if((i = Iter_Free(Barrier)) < MAX_BARRIES)
	{
		RoadData[i][roadCreated] = true;
		RoadData[i][roadPlayer] = playerid;
		RoadData[i][roadPos][0] = x;
		RoadData[i][roadPos][1] = y;
		RoadData[i][roadPos][2] = z;
		RoadData[i][roadRPos][0] = 0.0;
		RoadData[i][roadRPos][1] = 0.0;
		RoadData[i][roadRPos][2] = 0.0;
		RoadData[i][roadObject] = CreateDynamicObject(object, x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		PlayerData[playerid][pEditingMode] = 4;
		PlayerData[playerid][pSelectedSlot] = i;
		EditDynamicObject(playerid, RoadData[i][roadObject]);

		Iter_Add(Barrier, i);

		return 1;
	}
	return 0;
}

RoadBlock_Nearest(playerid)
{
	foreach(new i : Barrier) if(RoadData[i][roadCreated] && RoadData[i][roadPlayer] == playerid)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, RoadData[i][roadPos][0], RoadData[i][roadPos][1], RoadData[i][roadPos][2]))
			return i;
	}
	return -1;
}

RoadBlock_Delete(roadblockid)
{
	if(roadblockid != -1 && RoadData[roadblockid][roadCreated])
	{
		if(IsValidDynamicObject(RoadData[roadblockid][roadObject]))
			DestroyDynamicObject(RoadData[roadblockid][roadObject]);

		RoadData[roadblockid][roadCreated] = false;
		RoadData[roadblockid][roadPlayer] = INVALID_PLAYER_ID;

		Iter_Remove(Barrier, roadblockid);
	}
	return 1;
}

RoadBlock_GetCount(playerid)
{
	new count = 0;

	foreach(new i : Barrier) if(RoadData[i][roadCreated] && RoadData[i][roadPlayer] == playerid)
		count++;

	return count;
}

GiveScriptedMoney(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;

	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);

	return 1;
}

GiveBankMoney(playerid, amount)
{
	PlayerData[playerid][pBank] += amount;

	SendClientMessageEx(playerid, COLOR_DARKGREEN, "LS BANK: Movimentação de %s no valor de %s proveniente da sua conta corre.", (amount < 0) ? ("débito") : ("crédito"), FormatNumber(amount));
	return 1;
}

GetScriptedMoney(playerid)
{
	return PlayerData[playerid][pMoney];
}

DestroyDynamicObjectEx(&objectid)
{
	for(new j = 0; j < MAX_INDEX_OBJECT; j++) 
		SetDynamicObjectMaterial(objectid, j, 19341, "invalid", "invalid");

	#undef DestroyDynamicObject
	DestroyDynamicObject(objectid);
	#define DestroyDynamicObject(%0) DestroyDynamicObjectEx(%0)
	objectid = INVALID_OBJECT_ID;
	return 1;
}

CancelDrivingTest(playerid)
{
	if(PlayerData[playerid][pDrivingTest])
	{
		AC_SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		DisablePlayerCheckpoint(playerid);
		SetCameraBehindPlayer(playerid);

		DestroyVehicle(PlayerData[playerid][pTestCar]);
		PlayerData[playerid][pDrivingTest] = false;
	}
	return 1;
}

RemoveFromVehicle(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float:x, Float:y, Float:z;

		GetPlayerPos(playerid, x, y, z);
		AC_SetPlayerPos(playerid, x, y, z + 1.5);
	}
	return 1;
}

stock PlayerHasBeanBag(playerid)
{
	return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag]);
}

Vehicle_Create(playerid, model, Float:x, Float:y, Float:z, Float:angle, Float:veh_health, factionid = -1, jobid = -1, carsiren)
{
	new i = CreateVehicle(model, x, y, z, angle, PlayerData[playerid][pColor1Car], PlayerData[playerid][pColor2Car], -1, carsiren);

	if(i != INVALID_VEHICLE_ID)
	{
		new color1, color2;

		color1 = PlayerData[playerid][pColor1Car];
		color2 = PlayerData[playerid][pColor2Car];
		
		VehicleData[i][vehicleOwnerID] = -1;
		format(VehicleData[i][vehicleOwnerName], 24, "O estado");
		format(VehicleData[i][vehiclePlate], 10, "PREF");

		if(factionid != -1)
		{
			switch(FactionData[factionid][factionType])
			{
				case FACTION_POLICE: format(VehicleData[i][vehiclePlate], 10, "POLICE");
				case FACTION_GOV: format(VehicleData[i][vehiclePlate], 10, "GOV");
				case FACTION_MEDIC: format(VehicleData[i][vehiclePlate], 10, "SAE");
				case FACTION_GANGSTER: format(VehicleData[i][vehiclePlate], 10, RandomizeVehiclePlate());
				case FACTION_MOTOCLUB: format(VehicleData[i][vehiclePlate], 10, RandomizeVehiclePlate());
				case FACTION_CARTEL: format(VehicleData[i][vehiclePlate], 10, RandomizeVehiclePlate());			
			}

			VehicleData[i][vehicleFaction] = FactionData[factionid][factionID];
		}
		else
		{
			VehicleData[i][vehicleFaction] = factionid;
		}

		VehicleData[i][vehicleLocked] = 0;
		VehicleData[i][vehicleLocator] = 0;
		VehicleData[i][vehicleModel] = model;
		VehicleData[i][vehicleColor][0] = color1;
		VehicleData[i][vehicleColor][1] = color2;
		VehicleData[i][vehiclePrice] = 0;
		VehicleData[i][vehicleMileage] = 0;

		VehicleData[i][vehicleParked] = 1;
		VehicleData[i][vehicleParkedPos][0] = x;
		VehicleData[i][vehicleParkedPos][1] = y;
		VehicleData[i][vehicleParkedPos][2] = z;
		VehicleData[i][vehicleParkedPos][3] = angle;
		VehicleData[i][vehicleParkedVW] = GetPlayerVirtualWorld(playerid);		

		VehicleData[i][vehicleHealth] = veh_health;
		VehicleData[i][vehicleMaxHealth] = veh_health;
		VehicleData[i][vehicleDamage][0] = 0;
		VehicleData[i][vehicleDamage][1] = 0;
		VehicleData[i][vehicleDamage][2] = 0;
		VehicleData[i][vehicleDamage][3] = 0;
		VehicleData[i][vehicleEngine] = 100.0;
		VehicleData[i][vehicleSiren] = carsiren;

		VehicleData[i][vehicleJob] = jobid;

		for(new a = 0; a < 14; a++)
			VehicleData[i][vehicleMod][a] = 0;

		for(new b = 0; b < 35; b++)
		{
			VehicleData[i][vehicleWeapon][b] = 0;
			VehicleData[i][vehicleAmmo][b] = 0;
		}
		VehicleData[i][vehicleInteriorWeapon] = 0;
		VehicleData[i][vehicleInteriorAmmo] = 0;

		PlayerData[playerid][pEditingCar] = false;
		DestroyVehicle(PlayerData[playerid][pCreateCar]);

		SetVehicleNumberPlate(i, VehicleData[i][vehiclePlate]);
		SetVehicleVirtualWorld(i, VehicleData[i][vehicleParkedVW]);

		AC_SetVehicleHealth(i, VehicleData[i][vehicleMaxHealth]);

		VehicleData[i][vehicleFuel] = Fuel_GetQuantity(i);

		mysql_tquery(this, "INSERT INTO carros (vehicleOwnerName) VALUES ('O estado')", "OnVehicleCreated", "d", i);

		Iter_Add(Vehicles, i);

		return i;
	}
	return -1;
}

FinalizarGuerra(factiontype)
{
	if(factiontype == FACTION_GANGSTER)
	{
		new maxkills = 0, factionid;

		foreach(new i : Factions) if(FactionData[i][factionType] == FACTION_GANGSTER)
		{
			if(War_Kills[i] > maxkills)
			{
				maxkills = War_Kills[i];
				factionid = i;
			}				
		}

		if(!factionid)
		{
			SendAdminMessage(COLOR_WARNING, "AdminAlert: Não houve um vencendor na guerra dos gangsters.");
			War_Gangsters = false;
			War_GangstersTime = 0;
			War_GangstersTeams = 0;
			return 1;
		}

		SendFactionMessage(factionid, COLOR_RP1, "Parabéns, a sua facção foi a vitoriosa da guerra.");
		SendFactionMessage(factionid, COLOR_RP1, "A recompensa já está disponível no cofre da facção.");

		SendAdminMessage(COLOR_WARNING, "AdminAlert: Facção %s (ID: %d) ganhou a guerra.", FactionData[factionid][factionName], factionid);

		new recompensa = 15000+random(5000);

		foreach(new j : Vault) if(VaultData[j][vaultFactionID] == FactionData[factionid][factionID])
		{
			VaultData[j][vaultMoney] += recompensa;
			break;
		}

		foreach(new i : Player) if(GetFactionType(i) == FACTION_GANGSTER && PlayerData[i][pInWar])
		{
			PlayerData[i][pInWar] = false;
			SetPlayerColorEx(i, COLOR_WHITE);
		}

		War_Gangsters = false;
		War_GangstersTime = 0;
		War_GangstersTeams = 0;
	}
	else if(factiontype == FACTION_MOTOCLUB)
	{
		new maxkills = 0, factionid;

		foreach(new i : Factions) if(FactionData[i][factionType] == FACTION_MOTOCLUB)
		{
			if(War_Kills[i] > maxkills)
			{
				maxkills = War_Kills[i];
				factionid = i;
			}
		}

		if(!factionid)
		{
			SendAdminMessage(COLOR_WARNING, "AdminAlert: Não houve um vencendor na guerra dos motoclubes.");
			War_Motoclub = false;
			War_MotoclubTime = 0;
			War_MotoclubTeams = 0;
			return 1;
		}

		SendFactionMessage(factionid, COLOR_RP1, "Parabéns, a sua facção foi a vitoriosa da guerra.");
		SendFactionMessage(factionid, COLOR_RP1, "A recompensa já está disponível no cofre da facção.");

		SendAdminMessage(COLOR_WARNING, "AdminAlert: Facção %s (ID: %d) ganhou a guerra.", FactionData[factionid][factionName], factionid);

		new recompensa = 15000+random(5000);

		foreach(new j : Vault) if(VaultData[j][vaultFactionID] == FactionData[factionid][factionID])
		{
			VaultData[j][vaultMoney] += recompensa;
			break;
		}

		foreach(new i : Player) if(GetFactionType(i) == FACTION_MOTOCLUB && PlayerData[i][pInWar])
		{
			PlayerData[i][pInWar] = false;
			SetPlayerColorEx(i, COLOR_WHITE);
		}

		War_Motoclub = false;
		War_MotoclubTime = 0;
		War_MotoclubTeams = 0;
	}
	else if(factiontype == FACTION_CARTEL)
	{
		new maxkills = 0, factionid;

		foreach(new i : Factions) if(FactionData[i][factionType] == FACTION_CARTEL)
		{
			if(War_Kills[i] > maxkills)
			{
				maxkills = War_Kills[i];
				factionid = i;
			}
		}

		if(!factionid)
		{
			SendAdminMessage(COLOR_WARNING, "AdminAlert: Não houve um vencendor na guerra dos cartéis.");
			War_Cartel = false;
			War_CartelTime = 0;
			War_CartelTeams = 0;
			return 1;
		}

		SendFactionMessage(factionid, COLOR_RP1, "Parabéns, a sua facção foi a vitoriosa da guerra.");
		SendFactionMessage(factionid, COLOR_RP1, "A recompensa já está disponível no cofre da facção.");

		SendAdminMessage(COLOR_WARNING, "AdminAlert: Facção %s (ID: %d) ganhou a guerra.", FactionData[factionid][factionName], factionid);

		new recompensa = 15000+random(5000);

		foreach(new j : Vault) if(VaultData[j][vaultFactionID] == FactionData[factionid][factionID])
		{
			VaultData[j][vaultMoney] += recompensa;
			break;
		}

		foreach(new i : Player) if(GetFactionType(i) == FACTION_CARTEL && PlayerData[i][pInWar])
		{
			PlayerData[i][pInWar] = false;
			SetPlayerColorEx(i, COLOR_WHITE);
		}

		War_Cartel = false;
		War_CartelTime = 0;
		War_CartelTeams = 0;
	}
	return 1;
}

ShowObjectInfo(playerid)
{
	new string[64], count, playerinterior = GetPlayerInterior(playerid), playerworld = GetPlayerVirtualWorld(playerid);

	foreach(new i : Objects) if(ObjectData[i][objectExists] && IsPlayerInRangeOfPoint(playerid, 50.0, ObjectData[i][objectPos][0], ObjectData[i][objectPos][1], ObjectData[i][objectPos][2]) && playerworld == ObjectData[i][objectWorld] && playerinterior == ObjectData[i][objectInterior])
	{
		if(count < MAX_3DTEXT_OBJECT) 
		{
			format(string, sizeof(string), "Modelo: %d\nID Real: %d\nID Único: %d", ObjectData[i][objectModel], i, ObjectData[i][objectID]);
			TextoObjetos[playerid][count++] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjectData[i][objectPos][0], ObjectData[i][objectPos][1], ObjectData[i][objectPos][2], 7.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, playerworld, playerinterior, playerid);
		}
	}
	return 1;
}

HideObjectInfo(playerid)
{
	for(new i = 0; i < MAX_3DTEXT_OBJECT; i++)
		DestroyDynamic3DTextLabel(TextoObjetos[playerid][i]);
	return 1;
}

ReturnVehicleModelName(model)
{
	new name[32] = "None";

	if(model < 400 || model > 611)
		return name;

	format(name, sizeof(name), g_aVehicleName[model-400]);
	return name;
}

AnimationCheck(playerid)
{
	return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerData[playerid][pState] == PLAYER_STATE_ALIVE && !PlayerData[playerid][pCuffed] && !PlayerData[playerid][pTied] && !PlayerData[playerid][pFreezed] && !PlayerData[playerid][pStunned] && !PlayerData[playerid][pFishing] && !PlayerData[playerid][pRobbing]);
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	PlayerData[playerid][pLoopAnim] = true;
	ShowPlayerFooter(playerid, "Aperte ~y~SPRINT~w~ para parar a animação.");

	return 1;
}

Gate_Delete(gateid)
{
	if(gateid != -1 && GateData[gateid][gateExists])
	{
		new string[64];

		mysql_format(this, string, sizeof(string), "DELETE FROM `portoes` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(this, string);

		if(IsValidDynamicObject(GateData[gateid][gateObject]))
			DestroyDynamicObject(GateData[gateid][gateObject]);


		GateData[gateid][gateExists] = false;
		GateData[gateid][gatePassword] = 0;
		GateData[gateid][gateID] = 0;

		Iter_Remove(Gates, gateid);
	}
	return 1;
}

Gate_Nearest(playerid)
{
	foreach(new i : Gates) if(GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, 4.5, GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if(GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

Gate_Create(playerid, modelid)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		new i;
		if((i = Iter_Free(Gates)) < MAX_GATES)
		{
			GateData[i][gateExists] = true;

			GetXYInFrontOfPlayer(playerid, x, y, 2.0);

			GateData[i][gatePos][0] = x;
			GateData[i][gatePos][1] = y;
			GateData[i][gatePos][2] = z;
			GateData[i][gateRPos][0] = 0.0;
			GateData[i][gateRPos][1] = 0.0;
			GateData[i][gateRPos][2] = angle;

			GateData[i][gateAPos][0] = 0.0;
			GateData[i][gateAPos][1] = 0.0;
			GateData[i][gateAPos][2] = 0.0;
			GateData[i][gateARPos][0] = 0.0;
			GateData[i][gateARPos][1] = 0.0;
			GateData[i][gateARPos][2] = 0.0;

			GateData[i][gateModel] = modelid;
			GateData[i][gateSpeed] = 3.0;

			GateData[i][gateInterior] = GetPlayerInterior(playerid);
			GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

			GateData[i][gatePassword] = 0;

			Gate_Refresh(i);

			mysql_tquery(this, "INSERT INTO `portoes` (`gatePassword`) VALUES (0)", "OnGateCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 7;
			PlayerData[playerid][pSelectedSlot] = i;

			Iter_Add(Gates, i);

			EditDynamicObject(playerid, GateData[i][gateObject]);

			return i;
		}
	}
	return -1;
}

Gate_Refresh(gateid)
{
	if(gateid != -1 && GateData[gateid][gateExists])
	{
		if(IsValidDynamicObject(GateData[gateid][gateObject]))
			DestroyDynamicObject(GateData[gateid][gateObject]);

		GateData[gateid][gateObject] = CreateDynamicObject(GateData[gateid][gateModel], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateRPos][0], GateData[gateid][gateRPos][1], GateData[gateid][gateRPos][2], GateData[gateid][gateWorld], GateData[gateid][gateInterior]);

		return 1;
	}
	return 0;
}

Gate_Save(gateid)
{
	new query[550];

	mysql_format(this, query, sizeof(query), "UPDATE `portoes` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateX` = '%f', `gateY` = '%f', `gateZ` = '%f', `gateRX` = '%f', `gateRY` = '%f', `gateRZ` = '%f', `gateAX` = '%f', `gateAY` = '%f', `gateAZ` = '%f', `gateARX` = '%f', `gateARY` = '%f', `gateARZ` = '%f', `gateInterior` = '%d', `gateWorld` = '%d', `gatePassword` = '%d' WHERE `gateID` = '%d'",
		GateData[gateid][gateModel],
		GateData[gateid][gateSpeed],
		GateData[gateid][gatePos][0],
		GateData[gateid][gatePos][1],
		GateData[gateid][gatePos][2],
		GateData[gateid][gateRPos][0],
		GateData[gateid][gateRPos][1],
		GateData[gateid][gateRPos][2],
		GateData[gateid][gateAPos][0],
		GateData[gateid][gateAPos][1],
		GateData[gateid][gateAPos][2],
		GateData[gateid][gateARPos][0],
		GateData[gateid][gateARPos][1],
		GateData[gateid][gateARPos][2],
		GateData[gateid][gateInterior],
		GateData[gateid][gateWorld],
		GateData[gateid][gatePassword],
		GateData[gateid][gateID]);

	return mysql_tquery(this, query);
}

Gate_Operate(gateid)
{
	if(gateid != -1 && GateData[gateid][gateExists])
	{
		if(IsDynamicObjectMoving(GateData[gateid][gateObject]))
			return 1;

		if(!GateData[gateid][gateOpened])
		{
			GateData[gateid][gateOpened] = true;
			MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateAPos][0], GateData[gateid][gateAPos][1], GateData[gateid][gateAPos][2], GateData[gateid][gateSpeed], GateData[gateid][gateARPos][0], GateData[gateid][gateARPos][1], GateData[gateid][gateARPos][2]);
		}
		else if(GateData[gateid][gateOpened])
		{
			GateData[gateid][gateOpened] = false;
			MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gateRPos][0], GateData[gateid][gateRPos][1], GateData[gateid][gateRPos][2]);
		}
	}
	return 1;
}

OpenableDoor(modelid)
{
	static const openableDoors[] =
	{
		1495, 1498, 1535, 1557, 1536, 3089, 997,
		1492, 1494, 1493, 1499, 1504, 1507, 1567,
		1555, 2963, 19302, 19303, 1569, 1537, 2875,
		2876, 2877, 2878
	};

	for(new x; x < sizeof(openableDoors); x++) if(modelid == openableDoors[x]) return x;

	return -1;
}

ReturnJobName(jobid)
{
	new jobname[32] = "Nenhum";

	for(new i = 0; i < sizeof(g_aJobs); i++) if(g_aJobs[i][s_J_ID] == jobid)
	{
		format(jobname, 32, g_aJobs[i][s_J_Name]);
		break;
	}

	return jobname;
}

InsertIntoBankExtract(acc_type[], value, action[], playerid, userid = INVALID_PLAYER_ID)
{
	new query[250];

	if(userid != INVALID_PLAYER_ID)
	{
		new transf_de[64], transf_para[64];

		format(transf_de, sizeof(transf_de), "%s de %s", action, ReturnName(playerid, 0));
		format(transf_para, sizeof(transf_para), "%s para %s", action, ReturnName(userid, 0));

		//Mostrar para quem transferiu
		mysql_format(this, query, sizeof(query), "INSERT INTO `bank_history` (player_id, type, action, value, date) VALUES ('%d', '%e', '%e', '%d', '%e')",
			PlayerData[playerid][pID],
			acc_type,
			transf_para,
			value,
			ReturnDate());

		mysql_tquery(this, query);

		//Mostrar para quem recebeu
		mysql_format(this, query, sizeof(query), "INSERT INTO `bank_history` (player_id, type, action, value, date) VALUES ('%d', '%e', '%e', '%d', '%e')",
			PlayerData[userid][pID],
			acc_type,
			transf_de,
			value,
			ReturnDate());

		mysql_tquery(this, query);
	}
	else
	{
		mysql_format(this, query, sizeof(query), "INSERT INTO `bank_history` (player_id, type, action, value, date) VALUES ('%d', '%e', '%e', '%d', '%e')",
			PlayerData[playerid][pID],
			acc_type,
			action,
			value,
			ReturnDate());

		mysql_tquery(this, query);
	}

	return 1;
}

Mask_Save(playerid)
{
	new query[126];

	mysql_format(this, query, sizeof(query), "SELECT * FROM `mascaras_atuais` WHERE `maskOwner` = '%e'", MaskData[playerid][maskOwner]);
	mysql_tquery(this, query, "Mask_WriteSQL", "d", playerid);

	return 1;
}

RandomizeMaskID()
{
	new randomizarnumero, query[90];
	Randomize_Mask:
	randomizarnumero = 1000000 + random(999999);

	mysql_format(this, query, sizeof(query), "SELECT * FROM `mascaras_atuais` WHERE `maskNumber` = '%d'", randomizarnumero);
	new Cache:result = mysql_query(this, query);

	if(cache_num_rows())
	{
		cache_delete(result);
		goto Randomize_Mask;
	}

	return randomizarnumero;
}

RandomizePlayerNumber()
{
	new randomizarnumero, query[90];
	Randomize_Number:
	randomizarnumero = 100000 + random(9999999);

	if(randomizarnumero == 911 || randomizarnumero == 144 || randomizarnumero == 141 || randomizarnumero == 115)
		goto Randomize_Number;

	mysql_format(this, query, sizeof(query), "SELECT * FROM `players` WHERE `Cellphone` = '%d'", randomizarnumero);
	new Cache:result = mysql_query(this, query);

	if(cache_num_rows())
	{
		cache_delete(result);
		goto Randomize_Number;
	}

	return randomizarnumero;
}

RandomizeVehiclePlate()
{
	new tmpPlate[10], query[90];
	Randomize_Plate:
	format(tmpPlate, 10, "%c%c%c-%d%d%d%d", 'A'+random('Z'-'A'), 'A'+random('Z'-'A'), 'A'+random('Z'-'A'), random('9'-'0'), random('9'-'0'), random('9'-'0'), random('9'-'0'));

	mysql_format(this, query, sizeof(query), "SELECT * FROM `carros` WHERE `vehiclePlate` = '%e'", tmpPlate);
	new Cache:result = mysql_query(this, query);

	if(cache_num_rows())
	{
		cache_delete(result);
		goto Randomize_Plate;
	}

	return tmpPlate;
}

Attach_GetCount(playerid)
{
	new count = 0;

	for(new i = 0; i < MAX_ITEM_PLAYER; i++)
	{
		if(AttachData[playerid][i][attachExists])
			count++;
	}
	return count;
}

Attach_GetSlots(playerid)
{
	switch(PlayerData[playerid][pVip])
	{
		case 0: return 4;
		case 1: return 6;
		case 2: return 8;
		case 3: return 10;
	}

	return 0;
}

Attach_Buy(playerid, itemid, bone, itemname[], Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:sx, Float:sy, Float:sz)
{
	new query[126];

	for(new i = 0; i < MAX_ITEM_PLAYER; i++) if(!AttachData[playerid][i][attachExists])
	{
		AttachData[playerid][i][attachObject] = itemid;
		AttachData[playerid][i][attachIndex] = 0;
		AttachData[playerid][i][attachBone] = bone;
		AttachData[playerid][i][attachUsing] = false;
		format(AttachData[playerid][i][attachName], 64, itemname);

		AttachData[playerid][i][attachX] = x;
		AttachData[playerid][i][attachY] = y;
		AttachData[playerid][i][attachZ] = z;

		AttachData[playerid][i][attachRX] = rx;
		AttachData[playerid][i][attachRY] = ry;
		AttachData[playerid][i][attachRZ] = rz;

		AttachData[playerid][i][attachSX] = sx;
		AttachData[playerid][i][attachSY] = sy;
		AttachData[playerid][i][attachSZ] = sz;

		RemovePlayerAttachedObject(playerid, 9); //Index-Attach de compra

		mysql_format(this, query, sizeof(query), "INSERT INTO `attachments` (`attachIndex`, `ID`) VALUE ('0', '%d')", PlayerData[playerid][pID]);
		mysql_tquery(this, query, "Attach_Bought", "dd", playerid, i);

		return i;
	}

	return -1;
}

stock Attach_Redeem(playerid, itemid, itemname[])
{
	new query[126];

	for(new i = 0; i < MAX_ITEM_PLAYER; i++) if(!AttachData[playerid][i][attachExists])
	{
		AttachData[playerid][i][attachObject] = itemid;
		AttachData[playerid][i][attachIndex] = 0;
		AttachData[playerid][i][attachBone] = 1;
		AttachData[playerid][i][attachUsing] = false;
		format(AttachData[playerid][i][attachName], 64, itemname);

		AttachData[playerid][i][attachX] = 0.0;
		AttachData[playerid][i][attachY] = 0.0;
		AttachData[playerid][i][attachZ] = 0.0;

		AttachData[playerid][i][attachRX] = 0.0;
		AttachData[playerid][i][attachRY] = 0.0;
		AttachData[playerid][i][attachRZ] = 0.0;

		AttachData[playerid][i][attachSX] = 0.0;
		AttachData[playerid][i][attachSY] = 0.0;
		AttachData[playerid][i][attachSZ] = 0.0;

		mysql_format(this, query, sizeof(query), "INSERT INTO `attachments` (`attachIndex`, `ID`) VALUE ('0', '%d')", PlayerData[playerid][pID]);
		mysql_tquery(this, query, "Attach_Bought", "dd", playerid, i);

		return i;
	}

	return -1;
}

Attach_Save(playerid, id)
{
	new query[550];

	mysql_format(this, query, sizeof(query), "UPDATE attachments SET attachObject = '%d', attachIndex = '%d', attachBone = '%d', attachUsing = '%d', attachName = '%e'",
		AttachData[playerid][id][attachObject],
		AttachData[playerid][id][attachIndex],
		AttachData[playerid][id][attachBone],
		AttachData[playerid][id][attachUsing],
		AttachData[playerid][id][attachName]);

	mysql_format(this, query, sizeof(query), "%s, attachX = '%f', attachY = '%f', attachZ = '%f', attachRX = '%f', attachRY = '%f', attachRZ = '%f', attachSX = '%f', attachSY = '%f', attachSZ = '%f' WHERE attachID = '%d'",
		query,
		AttachData[playerid][id][attachX],
		AttachData[playerid][id][attachY],
		AttachData[playerid][id][attachZ],
		AttachData[playerid][id][attachRX],
		AttachData[playerid][id][attachRY],
		AttachData[playerid][id][attachRZ],
		AttachData[playerid][id][attachSX],
		AttachData[playerid][id][attachSY],
		AttachData[playerid][id][attachSZ],
		AttachData[playerid][id][attachID]);

	mysql_tquery(this, query);

	return 1;
}

Attach_Delete(playerid, id)
{
	new query[75];

	mysql_format(this, query, sizeof(query), "DELETE FROM attachments WHERE attachID = '%d'", AttachData[playerid][id][attachID]);
	mysql_tquery(this, query);

	Attach_RefreshList(playerid);

	return 1;
}

Attach_ReturnOptions(playerid, id)
{
	if(!AttachData[playerid][id][attachUsing])
	{
		Dialog_Show(playerid, PlayerItemsOptions, DIALOG_STYLE_LIST, "Opções do acessório", "Ajustar posição\nAcoplar no corpo\nAlterar bone slot\nAlterar index slot\nDeletar acessório", "Selecionar", "<<");
	}
	else
	{
		Dialog_Show(playerid, PlayerItemsOptions, DIALOG_STYLE_LIST, "Opções do acessório", "Ajustar posição\nRemover do corpo\nAlterar bone slot\nAlterar index slot\nDeletar acessório", "Selecionar", "<<");
	}

	return 1;
}

Attach_RefreshList(playerid)
{
	if(!PlayerData[playerid][pLogged])
		return 0;

	new query[55];

	for(new i = 0; i < MAX_ITEM_PLAYER; i++)
		AttachData[playerid][i][attachExists] = false;

	mysql_format(this, query, sizeof(query), "SELECT * FROM `attachments` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	mysql_tquery(this, query, "OnQueryFinished", "dd", playerid, QUERY_LOAD_ATTACHS);

	return 1;
}

Temp_ResetData(playerid)
{
	if(!PlayerData[playerid][pLogged])
		return 0;

	TempData[playerid][tempID] = -1;
	TempData[playerid][tempLocator] = 0;
	TempData[playerid][tempSeguro] = 0;
	TempData[playerid][tempTrava] = 0;
	TempData[playerid][tempXMRadio] = 0;
	TempData[playerid][tempColor1] = 0;
	TempData[playerid][tempColor2] = 0;
	TempData[playerid][tempPrice] = 0;
	TempData[playerid][tempPriceTotal] = 0;
	TempData[playerid][tempModel] = 0;
	TempData[playerid][tempHoldingProduct] = INVALID_INDUSTRY_PRODUCT;
	TempData[playerid][tempHoldingTrash] = false;
	TempData[playerid][tempTweak] = 0;

	return 1;
}

Dealership_CanBuy(playerid, vehiclemodel)
{
	switch(vehiclemodel)
	{
		case 521: //Prata
		{
			if(PlayerData[playerid][pVip] != 2)
			{
				SendWarningMessage(playerid, "Apenas jogadores com benefício Prime(prata) podem comprar este veículo.");
				return 0;
			}
		}
		case 541: //Ouro
		{
			if(PlayerData[playerid][pVip] != 3)
			{
				SendWarningMessage(playerid, "Apenas jogadores com benefício Prime(ouro) podem comprar este veículo.");
				return 0;
			}
		}
	}

	return 1;
}

Dealership_CreateGlobal()
{
	d_gText[DEALERSHIP_INFO_TEXT] = TextDrawCreate(148.000000, 170.000000, "Modelo:~n~Vel._Max:~n~Tracao:~n~Preco:");
	TextDrawLetterSize(d_gText[DEALERSHIP_INFO_TEXT], 0.337000, 1.662222);
	TextDrawAlignment(d_gText[DEALERSHIP_INFO_TEXT], 1);
	TextDrawColor(d_gText[DEALERSHIP_INFO_TEXT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_INFO_TEXT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_INFO_TEXT], 1);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_INFO_TEXT], 255);
	TextDrawFont(d_gText[DEALERSHIP_INFO_TEXT], 3);
	TextDrawSetProportional(d_gText[DEALERSHIP_INFO_TEXT], 1);
	TextDrawSetShadow(d_gText[DEALERSHIP_INFO_TEXT], 0);

	d_gText[DEALERSHIP_EXTRA_TEXT] = TextDrawCreate(148.000000, 261.000000, "Seguro:~n~Trava:~n~Localizador:~n~XM_Radio:");
	TextDrawLetterSize(d_gText[DEALERSHIP_EXTRA_TEXT], 0.337000, 1.662222);
	TextDrawAlignment(d_gText[DEALERSHIP_EXTRA_TEXT], 1);
	TextDrawColor(d_gText[DEALERSHIP_EXTRA_TEXT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_EXTRA_TEXT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_EXTRA_TEXT], 1);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_EXTRA_TEXT], 255);
	TextDrawFont(d_gText[DEALERSHIP_EXTRA_TEXT], 3);
	TextDrawSetProportional(d_gText[DEALERSHIP_EXTRA_TEXT], 1);
	TextDrawSetShadow(d_gText[DEALERSHIP_EXTRA_TEXT], 0);

	d_gText[DEALERSHIP_INSURANCE_LEFT] = TextDrawCreate(224.000000, 263.000000, "LD_BEAT:left");
	TextDrawLetterSize(d_gText[DEALERSHIP_INSURANCE_LEFT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_INSURANCE_LEFT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_INSURANCE_LEFT], 1);
	TextDrawColor(d_gText[DEALERSHIP_INSURANCE_LEFT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_INSURANCE_LEFT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_INSURANCE_LEFT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_INSURANCE_LEFT], 255);
	TextDrawFont(d_gText[DEALERSHIP_INSURANCE_LEFT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_INSURANCE_LEFT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_INSURANCE_LEFT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_INSURANCE_LEFT], true);

	d_gText[DEALERSHIP_INSURANCE_RIGHT] = TextDrawCreate(254.000000, 263.000000, "LD_BEAT:right");
	TextDrawLetterSize(d_gText[DEALERSHIP_INSURANCE_RIGHT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_INSURANCE_RIGHT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_INSURANCE_RIGHT], 1);
	TextDrawColor(d_gText[DEALERSHIP_INSURANCE_RIGHT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_INSURANCE_RIGHT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_INSURANCE_RIGHT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_INSURANCE_RIGHT], 255);
	TextDrawFont(d_gText[DEALERSHIP_INSURANCE_RIGHT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_INSURANCE_RIGHT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_INSURANCE_RIGHT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_INSURANCE_RIGHT], true);

	d_gText[DEALERSHIP_LOCK_LEFT] = TextDrawCreate(224.000000, 278.000000, "LD_BEAT:left");
	TextDrawLetterSize(d_gText[DEALERSHIP_LOCK_LEFT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_LOCK_LEFT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_LOCK_LEFT], 1);
	TextDrawColor(d_gText[DEALERSHIP_LOCK_LEFT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_LOCK_LEFT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_LOCK_LEFT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_LOCK_LEFT], 255);
	TextDrawFont(d_gText[DEALERSHIP_LOCK_LEFT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_LOCK_LEFT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_LOCK_LEFT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_LOCK_LEFT], true);

	d_gText[DEALERSHIP_LOCK_RIGHT] = TextDrawCreate(254.000000, 278.000000, "LD_BEAT:right");
	TextDrawLetterSize(d_gText[DEALERSHIP_LOCK_RIGHT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_LOCK_RIGHT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_LOCK_RIGHT], 1);
	TextDrawColor(d_gText[DEALERSHIP_LOCK_RIGHT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_LOCK_RIGHT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_LOCK_RIGHT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_LOCK_RIGHT], 255);
	TextDrawFont(d_gText[DEALERSHIP_LOCK_RIGHT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_LOCK_RIGHT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_LOCK_RIGHT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_LOCK_RIGHT], true);

	d_gText[DEALERSHIP_LOCATOR_LEFT] = TextDrawCreate(224.000000, 293.000000, "LD_BEAT:left");
	TextDrawLetterSize(d_gText[DEALERSHIP_LOCATOR_LEFT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_LOCATOR_LEFT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_LOCATOR_LEFT], 1);
	TextDrawColor(d_gText[DEALERSHIP_LOCATOR_LEFT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_LOCATOR_LEFT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_LOCATOR_LEFT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_LOCATOR_LEFT], 255);
	TextDrawFont(d_gText[DEALERSHIP_LOCATOR_LEFT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_LOCATOR_LEFT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_LOCATOR_LEFT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_LOCATOR_LEFT], true);

	d_gText[DEALERSHIP_LOCATOR_RIGHT] = TextDrawCreate(254.000000, 293.000000, "LD_BEAT:right");
	TextDrawLetterSize(d_gText[DEALERSHIP_LOCATOR_RIGHT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_LOCATOR_RIGHT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_LOCATOR_RIGHT], 1);
	TextDrawColor(d_gText[DEALERSHIP_LOCATOR_RIGHT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_LOCATOR_RIGHT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_LOCATOR_RIGHT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_LOCATOR_RIGHT], 255);
	TextDrawFont(d_gText[DEALERSHIP_LOCATOR_RIGHT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_LOCATOR_RIGHT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_LOCATOR_RIGHT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_LOCATOR_RIGHT], true);

	d_gText[DEALERSHIP_XMRADIO_LEFT] = TextDrawCreate(224.000000, 308.000000, "LD_BEAT:left");
	TextDrawLetterSize(d_gText[DEALERSHIP_XMRADIO_LEFT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_XMRADIO_LEFT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_XMRADIO_LEFT], 1);
	TextDrawColor(d_gText[DEALERSHIP_XMRADIO_LEFT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_XMRADIO_LEFT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_XMRADIO_LEFT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_XMRADIO_LEFT], 255);
	TextDrawFont(d_gText[DEALERSHIP_XMRADIO_LEFT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_XMRADIO_LEFT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_XMRADIO_LEFT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_XMRADIO_LEFT], true);

	d_gText[DEALERSHIP_XMRADIO_RIGHT] = TextDrawCreate(254.000000, 308.000000, "LD_BEAT:right");
	TextDrawLetterSize(d_gText[DEALERSHIP_XMRADIO_RIGHT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_XMRADIO_RIGHT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_XMRADIO_RIGHT], 1);
	TextDrawColor(d_gText[DEALERSHIP_XMRADIO_RIGHT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_XMRADIO_RIGHT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_XMRADIO_RIGHT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_XMRADIO_RIGHT], 255);
	TextDrawFont(d_gText[DEALERSHIP_XMRADIO_RIGHT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_XMRADIO_RIGHT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_XMRADIO_RIGHT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_XMRADIO_RIGHT], true);

	d_gText[DEALERSHIP_COLOR1_LEFT] = TextDrawCreate(245.000000, 143.000000, "LD_BEAT:left");
	TextDrawLetterSize(d_gText[DEALERSHIP_COLOR1_LEFT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_COLOR1_LEFT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_COLOR1_LEFT], 1);
	TextDrawColor(d_gText[DEALERSHIP_COLOR1_LEFT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_COLOR1_LEFT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_COLOR1_LEFT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_COLOR1_LEFT], 255);
	TextDrawFont(d_gText[DEALERSHIP_COLOR1_LEFT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_COLOR1_LEFT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_COLOR1_LEFT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_COLOR1_LEFT], true);

	d_gText[DEALERSHIP_COLOR1_RIGHT] = TextDrawCreate(291.000000, 143.000000, "LD_BEAT:right");
	TextDrawLetterSize(d_gText[DEALERSHIP_COLOR1_RIGHT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_COLOR1_RIGHT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_COLOR1_RIGHT], 1);
	TextDrawColor(d_gText[DEALERSHIP_COLOR1_RIGHT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_COLOR1_RIGHT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_COLOR1_RIGHT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_COLOR1_RIGHT], 255);
	TextDrawFont(d_gText[DEALERSHIP_COLOR1_RIGHT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_COLOR1_RIGHT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_COLOR1_RIGHT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_COLOR1_RIGHT], true);

	d_gText[DEALERSHIP_COLOR2_LEFT] = TextDrawCreate(322.000000, 143.000000, "LD_BEAT:left");
	TextDrawLetterSize(d_gText[DEALERSHIP_COLOR2_LEFT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_COLOR2_LEFT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_COLOR2_LEFT], 1);
	TextDrawColor(d_gText[DEALERSHIP_COLOR2_LEFT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_COLOR2_LEFT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_COLOR2_LEFT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_COLOR2_LEFT], 255);
	TextDrawFont(d_gText[DEALERSHIP_COLOR2_LEFT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_COLOR2_LEFT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_COLOR2_LEFT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_COLOR2_LEFT], true);

	d_gText[DEALERSHIP_COLOR2_RIGHT] = TextDrawCreate(368.000000, 143.000000, "LD_BEAT:right");
	TextDrawLetterSize(d_gText[DEALERSHIP_COLOR2_RIGHT], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_COLOR2_RIGHT], 12.000000, 12.000000);
	TextDrawAlignment(d_gText[DEALERSHIP_COLOR2_RIGHT], 1);
	TextDrawColor(d_gText[DEALERSHIP_COLOR2_RIGHT], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_COLOR2_RIGHT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_COLOR2_RIGHT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_COLOR2_RIGHT], 255);
	TextDrawFont(d_gText[DEALERSHIP_COLOR2_RIGHT], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_COLOR2_RIGHT], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_COLOR2_RIGHT], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_COLOR2_RIGHT], true);

	d_gText[DEALERSHIP_TITLE] = TextDrawCreate(318.000000, 8.000000, "Concessionaria");
	TextDrawLetterSize(d_gText[DEALERSHIP_TITLE], 1.074999, 4.333630);
	TextDrawAlignment(d_gText[DEALERSHIP_TITLE], 2);
	TextDrawColor(d_gText[DEALERSHIP_TITLE], 255);
	TextDrawSetShadow(d_gText[DEALERSHIP_TITLE], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_TITLE], 1);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_TITLE], -1);
	TextDrawFont(d_gText[DEALERSHIP_TITLE], 0);
	TextDrawSetProportional(d_gText[DEALERSHIP_TITLE], 1);
	TextDrawSetShadow(d_gText[DEALERSHIP_TITLE], 0);

	d_gText[DEALERSHIP_BUYBOX_1] = TextDrawCreate(339.333374, 204.155639, "LD_SPAC:WHITE");
	TextDrawLetterSize(d_gText[DEALERSHIP_BUYBOX_1], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_BUYBOX_1], 55.019996, 22.010000);
	TextDrawAlignment(d_gText[DEALERSHIP_BUYBOX_1], 1);
	TextDrawColor(d_gText[DEALERSHIP_BUYBOX_1], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_BUYBOX_1], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_BUYBOX_1], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_BUYBOX_1], 255);
	TextDrawFont(d_gText[DEALERSHIP_BUYBOX_1], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_BUYBOX_1], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_BUYBOX_1], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_BUYBOX_1], true);

	d_gText[DEALERSHIP_BUYBOX_2] = TextDrawCreate(340.333374, 205.155639, "LD_SPAC:BLACK");
	TextDrawLetterSize(d_gText[DEALERSHIP_BUYBOX_2], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_BUYBOX_2], 53.000000, 19.989999);
	TextDrawAlignment(d_gText[DEALERSHIP_BUYBOX_2], 1);
	TextDrawColor(d_gText[DEALERSHIP_BUYBOX_2], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_BUYBOX_2], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_BUYBOX_2], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_BUYBOX_2], 255);
	TextDrawFont(d_gText[DEALERSHIP_BUYBOX_2], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_BUYBOX_2], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_BUYBOX_2], 0);

	d_gText[DEALERSHIP_CANCELBOX_1] = TextDrawCreate(339.333374, 260.155639, "LD_SPAC:WHITE");
	TextDrawLetterSize(d_gText[DEALERSHIP_CANCELBOX_1], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_CANCELBOX_1], 55.019996, 22.010000);
	TextDrawAlignment(d_gText[DEALERSHIP_CANCELBOX_1], 1);
	TextDrawColor(d_gText[DEALERSHIP_CANCELBOX_1], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_CANCELBOX_1], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_CANCELBOX_1], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_CANCELBOX_1], 255);
	TextDrawFont(d_gText[DEALERSHIP_CANCELBOX_1], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_CANCELBOX_1], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_CANCELBOX_1], 0);
	TextDrawSetSelectable(d_gText[DEALERSHIP_CANCELBOX_1], true);

	d_gText[DEALERSHIP_CANCELBOX_2] = TextDrawCreate(340.333374, 261.155639, "LD_SPAC:BLACK");
	TextDrawLetterSize(d_gText[DEALERSHIP_CANCELBOX_2], 0.000000, 0.000000);
	TextDrawTextSize(d_gText[DEALERSHIP_CANCELBOX_2], 53.000000, 19.989999);
	TextDrawAlignment(d_gText[DEALERSHIP_CANCELBOX_2], 1);
	TextDrawColor(d_gText[DEALERSHIP_CANCELBOX_2], -1);
	TextDrawSetShadow(d_gText[DEALERSHIP_CANCELBOX_2], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_CANCELBOX_2], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_CANCELBOX_2], 255);
	TextDrawFont(d_gText[DEALERSHIP_CANCELBOX_2], 4);
	TextDrawSetProportional(d_gText[DEALERSHIP_CANCELBOX_2], 0);
	TextDrawSetShadow(d_gText[DEALERSHIP_CANCELBOX_2], 0);

	d_gText[DEALERSHIP_BUY_TEXT] = TextDrawCreate(367.000000, 208.000000, "Comprar");
	TextDrawLetterSize(d_gText[DEALERSHIP_BUY_TEXT], 0.240666, 1.429926);
	TextDrawAlignment(d_gText[DEALERSHIP_BUY_TEXT], 2);
	TextDrawColor(d_gText[DEALERSHIP_BUY_TEXT], 8388863);
	TextDrawSetShadow(d_gText[DEALERSHIP_BUY_TEXT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_BUY_TEXT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_BUY_TEXT], -2139062017);
	TextDrawFont(d_gText[DEALERSHIP_BUY_TEXT], 2);
	TextDrawSetProportional(d_gText[DEALERSHIP_BUY_TEXT], 1);
	TextDrawSetShadow(d_gText[DEALERSHIP_BUY_TEXT], 0);

	d_gText[DEALERSHIP_CANCEL_TEXT] = TextDrawCreate(367.000000, 264.000000, "Cancelar");
	TextDrawLetterSize(d_gText[DEALERSHIP_CANCEL_TEXT], 0.240666, 1.429926);
	TextDrawAlignment(d_gText[DEALERSHIP_CANCEL_TEXT], 2);
	TextDrawColor(d_gText[DEALERSHIP_CANCEL_TEXT], -16776961);
	TextDrawSetShadow(d_gText[DEALERSHIP_CANCEL_TEXT], 0);
	TextDrawSetOutline(d_gText[DEALERSHIP_CANCEL_TEXT], 0);
	TextDrawBackgroundColor(d_gText[DEALERSHIP_CANCEL_TEXT], -2139062017);
	TextDrawFont(d_gText[DEALERSHIP_CANCEL_TEXT], 2);
	TextDrawSetProportional(d_gText[DEALERSHIP_CANCEL_TEXT], 1);
	TextDrawSetShadow(d_gText[DEALERSHIP_CANCEL_TEXT], 0);

	return 1;
}

Dealership_CreateTD(playerid)
{
	d_pText[playerid][DEALERSHIP_MODEL_PREVIEW] = CreatePlayerTextDraw(playerid, 248.000000, 3.999999, "");
	PlayerTextDrawLetterSize(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 153.000000, 163.000000);
	PlayerTextDrawAlignment(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 1);
	PlayerTextDrawColor(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], -1);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 0);
	PlayerTextDrawSetOutline(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 0);
	PlayerTextDrawBackgroundColor(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 0);
	PlayerTextDrawFont(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 5);
	PlayerTextDrawSetProportional(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 0);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 0);
	PlayerTextDrawSetPreviewModel(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 400);
	PlayerTextDrawSetPreviewRot(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], -15.000000, 0.000000, -30.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 1, 1);

	d_pText[playerid][DEALERSHIP_INFO_CAR] = CreatePlayerTextDraw(playerid, 241.000000, 170.000000, "Elegy~n~121_mp/h~n~Traseira~n~~g~$150,000");
	PlayerTextDrawLetterSize(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], 0.337000, 1.662222);
	PlayerTextDrawAlignment(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], 1);
	PlayerTextDrawColor(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], -65281);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], 0);
	PlayerTextDrawSetOutline(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], 1);
	PlayerTextDrawBackgroundColor(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], 255);
	PlayerTextDrawFont(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], 3);
	PlayerTextDrawSetProportional(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], 1);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], 0);

	d_pText[playerid][DEALERSHIP_EXTRA_CAR] = CreatePlayerTextDraw(playerid, 241.000000, 261.000000, "0~n~0~n~0~n~0");
	PlayerTextDrawLetterSize(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], 0.337000, 1.662222);
	PlayerTextDrawAlignment(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], 1);
	PlayerTextDrawColor(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], -65281);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], 0);
	PlayerTextDrawSetOutline(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], 1);
	PlayerTextDrawBackgroundColor(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], 255);
	PlayerTextDrawFont(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], 2);
	PlayerTextDrawSetProportional(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], 1);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], 0);

	d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW] = CreatePlayerTextDraw(playerid, 260.000000, 140.000000, "box");
	PlayerTextDrawLetterSize(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 0.000000, 1.899997);
	PlayerTextDrawTextSize(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 288.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 1);
	PlayerTextDrawColor(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], -1);
	PlayerTextDrawUseBox(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 1);
	PlayerTextDrawBoxColor(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 255);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 0);
	PlayerTextDrawSetOutline(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 0);
	PlayerTextDrawBackgroundColor(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 255);
	PlayerTextDrawFont(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 1);
	PlayerTextDrawSetProportional(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 1);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], 0);

	d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW] = CreatePlayerTextDraw(playerid, 337.000000, 140.000000, "box");
	PlayerTextDrawLetterSize(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 0.000000, 1.899997);
	PlayerTextDrawTextSize(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 365.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 1);
	PlayerTextDrawColor(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], -1);
	PlayerTextDrawUseBox(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 1);
	PlayerTextDrawBoxColor(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 255);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 0);
	PlayerTextDrawSetOutline(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 0);
	PlayerTextDrawBackgroundColor(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 255);
	PlayerTextDrawFont(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 1);
	PlayerTextDrawSetProportional(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 1);
	PlayerTextDrawSetShadow(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], 0);

	return 1;
}

Dealership_Refresh(playerid)
{
	if(!GetPVarInt(playerid, "Dealership_Open"))
		return 0;

	new Float:math, locator_price, insurance_price, lock_price, xmradio_price;

	switch(TempData[playerid][tempLocator])
	{
		case 0: math = 0.0;
		case 1: math = float(TempData[playerid][tempPrice]) * 0.07;
		case 2: math = float(TempData[playerid][tempPrice]) * 0.09;
		case 3: math = float(TempData[playerid][tempPrice]) * 0.11;
	}

	locator_price = floatround(math);

	switch(TempData[playerid][tempSeguro])
	{
		case 0: math = 0.0;
		case 1: math = float(TempData[playerid][tempPrice]) * 0.17;
		case 2: math = float(TempData[playerid][tempPrice]) * 0.21;
		case 3: math = float(TempData[playerid][tempPrice]) * 0.3;
	}

	insurance_price = floatround(math);

	switch(TempData[playerid][tempTrava])
	{
		case 0: math = 0.0;
		case 1: math = float(TempData[playerid][tempPrice]) * 0.05;
		case 2: math = float(TempData[playerid][tempPrice]) * 0.08;
		case 3: math = float(TempData[playerid][tempPrice]) * 0.12;
	}

	lock_price = floatround(math);

	switch(TempData[playerid][tempXMRadio])
	{
		case 0: math = 0.0;
		case 1: math = float(TempData[playerid][tempPrice]) * 0.01;
		case 2: math = float(TempData[playerid][tempPrice]) * 0.03;
		case 3: math = float(TempData[playerid][tempPrice]) * 0.08;
	}

	xmradio_price = floatround(math);

	TempData[playerid][tempPriceTotal] = TempData[playerid][tempPrice] + locator_price + insurance_price + lock_price + xmradio_price;

	new extra_string[20], info_string[76];

	format(extra_string, sizeof(extra_string), "%d~n~%d~n~%d~n~%d", TempData[playerid][tempSeguro], TempData[playerid][tempTrava], TempData[playerid][tempLocator], TempData[playerid][tempXMRadio]);
	format(info_string, sizeof(info_string), "%s~n~%.1f_mp/h~n~%s~n~~g~%s", ReturnVehicleModelName(TempData[playerid][tempModel]), ReturnVehicleTopSpeed(TempData[playerid][tempModel]), TempData[playerid][tempTracao], FormatNumber(TempData[playerid][tempPriceTotal]));

	PlayerTextDrawSetString(playerid, d_pText[playerid][DEALERSHIP_INFO_CAR], info_string);
	PlayerTextDrawSetString(playerid, d_pText[playerid][DEALERSHIP_EXTRA_CAR], extra_string);

	return 1;
}

Dealership_RefreshColor(playerid, textdraw)
{
	if(!GetPVarInt(playerid, "Dealership_Open"))
		return 0;

	PlayerTextDrawSetPreviewVehCol(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], TempData[playerid][tempColor1], TempData[playerid][tempColor2]);
	PlayerTextDrawShow(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW]);
	
	if(textdraw == 1)
	{
		PlayerTextDrawBoxColor(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], VehicleColorTableRGBA[TempData[playerid][tempColor1]]);
		PlayerTextDrawShow(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW]);
	}
	else if(textdraw == 2)
	{
		PlayerTextDrawBoxColor(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], VehicleColorTableRGBA[TempData[playerid][tempColor2]]);
		PlayerTextDrawShow(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW]);
	}
	
	return 1;
}

Dealership_Show(playerid, model, price, const tracao[])
{
	if(GetPVarInt(playerid, "Dealership_Open"))
		return 0;

	SetPVarInt(playerid, "Dealership_Open", 1);

	SelectTextDraw(playerid, 0x7798BAFF);

	TempData[playerid][tempLocator] = 0;
	TempData[playerid][tempSeguro] = 0;
	TempData[playerid][tempXMRadio] = 0;
	TempData[playerid][tempTrava] = 0;
	TempData[playerid][tempColor1] = 0;
	TempData[playerid][tempColor2] = 0;
	format(TempData[playerid][tempTracao], 16, tracao);
	TempData[playerid][tempPrice] = price;
	TempData[playerid][tempModel] = model;

	PlayerTextDrawSetPreviewModel(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], model);
	PlayerTextDrawSetPreviewVehCol(playerid, d_pText[playerid][DEALERSHIP_MODEL_PREVIEW], 0, 0);

	Dealership_Refresh(playerid);
	PlayerTextDrawBoxColor(playerid, d_pText[playerid][DEALERSHIP_COLOR1_PREVIEW], VehicleColorTableRGBA[TempData[playerid][tempColor1]]);
	PlayerTextDrawBoxColor(playerid, d_pText[playerid][DEALERSHIP_COLOR2_PREVIEW], VehicleColorTableRGBA[TempData[playerid][tempColor2]]);

	for(new i = DEALERSHIP_TITLE; i < MAX_DEALERSHIP_GLOBAL; i++)
		TextDrawShowForPlayer(playerid, d_gText[i]);

	for(new i = DEALERSHIP_MODEL_PREVIEW; i < MAX_DEALERSHIP_PLAYER; i++)
		PlayerTextDrawShow(playerid, d_pText[playerid][i]);

	return 1;
}

Dealership_Close(playerid)
{
	if(!GetPVarInt(playerid, "Dealership_Open"))
		return 0;

	DeletePVar(playerid, "Dealership_Open");

	for(new i = DEALERSHIP_TITLE; i < MAX_DEALERSHIP_GLOBAL; i++)
		TextDrawHideForPlayer(playerid, d_gText[i]);

	for(new i = DEALERSHIP_MODEL_PREVIEW; i < MAX_DEALERSHIP_PLAYER; i++)
		PlayerTextDrawHide(playerid, d_pText[playerid][i]);

	CancelSelectTextDraw(playerid);

	return 1;
}

Fuel_GetQuantity(vehicleid)
{
	if(IsACar(vehicleid))
		return 28;
	else if(IsABike(vehicleid))
		return 11;
	else if(IsATruck(vehicleid))
		return 45;

	//Refazer para cada carro, no futuro, futuro distante...

	return 0;
}

Pump_Nearest(playerid)
{
	foreach(new i : Pumps) if(PumpData[i][pumpExists])
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.5, PumpData[i][pumpX], PumpData[i][pumpY], PumpData[i][pumpZ]) && GetPlayerVirtualWorld(playerid) == 0)
			return i;
	}

	return -1;
}

Pump_Create(playerid, bizid)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		new i;
		if((i = Iter_Free(Pumps)) < MAX_PUMP)
		{
			PumpData[i][pumpExists] = true;

			x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

			PumpData[i][pumpX] = x;
			PumpData[i][pumpY] = y;
			PumpData[i][pumpZ] = z;

			PumpData[i][pumpBusinessID] = BusinessData[bizid][businessID];

			Pump_Refresh(i);
			mysql_tquery(this, "INSERT INTO pumps (pumpID) VALUES (null)", "OnPumpCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 12;
			PlayerData[playerid][pSelectedSlot] = i;
			EditDynamicObject(playerid, PumpData[i][pumpObject]);

			Iter_Add(Pumps, i);

			return i;
		}
	}

	return -1;
}

Pump_Save(pumpid)
{
	new query[250];

	mysql_format(this, query, sizeof(query), "UPDATE pumps SET pumpBusinessID = '%d', pumpX = '%f', pumpY = '%f', pumpZ = '%f', pumpRX = '%f', pumpRY = '%f', pumpRZ = '%f' WHERE pumpID = '%d'",
		PumpData[pumpid][pumpBusinessID], PumpData[pumpid][pumpX], PumpData[pumpid][pumpY], PumpData[pumpid][pumpZ], PumpData[pumpid][pumpRX], PumpData[pumpid][pumpRY], PumpData[pumpid][pumpRZ], PumpData[pumpid][pumpID]);

	mysql_tquery(this, query);

	return 1;
}

Pump_Delete(pumpid)
{
	if(PumpData[pumpid][pumpExists])
	{
		new query[64];

		mysql_format(this, query, sizeof(query), "DELETE FROM pumps WHERE pumpID = '%d'", PumpData[pumpid][pumpID]);
		mysql_tquery(this, query);

		if(IsValidDynamicObject(PumpData[pumpid][pumpObject]))
			DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		if(IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText]))
			DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText]);

		PumpData[pumpid][pumpExists] = false;

		Iter_Remove(Pumps, pumpid);
	}

	return 1;
}

Pump_Refresh(pumpid)
{
	if(!PumpData[pumpid][pumpExists])
		return 0;

	if(IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		DestroyDynamicObject(PumpData[pumpid][pumpObject]);

	if(IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText]))
		DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText]);

	new string[15], bizid = GetBusinessByID(PumpData[pumpid][pumpBusinessID]);

	format(string, sizeof(string), "%s/galão", FormatNumber(BusinessData[bizid][businessProductPrice][0]));

	PumpData[pumpid][pumpObject] = CreateDynamicObject(1676, PumpData[pumpid][pumpX], PumpData[pumpid][pumpY], PumpData[pumpid][pumpZ], PumpData[pumpid][pumpRX], PumpData[pumpid][pumpRY], PumpData[pumpid][pumpRZ]);
	PumpData[pumpid][pumpText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, PumpData[pumpid][pumpX], PumpData[pumpid][pumpY], PumpData[pumpid][pumpZ], 4.5);

	return 1;
}

Pump_StopFuelling(playerid)
{
	if(!PlayerData[playerid][pRefuelling])
		return 0;

	SendGreenMessage(playerid, "Você abasteceu o seu veículo por %s.", FormatNumber(PlayerData[playerid][pRefuellingPrice]));

	PlayerData[playerid][pRefuelling] = false;	
	PlayerData[playerid][pRefuellingPrice] = 0;
	KillTimer(PlayerData[playerid][pRefuellingTimer]);

	return 1;
}

Industry_Working()
{
	foreach(new i : Industry) if(IndustryData[i][industryExists])
	{
		//Primárias
		if(IndustryData[i][industrySection] == SECTION_PETROLEUM)
		{
			Industry_PrimaryWorking(i, 0, 15);
		}

		if(IndustryData[i][industrySection] == SECTION_FARM)
		{
			Industry_PrimaryWorking(i, 0, 10);
			Industry_PrimaryWorking(i, 1, 10);
			Industry_PrimaryWorking(i, 2, 10);
			Industry_PrimaryWorking(i, 3, 10);
		}

		if(IndustryData[i][industrySection] == SECTION_METAL)
		{
			Industry_PrimaryWorking(i, 0, 5);
		}

		if(IndustryData[i][industrySection] == SECTION_FOOD)
		{
			if(IndustryData[i][industryBuyingStock][0] >= 10 && IndustryData[i][industryBuyingStock][1] >= 10 && IndustryData[i][industryBuyingStock][2] >= 10)
			{
				Industry_SecundaryWorking(i, 0, -10);
				Industry_SecundaryWorking(i, 1, -10);
				Industry_SecundaryWorking(i, 2, -10);

				Industry_PrimaryWorking(i, 0, 15);
			}	
		}

		if(IndustryData[i][industrySection] == SECTION_ELETRONIC)
		{
			if(IndustryData[i][industryBuyingStock][0] >= 10)
			{
				Industry_SecundaryWorking(i, 0, -1);

				Industry_PrimaryWorking(i, 0, 15);
			}	
		}

		if(IndustryData[i][industrySection] == SECTION_CLOTHES)
		{
			if(IndustryData[i][industryBuyingStock][0] >= 15)
			{
				Industry_SecundaryWorking(i, 0, -15);

				Industry_PrimaryWorking(i, 0, 10);
			}	
		}

		Industry_Save(i);
	}

	return 1;
}

Industry_PrimaryWorking(indid, p_id, quantity)
{
	if(IndustryData[indid][industryProductStock][p_id] < IndustryData[indid][industryProductMaxStock][p_id])
	{
		IndustryData[indid][industryProductStock][p_id] += quantity;

		if(IndustryData[indid][industryProductStock][p_id] >= IndustryData[indid][industryProductMaxStock][p_id])
			IndustryData[indid][industryProductStock][p_id] = IndustryData[indid][industryProductMaxStock][p_id];
	}

	return 1;
}

Industry_SecundaryWorking(indid, p_id, quantity)
{
	if(IndustryData[indid][industryBuyingStock][p_id] < IndustryData[indid][industryBuyingMaxStock][p_id])
	{
		IndustryData[indid][industryBuyingStock][p_id] += quantity;

		if(IndustryData[indid][industryBuyingStock][p_id] >= IndustryData[indid][industryBuyingMaxStock][p_id])
			IndustryData[indid][industryBuyingStock][p_id] = IndustryData[indid][industryBuyingMaxStock][p_id];
	}

	return 1;
}

Industry_ResetBoat(indid)
{
	for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++)
		IndustryData[indid][industryBuyingStock][i] = 0;

	SendAdminMessage(COLOR_WARNING, "AdminAlert: O estoque da exportação de produtos foi resetado.");

	return 1;
}

Industry_ProductName(prodid)
{
	new string[32];

	switch(prodid)
	{
		case INVALID_INDUSTRY_PRODUCT: string = "Produto inválido";
		case INDUSTRY_PRODUCT_MILK: string = "Leite";
		case INDUSTRY_PRODUCT_EGG: string = "Ovo";
		case INDUSTRY_PRODUCT_MEAT: string = "Carne";
		case INDUSTRY_PRODUCT_COTTON: string = "Algodão";
		case INDUSTRY_PRODUCT_PETROLEUM: string = "Petróleo";
		case INDUSTRY_PRODUCT_METAL: string = "Metal";
		case INDUSTRY_PRODUCT_FOOD: string = "Comida";
		case INDUSTRY_PRODUCT_CLOTHES: string = "Roupas";
		case INDUSTRY_PRODUCT_RETAIL: string = "Eletrônicos";
	}

	return string;
}

Industry_UsedPerHour(prodid)
{
	switch(prodid)
	{
		case INVALID_INDUSTRY_PRODUCT: return 0;
		case INDUSTRY_PRODUCT_MILK: return 10;
		case INDUSTRY_PRODUCT_EGG: return 10;
		case INDUSTRY_PRODUCT_MEAT: return 10;
		case INDUSTRY_PRODUCT_COTTON: return 15;
		case INDUSTRY_PRODUCT_METAL: return 1;
	}

	return 0;
}

Industry_FabPerHour(prodid)
{
	switch(prodid)
	{
		case INVALID_INDUSTRY_PRODUCT: return 0;
		case INDUSTRY_PRODUCT_MILK: return 10;
		case INDUSTRY_PRODUCT_EGG: return 10;
		case INDUSTRY_PRODUCT_MEAT: return 10;
		case INDUSTRY_PRODUCT_COTTON: return 10;
		case INDUSTRY_PRODUCT_PETROLEUM: return 15;
		case INDUSTRY_PRODUCT_METAL: return 5;
		case INDUSTRY_PRODUCT_FOOD: return 15;
		case INDUSTRY_PRODUCT_CLOTHES: return 10;
		case INDUSTRY_PRODUCT_RETAIL: return 10;
	}

	return 0;
}

Industry_Nearest(playerid)
{
	foreach(new i : Industry) if(IndustryData[i][industryExists] && IsPlayerInRangeOfPoint(playerid, 3.0, IndustryData[i][industryX], IndustryData[i][industryY], IndustryData[i][industryZ]))
		return i;

	return -1;
}

Industry_Create(playerid, section)
{
	new Float:x, Float:y, Float:z;

	if(GetPlayerPos(playerid, x, y, z))
	{
		new i;
		if((i = Iter_Free(Industry)) < MAX_INDUSTRY)
		{
			IndustryData[i][industryExists] = true;

			IndustryData[i][industrySection] = section;
			format(IndustryData[i][industryName], 128, "Editar nome");

			IndustryData[i][industryX] = x;
			IndustryData[i][industryY] = y;
			IndustryData[i][industryZ] = z;

			switch(section)
			{
				case SECTION_PETROLEUM:
				{
					IndustryData[i][industryProduct][0] = INDUSTRY_PRODUCT_PETROLEUM;
					IndustryData[i][industryProductPrice][0] = 170;
					IndustryData[i][industryProductStock][0] = 10;
					IndustryData[i][industryProductMaxStock][0] = 200;

					IndustryData[i][industryType] = INDUSTRY_PRIMARIA;
				}
				case SECTION_FARM:
				{
					IndustryData[i][industryProduct][0] = INDUSTRY_PRODUCT_MILK;
					IndustryData[i][industryProductPrice][0] = 170;
					IndustryData[i][industryProductStock][0] = 10;
					IndustryData[i][industryProductMaxStock][0] = 200;

					IndustryData[i][industryProduct][1] = INDUSTRY_PRODUCT_EGG;
					IndustryData[i][industryProductPrice][1] = 170;
					IndustryData[i][industryProductStock][1] = 10;
					IndustryData[i][industryProductMaxStock][1] = 200;

					IndustryData[i][industryProduct][2] = INDUSTRY_PRODUCT_MEAT;
					IndustryData[i][industryProductPrice][2] = 170;
					IndustryData[i][industryProductStock][2] = 10;
					IndustryData[i][industryProductMaxStock][2] = 200;

					IndustryData[i][industryProduct][3] = INDUSTRY_PRODUCT_COTTON;
					IndustryData[i][industryProductPrice][3] = 170;
					IndustryData[i][industryProductStock][3] = 10;
					IndustryData[i][industryProductMaxStock][3] = 200;

					IndustryData[i][industryType] = INDUSTRY_PRIMARIA;
				}
				case SECTION_METAL:
				{
					IndustryData[i][industryProduct][0] = INDUSTRY_PRODUCT_METAL;
					IndustryData[i][industryProductPrice][0] = 170;
					IndustryData[i][industryProductStock][0] = 10;
					IndustryData[i][industryProductMaxStock][0] = 200;

					IndustryData[i][industryType] = INDUSTRY_PRIMARIA;
				}
				case SECTION_FOOD:
				{
					IndustryData[i][industryProduct][0] = INDUSTRY_PRODUCT_FOOD;
					IndustryData[i][industryProductPrice][0] = 170;
					IndustryData[i][industryProductStock][0] = 10;
					IndustryData[i][industryProductMaxStock][0] = 200;

					IndustryData[i][industryBuying][0] = INDUSTRY_PRODUCT_MEAT;
					IndustryData[i][industryBuyingPrice][0] = 170;
					IndustryData[i][industryBuyingStock][0] = 10;
					IndustryData[i][industryBuyingMaxStock][0] = 200;

					IndustryData[i][industryBuying][1] = INDUSTRY_PRODUCT_EGG;
					IndustryData[i][industryBuyingPrice][1] = 170;
					IndustryData[i][industryBuyingStock][1] = 10;
					IndustryData[i][industryBuyingMaxStock][1] = 200;

					IndustryData[i][industryBuying][2] = INDUSTRY_PRODUCT_MILK;
					IndustryData[i][industryBuyingPrice][2] = 170;
					IndustryData[i][industryBuyingStock][2] = 10;
					IndustryData[i][industryBuyingMaxStock][2] = 200;

					IndustryData[i][industryType] = INDUSTRY_SECUNDARIA;
				}
				case SECTION_CLOTHES:
				{
					IndustryData[i][industryProduct][0] = INDUSTRY_PRODUCT_CLOTHES;
					IndustryData[i][industryProductPrice][0] = 170;
					IndustryData[i][industryProductStock][0] = 10;
					IndustryData[i][industryProductMaxStock][0] = 200;

					IndustryData[i][industryBuying][0] = INDUSTRY_PRODUCT_COTTON;
					IndustryData[i][industryBuyingPrice][0] = 170;
					IndustryData[i][industryBuyingStock][0] = 10;
					IndustryData[i][industryBuyingMaxStock][0] = 200;

					IndustryData[i][industryType] = INDUSTRY_SECUNDARIA;
				}
				case SECTION_ELETRONIC:
				{
					IndustryData[i][industryProduct][0] = INDUSTRY_PRODUCT_RETAIL;
					IndustryData[i][industryProductPrice][0] = 170;
					IndustryData[i][industryProductStock][0] = 10;
					IndustryData[i][industryProductMaxStock][0] = 200;

					IndustryData[i][industryBuying][0] = INDUSTRY_PRODUCT_METAL;
					IndustryData[i][industryBuyingPrice][0] = 170;
					IndustryData[i][industryBuyingStock][0] = 10;
					IndustryData[i][industryBuyingMaxStock][0] = 200;

					IndustryData[i][industryType] = INDUSTRY_SECUNDARIA;
				}
				case SECTION_EXPORT:
				{
					IndustryData[i][industryBuying][0] = INDUSTRY_PRODUCT_FOOD;
					IndustryData[i][industryBuyingPrice][0] = 170;
					IndustryData[i][industryBuyingStock][0] = 0;
					IndustryData[i][industryBuyingMaxStock][0] = 200;

					IndustryData[i][industryBuying][1] = INDUSTRY_PRODUCT_RETAIL;
					IndustryData[i][industryBuyingPrice][1] = 170;
					IndustryData[i][industryBuyingStock][1] = 0;
					IndustryData[i][industryBuyingMaxStock][1] = 200;

					IndustryData[i][industryBuying][2] = INDUSTRY_PRODUCT_CLOTHES;
					IndustryData[i][industryBuyingPrice][2] = 170;
					IndustryData[i][industryBuyingStock][2] = 0;
					IndustryData[i][industryBuyingMaxStock][2] = 200;

					IndustryData[i][industryBuying][3] = INDUSTRY_PRODUCT_PETROLEUM;
					IndustryData[i][industryBuyingPrice][3] = 170;
					IndustryData[i][industryBuyingStock][3] = 0;
					IndustryData[i][industryBuyingMaxStock][3] = 200;

					IndustryData[i][industryType] = INVALID_INDUSTRY_TYPE;
				}
			}

			mysql_tquery(this, "INSERT INTO industry (industryID) VALUES (null)", "OnIndustryCreated", "d", i);

			Industry_Refresh(i);

			Iter_Add(Industry, i);

			return i;

		}
	}

	return -1;
}

Industry_Delete(indid)
{
	if(indid == -1 || !IndustryData[indid][industryExists])
		return 0;

	new query[70];

	mysql_format(this, query, sizeof(query), "DELETE FROM industry WHERE industryID = '%d'", IndustryData[indid][industryID]);
	mysql_tquery(this, query);

	if(IsValidDynamicPickup(IndustryData[indid][industryPickup]))
		DestroyDynamicPickup(IndustryData[indid][industryPickup]);

	if(IsValidDynamic3DTextLabel(IndustryData[indid][industryText]))
		DestroyDynamic3DTextLabel(IndustryData[indid][industryText]);

	for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++)
	{
		IndustryData[indid][industryProduct][i] = 0;
		IndustryData[indid][industryProductPrice][i] = 0;
		IndustryData[indid][industryProductStock][i] = 0;
		IndustryData[indid][industryProductMaxStock][i] = 0;

		IndustryData[indid][industryBuying][i] = 0;
		IndustryData[indid][industryBuyingPrice][i] = 0;
		IndustryData[indid][industryBuyingStock][i] = 0;
		IndustryData[indid][industryBuyingMaxStock][i] = 0;
	}

	IndustryData[indid][industryExists] = false;

	Iter_Remove(Industry, indid);

	return 1;
}

Industry_Refresh(indid)
{
	if(indid == -1 || !IndustryData[indid][industryExists])
		return 0;

	new string[130];

	format(string, sizeof(string), "[{FFFF00}%s{FFFFFF}]",IndustryData[indid][industryName]);

	if(IsValidDynamicPickup(IndustryData[indid][industryPickup]))
		DestroyDynamicPickup(IndustryData[indid][industryPickup]);

	if(IsValidDynamic3DTextLabel(IndustryData[indid][industryText]))
		DestroyDynamic3DTextLabel(IndustryData[indid][industryText]);

	IndustryData[indid][industryPickup] = CreateDynamicPickup(1318, 23, IndustryData[indid][industryX], IndustryData[indid][industryY], IndustryData[indid][industryZ]);
	IndustryData[indid][industryText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, IndustryData[indid][industryX], IndustryData[indid][industryY], IndustryData[indid][industryZ], 4.0);

	return 1;
}

Industry_Save(indid)
{
	if(indid == -1 || !IndustryData[indid][industryExists])
		return 0;

	new query[1000], string_product[128], string_product_price[128], string_stock[128], string_max_stock[128], string_buying[128], string_buying_price[128],
	string_b_stock[128], string_b_max_stock[128];

	for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++)
	{
		format(string_product, sizeof(string_product), "%s%d|", string_product, IndustryData[indid][industryProduct][i]);
		format(string_product_price, sizeof(string_product_price), "%s%d|", string_product_price, IndustryData[indid][industryProductPrice][i]);
		format(string_stock, sizeof(string_stock), "%s%d|", string_stock, IndustryData[indid][industryProductStock][i]);
		format(string_max_stock, sizeof(string_max_stock), "%s%d|", string_max_stock, IndustryData[indid][industryProductMaxStock][i]);

		format(string_buying, sizeof(string_buying), "%s%d|", string_buying, IndustryData[indid][industryBuying][i]);
		format(string_buying_price, sizeof(string_buying_price), "%s%d|", string_buying_price, IndustryData[indid][industryBuyingPrice][i]);
		format(string_b_stock, sizeof(string_b_stock), "%s%d|", string_b_stock, IndustryData[indid][industryBuyingStock][i]);
		format(string_b_max_stock, sizeof(string_b_max_stock), "%s%d|", string_b_max_stock, IndustryData[indid][industryBuyingMaxStock][i]);
	}

	mysql_format(this, query, sizeof(query), "UPDATE industry SET industryName = '%e', industryType = '%d', industrySection = '%d', industryX = '%f', industryY = '%f', industryZ = '%f'",
		IndustryData[indid][industryName], IndustryData[indid][industryType], IndustryData[indid][industrySection], IndustryData[indid][industryX], IndustryData[indid][industryY], IndustryData[indid][industryZ]);

	mysql_format(this, query, sizeof(query), "%s, industryProduct = '%e', industryProductPrice = '%e', industryProductStock = '%e', industryProductMaxStock = '%e'",
		query, string_product, string_product_price, string_stock, string_max_stock);

	mysql_format(this, query, sizeof(query), "%s, industryBuying = '%e', industryBuyingPrice = '%e', industryBuyingStock = '%e', industryBuyingMaxStock = '%e' WHERE industryID = '%d'", 
		query, string_buying, string_buying_price, string_b_stock, string_b_max_stock, IndustryData[indid][industryID]);

	mysql_tquery(this, query);

	return 1;
}

Industry_ShowInfo(playerid, id)
{
	if(id == -1 || !IndustryData[id][industryExists])
		return 0;

	if(IndustryData[id][industrySection] == SECTION_EXPORT)
		return SendClientMessage(playerid, COLOR_WARNING, "Vejas as informações no /tpda -> Exportação.");

	new count;

	sz_MiscString[0] = 0;

	format(sz_MiscString, sizeof(sz_MiscString), "{FFFFFF}Bem vindo a indústria {FFFF00}%s", IndustryData[id][industryName]);

	if(IndustryData[id][industryType] == INDUSTRY_PRIMARIA)
		format(sz_MiscString, sizeof(sz_MiscString), "%s\n\n{FFFFFF}Essa indústria é do setor {FFFF00}PRIMÁRIO\n{FFFFFF}Isso significa que apenas vendemos produto, nossa matéria-prima.", sz_MiscString);

	else if(IndustryData[id][industryType] == INDUSTRY_SECUNDARIA)
		format(sz_MiscString, sizeof(sz_MiscString), "%s\n\n{FFFFFF}Essa indústria é do setor {FFFF00}SECUNDÁRIO\n{FFFFFF}Isso significa que dependemos de outros produtos para fabricarmos.", sz_MiscString);

	format(sz_MiscString, sizeof(sz_MiscString), "%s\n{FFFFFF}Abaixo apresentamos o que compramos e vendemos:\n\n", sz_MiscString);

	format(sz_MiscString, sizeof(sz_MiscString), "%s{FFFF00}VENDEMOS:\n", sz_MiscString);
	format(sz_MiscString, sizeof(sz_MiscString), "%s{828893}Produto\t\tPreço ($)\t\tFab. por hora\t\tEstoque (Máximo)\n", sz_MiscString);

	for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++) if(IndustryData[id][industryProduct][i])
	{
		format(sz_MiscString, sizeof(sz_MiscString), "%s{FFFFFF}%s\t\t%s\t\t+%d caixa(s)\t\t%d (%d)\n", 
			sz_MiscString, Industry_ProductName(IndustryData[id][industryProduct][i]), FormatNumber(IndustryData[id][industryProductPrice][i]), Industry_FabPerHour(IndustryData[id][industryProduct][i]), IndustryData[id][industryProductStock], IndustryData[id][industryProductMaxStock]);
		count++;
	}

	if(!count)
		format(sz_MiscString, sizeof(sz_MiscString), "%s{FFFFFF}Não vendemos produtos.\n", sz_MiscString);

	count = 0;

	format(sz_MiscString, sizeof(sz_MiscString), "%s\n{FFFF00}COMPRAMOS:\n", sz_MiscString);
	format(sz_MiscString, sizeof(sz_MiscString), "%s{828893}Produto\t\tPreço ($)\t\tCons. por hora\t\tEstoque (Máximo)\n", sz_MiscString);

	for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++) if(IndustryData[id][industryBuying][i])
	{
		format(sz_MiscString, sizeof(sz_MiscString), "%s{FFFFFF}%s\t\t%s\t\t-%d caixa(s)\t\t%d (%d)\n",
			sz_MiscString, Industry_ProductName(IndustryData[id][industryBuying][i]), FormatNumber(IndustryData[id][industryBuyingPrice][i]), Industry_UsedPerHour(IndustryData[id][industryBuying][i]), IndustryData[id][industryBuyingStock], IndustryData[id][industryBuyingMaxStock]);
		count++;
	}

	if(!count)
		format(sz_MiscString, sizeof(sz_MiscString), "%s{FFFFFF}Não compramos produtos.\n", sz_MiscString);

	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Informações sobre a indústria:", sz_MiscString, "Fechar", "");

	return 1;
}

Industry_VehicleAttach(vehicleid, slotid)
{
	new model = GetVehicleModel(vehicleid);

	if(model != 422 && model != 554 && model != 543 && model != 478 && model != 600)
		return 0;

	VehicleData[vehicleid][vehicleObjectSlot][slotid] = CreateDynamicObject(1271, 0, 0, -200, 0, 0, 0, -1);

	if(model == 422)
	{
		switch(slotid)
		{
			case 0: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.000000, -0.899999, 0.075000, 0.0, 0.0, 0.0);
			case 1: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.000000, -1.800000, 0.075000, 0.0, 0.0, 0.0);
		}
	}
	else if(model == 554)
	{
		switch(slotid)
		{
			case 0: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, -0.449999, -1.049999, 0.075000, 0.0, 0.0, 0.0);
			case 1: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, -0.449999, -1.800000, 0.075000, 0.0, 0.0, 0.0);
			case 2: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.300000, -1.049999, 0.075000, 0.0, 0.0, 0.0);
			case 3: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.300000, -1.800000, 0.075000, 0.0, 0.0, 0.0);
		}
	}
	else if(model == 543)
	{
		switch(slotid)
		{
			case 0: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.000000, -0.974999, 0.150000, 0.0, 0.0, 0.0);
			case 1: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.000000, -1.950000, 0.150000, 0.0, 0.0, 0.0);
		}
	}
	else if(model == 478)
	{
		switch(slotid)
		{
			case 0: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.524999, -0.899999, 0.300000, 0.0, 0.0, 0.0);
			case 1: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, -0.449999, -0.899999, 0.300000, 0.0, 0.0, 0.0);
			case 2: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, -0.449999, -1.950000, 0.300000, 0.0, 0.0, 0.0);
			case 3: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.524999, -1.950000, 0.300000, 0.0, 0.0, 0.0);
		}
	}
	else if(model == 600)
	{
		switch(slotid)
		{
			case 0: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, -0.225000, -1.049999, 0.225000, 0.0, 0.0, 0.0);
			case 1: AttachDynamicObjectToVehicle(VehicleData[vehicleid][vehicleObjectSlot][slotid], vehicleid, 0.075000, -2.025000, 0.225000, 0.0, 0.0, 0.0);
		}
	}

	return 1;
}

Teleport_Create(playerid, desc[])
{
	new Float:x, Float:y, Float:z;

	if(GetPlayerPos(playerid, x, y, z))
	{
		new i;
		if((i = Iter_Free(Teleports)) < MAX_TELEPORTES)
		{
			TeleportData[i][teleportExists] = true;

			TeleportData[i][teleportInterior] = GetPlayerInterior(playerid);
			TeleportData[i][teleportWorld] = GetPlayerVirtualWorld(playerid);

			TeleportData[i][teleportX] = x;
			TeleportData[i][teleportY] = y;
			TeleportData[i][teleportZ] = z;

			format(TeleportData[i][teleportDesc], 128, desc);

			Iter_Add(Teleports, i);

			mysql_tquery(this, "INSERT INTO teleportes (teleportID) VALUES (null)", "OnTeleportCreated", "d", i);

			return i;
		}
	}

	return -1;
}

Teleport_Save(id)
{
	new query[350];

	mysql_format(this, query, sizeof(query), "UPDATE teleportes SET teleportDesc = '%e', teleportX = '%f', teleportY = '%f', teleportZ = '%f', teleportInterior = '%d', teleportWorld = '%d' WHERE teleportID = '%d'",
		TeleportData[id][teleportDesc], TeleportData[id][teleportX], TeleportData[id][teleportY], TeleportData[id][teleportZ], TeleportData[id][teleportInterior], TeleportData[id][teleportWorld], TeleportData[id][teleportID]);

	mysql_tquery(this, query);

	return 1;
}

Teleport_Delete(id)
{
	new query[70];

	mysql_format(this, query, sizeof(query), "DELETE FROM teleportes WHERE teleportID = '%d'", TeleportData[id][teleportID]);
	mysql_tquery(this, query);

	TeleportData[id][teleportExists] = false;

	Iter_Remove(Teleports, id);

	return 1;
}

GetTeleportByID(sql)
{
	foreach(new i : Teleports) if(TeleportData[i][teleportExists])
	{
		if(TeleportData[i][teleportID] == sql)
			return i;
	}

	return -1;
}

Teleport_Show(playerid, page)
{
	PlayerData[playerid][pPage] = page; page--;

	new 
		count,
		MAX_PAGE_TELEPORT = 30
	;

	sz_MiscString[0] = 0;

	format(sz_MiscString, sizeof(sz_MiscString), "{FFFF00}>> Buscar{FFFFFF}\n");

	for(new i = page * MAX_PAGE_TELEPORT; i < MAX_TELEPORTES; i++) if(TeleportData[i][teleportExists])
	{
		if(count + 1 == MAX_PAGE_TELEPORT + 1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s>> Próxima Página\n", sz_MiscString);
			break;
		}

		count++;
		if(PlayerData[playerid][pAdmin] >= ADMIN_LeadStaff)
			format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s (%d)\n", sz_MiscString, (page * MAX_PAGE_TELEPORT) + count, TeleportData[i][teleportDesc], i);
		else
			format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, (page * MAX_PAGE_TELEPORT) + count, TeleportData[i][teleportDesc]);

		ListedOptions[playerid][count] = i;
	}

	if((page + 1) >= 2)
		format(sz_MiscString, sizeof(sz_MiscString), "%s<< Página Anterior", sz_MiscString);


	Dialog_Show(playerid, TeleportList, DIALOG_STYLE_LIST, sprintf("{FFFFFF}Teleportes - Página %d", page + 1), sz_MiscString, "Teleportar", "Cancelar");

	return 1;
}

Carga_SetAttach(playerid)
{
	ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0, 1);
	SetPlayerAttachedObject(playerid, 9, 1271, 6, 0.028000, 0.169999, -0.232999, -21.099994, -4.499995, 21.000003, 0.526999, 0.491999, 0.666000);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	PlayerData[playerid][pCarrying] = true;

	return 1;
}

Carga_UnsetAttach(playerid)
{
	PlayerData[playerid][pCarrying] = false;
	TempData[playerid][tempHoldingProduct] = INVALID_INDUSTRY_PRODUCT;
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	return 1;
}

OnCheatDetected(playerid, cheattype[], option)
{
	if(ACData[playerid][acKicked] || PlayerData[playerid][pDesync] || PlayerData[playerid][pAdmin])
		return 0;

	switch(option)
	{
		case AC_WARN:
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) foi detectado usando %s pelo anti cheater do servidor. (Warning)", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], cheattype);
			SendAdminMessage(COLOR_WARNING, "ServerAC: %s (ID: %d) foi acusado de \"%s\" (Warning).", ReturnName(playerid, 0), playerid, cheattype);
		}
		case AC_KICK:
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) foi detectado usando %s pelo anti cheater do servidor. (Kicked)", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], cheattype);
			SendAdminMessage(COLOR_WARNING, "ServerAC: %s (ID: %d) foi acusado de \"%s\" (Kicked).", ReturnName(playerid, 0), playerid, cheattype);
			KickEx(playerid);
			ACData[playerid][acKicked] = true;
		}
		case AC_BAN:
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) foi detectado usando %s pelo anti cheater do servidor. (Auto-Ban)", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], cheattype);
			SendAdminMessage(COLOR_WARNING, "ServerAC: %s (ID: %d) foi acusado de \"%s\" (Auto-Banned).", ReturnName(playerid, 0), playerid, cheattype);
			BanPlayer(playerid, cheattype, "Servidor (automático)", 0);
			ACData[playerid][acKicked] = true;
		}
	}

	return 1;
}

SetScriptedArmour(playerid, Float:amount)
{
	ACData[playerid][acTime] = gettime() + 5;
	ACData[playerid][acArmorTime] = gettime() + 5;
	PlayerData[playerid][pArmor] = amount;
	return SetPlayerArmour(playerid, amount);
}

SetScriptedHealth(playerid, Float:amount)
{
	ACData[playerid][acTime] = gettime() + 5;
	ACData[playerid][acHealthTime] = gettime() + 5;
	PlayerData[playerid][pHealth] = amount;
	return SetPlayerHealth(playerid, amount);
}

SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new Float:x, Float:y, Float:z;

			GetPlayerPos(playerid, x, y, z);
			AC_SetPlayerPos(playerid, x, y, z + 5.0);
		}
		SpawnPlayer(playerid);
	}

	GetPlayerPos(playerid, ACData[playerid][acTpX], ACData[playerid][acTpY], ACData[playerid][acTpZ]);
	ACData[playerid][acTeleportSafe] = true;

	ACData[playerid][acTime] = gettime() + 5;

	return 1;
}

AC_ResetVariables(playerid)
{
	new temp[acData];
	ACData[playerid] = temp;

	return 1;
}

AC_SetPlayerPos(playerid, Float:posx, Float:posy, Float:posz)
{
	//Teleport
	GetPlayerPos(playerid, ACData[playerid][acTpX], ACData[playerid][acTpY], ACData[playerid][acTpZ]);
	ACData[playerid][acTeleportSafe] = true;
	ACData[playerid][acTeleportTime] = gettime();

	//AirBreak
	ACData[playerid][acAirbreakImmunity] = gettime() + 3;

	ACData[playerid][acAirbreakPos][0] = posx;
	ACData[playerid][acAirbreakPos][1] = posy;
	ACData[playerid][acAirbreakPos][2] = posz;

	return SetPlayerPos(playerid, posx, posy, posz);
}

AC_SetVehiclePos(vehicleid, Float:posx, Float:posy, Float:posz)
{
	foreach(new i : Player) if(IsPlayerInVehicle(i, vehicleid))
	{
		//Teleport
		GetPlayerPos(i, ACData[i][acTpX], ACData[i][acTpY], ACData[i][acTpZ]);
		ACData[i][acTeleportSafe] = true;
		ACData[i][acTeleportTime] = gettime();

		//AirBreak
		ACData[i][acAirbreakImmunity] = gettime() + 3;

		ACData[i][acAirbreakPos][0] = posx;
		ACData[i][acAirbreakPos][1] = posy;
		ACData[i][acAirbreakPos][2] = posz;
	}

	return SetVehiclePos(vehicleid, posx, posy, posz);
}

AC_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
	//AntiTP
	GetPlayerPos(playerid, ACData[playerid][acTpX], ACData[playerid][acTpY], ACData[playerid][acTpZ]);
	ACData[playerid][acTeleportSafe] = true;
	ACData[playerid][acTeleportTime] = gettime();

	//Airbreak
	ACData[playerid][acAirbreakImmunity] = gettime() + 3;

	//Cartroll
	ACData[playerid][acCTTime] = gettime() + 3;
	ACData[playerid][acCTCar] = vehicleid;
	ACData[playerid][acCTJack] = false;

	return PutPlayerInVehicle(playerid, vehicleid, seatid);
}

AC_RemovePlayerFromVehicle(playerid)
{
	ACData[playerid][acCTTime] = gettime() + 3;
	ACData[playerid][acCTCar] = 0;
	ACData[playerid][acCTJack] = false;

	return RemovePlayerFromVehicle(playerid);
}

AC_SetSpawnInfo(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	//AirBreak
	switch(GetPlayerState(playerid))
	{
		case PLAYER_STATE_NONE, PLAYER_STATE_WASTED:
		{
			ACData[playerid][acAirbreakImmunity] = gettime() + 3;

			ACData[playerid][acAirbreakPos][0] = x;
			ACData[playerid][acAirbreakPos][1] = y;
			ACData[playerid][acAirbreakPos][2] = z;
		}
	}

	return SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
}

AC_RepairVehicle(vehicleid)
{
	ACVehicle[vehicleid][acRepairSafe] = true;
	ACVehicle[vehicleid][acRepairTime] = gettime() + 1;

	return RepairVehicle(vehicleid);	
}

AC_SetVehicleHealth(vehicleid, Float:health)
{
	ACVehicle[vehicleid][acRepairSafe] = true;
	ACVehicle[vehicleid][acRepairTime] = gettime() + 1;

	return SetVehicleHealth(vehicleid, health);
}

AC_Check(playerid)
{
	if(gettime() > ACData[playerid][acTime])
	{
		//Hack de velocidade (carro)
		/*if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetPlayerSpeed(playerid) > 200 && !IsAnAirplane(GetPlayerVehicleID(playerid)))
		{
			OnCheatDetected(playerid, ServerAC[AC_SPEEDHACK_CAR][acName], ServerAC[AC_SPEEDHACK_CAR][acAction]);
		}

		//Hack de velocidade (a pé)
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpeed(playerid) > 70 && GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && !IsPlayerFalling(playerid))
		{
			OnCheatDetected(playerid, ServerAC[AC_SPEEDHACK_ONFOOT][acName], ServerAC[AC_SPEEDHACK_ONFOOT][acAction]);
		}*/

		//Flyhack
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			switch(GetPlayerAnimationIndex(playerid))
			{
				case 1538, 1542, 1544, 1250, 1062, 1539, 958, 962:
				{
					new Float:z, Float:vx, Float:vy, Float:vz;

					GetPlayerPos(playerid, z, z, z);
					GetPlayerVelocity(playerid, vx, vy, vz);

					if((z > 20.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9))
					{
						OnCheatDetected(playerid, ServerAC[AC_FLYHACK][acName], ServerAC[AC_FLYHACK][acAction]);
					}
				}
			}
		}

		//Jetpack
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
		{
			OnCheatDetected(playerid, ServerAC[AC_JETPACK][acName], ServerAC[AC_JETPACK][acAction]);
		}

		//Armour Hack
		new Float:armor;

		GetPlayerArmour(playerid, armor);

		if(!(gettime() - PlayerData[playerid][pLastUpdate] > 5))
		{
			if(floatround(armor) > floatround(PlayerData[playerid][pArmor]) && gettime() > ACData[playerid][acTime] && gettime() > ACData[playerid][acArmorTime])
			{
				ACData[playerid][acArmorTime] = gettime() + 10;

				SetPlayerArmour(playerid, PlayerData[playerid][pArmor]);

				OnCheatDetected(playerid, ServerAC[AC_ARMOR][acName], ServerAC[AC_ARMOR][acAction]);
			}
		}

		PlayerData[playerid][pArmor] = armor;

		//Health Hack
		new Float:health;

		GetPlayerHealth(playerid, health);

		if(!(gettime() - PlayerData[playerid][pLastUpdate] > 5))
		{
			if(floatround(health) > floatround(PlayerData[playerid][pHealth]) && gettime() > ACData[playerid][acTime] && gettime() > ACData[playerid][acHealthTime])
			{
				ACData[playerid][acHealthTime] = gettime() + 10;

				SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

				OnCheatDetected(playerid, ServerAC[AC_HEALTH][acName], ServerAC[AC_HEALTH][acAction]);
			}
		}

		PlayerData[playerid][pHealth] = health;
	}

	if(!PlayerData[playerid][pHospital])
	{
		new weapon, ammo;
		for(new j = 0; j < 13; j++)
		{
			GetPlayerWeaponData(playerid, j, weapon, ammo);

			if(!weapon || weapon == 46 || weapon == 2)
			{
				continue;
			}

			if(PlayerData[playerid][pWeapon][j] != weapon)
			{
				OnCheatDetected(playerid, ServerAC[AC_WEAPONHACK][acName], ServerAC[AC_WEAPONHACK][acAction]);
			}
		}
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerVehicleID(playerid) != ACData[playerid][acCTCar])
		{
			if(gettime() > ACData[playerid][acCTTime])
			{
				OnCheatDetected(playerid, ServerAC[AC_CARTROLLHACK][acName], ServerAC[AC_CARTROLLHACK][acAction]);
			}
		}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PlayerData[playerid][pLogged] && !PlayerData[playerid][pJustLoggedIn] && !PlayerData[playerid][pAdmin] && PlayerData[playerid][pSpectator] == INVALID_PLAYER_ID)
	{
		OnCheatDetected(playerid, ServerAC[AC_INVISIBLEHACK][acName], ServerAC[AC_INVISIBLEHACK][acAction]);
	}

	return 1;
}

IsPlayerFalling(playerid)
{
	new animation[32];

	GetAnimationName(GetPlayerAnimationIndex(playerid), animation, 0, animation, 32);

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && (!strcmp(animation, "FALL_FALL", true) || !strcmp(animation, "FALL_GLIDE", true)))
		return 1;

	return 0;
}

AC_Save()
{
	new string[128], query[181];

	for(new i = 0; i < sizeof(ServerAC); i++)
		format(string, sizeof(string), "%s%d|", string, ServerAC[i][acAction]);

	mysql_format(this, query, sizeof(query), "UPDATE server_config SET text = '%e' WHERE entry_id = '2'", string);
	mysql_tquery(this, query);

	return 1;
}

IsVehicleMoving(vehicleid)
{
	new Float:x, Float:y, Float:z;

	GetVehicleVelocity(vehicleid, x, y, z);

	if(floatabs(x) <= 0.001 && floatabs(y) <= 0.001 && floatabs(z) <= 0.005)
		return 0;

	return 1;
}

OnAirbreakDetect(playerid)
{
	new timestamp = gettime();

	if((++ACData[playerid][acAirbreakDetections]) >= MAX_FLAGGED_DETECTIONS && (timestamp - ACData[playerid][acAirbreakLastDetect]) < 60)
	{
		OnCheatDetected(playerid, ServerAC[AC_AIRBREAK][acName], ServerAC[AC_AIRBREAK][acAction]);
	}
	ACData[playerid][acAirbreakLastDetect] = timestamp;
}

stock GetWeaponClipSize(weaponid)
{
	switch(weaponid)
	{
		case 22, 23:
			return 17;
		case 26:
			return 2;
		case 24, 27:
			return 7;
		case 28, 31, 32:
			return 50;
		case 29, 30:
			return 30;
	}

	return 0;
}

IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			return 1;
	}

	return 0;
}

BanPlayer(playerid, reason[], admin[], bantime)
{
	new query[280], unixtime, playerip[16], userid;

	GetPlayerIp(playerid, playerip, 16);
	userid = ReturnIDByName(admin);

	if(!bantime)
	{
		unixtime = 0;

		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s baniu %s pelo motivo: %s", admin, ReturnName(playerid, 0), reason);
		SendServerMessage(playerid, "Você foi banido do servidor por: %s", reason);

		if(userid == -1)
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s baniu o jogador %s (uid: %d) pelo motivo: %s", FormatFullTime(), admin, ReturnName(playerid), PlayerData[playerid][pID], reason);
		}
		else 
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) baniu o jogador %s (uid: %d) pelo motivo: %s", FormatFullTime(), admin, userid, ReturnName(playerid), PlayerData[playerid][pID], reason);
		}
	}
	else
	{
		unixtime = (bantime * 86400) + gettime();

		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s baniu %s por %d dia(s) pelo motivo: %s", admin, ReturnName(playerid, 0), bantime, reason);
		SendServerMessage(playerid, "Você foi banido temporariamente do servidor por: %s", reason);

		if(userid == -1) 
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s baniu temporariamente o jogador %s (uid: %d) por %d dias pelo motivo: %s", FormatFullTime(), admin, ReturnName(playerid), PlayerData[playerid][pID], bantime, reason);
		}
		else 
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) baniu temporariamente o jogador %s (uid: %d) por %d dias pelo motivo: %s", FormatFullTime(), admin, userid, ReturnName(playerid), PlayerData[playerid][pID], bantime, reason);
		}
	}

	mysql_format(this, query, sizeof(query), "INSERT INTO player_banned (Name, Reason, Admin, Date, UnbanTime, IP) VALUES ('%e', '%e', '%e', '%e', '%d', '%e')",
		ReturnName(playerid), reason, admin, ReturnDate(), unixtime, playerip);
	mysql_tquery(this, query, "CheckPlayerBan", "d", playerid);

	SendServerMessage(playerid, "Por questão de segurança, aqui estão os principais status do personagem %s:", ReturnName(playerid, 0));
	SendClientMessageEx(playerid, COLOR_SAMP, "Geral:");
	SendClientMessageEx(playerid, COLOR_WHITE, "Nível: %d.", PlayerData[playerid][pLevel]);
	SendClientMessageEx(playerid, COLOR_WHITE, "Horas Jogadas: %d.", PlayerData[playerid][pTimePlayed]);
	SendClientMessageEx(playerid, COLOR_WHITE, "Experiência: %d.", PlayerData[playerid][pEXP]);
	SendClientMessageEx(playerid, COLOR_SAMP, "Financeiro:");
	SendClientMessageEx(playerid, COLOR_WHITE, "Dinheiro em mãos: %s.", FormatNumber(GetScriptedMoney(playerid)));
	SendClientMessageEx(playerid, COLOR_WHITE, "Dinheiro no banco: %s.", FormatNumber(PlayerData[playerid][pBank]));
	SendClientMessageEx(playerid, COLOR_WHITE, "Dinheiro na poupança: %s.", FormatNumber(PlayerData[playerid][pSavings]));

	if(IsPlayerArmed(playerid))
	{
		SendClientMessageEx(playerid, COLOR_SAMP, "Armas:");
		for(new i = 0; i < 13; i++)
		{
			if(!PlayerData[playerid][pWeapon][i])
				continue;

			SendClientMessageEx(playerid, COLOR_WHITE, "%s (%d)", ReturnWeaponName(PlayerData[playerid][pWeapon][i]), PlayerData[playerid][pAmmo][i]);
		}
	}

	return 1;
}

SendPlayerToJail(playerid, jailtype)
{
	if(jailtype == 1)
	{	
		switch(random(2))
		{
			case 0:
			{
				AC_SetPlayerPos(playerid, 319.8049, 312.1504, 999.1484);
				SetPlayerFacingAngle(playerid, 272.2362);
			}
			case 1:
			{
				AC_SetPlayerPos(playerid, 319.5432, 315.9529, 999.1484);
				SetPlayerFacingAngle(playerid, 268.0351);
			}			
		}
		SetCameraBehindPlayer(playerid);

		PlayerData[playerid][pEntrance] = PlayerData[playerid][pJailed];
		PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		PlayerData[playerid][pHouse] = -1;
		PlayerData[playerid][pBusiness] = -1;
		PlayerData[playerid][pComplex] = -1;
	}
	else if(jailtype == 2)
	{
		new index = random(sizeof(cellSpawns));

		AC_SetPlayerPos(playerid, cellSpawns[index][0], cellSpawns[index][1], cellSpawns[index][2]);
		SetPlayerFacingAngle(playerid, cellSpawns[index][3]);

		SetCameraBehindPlayer(playerid);
	}

	PlayerData[playerid][pLawyerBlock] = false;
	PlayerData[playerid][pLawyerTime] = 0;

	PlayerData[playerid][pCuffed] = 0;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	GetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);

	ShowHungryTextdraw(playerid, 0);

	return 1;	
}

TrashCan_Create(playerid, type)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		GetXYInFrontOfPlayer(playerid, x, y, 1);
		new i;
		if((i = Iter_Free(Garbage)) < MAX_TRASHCANS)
		{
			TrashData[i][trashExists] = true;

			switch(type)
			{
				case 1: TrashData[i][trashType] = 1300; //Pequena
				case 2: TrashData[i][trashType] = 1236; //Grande
			}

			TrashData[i][trashPos][0] = x;
			TrashData[i][trashPos][1] = y;
			TrashData[i][trashPos][2] = z;

			TrashData[i][trashRot][0] = 0.0;
			TrashData[i][trashRot][1] = 0.0;
			TrashData[i][trashRot][2] = 0.0;

			TrashData[i][trashQuantity] = 5;

			TrashCan_Refresh(i);
			mysql_tquery(this, "INSERT INTO trashcans (trashID) VALUES (null)", "OnTrashcanCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 13;
			PlayerData[playerid][pSelectedSlot] = i;
			EditDynamicObject(playerid, TrashData[i][trashObject]);

			Iter_Add(Garbage, i);

			return i;
		}
	}

	return -1;
}

TrashCan_Delete(tid)
{
	if(tid == -1 || !TrashData[tid][trashExists])
		return 0;

	if(IsValidDynamicObject(TrashData[tid][trashObject]))
		DestroyDynamicObject(TrashData[tid][trashObject]);

	TrashData[tid][trashExists] = false;
	Iter_Remove(Garbage, tid);

	new query[100];

	mysql_format(this, query, sizeof(query), "DELETE FROM trashcans WHERE trashID = '%d'", TrashData[tid][trashID]);
	mysql_tquery(this, query);

	return 1;
}

TrashCan_Save(tid)
{
	new query[240];

	mysql_format(this, query, sizeof(query), "UPDATE trashcans SET trashX = '%f', trashY = '%f', trashZ = '%f', trashRX = '%f', trashRY = '%f', trashRZ = '%f', trashQuantity = '%d', trashType = '%d' WHERE trashID = '%d'",
		TrashData[tid][trashPos][0], TrashData[tid][trashPos][1], TrashData[tid][trashPos][2], TrashData[tid][trashRot][0], TrashData[tid][trashRot][1], TrashData[tid][trashRot][2], TrashData[tid][trashQuantity], TrashData[tid][trashType], TrashData[tid][trashID]);

	mysql_tquery(this, query);

	return 1;
}

TrashCan_Refresh(tid)
{
	if(tid == -1 || !TrashData[tid][trashExists])
		return 0;

	if(IsValidDynamicObject(TrashData[tid][trashObject]))
		DestroyDynamicObject(TrashData[tid][trashObject]);

	TrashData[tid][trashObject] = CreateDynamicObject(TrashData[tid][trashType], TrashData[tid][trashPos][0], TrashData[tid][trashPos][1], TrashData[tid][trashPos][2], TrashData[tid][trashRot][0], TrashData[tid][trashRot][1], TrashData[tid][trashRot][2]);

	return 1;
}

TrashCan_Generate()
{
	foreach(new i : Garbage) if(TrashData[i][trashExists])
	{
		if(TrashData[i][trashQuantity] < 12)
		{
			TrashData[i][trashQuantity] = 2 + random(9);
		}

		TrashCan_Save(i);
	}
	return 1;
}

TrashCan_Nearest(playerid)
{
	foreach(new i : Garbage) if(TrashData[i][trashExists])
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, TrashData[i][trashPos][0], TrashData[i][trashPos][1], TrashData[i][trashPos][2]))
			return i;
	}
	return -1;
}

GetClosestTrashcan(playerid)
{
	new Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1;

	foreach(new i : Garbage) if(TrashData[i][trashExists] && TrashData[i][trashQuantity] >= 1)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, TrashData[i][trashPos][0], TrashData[i][trashPos][1], TrashData[i][trashPos][2]);

		if(fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

Ad_Show(playerid, page)
{
	PlayerData[playerid][pPage] = page; page--;

	mysql_tquery(this, "SELECT * FROM advertisements WHERE adInQueue = '1' ORDER BY adTime ASC", "Ad_ShowList", "dd", playerid, page);

	return 1;
}

IsPlayerPaused(playerid)
{
	if(gettime() - PlayerData[playerid][pLastUpdate] > 2)
		return 1;

	return 0;
}

Prime_GetType(prime)
{
	new type[7];

	switch(prime)
	{
		case 1: type = "Bronze";
		case 2: type = "Prata";
		case 3: type = "Ouro";
	}

	return type;
}

IsValid03DLSkin(skinid)
{
	switch(skinid)
	{
		case 20000..20001:
			return 1;
	}

	return 0;
}

IsValidSkin(skinid)
{
	switch(skinid)
	{
		case 0..73, 75..311:
			return 1;
	}

	return 0;
}

SetDoubleXP(enable)
{
	new hostname[128];

	GetConsoleVarAsString("hostname", hostname, sizeof(hostname));

	if(enable)
	{
		if(strfind(hostname, " #PaycheckDuplo") == -1)
		{
			format(hostname, sizeof(hostname), "hostname %s #PaycheckDuplo", hostname);
			SendRconCommand(hostname);
		}
	}
	else
	{
		new pos = strfind(hostname, " #PaycheckDuplo");

		if(pos != -1)
		{
			hostname[pos] = 0;
			format(hostname, sizeof(hostname), "hostname %s", hostname);
			SendRconCommand(hostname);
		}
	}

	doubleExp = enable;
}

SetPlayerInJail(playerid)
{
	switch(random(4))
	{
		case 0:
		{
			AC_SetPlayerPos(playerid, 227.4201, 110.0224, 999.0156);
		}
		case 1:
		{
			AC_SetPlayerPos(playerid, 223.4770, 110.1765, 999.0156);
		}
		case 2:
		{
			AC_SetPlayerPos(playerid, 219.4810, 110.4918, 999.0156);
		}
		case 3:
		{
			AC_SetPlayerPos(playerid, 215.6093, 110.7171, 999.0156);
		}
	}

	if(PlayerData[playerid][pState] == PLAYER_STATE_WOUNDED || PlayerData[playerid][pState] == PLAYER_STATE_DEAD)
	{
		PlayerData[playerid][pState] = PLAYER_STATE_ALIVE;
		PlayerData[playerid][pDeathTime] = 0;
		SetPlayerFreezed(playerid, false);
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
		SetScriptedHealth(playerid, 100);
	}

	SetPlayerFacingAngle(playerid, 0.0000);
	SetPlayerInterior(playerid, 10);
	SetPlayerVirtualWorld(playerid, 99999);
	SetCameraBehindPlayer(playerid);

	ShowHungryTextdraw(playerid, 0);

	return 1;
}

IsValidRoleplayName(const name[])
{
	if (!name[0] || strfind(name, "_") == -1)
		return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++)
	{
		if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
			return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
			return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
			return 0;
	}
	return 1;
}

randomEx(min, max)
{
	return random(max - min) + min;
}

bool:IsPlayerUsingCustomSkin(playerid)
	return !GetPlayerCustomSkin(playerid) ? (false) : (true);

GetPlayerSkinEx(playerid)
	return IsPlayerUsingCustomSkin(playerid) ? GetPlayerCustomSkin(playerid) : GetPlayerSkin(playerid);

AddHousesInteriors()
{
	//2 Room house (1)
	CreateDynamicObject(14755, -79.76019, 1375.42126, 1079.20508,   0.00000, 0.00000, 0.00000, -1, 31); //Interior
	CreateDynamicObject(1498, -80.68050, 1382.76636, 1077.94690,   0.00000, 0.00000, 0.00000, -1, 31); //Door
	//2 Room house

	//2 Room house (2)
	CreateDynamicObject(14756, -48.48457, 1458.49207, 1086.61377,   0.00000, 0.00000, 0.00000, -1, 32); //Interior
	CreateDynamicObject(1498, -47.69450, 1457.73669, 1084.60840,   0.00000, 0.00000, 90.00000, -1, 32); //Door
	//2 Room house

	//3 Room house (3)
	CreateDynamicObject(14748, 41.38534, 1440.95935, 1083.41199,   0.00000, 0.00000, 0.00000, -1, 33); //Interior
	CreateDynamicObject(1506, 46.51220, 1438.62793, 1081.40894,   0.00000, 0.00000, 90.00000, -1, 33); //Door
	//3 Room house

	//3 Room house & two story (4)
	CreateDynamicObject(14750, 11.03331, 1314.19482, 1088.33093,   0.00000, 0.00000, 0.00000, -1, 34); //Interior
	CreateDynamicObject(1506, 6.96000, 1304.85022, 1081.82263,   0.00000, 0.00000, 0.00000, -1, 34); //Door
	//3 Room house & two story

	//4 Room house & two story (5)
	CreateDynamicObject(14754, 85.66241, 1280.42249, 1082.82739,   0.00000, 0.00000, 0.00000, -1, 35); //Interior
	CreateDynamicObject(1506, 82.19940, 1271.31091, 1078.86523,   0.00000, 0.00000, 0.00000, -1, 35); //Door
	//4 Room house & two story

	//4 Room house & two story (More expensive) (6)
	CreateDynamicObject(14758, 155.35648, 1409.17212, 1087.30750,   0.00000, 0.00000, 0.00000, -1, 36); //Interior
	CreateDynamicObject(1506, 154.62061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000, -1, 36); //Door
	CreateDynamicObject(1506, 156.12061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000, -1, 36); //Door
	//4 Room house & two story (More expensive)

	//3 Room house (7)
	CreateDynamicObject(14714, 289.94763, 1509.23218, 1079.22510,   0.00000, 0.00000, 0.00000, -1, 37); //Interior
	CreateDynamicObject(1498, 289.17270, 1501.17688, 1077.42126,   0.00000, 0.00000, 0.00000, -1, 37); //Door
	//3 Room house

	//3 Room house (8)
	CreateDynamicObject(14700, 329.35416, 1516.43005, 1086.31531,   0.00000, 0.00000, 0.00000, -1, 38); //Interior
	CreateDynamicObject(1498, 328.56949, 1512.34375, 1084.81165,   0.00000, 0.00000, 0.00000, -1, 38); //Door
	//3 Room house

	//2 Room house (9)
	CreateDynamicObject(14711, 382.01254, 1498.42480, 1080.69409,   0.00000, 0.00000, 0.00000, -1, 39); //Interior
	CreateDynamicObject(1498, 391.08289, 1505.09924, 1079.09644,   0.00000, 0.00000, 90.00000, -1, 39); //Door
	//2 Room house

	//3 Room house (10)
	CreateDynamicObject(14710, 366.74869, 1381.78625, 1080.31787,   0.00000, 0.00000, 0.00000, -1, 40); //Interior
	CreateDynamicObject(1498, 376.35840, 1377.81616, 1078.80579,   0.00000, 0.00000, 90.00000, -1, 40); //Door
	//3 Room house

	//3 Room house (11)
	CreateDynamicObject(14701, 448.67178, 1363.61853, 1083.28748,   0.00000, 0.00000, 0.00000, -1, 41); //Interior
	CreateDynamicObject(1498, 447.54770, 1353.26965, 1081.21570,   0.00000, 0.00000, 0.00000, -1, 41); //Door
	//3 Room house

	//4 Room house & 2 story (12)
	CreateDynamicObject(14703, 506.95187, 1366.91003, 1080.07947,   0.00000, 0.00000, 0.00000, -1, 42); //Interior
	CreateDynamicObject(1504, 508.85950, 1353.45654, 1075.78345,   0.00000, 0.00000, 0.00000, -1, 42); //Door
	CreateDynamicObject(14722, 510.94690, 1363.57544, 1078.67737,   0.00000, 0.00000, 0.00000, -1, 42); //Stairs
	CreateDynamicObject(14724, 510.99319, 1363.60266, 1078.67590,   0.00000, 0.00000, 0.00000, -1, 42); //Stairs
	CreateDynamicObject(14715, 510.92340, 1363.51001, 1078.70215,   0.00000, 0.00000, 0.00000, -1, 42); //Stairs
	CreateDynamicObject(14723, 510.91971, 1363.70605, 1078.84021,   0.00000, 0.00000, 0.00000, -1, 42); //Stairs
	//4 Room house & 2 story

	//3 Room house & strip (13)
	CreateDynamicObject(14736, 755.25836, 1419.45801, 1102.58032,   0.00000, 0.00000, 0.00000, -1, 43); //Interior
	CreateDynamicObject(14738, 753.20190, 1415.76831, 1104.04199,   0.00000, 0.00000, 0.00000, -1, 43); //Interior
	CreateDynamicObject(1504, 744.47321, 1411.75403, 1101.42236,   0.00000, 0.00000, 0.00000, -1, 43); //Door
	//3 Room house & strip

	//2 Room house (14)
	CreateDynamicObject(14713, 289.97849, 1289.53406, 1079.25183,   0.00000, 0.00000, 0.00000, -1, 44); //Interior
	CreateDynamicObject(1498, 294.37189, 1284.51709, 1077.43616,   0.00000, 0.00000, 0.00000, -1, 44); //Door
	//2 Room house

	//2 Room house (15)
	CreateDynamicObject(14718, 188.29053, 1293.25732, 1081.13208,   0.00000, 0.00000, 0.00000, -1, 45); //Interior
	CreateDynamicObject(1498, 190.53439, 1288.35291, 1081.13416,   0.00000, 0.00000, 0.00000, -1, 45); //Door
	//2 Room house

	//2 Room house (16)
	CreateDynamicObject(14712, 287.90448, 1249.52588, 1083.25146,   0.00000, 0.00000, 0.00000, -1, 46); //Interior
	CreateDynamicObject(1498, 290.09601, 1241.95874, 1081.70117,   0.00000, 0.00000, 0.00000, -1, 46); //Door
	//2 Room house

	//2 Room house (17)
	CreateDynamicObject(14709, 245.01108, 1155.45520, 1081.63599,   0.00000, 0.00000, 0.00000, -1, 47); //Interior
	//2 Room house

	//3 Room house (18)
	CreateDynamicObject(14735, 342.67169, 1081.66528, 1082.87891,   0.00000, 0.00000, 0.00000, -1, 48); //Interior
	CreateDynamicObject(1506, 325.45471, 1074.26355, 1081.25549,   0.00000, 0.00000, 0.00000, -1, 48); //Door
	//3 Room house

	//Richman house 5 rooms & 2 bathrooms (19)
	CreateDynamicObject(14708, 200.11450, 1119.56934, 1083.97693,   0.00000, 0.00000, 0.00000, -1, 49); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//Richman house 5 rooms & 2 bathrooms (20)
	CreateDynamicObject(14706, 277.86502, 1069.62952, 1085.65552,   0.00000, 0.00000, 0.00000, -1, 50); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//Richman house 5 rooms & 2 bathrooms (21)
	CreateDynamicObject(14707, 275.53461, 992.44232, 1087.27319,   0.00000, 0.00000, 0.00000, -1, 51); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//2 Room house (Small) (22)
	CreateDynamicObject(15029, 2265.87500, -1122.75220, 1049.62781,   0.00000, 0.00000, 0.00000, -1, 52); //Interior
	CreateDynamicObject(1535, 2260.34570, -1121.88794, 1047.87683,   0.00000, 0.00000, 90.00000, -1, 52); //Door
	//2 Room house (Small)

	//1 Room house (Small) (23)
	CreateDynamicObject(15031, 2281.78003, -1121.99768, 1049.92285,   0.00000, 0.00000, 0.00000, -1, 53); //Interior
	CreateDynamicObject(1535, 2284.04028, -1126.90771, 1049.91650,   0.00000, 0.00000, 0.00000, -1, 53); //Door
	//1 Room house (Small)

	//3 Room house (24)
	CreateDynamicObject(15055, 2374.03271, -1102.76465, 1049.87073,   0.00000, 0.00000, 0.00000, -1, 54); //Interior
	CreateDynamicObject(1504, 2369.77124, -1094.13245, 1048.61951,   0.00000, 0.00000, 0.00000, -1, 54); //Door
	//3 Room house

	//1 Room house (Very Small) (25)
	CreateDynamicObject(15042, 2318.45508, -1230.66187, 1048.40820,   0.00000, 0.00000, 0.00000, -1, 55); //Interior
	CreateDynamicObject(1501, 2312.65112, -1231.38013, 1046.40540,   0.00000, 0.00000, 0.00000, -1, 55); //Door
	//1 Room house (Very Small)

	//2 Room house (Small) (26)
	CreateDynamicObject(15053, 2243.98071, -1024.30042, 1048.01758,   0.00000, 0.00000, 0.00000, -1, 56); //Interior
	CreateDynamicObject(1535, 2243.21191, -1027.78198, 1046.76501,   0.00000, 0.00000, 0.00000, -1, 56); //Door
	//2 Room house (Small)

	//3 Room house (27)
	CreateDynamicObject(15054, 2260.93286, -1251.45007, 1051.05786,   0.00000, 0.00000, 0.00000, -1, 57); //Interior
	CreateDynamicObject(1506, 2273.48657, -1243.43054, 1047.59131,   0.00000, 0.00000, 90.00000, -1, 57); //Door
	//3 Room house

	//4 Room house (28)
	CreateDynamicObject(15041, 2158.54736, -1220.96997, 1050.11694,   0.00000, 0.00000, 0.00000, -1, 58); //Interior
	CreateDynamicObject(1506, 2149.11328, -1216.07935, 1048.11365,   0.00000, 0.00000, 0.00000, -1, 58); //Door
	//4 Room house

	//2 Room house (29)
	CreateDynamicObject(15046, 2364.22144, -1082.74231, 1048.01733,   0.00000, 0.00000, 0.00000, -1, 59); //Interior
	CreateDynamicObject(1498, 2363.47827, -1075.46021, 1046.76379,   0.00000, 0.00000, 0.00000, -1, 59); //Door
	//2 Room house

	//4 Room house (Rich man big) (30)
	CreateDynamicObject(15048, 2364.55444, -1179.42346, 1055.79187,   0.00000, 0.00000, 0.00000, -1, 60); //Interior
	CreateDynamicObject(15059, 2364.56909, -1179.41418, 1055.79187,   0.00000, 0.00000, 0.00000, -1, 60); //Interior
	CreateDynamicObject(1506, 2372.00317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000, -1, 60); //Door
	CreateDynamicObject(1506, 2373.50317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000, -1, 60); //Door
	//4 Room house (Rich man big)

	//Only one room (TINY for las colinas) (31)
	CreateDynamicObject(14859, 245.20708, 321.97745, 1000.59143,   0.00000, 0.00000, 0.00000, -1, 61); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas) (32)
	CreateDynamicObject(14865, 269.22012, 322.22049, 998.14349,   0.00000, 0.00000, 0.00000, -1, 62); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas) (33)
	CreateDynamicObject(14889, 363.51450, 304.98868, 998.14722,   0.00000, 0.00000, 0.00000, -1, 63); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas) (34)
	CreateDynamicObject(15033, 2177.35718, -1069.85181, 1049.47449,   0.00000, 0.00000, 0.00000, -1, 64); //Interior
	CreateDynamicObject(1535, 2190.13110, -1074.29504, 1049.47742,   0.00000, 0.00000, 90.00000, -1, 64); //Door
	//Only one room (TINY for las colinas)

	//Only two rooms (TINY for las colinas) (35)
	CreateDynamicObject(15034, 2254.38940, -1108.71704, 1049.87268,   0.00000, 0.00000, 0.00000, -1, 65); //Interior
	CreateDynamicObject(1535, 2254.09644, -1113.33044, 1048.11633,   0.00000, 0.00000, 0.00000, -1, 65); //Door
	//Only two rooms (TINY for las colinas)

	//Only two rooms (TINY for las colinas) (36)
	CreateDynamicObject(15030, 2293.09204, -1092.09229, 1049.62341,   0.00000, 0.00000, 0.00000, -1, 66); //Interior
	CreateDynamicObject(2904, 2298.69800, -1093.70605, 1048.97290,   0.00000, 0.00000, 90.00000, -1, 66); //Door
	CreateDynamicObject(1535, 2298.64600, -1094.47375, 1047.87195,   0.00000, 0.00000, 90.00000, -1, 66); //Door
	//Only two rooms (TINY for las colinas)
}

HouseInterior_Show(playerid, page)
{
	PlayerData[playerid][pPage] = page; page--;

	new count;

	sz_MiscString[0] = 0;

	for(new i = page * MAX_PAGE_LOG, j = sizeof(arrHouseInteriors); i < j; i++)
	{
		if(count + 1 == MAX_PAGE_LOG + 1)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s>> Próxima Página\n", sz_MiscString);
			break;
		}

		ListedOptions[playerid][count] = i;
		count++;

		format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, (page * MAX_PAGE_LOG) + count, arrHouseInteriors[i][eHouseIntName]);
	}

	if(PlayerData[playerid][pPage] >= 2)
	{
		format(sz_MiscString, sizeof(sz_MiscString), "%s<< Página Anterior", sz_MiscString);
	}

	Dialog_Show(playerid, HouseInteriorList, DIALOG_STYLE_LIST, sprintf("{FFFFFF}Interiores ({00FF00}%d{FFFFFF}) - Página %d de %d", sizeof(arrHouseInteriors), PlayerData[playerid][pPage], (sizeof(arrHouseInteriors) / MAX_PAGE_LOG) + 1), sz_MiscString, "Selecionar", "Cancelar");

	return 1;
}

NotifyOwner(ownerid, color, const text[], {Float,_}:...)
{
	static 
		args,
		str[256];

	if((args = numargs()) <= 3)
	{
		foreach(new i : Player) if(PlayerData[i][pLogged] && PlayerData[i][pID] == ownerid)
		{
			SendClientMessage(i, color, text);
			break;
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL		5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 	2
			#emit ADD.C 		12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 	format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player) if(PlayerData[i][pLogged] && PlayerData[i][pID] == ownerid)
		{
			SendClientMessage(i, color, str);
			break;
		}

		#emit RETN
	}

	return 1;
}

GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff= 0.0, Float:yoff= 0.0, Float:zoff= 0.0)
{
	new Float:rot;
	GetVehicleZAngle(vehicleid, rot);
	rot = 360 - rot;
	GetVehiclePos(vehicleid, x, y, z);
	x = floatsin(rot, degrees) * yoff + floatcos(rot, degrees) * xoff + x;
	y = floatcos(rot, degrees) * yoff - floatsin(rot, degrees) * xoff + y;
	z = zoff + z;

	return 1;
}
	
encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
	#pragma unused behind_driver_door
	#pragma unused behind_passenger_door

	return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}

Vehicle_TriggerAlarm(id, location[], trava)
{
	new string[100];

	switch(trava)
	{
		case 1:
		{
			ToggleVehicleAlarms(id, true, 60000);
		}
		case 2:
		{
			ToggleVehicleAlarms(id, true, 120000);
			format(string, sizeof(string), "Alarme do veículo %s (%s) foi ativado.", ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehiclePlate]);
			Phone_SendMessage(141, Phone_GetNumberByID(VehicleData[id][vehicleOwnerID]), string);
		}
		case 3:
		{
			ToggleVehicleAlarms(id, true, 240000);
			format(string, sizeof(string), "Alarme do veículo %s (%s) foi ativado.", ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehiclePlate]);
			Phone_SendMessage(141, Phone_GetNumberByID(VehicleData[id][vehicleOwnerID]), string);

			foreach(new i : Player) if(PlayerData[i][pLogged] && GetFactionType(i) == FACTION_POLICE && PlayerData[i][pOnDuty])
			{
				SendClientMessageEx(i, COLOR_WARNING, "[Alarme veícular] %s (%s) localização atual em %s.", ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehiclePlate], location);
			}

		}
	}
	return 1;
}

ToggleVehicleAlarms(vehicleid, bool:alarmstate, time = 5000)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, alarmstate, doors, bonnet, boot, objective);

	if(alarmstate) SetTimerEx("OnVehicleAlarm", time, false, "d", vehicleid);

	return 1;
}

ShowUnscrambleTextdraw(playerid, bool:showTd = true)
{
	if(showTd)
	{
		for(new i = 0; i < 7; i++)
			PlayerTextDrawShow(playerid, Unscrambler_PTD[playerid][i]);
	}
	else
	{
		for(new i = 0; i < 7; i++)
			PlayerTextDrawHide(playerid, Unscrambler_PTD[playerid][i]);
	}

	return 1;
}

Unscramble_CreateTD(playerid)
{
	Unscrambler_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 199.873275, 273.593383, "<DESEMBARALHAR>");
	PlayerTextDrawLetterSize(playerid, Unscrambler_PTD[playerid][0], 0.206330, 1.118813);
	PlayerTextDrawAlignment(playerid, Unscrambler_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, Unscrambler_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Unscrambler_PTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Unscrambler_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, Unscrambler_PTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, Unscrambler_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][0], 0);

	Unscrambler_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 137.369461, 273.593383, "/desem");
	PlayerTextDrawLetterSize(playerid, Unscrambler_PTD[playerid][1], 0.206330, 1.118813);
	PlayerTextDrawAlignment(playerid, Unscrambler_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, Unscrambler_PTD[playerid][1], -490707969);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Unscrambler_PTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Unscrambler_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, Unscrambler_PTD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, Unscrambler_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][1], 0);

	Unscrambler_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 305.179687, 273.593383, "DESEMBARALHE");
	PlayerTextDrawLetterSize(playerid, Unscrambler_PTD[playerid][2], 0.206330, 1.118813);
	PlayerTextDrawAlignment(playerid, Unscrambler_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, Unscrambler_PTD[playerid][2], -2147483393);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Unscrambler_PTD[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, Unscrambler_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, Unscrambler_PTD[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, Unscrambler_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][2], 0);

	Unscrambler_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 141.369705, 285.194091, "scrambledword");
	PlayerTextDrawLetterSize(playerid, Unscrambler_PTD[playerid][3], 0.206330, 1.118813);
	PlayerTextDrawAlignment(playerid, Unscrambler_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, Unscrambler_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, Unscrambler_PTD[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, Unscrambler_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, Unscrambler_PTD[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, Unscrambler_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][3], 0);

	Unscrambler_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 137.902801, 296.924377, FixASCII("VOCÊ_TEM"));
	PlayerTextDrawLetterSize(playerid, Unscrambler_PTD[playerid][4], 0.206330, 1.118813);
	PlayerTextDrawAlignment(playerid, Unscrambler_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, Unscrambler_PTD[playerid][4], -2147483393);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, Unscrambler_PTD[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, Unscrambler_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, Unscrambler_PTD[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, Unscrambler_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][4], 0);

	Unscrambler_PTD[playerid][5] = CreatePlayerTextDraw(playerid, 184.539016, 297.024383, "001");
	PlayerTextDrawLetterSize(playerid, Unscrambler_PTD[playerid][5], 0.206330, 1.118813);
	PlayerTextDrawAlignment(playerid, Unscrambler_PTD[playerid][5], 1);
	PlayerTextDrawColor(playerid, Unscrambler_PTD[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, Unscrambler_PTD[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, Unscrambler_PTD[playerid][5], 255);
	PlayerTextDrawFont(playerid, Unscrambler_PTD[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, Unscrambler_PTD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][5], 0);

	Unscrambler_PTD[playerid][6] = CreatePlayerTextDraw(playerid, 202.540191, 297.124389, "SEGUNDOS_RESTANTES_PARA_COMPLETAR.");
	PlayerTextDrawLetterSize(playerid, Unscrambler_PTD[playerid][6], 0.206330, 1.118813);
	PlayerTextDrawAlignment(playerid, Unscrambler_PTD[playerid][6], 1);
	PlayerTextDrawColor(playerid, Unscrambler_PTD[playerid][6], -2147483393);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, Unscrambler_PTD[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, Unscrambler_PTD[playerid][6], 255);
	PlayerTextDrawFont(playerid, Unscrambler_PTD[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, Unscrambler_PTD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, Unscrambler_PTD[playerid][6], 0);
}

ReturnWeaponType(weaponid)
{
	new weapon[22];

	switch(weaponid)
	{
		case 0..24: weapon = "Melee Weapon";
		default: weapon = "Heavy Weapon";
	}

	return weapon;
}

SendDiscordMessage(DCC_Channel:channelid, const text[], {Float,_}:...)
{
	static 
		args,
		str[256],
		test[256];	

	if((args = numargs()) <= 2)
	{
		utf8encode(test, text, sizeof(test));
		DCC_SendChannelMessage(channelid, test);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL		5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 	2
			#emit ADD.C 		12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		256
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 	format
		#emit LCTRL 		5
		#emit SCTRL 		4

		utf8encode(test, str, sizeof(test));
		DCC_SendChannelMessage(channelid, test);

		#emit RETN
	}

	return 1;
}

// ReplaceText(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = 2000)
// {
// 	if(!limit)
// 		return 0;

// 	new 
// 		sublen = strlen(search),
// 		replen = strlen(replacement),
// 		bool:packed = ispacked(string),
// 		maxlen = maxlength,
// 		len = strlen(string),
// 		count = 0
// 	;

// 	if(packed)
// 		maxlen *= 4;

// 	if(!sublen)
// 		return 0;

// 	while(-1 != (pos = strfind(string, search, ignorecase, pos)))
// 	{
// 		strdel(string, pos, pos + sublen);

// 		len -= sublen;

// 		if(replen && len + replen < maxlen)
// 		{
// 			strins(string, replacement, pos, maxlength);

// 			pos += replen;
// 			len += replen;
// 		}

// 		if(limit != -1 && ++count >= limit)break;
// 	}

// 	return count;
// }

Chopshop_Create(playerid)
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		GetXYInFrontOfPlayer(playerid, x, y, 2.5);
		new i;
		if((i = Iter_Free(Chopshop)) < MAX_CHOPSHOP)
		{
			ChopshopData[i][chopshopExists] = true;

			ChopshopData[i][chopshopX] = x;
			ChopshopData[i][chopshopY] = y;
			ChopshopData[i][chopshopZ] = z;

			ChopshopData[i][chopshopRX] = 0.0;
			ChopshopData[i][chopshopRY] = 0.0;
			ChopshopData[i][chopshopRZ] = 0.0;

			for(new t = 0; t < 15; t++)
			{
				ChopshopData[i][chopshopCarWanted][t] = randomEx(400,611);
			}

			Chopshop_Refresh(i);
			mysql_tquery(this, "INSERT INTO chopshop (chopshopID) VALUES (null)", "OnChopshopCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 14;
			PlayerData[playerid][pSelectedSlot] = i;
			EditDynamicObject(playerid, ChopshopData[i][chopshopObject]);

			Iter_Add(Chopshop, i);

			return i;
		}
	}

	return -1;
}

Chopshop_Nearest(playerid)
{
	foreach(new i : Chopshop) if(ChopshopData[i][chopshopExists])
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, ChopshopData[i][chopshopX], ChopshopData[i][chopshopY], ChopshopData[i][chopshopZ]))
			return i;
	}	

	return -1;	
}

Chopshop_Delete(id)
{
	if(!ChopshopData[id][chopshopExists])
		return 0;

	if(IsValidDynamicObject(ChopshopData[id][chopshopObject]))
		DestroyDynamicObject(ChopshopData[id][chopshopObject]);

	new query[80];

	mysql_format(this, query, sizeof(query), "DELETE FROM chopshop WHERE chopshopID = '%d'", ChopshopData[id][chopshopID]);
	mysql_tquery(this, query);

	ChopshopData[id][chopshopExists] = false;

	Iter_Remove(Chopshop, id);

	return 1;
}

Chopshop_Refresh(id)
{
	if(!ChopshopData[id][chopshopExists])
		return 0;

	if(IsValidDynamicObject(ChopshopData[id][chopshopObject]))
		DestroyDynamicObject(ChopshopData[id][chopshopObject]);

	ChopshopData[id][chopshopObject] = CreateDynamicObject(19482, ChopshopData[id][chopshopX], ChopshopData[id][chopshopY], ChopshopData[id][chopshopZ], ChopshopData[id][chopshopRX], ChopshopData[id][chopshopRY], ChopshopData[id][chopshopRZ]);

	new string[512];

	format(string, sizeof(string), "Procura-se\n/vroubar desmontar\n%s       %s\n%s       %s\n%s       %s\n%s       %s\n%s       %s\n%s       %s\n%s       %s\n%s",
		ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][0]), ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][1]),
		ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][2]), ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][3]),
		ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][4]), ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][5]), 
		ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][6]), ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][7]),
		ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][8]), ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][9]),
		ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][10]), ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][11]),
		ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][12]), ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][13]),
		ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][14]));

	SetDynamicObjectMaterialText(ChopshopData[id][chopshopObject], 0, string, OBJECT_MATERIAL_SIZE_512x256, "Microsoft Yi Baiti", 21, 1, 0xFFFFFFFF, 0, 1);

	return 1;
}

Chopshop_Save(id)
{
	new string_chopshopcars[128], query[300];

	for(new i = 0; i < 15; i++)
	{
		format(string_chopshopcars, sizeof(string_chopshopcars), "%s%d|", string_chopshopcars, ChopshopData[id][chopshopCarWanted][i]);
	}

	mysql_format(this, query, sizeof(query), "UPDATE chopshop SET chopshopX = '%f', chopshopY = '%f', chopshopZ = '%f', chopshopRX = '%f', chopshopRY = '%f', chopshopRZ = '%f', chopshopCarWanted = '%e' WHERE chopshopID = '%d'",
		ChopshopData[id][chopshopX], ChopshopData[id][chopshopY], ChopshopData[id][chopshopZ], ChopshopData[id][chopshopRX], ChopshopData[id][chopshopRY], ChopshopData[id][chopshopRZ], string_chopshopcars, ChopshopData[id][chopshopID]);

	return mysql_tquery(this, query);
}

Chopshop_Reward(vehicle)
{
	new 
		Float:carprice,
		count,
		final_money = 50
	;

	carprice = float(VehicleData[vehicle][vehiclePrice]) * 0.01;

	final_money += floatround(carprice);

	new component;
	for(new i = 0; i < 14; i++)
	{
		component = GetVehicleComponentInSlot(vehicle, i);

		if(!component)
			continue;

		RemoveVehicleComponent(vehicle, component);

		VehicleData[vehicle][vehicleMod][GetVehicleComponentType(component)] = 0;

		count++;
	}

	Vehicle_Save(vehicle);

	final_money += (count * 25);

	return final_money; 
}

Chopshop_CheckWanted(id, model)
{
	for(new i = 0; i < 15; i++) if(ChopshopData[id][chopshopCarWanted][i] == model)
		return 1;

	return 0;
}

Float:GetDistanceBetweenTwoPoints(Float:x, Float:y, Float:z, Float:tx, Float:ty, Float:tz)
{
	new Float:temp1, Float:temp2, Float:temp3;

	temp1 = x - tx;
	temp2 = y - ty;
	temp3 = z - tz;

	return floatsqroot(temp1 * temp1 + temp2 * temp2 + temp3 * temp3);
}

IsPointInRangeOfPoint(Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:range)
{
	x2 -= x;
	y2 -= y;
	z2 -= z;
	return ((x2 * x2) + (y2 * y2) + (z2 * z2)) < (range * range);
}

CheckPlayerDesync(playerid)
{
	new drunk[2];

	drunk[0] = GetPlayerDrunkLevel(playerid);

	SetPlayerDrunkLevel(playerid, drunk[0] + 1);

	drunk[1] = GetPlayerDrunkLevel(playerid);

	if(drunk[0] != drunk[1] && !PlayerData[playerid][pDesync])
	{
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) foi kickado por estar dessincronizado com o servidor.", ReturnName(playerid, 0), playerid);
		
		SendNearbyMessage(playerid, 15.0, COLOR_WHITE, "* %s foi kickado automaticamente por estar dessincronizado com o servidor.", ReturnName(playerid, 0));

		SendWarningMessage(playerid, "Você foi kickado por estar dessincronizado com o servidor.");

		PlayerData[playerid][pDesync] = true;

		KickEx(playerid);
	}
	else
	{
		SetPlayerDrunkLevel(playerid, drunk[0]);
	}

	return 1;
}

SetPlayerColorEx(playerid, color)
{
	if(PlayerData[playerid][pAdminStatus])
		return SetPlayerColor(playerid, COLOR_ADMIN);

	SetPlayerColor(playerid, color);

	return 1;
}

Group_Create(playerid, name[])
{
	new i;
	if((i = Iter_Free(Groups)) < MAX_GROUPS)
	{
		GroupData[i][groupExists] = true;

		format(GroupData[i][groupName], 64, name);

		GroupData[i][groupRanks] = 4;
		GroupData[i][groupExpiresAt] = gettime() + (86400 * 15);
		GroupData[i][groupRobPlace] = -1;
		GroupData[i][groupRobStyle] = -1;
		GroupData[i][groupRobOut] = -1;

		for(new x = 0; x < 4; x++)
			format(GroupRanks[i][x], 32, "Rank %d", x + 1);

		mysql_tquery(this, "INSERT INTO group_rob (groupID) VALUES (NULL)", "OnGroupCreated", "dd", playerid, i);

		Iter_Add(Groups, i);

		return i;
	}

	return -1;
}

Group_Delete(groupid)
{
	if(groupid != -1 && GroupData[groupid][groupExists])
	{
		new query[75];

		mysql_format(this, query, sizeof(query), "DELETE FROM group_rob WHERE groupID = '%d'", GroupData[groupid][groupID]);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE players SET Grupo = '-1', GrupoRank = '-1' WHERE Grupo = '%d'", GroupData[groupid][groupID]);
		mysql_tquery(this, query);

		foreach(new i : Player) if(PlayerData[i][pGroup] == groupid)
		{
			ResetGroup(i);
		}

		GroupData[groupid][groupExists] = false;
		GroupData[groupid][groupID] = 0;

		Iter_Remove(Groups, groupid);
	}

	return 1;
}

Group_Save(groupid)
{
	new query[250];

	mysql_format(this, query, sizeof(query), "UPDATE group_rob SET groupName = '%e', groupRanks = '%d', groupExpiresAt = '%d', groupRobPlace = '%d', groupRobStyle = '%d', groupRobOut = '%d' WHERE groupID = '%d'",
		GroupData[groupid][groupName], GroupData[groupid][groupRanks], GroupData[groupid][groupExpiresAt], GroupData[groupid][groupRobPlace], GroupData[groupid][groupRobStyle], GroupData[groupid][groupRobOut], GroupData[groupid][groupID]);

	return mysql_tquery(this, query);
}

Group_SaveRanks(groupid)
{
	new query[250];

	mysql_format(this, query, sizeof(query), "UPDATE group_rob SET groupRank1 = '%e', groupRank2 = '%e', groupRank3 = '%e', groupRank4 = '%e' WHERE groupID = '%d'", 
		GroupRanks[groupid][0], GroupRanks[groupid][1], GroupRanks[groupid][2], GroupRanks[groupid][3], GroupData[groupid][groupID]);

	return mysql_tquery(this, query);
}

GetGroupByID(mysqlid)
{
	foreach(new i : Groups) if(GroupData[i][groupExists] && GroupData[i][groupID] == mysqlid)
		return i;

	return -1;
}

ResetGroup(playerid)
{
	new query[90];

	PlayerData[playerid][pGroupID] = -1;
	PlayerData[playerid][pGroup] = -1;
	PlayerData[playerid][pGroupRank] = -1;

	mysql_format(this, query, sizeof(query), "UPDATE players SET Grupo = '%d', GrupoRank = '%d' WHERE Name = '%e'", PlayerData[playerid][pGroupID], PlayerData[playerid][pGroupRank], ReturnName(playerid));
	mysql_tquery(this, query);

	return 1;
}

SetGroup(userid, groupid)
{
	if(groupid != -1 && GroupData[groupid][groupExists])
	{
		PlayerData[userid][pGroup] = groupid;
		PlayerData[userid][pGroupRank] = 1;
		PlayerData[userid][pGroupID] = GroupData[groupid][groupID];

		new query[102];

		mysql_format(this, query, sizeof(query), "UPDATE players SET Grupo = '%d', GrupoRank = '%d' WHERE Name = '%e'", PlayerData[userid][pGroupID], PlayerData[userid][pGroupRank], ReturnName(userid));
		mysql_tquery(this, query);
	}	

	return 1;
}

Group_GetRank(playerid)
{
	new grouprank = PlayerData[playerid][pGroupRank],
		groupid = PlayerData[playerid][pGroup],
		string[32] = "Nenhum";

	if(groupid == -1)
		return string;

	format(string, 32, GroupRanks[groupid][grouprank - 1]);

	return string;
}

Group_GetName(playerid)
{
	new groupid = PlayerData[playerid][pGroup],
		string[64] = "Nenhum";

	if(groupid == -1)
		return string;

	format(string, 64, GroupData[groupid][groupName]);

	return string;
}

Group_GetRobName(group)
{
	new string[40] = " {959ca8}(Não definido)";

	switch(GroupData[group][groupRobPlace])
	{
		case 1: string = " {959ca8}(Los Santos Bank)";
	}

	return string;
}

Group_GetRobStyle(group)
{
	new string[40] = " {959ca8}(Não definido)";

	switch(GroupData[group][groupRobStyle])
	{
		case 1: string = " {959ca8}(Barulhento)";
		case 2: string = " {959ca8}(Silencioso)";
	}

	return string;
}

Group_GetOut(group)
{
	new string[40] = " {959ca8}(Não definido)";

	if(GroupData[group][groupRobOut] != -1)
	{
		if(SewerData[GroupData[group][groupRobOut]][sewerExists])
		{
			format(string, sizeof(string), " {959ca8}(%s)", SewerData[GroupData[group][groupRobOut]][sewerName]);
		}		
	}	

	return string;
}

SendGroupMessage(groupid, color, const str[], {Float,_}:...)
{
	static
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for(end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player) if(PlayerData[i][pGroup] == groupid)
		{
			SendClientMessage(i, color, string);
		}

		return 1;
	}

	foreach(new i : Player) if(PlayerData[i][pGroup] == groupid)
	{
		SendClientMessage(i, color, str);
	}

	return 1;
}

ReturnNameByID(mysqlid) /* Vai dar erro, vai dar */
{
	new query[50], pname[MAX_PLAYER_NAME];

	mysql_format(this, query, sizeof(query), "SELECT Name FROM players WHERE UserID = '%d'", mysqlid);
	new Cache:cache = mysql_query(this, query);

	if(!cache_num_rows())
		pname = "Nenhum";

	else
		cache_get_value_name(0, "Name", pname, MAX_PLAYER_NAME);

	cache_delete(cache);
	return pname;
}

ReturnIDByName(name[])
{
	new id = -1, query[70];

	mysql_format(this, query, sizeof(query), "SELECT UserID FROM players WHERE Name = '%e'", name);
	new Cache:cache = mysql_query(this, query);

	if(cache_num_rows())
		cache_get_value_name_int(0, "UserID", id);

	cache_delete(cache);
	return id;
}

ReturnWeatherName(weatherid)
{
	new name[32] = "Inválido";

	for(new i = 0; i < sizeof(g_aWeatherName); i++) if(g_aWeatherName[i][s_W_ID] == weatherid)
	{
		format(name, 32, g_aWeatherName[i][s_W_Name]);
		break;
	}

	return name;
}

Hitmark_Create()
{
	Hitmark = TextDrawCreate(333.000000, 174.000000, "X");
	TextDrawBackgroundColor(Hitmark, 255);
	TextDrawFont(Hitmark, 1);
	TextDrawLetterSize(Hitmark, 0.500000, 1.000000);
	TextDrawColor(Hitmark, -1);
	TextDrawSetOutline(Hitmark, 0);
	TextDrawSetProportional(Hitmark, 1);
	TextDrawSetShadow(Hitmark, 1);

	return 1;
}

SendFamilyMessage(famid, color, const str[], {Float,_}:...)
{
	static
		args,
		start,
		end,
		string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if(args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for(end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach(new i : Player) if(PlayerData[i][pFamily] == famid)
		{
			SendClientMessage(i, color, string);
		}

		return 1;
	}

	foreach(new i : Player) if(PlayerData[i][pFamily] == famid)
	{
		SendClientMessage(i, color, str);
	}

	return 1;
}

Family_Create(playerid, name[], tag[])
{
	new i;
	if((i = Iter_Free(Families)) < MAX_FAMILIES)
	{
		FamilyData[i][familyExists] = true;

		format(FamilyData[i][familyName], 64, name);
		format(FamilyData[i][familyTag], 10, tag);

		FamilyData[i][familyRanks] = 4;
		FamilyData[i][familyExpiresAt] = gettime() + (86400 * 30);
		FamilyData[i][familyWarned] = 0;
		FamilyData[i][familyPlusRenew] = 0;

		for(new x = 0; x < 4; x++)
			format(FamilyRanks[i][x], 32, "Rank %d", x + 1);

		PlayerData[playerid][pCreateFamily] = 0;

		mysql_tquery(this, "INSERT INTO families (familyID) VALUES (NULL)", "OnFamilyCreated", "dd", playerid, i);

		Iter_Add(Families, i);

		return i;
	}

	return -1;
}

Family_Delete(familyid)
{
	if(familyid != -1 && FamilyData[familyid][familyExists])
	{
		new query[75];

		mysql_format(this, query, sizeof(query), "DELETE FROM families WHERE familyID = '%d'", FamilyData[familyid][familyID]);
		mysql_tquery(this, query);

		mysql_format(this, query, sizeof(query), "UPDATE players SET Family = '-1', FamilyRank = '-1' WHERE Family = '%d'", FamilyData[familyid][familyID]);
		mysql_tquery(this, query);

		foreach(new i : Player) if(PlayerData[i][pFamily] == familyid)
		{
			ResetFamily(i);
		}

		FamilyData[familyid][familyExists] = false;
		FamilyData[familyid][familyID] = 0;

		Iter_Remove(Families, familyid);
	}

	return 1;
}

Family_Save(familyid)
{
	new query[211];

	mysql_format(this, query, sizeof(query), "UPDATE families SET familyName = '%e', familyTag = '%e', familyRanks = '%d', familyExpiresAt = '%d', familyPlusRenew = '%d' WHERE familyID = '%d'",
		FamilyData[familyid][familyName], FamilyData[familyid][familyTag], FamilyData[familyid][familyRanks], FamilyData[familyid][familyExpiresAt], FamilyData[familyid][familyPlusRenew], FamilyData[familyid][familyID]);

	return mysql_tquery(this, query);
}

Family_SaveRanks(familyid)
{
	new query[200];

	mysql_format(this, query, sizeof(query), "UPDATE families SET familyRank1 = '%e', familyRank2 = '%e', familyRank3 = '%e', familyRank4 = '%e' WHERE familyID = '%d'",
		FamilyRanks[familyid][0], FamilyRanks[familyid][1], FamilyRanks[familyid][2], FamilyRanks[familyid][3], FamilyData[familyid][familyID]);

	return mysql_tquery(this, query);
}

GetFamilyByID(mysqlid)
{
	foreach(new i : Families) if(FamilyData[i][familyExists] && FamilyData[i][familyID] == mysqlid)
		return i;

	return -1;
}

ResetFamily(playerid)
{
	new query[90];

	PlayerData[playerid][pFamilyID] = -1;
	PlayerData[playerid][pFamily] = -1;
	PlayerData[playerid][pFamilyRank] = -1;

	mysql_format(this, query, sizeof(query), "UPDATE players SET Family = '-1', FamilyRank = '-1' WHERE Name = '%e'", ReturnName(playerid));
	mysql_tquery(this, query);

	return 1;
}

SetFamily(userid, familyid)
{
	if(familyid != -1 && FamilyData[familyid][familyExists])
	{
		PlayerData[userid][pFamily] = familyid;
		PlayerData[userid][pFamilyID] = FamilyData[familyid][familyID];
		PlayerData[userid][pFamilyRank] = 1;

		new query[102];

		mysql_format(this, query, sizeof(query), "UPDATE players SET Family = '%d', FamilyRank = '%d' WHERE Name = '%e'", PlayerData[userid][pFamilyID], PlayerData[userid][pFamilyRank], ReturnName(userid));
		mysql_tquery(this, query);
	}

	return 1;
}

Family_GetRank(playerid)
{
	new familyrank = PlayerData[playerid][pFamilyRank],
		familyid = PlayerData[playerid][pFamily],
		string[32] = "Nenhum";

	if(familyid == -1)
		return string;

	format(string, 32, FamilyRanks[familyid][familyrank - 1]);

	return string;
}

Family_GetName(playerid)
{
	new familyid = PlayerData[playerid][pFamily],
		string[32] = "Nenhum";

	if(familyid == -1)
		return string;

	format(string, 32, FamilyData[familyid][familyName]);

	return string;
}

Family_GetTag(playerid)
{
	new familyid = PlayerData[playerid][pFamily],
		string[10] = "ERROR";

	if(familyid == -1)
		return string;

	format(string, 10, FamilyData[familyid][familyTag]);

	return string;
}

Family_ManageRanks(playerid, familyid)
{
	if(familyid == -1 || !FamilyData[familyid][familyExists])
		return 0;

	new string[4 * 32];

	format(string, sizeof(string), "Rank\tNome\n");

	for(new i = 0; i < 4; i++)
	{
		format(string, sizeof(string), "%s%d\t%s\n", string, i + 1, FamilyRanks[familyid][i]);
	}

	Dialog_Show(playerid, FamilyShowRanks, DIALOG_STYLE_TABLIST_HEADERS, "Gerenciar nome dos ranks:", string, "Editar", "Cancelar");

	return 1;
}
 
ViewFamilies(playerid)
{
	new string[1300], dia, mes, ano, hora, minuto, segundo, count;

	foreach(new i : Families) if(FamilyData[i][familyExists] && !FamilyData[i][familyWarned])
	{
		TimestampToDate(FamilyData[i][familyExpiresAt], ano, mes, dia, hora, minuto, segundo);
		format(string, sizeof(string), "%s{FFFFFF}%s ({FFFF00}%d{FFFFFF}) [%s] (Ativo até: %02d/%02d/%d)\n", string, FamilyData[i][familyName], i, FamilyData[i][familyTag], dia, mes, ano);
		count++;
	}

	if(!count)
		return SendWarningMessage(playerid, "Não existe uma família ativa.");

	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Lista das famílias ativas:", string, "Okay", "");

	return 1;
}

Family_ShowMembers(playerid, familyid)
{
	if(familyid == -1 || !FamilyData[familyid][familyExists])
	return 0;

	new query[85];

	mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Family = '%d' ORDER BY FamilyRank DESC", FamilyData[familyid][familyID]);
	mysql_tquery(this, query, "ShowFamilyMembers", "d", playerid);

	return 1;
}

ViewJobs(playerid)
{
	new string[500];
	
	for(new i = 0; i < sizeof(g_aJobs); i++) if(g_aJobs[i][s_J_ID])
	{
		format(string, sizeof(string), "%s{FFFFFF}Emprego: ({00FF00}%i{FFFFFF}) | %s\n", string, g_aJobs[i][s_J_ID], g_aJobs[i][s_J_Name]);
	}
	
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Lista dos empregos", string, "Fechar", "");
	return 1;
}

SetPlayerToRespawn(playerid)
{
	if(PlayerData[playerid][pJailed])
	{
		if(PlayerData[playerid][pJailed] == 1)
		{
			SetPlayerInJail(playerid);
			SendServerMessage(playerid, "Você continua na prisão administrativa por %d minuto(s).", (PlayerData[playerid][pJailTime] / 60));
		}
		else
		{
			AC_SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY],  PlayerData[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

			ShowHungryTextdraw(playerid, 0);
		}

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraw][5]);
	}
	else
	{
		ShowHungryTextdraw(playerid, 1);

		if(PlayerData[playerid][pState] == PLAYER_STATE_WOUNDED || PlayerData[playerid][pState] == PLAYER_STATE_DEAD)
		{
			AC_SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY],  PlayerData[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1);
		}
		else if(PlayerData[playerid][pHospital])
		{
			AC_SetPlayerPos(playerid, 1388.6237, -9.0388, 1001.9750);
			SetPlayerFacingAngle(playerid, 179.9532);

			PlayerData[playerid][pEntrance] = 7;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 507);
		}
		else if(PlayerData[playerid][pCrashed])
		{
			new query[80];
			AC_SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY],  PlayerData[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

			mysql_format(this, query, sizeof(query), "SELECT * FROM player_crashed WHERE UserID = '%d'", PlayerData[playerid][pID]);
			mysql_tquery(this, query, "RestorePlayerData", "d", playerid);
		}
		else if(PlayerData[playerid][pRespawnTime] > gettime())
		{
			AC_SetPlayerPos(playerid, PlayerData[playerid][pPosX], PlayerData[playerid][pPosY], PlayerData[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, PlayerData[playerid][pPosA]);

			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
		}
		else if(!PlayerData[playerid][pSpawn])
		{
			AC_SetPlayerPos(playerid, SPAWN_CIVIL_X, SPAWN_CIVIL_Y, SPAWN_CIVIL_Z);
			SetPlayerFacingAngle(playerid, 1.6392);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;
		}
		else if(PlayerData[playerid][pSpawn])
		{
			if(PlayerData[playerid][pSpawn] == 1)
			{
				new faction = PlayerData[playerid][pFaction];

				if(PlayerData[playerid][pFactionID] == -1)
				{
					SetPlayerInterior(playerid, 0);
					AC_SetPlayerPos(playerid, SPAWN_CIVIL_X, SPAWN_CIVIL_Y, SPAWN_CIVIL_Z);
					SetPlayerFacingAngle(playerid, 1.6392);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerData[playerid][pSpawn] = 0;	
					PlayerData[playerid][pEntrance] = -1;
					PlayerData[playerid][pHouse] = -1;
					PlayerData[playerid][pBusiness] = -1;
					PlayerData[playerid][pComplex] = -1;
					SetCameraBehindPlayer(playerid);
					
					return 1;
				}

				AC_SetPlayerPos(playerid, FactionData[faction][factionSpawn][0], FactionData[faction][factionSpawn][1], FactionData[faction][factionSpawn][2]);
				SetPlayerInterior(playerid, FactionData[faction][factionSpawnIntVW][0]);
				SetPlayerVirtualWorld(playerid, FactionData[faction][factionSpawnIntVW][1]);
				PlayerData[playerid][pEntrance] = FactionData[faction][factionSpawnIntVW][2];
				PlayerData[playerid][pHouse] = -1;
				PlayerData[playerid][pBusiness] = -1;
				PlayerData[playerid][pComplex] = -1;
			}
			else if(PlayerData[playerid][pSpawn] == 2)
			{
				if(PlayerData[playerid][pJob] == EMPREGO_Taxista)
				{
					SetPlayerPos(playerid, 1754.6997, -1894.0267, 13.5569);
					SetPlayerFacingAngle(playerid, 269.8940);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerData[playerid][pEntrance] = -1;
					PlayerData[playerid][pHouse] = -1;
					PlayerData[playerid][pBusiness] = -1;
					PlayerData[playerid][pComplex] = -1;
				}
				else if(PlayerData[playerid][pJob] == EMPREGO_Caminhoneiro)
				{
					SetPlayerPos(playerid, 2184.8557, -2251.7520, 14.7700);
					SetPlayerFacingAngle(playerid, 314.7183);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerData[playerid][pEntrance] = -1;
					PlayerData[playerid][pHouse] = -1;
					PlayerData[playerid][pBusiness] = -1;
					PlayerData[playerid][pComplex] = -1;
				}
				else if(PlayerData[playerid][pJob] == EMPREGO_Lixeiro)
				{
					SetPlayerPos(playerid, 2089.8494, -2060.9558, 13.5469);
					SetPlayerFacingAngle(playerid, 354.2490);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerData[playerid][pEntrance] = -1;
					PlayerData[playerid][pHouse] = -1;
					PlayerData[playerid][pBusiness] = -1;
					PlayerData[playerid][pComplex] = -1;
				}
				else
				{
					AC_SetPlayerPos(playerid, SPAWN_CIVIL_X, SPAWN_CIVIL_Y, SPAWN_CIVIL_Z);
					SetPlayerFacingAngle(playerid, 1.6392);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerData[playerid][pEntrance] = -1;
					PlayerData[playerid][pHouse] = -1;
					PlayerData[playerid][pBusiness] = -1;
					PlayerData[playerid][pComplex] = -1;
				}
			}
			else if(PlayerData[playerid][pSpawn] >= 1000)
			{
				new idcasa = GetHouseByID(PlayerData[playerid][pSpawn] - 1000);

				if(HouseData[idcasa][houseOwner] != PlayerData[playerid][pID])
				{
					AC_SetPlayerPos(playerid, SPAWN_CIVIL_X, SPAWN_CIVIL_Y, SPAWN_CIVIL_Z);
					SetPlayerFacingAngle(playerid, 1.6392);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerData[playerid][pSpawn] = 0;					
					PlayerData[playerid][pEntrance] = -1;
					PlayerData[playerid][pHouse] = -1;
					PlayerData[playerid][pBusiness] = -1;
					PlayerData[playerid][pComplex] = -1;
					SendServerMessage(playerid, "A propriedade \"%s\" selecionada para spawn não é mais de sua autoria,", HouseData[idcasa][houseAddress]);
					SendClientMessage(playerid, COLOR_WHITE, "... você foi redirecionado para o spawn civil.");
					SetCameraBehindPlayer(playerid);

					return 1;
				}

				AC_SetPlayerPos(playerid, HouseData[idcasa][housePos][0], HouseData[idcasa][housePos][1], HouseData[idcasa][housePos][2]);
				SetPlayerFacingAngle(playerid, HouseData[idcasa][housePos][3]);
				SetPlayerInterior(playerid, HouseData[idcasa][houseExtInterior]);
				SetPlayerVirtualWorld(playerid, HouseData[idcasa][houseExtVW]);
				PlayerData[playerid][pEntrance] = -1;
				PlayerData[playerid][pHouse] = -1;
				PlayerData[playerid][pBusiness] = -1;
				PlayerData[playerid][pComplex] = HouseData[idcasa][houseComplex];
			}
		}
	}

	SetCameraBehindPlayer(playerid);

	return 1;
}

FixASCII(text[]) 
{
	new string[256];

	for(new i = 0; text[i]; ++i) 
	{
		string[i] = text[i];

		if(string[i] == 'ã')
			string[i] = 'â';
		else if(string[i] == 'õ')
			string[i] = 'ô';

		switch(string[i]) 
		{
			case 0xC0 .. 0xC3: string[i] -= 0x40;
			case 0xC7 .. 0xC9: string[i] -= 0x42;
			case 0xD2 .. 0xD5: string[i] -= 0x44;
			case 0xD9 .. 0xDC: string[i] -= 0x47;
			case 0xE0 .. 0xE3: string[i] -= 0x49;
			case 0xE7 .. 0xEF: string[i] -= 0x4B;
			case 0xF2 .. 0xF5: string[i] -= 0x4D;
			case 0xF9 .. 0xFC: string[i] -= 0x50;
			case 0xC4, 0xE4: string[i] = 0x83;
			case 0xC6, 0xE6: string[i] = 0x84;
			case 0xD6, 0xF6: string[i] = 0x91;
			case 0xD1, 0xF1: string[i] = 0xEC;
			case 0xDF: string[i] = 0x96;
			case 0xBF: string[i] = 0xAF;
		}	
	}
	return string; 
}

GivePlayerDamage(playerid, damagedid, weaponid, bodypart, Float:amount)
{
	new Float:damagevalue, Float:oldhealth, Float:oldarmour;

	GetPlayerHealth(damagedid, oldhealth);
	GetPlayerArmour(damagedid, oldarmour);

	if(!PlayerData[playerid][pTogHitmark])
	{
		PlayerData[playerid][pHitmark] = true;
		TextDrawHideForPlayer(playerid, Hitmark);
		TextDrawShowForPlayer(playerid, Hitmark);
	}	

	//Setar damage;
	switch(bodypart)
	{
		case BODY_PART_HEAD:
		{
			switch(weaponid)
			{
				case WEAPON_COLT45:		damagevalue = 17.0;
				case WEAPON_SILENCED:	damagevalue = 18.0;
				case WEAPON_DEAGLE:		damagevalue = 33.0;
				case WEAPON_SHOTGUN:	damagevalue = 61.0;
				case WEAPON_UZI:		damagevalue = 23.0;
				case WEAPON_MP5:		damagevalue = 25.0;
				case WEAPON_AK47:		damagevalue = 41.0;
				case WEAPON_M4:			damagevalue = 37.0;
				case WEAPON_TEC9:		damagevalue = 11.0;
				case WEAPON_SNIPER:		damagevalue = 150.0;
				default: 				damagevalue = amount;
			}
		}
		case BODY_PART_CHEST:
		{
			switch(weaponid)
			{
				case WEAPON_COLT45:		damagevalue = 7.0;
				case WEAPON_SILENCED:	damagevalue = 7.0;
				case WEAPON_DEAGLE:		damagevalue = 22.0;
				case WEAPON_SHOTGUN:	damagevalue = 38.0;
				case WEAPON_UZI:		damagevalue = 13.0;
				case WEAPON_MP5:		damagevalue = 15.0;
				case WEAPON_AK47:		damagevalue = 28.0;
				case WEAPON_M4:			damagevalue = 24.0;
				case WEAPON_TEC9:		damagevalue = 8.0;
				case WEAPON_SNIPER:		damagevalue = 90.0;	
				default: 				damagevalue = amount;
			}
		}
		case BODY_PART_GROIN:
		{
			switch(weaponid)
			{
				case WEAPON_COLT45:		damagevalue = 6.0;
				case WEAPON_SILENCED:	damagevalue = 6.0;
				case WEAPON_DEAGLE:		damagevalue = 21.0;
				case WEAPON_SHOTGUN:	damagevalue = 37.0;
				case WEAPON_UZI:		damagevalue = 12.0;
				case WEAPON_MP5:		damagevalue = 14.0;
				case WEAPON_AK47:		damagevalue = 27.0;
				case WEAPON_M4:			damagevalue = 23.0;
				case WEAPON_TEC9:		damagevalue = 7.0;
				case WEAPON_SNIPER:		damagevalue = 50.0;	
				default: 				damagevalue = amount;
			}
		}
		case BODY_PART_LEFT_ARM, BODY_PART_RIGHT_ARM:
		{
			switch(weaponid)
			{
				case WEAPON_COLT45:		damagevalue = 5.0;
				case WEAPON_SILENCED:	damagevalue = 5.0;
				case WEAPON_DEAGLE:		damagevalue = 12.0;
				case WEAPON_SHOTGUN:	damagevalue = 22.0;
				case WEAPON_UZI:		damagevalue = 9.0;
				case WEAPON_MP5:		damagevalue = 11.0;
				case WEAPON_AK47:		damagevalue = 21.0;
				case WEAPON_M4:			damagevalue = 17.0;
				case WEAPON_TEC9:		damagevalue = 7.0;
				case WEAPON_SNIPER:		damagevalue = 50.0;	
				default: 				damagevalue = amount;
			}
		}
		case BODY_PART_LEFT_LEG, BODY_PART_RIGHT_LEG:
		{
			switch(weaponid)
			{
				case WEAPON_COLT45:		damagevalue = 5;
				case WEAPON_SILENCED:	damagevalue = 5;
				case WEAPON_DEAGLE:		damagevalue = 12;
				case WEAPON_SHOTGUN:	damagevalue = 22;
				case WEAPON_UZI:		damagevalue = 9;
				case WEAPON_MP5:		damagevalue = 11;
				case WEAPON_AK47:		damagevalue = 21;
				case WEAPON_M4:			damagevalue = 17;
				case WEAPON_TEC9:		damagevalue = 7;
				case WEAPON_SNIPER:		damagevalue = 50;		
				default: 				damagevalue = amount;
			}
		}
	}

	//Drug effect;
	if(PlayerData[damagedid][pDrugUsed] == 3)
	{
		damagevalue -= 4.0;

		if(damagevalue <= 1.0)
		{
			damagevalue = 1.0;
		}
	}

	if(PlayerData[damagedid][pAdminStatus])
	{
		damagevalue = 0.0;
	}
	if(PlayerData[damagedid][pState] == PLAYER_STATE_WOUNDED || PlayerData[playerid][pState] == PLAYER_STATE_DEAD)
	{
		damagevalue = 0.0;
	}
	if(PlayerData[playerid][pBeanBag] && weaponid == WEAPON_SHOTGUN)
	{
		damagevalue = 0.0;
	}
	if(PlayerData[damagedid][pJailed])
	{
		damagevalue = 0.0;
	}
	/*if(GetPVarInt(playerid, "InHalloween"))
	{
		damagevalue = 0.0;
		SendWarningMessage(playerid, "Você foi desclassificado por má utilização da arma do mini-game.");
		Hallo_Reset(playerid);
	}*/

	//Registro de dano
	Damage_Add(playerid, damagedid, bodypart, weaponid, damagevalue);
	PlayerData[damagedid][pLastDamage][0] = PlayerData[playerid][pID];
	PlayerData[damagedid][pLastDamage][1] = gettime();

	if(oldhealth - damagevalue >= 0.0)
	{
		if(oldhealth - damagevalue <= 30.0 && !GetPVarInt(damagedid, "LowShootingSkills"))
		{
			SetPlayerWeaponSkills(damagedid, false);
		}

		if(bodypart == BODY_PART_HEAD)
		{
			SetScriptedArmour(damagedid, oldarmour);
			SetScriptedHealth(damagedid, oldhealth - damagevalue);
		}
		else if(bodypart == BODY_PART_CHEST)
		{
			if(oldarmour)
			{
				SetScriptedArmour(damagedid, oldarmour - damagevalue);
				new Float:lifedamage;
				if(oldarmour < damagevalue)
				{
					lifedamage = damagevalue - oldarmour;
					SetScriptedArmour(damagedid, 0.0);
					SetScriptedHealth(damagedid, oldhealth - lifedamage);
				}
			}
			else
			{
				SetScriptedHealth(damagedid, oldhealth - damagevalue);
			}
		}
		else
		{
			SetScriptedHealth(damagedid, oldhealth - damagevalue);
		}
	}
	else
	{
		SendClientMessage(damagedid, COLOR_YELLOW, "Você está gravemente ferido. (Poderá executar o comando /respawnhosp em breve)");
		SendFormatMessage(damagedid, COLOR_SAMP, "Info", "Você foi ferido %d vezes, use /ferimentos %d para visualizar.", PlayerData[damagedid][pDamage], damagedid);

		GetPlayerPos(damagedid, PlayerData[damagedid][pPosX], PlayerData[damagedid][pPosY], PlayerData[damagedid][pPosZ]);
		GetPlayerFacingAngle(damagedid, PlayerData[damagedid][pPosA]);

		PlayerData[damagedid][pInterior] = GetPlayerInterior(damagedid);
		PlayerData[damagedid][pWorld] = GetPlayerVirtualWorld(damagedid);

		OnPlayerWounded(damagedid, playerid, weaponid);
	}

	return 1;
}

SetPlayerWeaponSkills(playerid, bool:normal)
{
	if(normal)
	{
		SetPVarInt(playerid, "LowShootingSkills", 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 899);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);		
	}
	else
	{
		if(!GetPVarInt(playerid, "LowShootingSkills"))
		{
			SetPVarInt(playerid, "LowShootingSkills", 1);
			SendClientMessageEx(playerid, COLOR_WARNING, "=> Sua vida está baixa e suas habilidades de manusear as armas decaíram.");
			SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 200);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 200);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 200);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 200);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 200);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 200);			
		}
	}

	return 1;
}

ReturnBodypartName(bodypart)
{
	new bodyname[20];
	
	switch(bodypart)
	{
		case BODY_PART_CHEST: bodyname = "PEITO";
		case BODY_PART_GROIN: bodyname = "VIRILHA";
		case BODY_PART_LEFT_ARM: bodyname = "BRAÇO ESQUERDO";
		case BODY_PART_RIGHT_ARM: bodyname = "BRAÇO DIREITO";
		case BODY_PART_LEFT_LEG: bodyname = "PERNA ESQUERDA";
		case BODY_PART_RIGHT_LEG: bodyname = "PERNA DIREITA";
		case BODY_PART_HEAD: bodyname = "CABEÇA";
	}
	
	return bodyname;
}

Damage_Add(playerid, damagedid, bodypart, weaponid, Float:amount)
{
	new Float:armor;

	PlayerData[damagedid][pDamage]++;

	for(new i = 0; i < MAX_PLAYER_DAMAGE; i++) if(!DamageData[damagedid][i][damageTaken])
	{
		GetPlayerArmour(damagedid, armor);

		if(armor > 1 && bodypart == BODY_PART_CHEST)
		{
			DamageData[damagedid][i][damageArmor] = 1;
		}
		else
		{
			DamageData[damagedid][i][damageArmor] = 0;
		}

		DamageData[damagedid][i][damageTaken] = floatround(amount, floatround_round);
		DamageData[damagedid][i][damageWeapon] = weaponid;

		DamageData[damagedid][i][damageBodypart] = bodypart;
		DamageData[damagedid][i][damageTime] = gettime();

		DamageData[damagedid][i][damageShooter] = PlayerData[playerid][pID];

		return 1;
	}

	return 1;
}

Damage_Clear(playerid)
{	
	for(new i = 0; i < MAX_PLAYER_DAMAGE; i++)
	{
		DamageData[playerid][i][damageTaken] = 0;
		DamageData[playerid][i][damageShooter] = 0;
		DamageData[playerid][i][damageWeapon] = 0;
		DamageData[playerid][i][damageBodypart] = 0;
		DamageData[playerid][i][damageTime] = 0;
		DamageData[playerid][i][damageArmor] = 0;
	}

	PlayerData[playerid][pDamage] = 0;

	return 1;
}

Damage_Show(damageid, playerid, bool:admin)
{
	if(!PlayerData[damageid][pDamage])
	{
		if(damageid == playerid)
			return SendWarningMessage(playerid, "Não há um ferimento registrado para o seu personagem.");
		else
			return SendWarningMessage(playerid, "Não há registros de danos para esse personagem.");
	}

	new header[64];

	sz_MiscString[0] = 0;

	if(damageid == playerid)
	{
		format(header, sizeof(header), "Meus ferimentos (%s)", ReturnName(damageid));
	}
	else
	{
		format(header, sizeof(header), "Ferimentos de: %s", ReturnName(damageid));
	}

	if(!admin)
	{
		for(new i = 0; i < MAX_PLAYER_DAMAGE; i++) if(DamageData[damageid][i][damageTaken])
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s%s: %d dmg %s - arma: %s (%s)\n", sz_MiscString, ReturnBodypartName(DamageData[damageid][i][damageBodypart]), DamageData[damageid][i][damageTaken], (DamageData[damageid][i][damageArmor] == 1) ? ("(Colete) ") : ("(Vida)"), ReturnWeaponName(DamageData[damageid][i][damageWeapon]), GetDuration(gettime() - DamageData[damageid][i][damageTime]));
		}
	}
	else
	{
		for(new i = 0; i < MAX_PLAYER_DAMAGE; i++) if(DamageData[damageid][i][damageTaken])
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s{FF6346}%s{FFFFFF} %s: %d dmg %s - arma: %s (%s)\n", sz_MiscString, ReturnNameByID(DamageData[damageid][i][damageShooter]), ReturnBodypartName(DamageData[damageid][i][damageBodypart]), DamageData[damageid][i][damageTaken], (DamageData[damageid][i][damageArmor] == 1) ? ("(Colete) ") : ("(Vida)"), ReturnWeaponName(DamageData[damageid][i][damageWeapon]), GetDuration(gettime() - DamageData[damageid][i][damageTime]));
		}
	}

	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, header, sz_MiscString, "<<", "");

	return 1;
}

ReturnAdminRank(playerid)
{
	new rank[16] = "Player";

	switch(PlayerData[playerid][pAdmin])
	{
		case ADMIN_Moderator: rank = "Moderator";
		case ADMIN_GameAdmin1: rank = "Game Admin I";
		case ADMIN_GameAdmin2: rank = "Game Admin II";
		case ADMIN_GameAdmin3: rank = "Game Admin III";
		case ADMIN_HeadStaff: rank = "Head Admin";
		case ADMIN_LeadStaff: rank = "Lead Staff";
		case ADMIN_Management: rank = "Management";
	}

	return rank;
}

BuyInfo_CreatePlayer(playerid)
{
	Player_BuyInfo = CreatePlayerTextDraw(playerid, 100.000000, 280.000000, "~y~Você_está_prestes_a_compra_a_mobília:_~w~Mobilia_Nome_~y~por_~g~$XXX.");
	PlayerTextDrawLetterSize(playerid, Player_BuyInfo, 0.173666, 1.073184);
	PlayerTextDrawTextSize(playerid, Player_BuyInfo, 600.0, 1.0);
	PlayerTextDrawAlignment(playerid, Player_BuyInfo, 1);
	PlayerTextDrawColor(playerid, Player_BuyInfo, -1);
	PlayerTextDrawSetShadow(playerid, Player_BuyInfo, 0);
	PlayerTextDrawSetOutline(playerid, Player_BuyInfo, 1);
	PlayerTextDrawBackgroundColor(playerid, Player_BuyInfo, 255);
	PlayerTextDrawFont(playerid, Player_BuyInfo, 2);
	PlayerTextDrawSetProportional(playerid, Player_BuyInfo, 1);
	PlayerTextDrawSetShadow(playerid, Player_BuyInfo, 0);

	return 1;
}

BuyInfo_CreateGlobal()
{
	Global_BuyInfo = TextDrawCreate(100.000000, 288.000000, "~y~Para_confirmar_a_compra_clique_no_~b~DISQUETE_~y~e_para_cancelar_aperte_~r~ESC.");
	TextDrawLetterSize(Global_BuyInfo, 0.173666, 1.073184);
	TextDrawTextSize(Global_BuyInfo, 600.0, 1.0);
	TextDrawAlignment(Global_BuyInfo, 1);
	TextDrawColor(Global_BuyInfo, -1);
	TextDrawSetShadow(Global_BuyInfo, 0);
	TextDrawSetOutline(Global_BuyInfo, 1);
	TextDrawBackgroundColor(Global_BuyInfo, 255);
	TextDrawFont(Global_BuyInfo, 2);
	TextDrawSetProportional(Global_BuyInfo, 1);
	TextDrawSetShadow(Global_BuyInfo, 0);

	return 1;
}

ShowBuyInfo(playerid, text[], price)
{
	new string[126];
	format(string, sizeof(string), "~y~Você está prestes a comprar um(a) ~w~%s ~y~por ~g~%s.", text, FormatNumber(price));

	for(new i = 0; i < strlen(string); i++)
	{
		if(string[i] == ' ')
		{
			string[i] = '_';
		}
	}

	PlayerTextDrawSetString(playerid, Player_BuyInfo, FixASCII(string));

	PlayerTextDrawShow(playerid, Player_BuyInfo);
	TextDrawShowForPlayer(playerid, Global_BuyInfo);

	return 1;
}

HideBuyInfo(playerid)
{
	PlayerTextDrawHide(playerid, Player_BuyInfo);
	TextDrawHideForPlayer(playerid, Global_BuyInfo);

	return 1;
}

CopyFurnitureName(playerid, furniturename[])
{
	if(!strlen(furniturename))
		return SetPVarString(playerid, "CloneFurnitureName", "Error - [-1]");

	new 
		copyname[128],
		pos = strfind(furniturename, " - ["),
		len = strlen(furniturename)
	;

	if(pos != -1)
	{	
		new snumber[5]; //not necessary, but...

		for(new i = pos; i < len; i++)
		{
			if(furniturename[i] < '0' || furniturename[i] > '9')
				continue;
			
			format(snumber, 5, "%s%c", snumber, furniturename[i]);
		}
		furniturename[pos] = 0;

		format(copyname, sizeof(copyname), "%s - [%d]", furniturename, strval(snumber) + 1);
	}
	else
	{
		format(copyname, sizeof(copyname), "%s - [1]", furniturename);
	}

	SetPVarString(playerid, "CloneFurnitureName", copyname);

	return 1;
}

Sewer_Create(playerid, name[])
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		GetXYInFrontOfPlayer(playerid, x, y, 2.5);

		new i;
		if((i = Iter_Free(Sewer)) < MAX_SEWER)
		{
			SewerData[i][sewerExists] = true;

			format(SewerData[i][sewerName], 32, name);

			SewerData[i][sewerX] = x;
			SewerData[i][sewerY] = y;
			SewerData[i][sewerZ] = z;

			SewerData[i][sewerRX] = 0.0;
			SewerData[i][sewerRY] = 0.0;
			SewerData[i][sewerRZ] = 0.0;

			Sewer_Refresh(i);
			mysql_tquery(this, "INSERT INTO sewers (sewerID) VALUES (null)", "OnSewerCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 15;
			PlayerData[playerid][pSelectedSlot] = i;
			EditDynamicObject(playerid, SewerData[i][sewerObject]);

			Iter_Add(Sewer, i);

			return i;
		}
	}
	
	return -1;
}

Sewer_Delete(sewerid)
{
	if(sewerid == -1 || !SewerData[sewerid][sewerExists])
		return 0;

	if(IsValidDynamicObject(SewerData[sewerid][sewerObject]))
	{
		DestroyDynamicObject(SewerData[sewerid][sewerObject]);
	}

	new query[64];

	mysql_format(this, query, sizeof(query), "DELETE FROM sewers WHERE sewerID = '%d'", SewerData[sewerid][sewerID]);
	mysql_tquery(this, query);

	SewerData[sewerid][sewerExists] = false;

	Iter_Remove(Sewer, sewerid);

	return 1;
}

Sewer_Save(sewerid)
{
	if(sewerid == -1 || !SewerData[sewerid][sewerExists])
		return 0;

	new query[245];

	mysql_format(this, query, sizeof(query), "UPDATE sewers SET sewerName = '%e', sewerX = '%f', sewerY = '%f', sewerZ = '%f', sewerRX = '%f', sewerRY = '%f', sewerRZ = '%f' WHERE sewerID = '%d'", 
		SewerData[sewerid][sewerName], SewerData[sewerid][sewerX], SewerData[sewerid][sewerY], SewerData[sewerid][sewerZ], SewerData[sewerid][sewerRX], SewerData[sewerid][sewerRY], SewerData[sewerid][sewerRZ], SewerData[sewerid][sewerID]);

	return mysql_tquery(this, query);
}

Sewer_Refresh(sewerid)
{
	if(sewerid == -1 || !SewerData[sewerid][sewerExists])
		return 0;

	if(IsValidDynamicObject(SewerData[sewerid][sewerObject]))
	{
		DestroyDynamicObject(SewerData[sewerid][sewerObject]);
	}

	SewerData[sewerid][sewerObject] = CreateDynamicObject(2986, SewerData[sewerid][sewerX], SewerData[sewerid][sewerY], SewerData[sewerid][sewerZ], SewerData[sewerid][sewerRX], SewerData[sewerid][sewerRY], SewerData[sewerid][sewerRZ]);

	return 1;
}

Sewer_Nearest(playerid)
{
	foreach(new i : Sewer) if(SewerData[i][sewerExists] && GetPlayerVirtualWorld(playerid) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, SewerData[i][sewerX], SewerData[i][sewerY], SewerData[i][sewerZ]))
			return i;
	}

	return -1;
}

CanBeTaxi(modelid)
{
	switch(modelid)
	{
		case 420, 586, 560, 438, 550, 445, 540: return 1;
	}
	return 0;
}

SetPlayerCellphoneAction(playerid, bool:enable)
{
	if(PlayerData[playerid][pState] != PLAYER_STATE_ALIVE && PlayerData[playerid][pCuffed] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE && IsPlayerAttachedObjectSlotUsed(playerid, 8))
		return 0;

	if(enable)
	{
		if(PlayerData[playerid][pCellphoneItem] == 330)
		{
			SetPlayerAttachedObject(playerid, 8, PlayerData[playerid][pCellphoneItem], 6, 0.019, -0.007, 0, 5.1, 0, 0);
		}
		else
		{
			SetPlayerAttachedObject(playerid, 8, PlayerData[playerid][pCellphoneItem], 6, 0.1, 0.012, 0.006, -92.0999, 0, 161.9);
		}

		if(IsDoorVehicle(GetPlayerVehicleID(playerid)))
		{
			ApplyAnimation(playerid, "CAR_CHAT", "carfone_in", 4.1, 0, 0, 0, 1, 0, 1);
		}
		else
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		}
	}
	else
	{
		RemovePlayerAttachedObject(playerid, 8);
		if(IsDoorVehicle(GetPlayerVehicleID(playerid)))
		{
			ApplyAnimation(playerid, "CAR_CHAT", "carfone_out", 4.1, 0, 0, 0, 0, 0, 1);
		}
		else
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}

	return 1;
}

GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if(time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while(time >= 60)
	{
		minutes++;
		time -= 60;
	}
	return (seconds = time);
}

RemoveBuildings(playerid)
{
	//DP LS
	RemoveBuildingForPlayer(playerid, 4192, 1591.699, -1674.849, 20.492, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1541.449, -1642.030, 13.046, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1541.739, -1638.910, 14.437, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1541.479, -1648.449, 14.437, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1546.869, -1658.339, 14.437, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1547.569, -1661.030, 13.046, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1546.599, -1664.630, 14.437, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1547.569, -1689.979, 13.046, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1546.869, -1687.099, 14.437, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1546.599, -1693.390, 14.437, 0.250);
	RemoveBuildingForPlayer(playerid, 646, 1545.520, -1678.839, 14.000, 0.250);
	RemoveBuildingForPlayer(playerid, 646, 1545.560, -1672.219, 14.000, 0.250);
	RemoveBuildingForPlayer(playerid, 646, 1553.869, -1677.729, 16.437, 0.250);
	RemoveBuildingForPlayer(playerid, 646, 1553.869, -1673.459, 16.437, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1541.300, -1702.599, 14.437, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1541.449, -1709.640, 13.046, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1541.449, -1713.300, 14.429, 0.250);

	//Garagem DP
	RemoveBuildingForPlayer(playerid, 4063, 1578.468, -1676.421, 13.070, 0.250);
	RemoveBuildingForPlayer(playerid, 1266, 1538.523, -1609.804, 19.843, 0.250);
	RemoveBuildingForPlayer(playerid, 4229, 1597.906, -1699.750, 30.210, 0.250);
	RemoveBuildingForPlayer(playerid, 4230, 1597.906, -1699.750, 30.210, 0.250);
	RemoveBuildingForPlayer(playerid, 3975, 1578.468, -1676.421, 13.070, 0.250);
	RemoveBuildingForPlayer(playerid, 1260, 1538.523, -1609.804, 19.843, 0.250);

	//Semáforos
	RemoveBuildingForPlayer(playerid, 1283, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1284, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1315, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1350, 0.0, 0.0, 0.0, 6000.0);

	//Fazendinha perto de Fort Carson(esquerda)
	RemoveBuildingForPlayer(playerid, 11618, -688.1172, 939.1797, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 11654, -681.8750, 965.8906, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 11490, -688.1172, 939.1797, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 11631, -691.5938, 942.7188, 13.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 11663, -688.1172, 939.1797, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 11666, -688.1406, 934.8203, 14.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 11664, -685.0938, 941.9141, 13.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 11665, -685.1719, 935.6953, 13.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 11492, -681.8750, 965.8906, 11.1250, 0.25);

	//Casinha do cartél de cali
	RemoveBuildingForPlayer(playerid, 16626, 694.4141, 1973.8359, 4.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 16388, 694.4141, 1973.8359, 4.5313, 0.25);

	//mod shops
	RemoveBuildingForPlayer(playerid, 5340, 2644.8594, -2039.2344, 14.0391, 1.0);
	RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 1.0);
	RemoveBuildingForPlayer(playerid, 10575, -2716.3516, 217.4766, 5.3828, 1.0);
	RemoveBuildingForPlayer(playerid, 11313, -1935.8594, 239.5313, 35.3516, 1.0);
	RemoveBuildingForPlayer(playerid, 9093, 2386.6563, 1043.6016, 11.5938, 1.0);

	//pay n sprays
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 1.0);
	RemoveBuildingForPlayer(playerid, 5856, 1024.9844, -1029.3516, 33.1953, 1.0);
	RemoveBuildingForPlayer(playerid, 6400, 488.2813, -1734.6953, 12.3906, 1.0);
	RemoveBuildingForPlayer(playerid, 11319, -1904.5313, 277.8984, 42.9531, 1.0);
	RemoveBuildingForPlayer(playerid, 9625, -2425.7266, 1027.9922, 52.2813, 1.0);
	RemoveBuildingForPlayer(playerid, 7891, 1968.7422, 2162.4922, 12.0938, 1.0);
	RemoveBuildingForPlayer(playerid, 13028, 720.0156, -462.5234, 16.8594, 1.0);
	RemoveBuildingForPlayer(playerid, 3294, -1420.5469, 2591.1563, 57.7422, 1.0);
	RemoveBuildingForPlayer(playerid, 3294, -100.0000, 1111.4141, 21.6406, 1.0);

	//bomb shops
	RemoveBuildingForPlayer(playerid, 5043, 1843.3672, -1856.3203, 13.8750, 1.0);
	RemoveBuildingForPlayer(playerid, 7707, 2006.0000, 2317.6016, 11.3125, 1.0);
	RemoveBuildingForPlayer(playerid, 7709, 2006.0000, 2303.7266, 11.3125, 1.0);

	//Lixo e árvore no meio do banco... By: Pedro
	RemoveBuildingForPlayer(playerid, 700, 1466.0156, -1264.3672, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2092.6875, -2043.3984, 15.0703, 0.25);

	//Pumps
	RemoveBuildingForPlayer(playerid, 1676, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1686, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 3465, 0.0, 0.0, 0.0, 6000.0);

	//LS Mall
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 10.0);
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 10.0);
	RemoveBuildingForPlayer(playerid, 762, 1175.3594, -1420.1875, 19.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1166.3516, -1417.6953, 13.9531, 0.25);

	//Prision exterior
	RemoveBuildingForPlayer(playerid, 3682, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1392.1563, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1390.5703, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1387.8516, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 203.9531, 1409.9141, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 199.3828, 1407.1172, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 204.6406, 1409.8516, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1404.2344, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1400.6563, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1409.0000, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 16086, 232.2891, 1434.4844, 13.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 183.0391, 1455.7500, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 198.0000, 1462.0156, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.2422, 1460.3203, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.3047, 1461.0078, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 199.5859, 1463.7266, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 181.1563, 1463.7266, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 185.9219, 1462.8750, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 202.3047, 1462.8750, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 189.5000, 1462.8750, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1451.8281, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1454.5469, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1456.1328, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1468.2109, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1464.6328, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 247.5547, 1471.0938, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1472.9766, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.8125, 1473.8281, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.1250, 1473.8906, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 16089, 342.1250, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16090, 315.7734, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16091, 289.7422, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16087, 358.6797, 1430.4531, 11.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 16088, 368.4297, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16092, 394.1563, 1431.0938, 5.2734, 0.25);

	//Park Verona Mall
	RemoveBuildingForPlayer(playerid, 6069, 1093.8750, -1630.0156, 20.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 6070, 1093.6406, -1619.1641, 15.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 6194, 1116.6250, -1542.9063, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1057.4297, -1630.2813, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1075.6328, -1630.2813, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1065.4609, -1620.7891, 19.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1061.5313, -1617.5234, 19.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1075.6328, -1607.9609, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1093.2734, -1630.2813, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 6060, 1093.8750, -1630.0156, 20.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 6110, 1093.8750, -1630.0156, 20.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1112.2422, -1630.2813, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 6061, 1093.6406, -1619.1641, 15.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3586, 1106.7734, -1619.2578, 15.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1093.2734, -1607.9609, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1112.2422, -1607.9609, 19.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 6062, 1137.1484, -1631.2891, 14.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 5811, 1131.1953, -1380.4219, 17.0703, 0.25);	
	RemoveBuildingForPlayer(playerid, 1440, 1148.6797, -1385.1875, 13.2656, 0.25);

	//Food Machines
	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

	//Posto Sul
	RemoveBuildingForPlayer(playerid, 5535, 1918.8516, -1776.3281, 16.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 5409, 1918.8516, -1776.3281, 16.9766, 0.25);

	//Unity Park
	RemoveBuildingForPlayer(playerid, 4975, 1891.7422, -1872.2813, 14.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 4858, 1891.7422, -1872.2813, 14.8594, 0.25);

	//Celas sem colisão dos department sheriffs
	RemoveBuildingForPlayer(playerid, 14883, 320.8672, 314.2109, 1000.1484, 0.25);

	return 1;
}

SetPlayerFreezed(playerid, bool:status)
{
	if(!status)
	{
		TogglePlayerControllable(playerid, 1);
		PlayerData[playerid][pFreezed] = false;
	}
	else
	{
		TogglePlayerControllable(playerid, 0);
		PlayerData[playerid][pFreezed] = true;
	}

	return 1;
}

ShowCharacterStats(playerid, playerb)
{
	new spawn[64], vip[32];

	switch(PlayerData[playerid][pSpawn])
	{
		case 0:
		{
			format(spawn, sizeof(spawn), "Padrão");
		}
		case 1:
		{
			format(spawn, sizeof(spawn), "Facção");
		}
		case 2:
		{
			format(spawn, sizeof(spawn), "Emprego");
		}
		default:
		{
			new houseid = GetHouseByID(PlayerData[playerid][pSpawn] - 1000);

			format(spawn, sizeof(spawn), "%s", HouseData[houseid][houseAddress]);
		}
	}

	if(!PlayerData[playerid][pVip])
	{
		format(vip, sizeof(vip), "Inativo");
	}
	else
	{
		new hora, minuto, segundo, dia, mes, ano;
		TimestampToDate(PlayerData[playerid][pVipTime], ano, mes, dia, hora, minuto, segundo);

		format(vip, sizeof(vip), "%s %02d/%02d, %02d:%02d", Prime_GetType(PlayerData[playerid][pVip]), dia, mes, hora, minuto);
	}

	SendClientMessageEx(playerb, COLOR_DARKGREEN, "|__________________ %s (%s) __________________|", ReturnName(playerid), ReturnDate());

	SendClientMessageEx(playerb, COLOR_RP1, "CONTA | Facção:[%s(%d)] Rank:[%s] Emprego:[%s]", Faction_GetName(playerid), PlayerData[playerid][pFaction], Faction_GetRank(playerid), ReturnJobName(PlayerData[playerid][pJob]));
	SendClientMessageEx(playerb, COLOR_RP2, "INVENTÁRIO | Celular:[%s] Rádio:[%s] Máscara:[%s]", (!Inventory_HasItem(playerid, "Celular")) ? ("Não") : ("Sim"), (!Inventory_HasItem(playerid, "Rádio Portátil")) ? ("Não") : ("Sim"), (!PlayerData[playerid][pMask]) ? ("Não") : ("Sim"));
	SendClientMessageEx(playerb, COLOR_RP1, "ARMAS | Pistola:[%s] Munição:[%d] Rifle:[%s] Munição:[%d]", ReturnWeaponName(PlayerData[playerid][pWeapon][2]), PlayerData[playerid][pAmmo][2], ReturnWeaponName(PlayerData[playerid][pWeapon][5]), PlayerData[playerid][pAmmo][5]);
	SendClientMessageEx(playerb, COLOR_RP2, "ESTATISTICAS | Level:[%d] Experiência:[%d/%d] Tempo Conectado:[%d]", PlayerData[playerid][pLevel], PlayerData[playerid][pEXP], ((PlayerData[playerid][pLevel]) * 4 + 2), PlayerData[playerid][pTimePlayed]);
	SendClientMessageEx(playerb, COLOR_RP1, "FINANÇAS | Dinheiro:[%s] Banco:[%s] Poupança:[%s] Salário:[%s]", FormatNumber(GetScriptedMoney(playerid)), FormatNumber(PlayerData[playerid][pBank]), FormatNumber(PlayerData[playerid][pSavings]), FormatNumber(GetPlayerPaycheck(playerid)));
	SendClientMessageEx(playerb, COLOR_RP2, "PROPRIEDADES | Casas:[%d] Empresas:[%d] Carros:[%d]", House_GetCount(playerid), Business_GetCount(playerid), Vehicle_GetCount(playerid));
	SendClientMessageEx(playerb, COLOR_RP1, "OUTROS | Spawn:[%s] Prime:[%s] Acessórios:[%d/%d] BlockedMoney:[%s]", spawn, vip, Attach_GetCount(playerid), Attach_GetSlots(playerid), FormatNumber(PlayerData[playerid][pMoneyBlocked]));

	if(PlayerData[playerb][pAdmin])
	{
		SendClientMessageEx(playerb, COLOR_RP2, "ADMIN | Admin:[%d] IP:[%s] LastLogin:[%s] Interior:[%d] VW:[%d]", PlayerData[playerid][pAdmin], (PlayerData[playerb][pAdmin] >= PlayerData[playerid][pAdmin]) ? (PlayerIP(playerid)) : ("NOPERM"), PlayerData[playerid][pLastLogin], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	}

	SendClientMessageEx(playerb, COLOR_DARKGREEN, "|__________________ %s (%s) __________________|", ReturnName(playerid), ReturnDate());

	return 1;
}

ShowPlayerLicenses(playerid, outro_jogador)
{
	if(outro_jogador == playerid)
	{
		SendClientMessage(playerid, COLOR_WHITE, "|__________ Meu Registro de Licenças __________|");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "|__________ Registro de Licenças de %s __________|", ReturnName(outro_jogador, 0));
	}
	
	SendClientMessageEx(playerid, COLOR_WHITE, "Nome: %s", ReturnName(outro_jogador, 0));
	SendClientMessageEx(playerid, COLOR_WHITE, "Sexo: %s", (PlayerData[outro_jogador][pSex] == 1) ? ("Masculino") : ("Feminino"));
	SendClientMessageEx(playerid, COLOR_WHITE, "Licença terreste: %s", (PlayerData[outro_jogador][pCarLicense] == 1) ? ("{32CD32}registrado.") : ("{FF6347}não registrado."));
	SendClientMessageEx(playerid, COLOR_WHITE, "Licença navegação: %s", (PlayerData[outro_jogador][pBoatLicense] == 1) ? ("{32CD32}registrado.") : ("{FF6347}não registrado."));
	SendClientMessageEx(playerid, COLOR_WHITE, "Licença aérea: %s", (PlayerData[outro_jogador][pFlyLicense] == 1) ? ("{32CD32}registrado.") : ("{FF6347}não registrado."));

	return 1;
}

GetPlayerAdmin(playerid, level)
{
	if(PlayerData[playerid][pAdmin] >= level)
	{
		if(!PlayerData[playerid][pAdminStatus] && PlayerData[playerid][pAdmin] != ADMIN_HeadStaff && PlayerData[playerid][pAdmin] != ADMIN_LeadStaff && PlayerData[playerid][pAdmin] != ADMIN_Management)
		{
			return 0;
		}

		return 1;
	}

	return 0;
}

SetPlayerBenefits(playerid)
{
	if(!PlayerData[playerid][pVip])
		return 0;

	switch(PlayerData[playerid][pVip])
	{
		case 1:
		{
			PlayerData[playerid][pNameChange] += 1;
		}
		case 2:
		{
			PlayerData[playerid][pNameChange] += 2;
			PlayerData[playerid][pCustomPlate] += 1;
		}
		case 3:
		{
			PlayerData[playerid][pNameChange] += 3;
			PlayerData[playerid][pCustomPlate] += 1;
		}
	}

	return 1;
}

Player_CreateTD(playerid)
{
	PlayerData[playerid][pTextdraw][0] = CreatePlayerTextDraw(playerid, 327.000000, 424.000000, "Texto inferior");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraw][0], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraw][0], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraw][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraw][0], 0.460000, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraw][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraw][0], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraw][0], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraw][0], 0);

	PlayerData[playerid][pTextdraw][1] = CreatePlayerTextDraw(playerid, 616.000000, 240.000000, "mdl-1015:thirst");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraw][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraw][1], 20.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraw][1], 1);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraw][1], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraw][1], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraw][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraw][1], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraw][1], 4);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraw][1], 0);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraw][1], 0);

	PlayerData[playerid][pTextdraw][2] = CreatePlayerTextDraw(playerid, 626.000000, 257.000000, "100");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraw][2], 0.167999, 0.741333);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraw][2], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraw][2], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraw][2], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraw][2], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraw][2], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraw][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraw][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraw][2], 0);

	PlayerData[playerid][pTextdraw][3] = CreatePlayerTextDraw(playerid, 616.000000, 268.000000, "mdl-1015:hunger");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraw][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraw][3], 20.000000, 20.000000);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraw][3], 1);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraw][3], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraw][3], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraw][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraw][3], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraw][3], 4);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraw][3], 0);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraw][3], 0);

	PlayerData[playerid][pTextdraw][4] = CreatePlayerTextDraw(playerid, 626.000000, 284.000000, "100");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraw][4], 0.167999, 0.741333);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraw][4], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraw][4], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraw][4], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraw][4], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraw][4], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraw][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraw][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraw][4], 0);

	PlayerData[playerid][pTextdraw][5] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~g~Tempo Preso:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraw][5], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraw][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraw][5], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraw][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraw][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraw][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraw][5], 0);

	PlayerData[playerid][pTextdraw][6] = CreatePlayerTextDraw(playerid, 13.000000, 431.000000, "~y~Destino:~w~ Calculando...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraw][6], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraw][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraw][6], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraw][6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraw][6], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraw][6], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraw][6], 0);

	return 1;
}

ShowHungryTextdraw(playerid, enable)
{
	if(!enable)
	{
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraw][1]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraw][2]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraw][3]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraw][4]);
	}
	else
	{
		if(!PlayerData[playerid][pTogHUD] && PlayerData[playerid][pJailTime] < 1)
		{
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraw][1]);
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraw][2]);

			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraw][3]);
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraw][4]);
		}		
	}
	return 1;
}

IsPlayerNearMailBox(playerid)
{
	for(new i = 0; i < sizeof(Mailboxes); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, Mailboxes[i][0], Mailboxes[i][1], Mailboxes[i][2]))
			return 1;
	}
	return 0;
}

ResetPlayerRob(playerid)
{
	if(!PlayerData[playerid][pRobbing])
		return 0;

	KillTimer(PlayerData[playerid][pRobbingTime]);
	SetPlayerFreezed(playerid, false);

	new id = PlayerData[playerid][pRobbingID];

	switch(PlayerData[playerid][pRobbing])
	{
		case ROBBING_ATM: 
		{
			ATMData[id][atmBeingRobbed] = 0;
		}
	}
	
	//Reset player rob data;
	PlayerData[playerid][pRobbing] = 0;
	PlayerData[playerid][pRobbingID] = -1;

	return 1;
}

ShowPlayerLog(playerid, uid, page)
{
	if(uid == -1)
		return 0;

	PlayerData[playerid][pPage] = page; page--;

	new query[151];

	mysql_format(this, query, sizeof(query), "SELECT (SELECT Name FROM players WHERE UserID = '%d') as PlayerName, player_log.* FROM player_log WHERE PlayerID = '%d' ORDER BY LogID DESC", uid, uid);
	mysql_tquery(this, query, "OnAdminRequestLog", "dd", playerid, page);

	return 1;
}

SetPlayerDialog(playerid, option[])
{
	if(!strcmp(option, "search_log")) 
	{
		new line_too_long[340];
		format(line_too_long, sizeof(line_too_long), "registros da data pesquisada serão mostrados)\n\t2. Assuntos específicos devem ser pesquisados com o nome da situação.\nExemplo: Kick, Ban, Dinheiro, Punição, etc...\nObs: Para pesquisar data e assunto, use o parâmetro: DD/MM/AAAA, HH:MM:SS|Assunto.\n\n45 resultados em ordem decrescente serão exibidos.");
		Dialog_Show(playerid, Player_Log_Search, DIALOG_STYLE_INPUT, "Procurar por registro", "{FFFFFF}Siga os modelos abaixo para maior precisão em sua busca:\n\tUtilize:\t1. DD/MM/AAAA, HH:MM:SS para localizar o dia com precisão (todos os\n%s", "Pesquisar", "Voltar", line_too_long);
	}
	else {
		SendWarningMessage(playerid, "[SetPlayerDialog] Warning: no request for \"%s\"", option);
	}
	return 1;
}

Tower_Save(towerid)
{
	if(towerid == -1 || !TowerData[towerid][towerExists])
		return 0;

	new query[324];
	mysql_format(this, query, sizeof(query), "UPDATE cellphone_towers SET towerSignal = '%f', towerX = '%f', towerY = '%f', towerZ = '%f', towerRX = '%f', towerRY = '%f', towerRZ = '%f', towerName = '%e' WHERE towerID = '%d'",
		TowerData[towerid][towerSignal], TowerData[towerid][towerX], TowerData[towerid][towerY], TowerData[towerid][towerZ], TowerData[towerid][towerRX], TowerData[towerid][towerRY], TowerData[towerid][towerRZ], TowerData[towerid][towerName], TowerData[towerid][towerID]);
	mysql_tquery(this, query);

	return 1;
}

Tower_Delete(towerid)
{
	if(towerid == -1 || !TowerData[towerid][towerExists])
		return 0;

	TowerData[towerid][towerExists] = false;

	if(IsValidDynamicObject(TowerData[towerid][towerObject]))
		DestroyDynamicObject(TowerData[towerid][towerObject]);

	new query[64];
	mysql_format(this, query, sizeof(query), "DELETE FROM cellphone_towers WHERE towerID = '%d'", TowerData[towerid][towerID]);
	mysql_tquery(this, query);

	Iter_Remove(Towers, towerid);

	return 1;
}

Tower_Create(playerid, towername[])
{
	new Float:x, Float:y, Float:z, Float:angle;

	if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		new i;
		if((i = Iter_Free(Towers)) < MAX_TOWERS)
		{
			TowerData[i][towerExists] = true;

			format(TowerData[i][towerName], 64, towername);

			x += 4.0 * floatsin(-angle, degrees);
			y += 4.0 * floatcos(-angle, degrees);

			TowerData[i][towerSignal] = 650.0;

			TowerData[i][towerX] = x;
			TowerData[i][towerY] = y;
			TowerData[i][towerZ] = z;

			TowerData[i][towerRX] = 0.0;
			TowerData[i][towerRY] = 0.0;
			TowerData[i][towerRZ] = 0.0;

			Tower_Refresh(i);
			mysql_tquery(this, "INSERT INTO cellphone_towers (towerID) VALUES (null)", "OnTowerCreated", "d", i);

			PlayerData[playerid][pEditingMode] = 16;
			PlayerData[playerid][pSelectedSlot] = i;
			EditDynamicObject(playerid, TowerData[i][towerObject]);

			Iter_Add(Towers, i);

			return i;
		}
	}

	return -1;
}

Tower_Nearest(playerid)
{
	foreach(new i : Towers) if(TowerData[i][towerExists])
	{
		if(IsPlayerInRangeOfPoint(playerid, TowerData[i][towerSignal], TowerData[i][towerX], TowerData[i][towerY], TowerData[i][towerZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
			return i;
	}
	return -1;
}

Tower_Refresh(towerid)
{
	if(towerid != -1 && TowerData[towerid][towerExists])
	{
		if(IsValidDynamicObject(TowerData[towerid][towerObject]))
			DestroyDynamicObject(TowerData[towerid][towerObject]);

		TowerData[towerid][towerObject] = CreateDynamicObject(3763, TowerData[towerid][towerX], TowerData[towerid][towerY], TowerData[towerid][towerZ], TowerData[towerid][towerRX], TowerData[towerid][towerRY], TowerData[towerid][towerRZ]);
		
		return 1;
	}
	return 0;
}

Tog_ShowList(playerid)
{
	sz_MiscString[0] = 0;

	format(sz_MiscString, sizeof(sz_MiscString), "Opção\tStatus");

	//fac 
	format(sz_MiscString, sizeof(sz_MiscString), "%s\nMensagens da Facção\t%s", sz_MiscString, PlayerData[playerid][pTogFaction] ? ("{AEAEAE}Desabilitado") : ("Habilitado"));

	//noticias
	format(sz_MiscString, sizeof(sz_MiscString), "%s\nMensagens de Notícias\t%s", sz_MiscString, PlayerData[playerid][pTogNews] ? ("{AEAEAE}Desabilitado") : ("Habilitado"));

	//anúncios
	format(sz_MiscString, sizeof(sz_MiscString), "%s\nMensagens de Anúncios\t%s", sz_MiscString, PlayerData[playerid][pTogAd] ? ("{AEAEAE}Desabilitado") : ("Habilitado"));

	//admins
	format(sz_MiscString, sizeof(sz_MiscString), "%s\nMensagens da Administração\t%s", sz_MiscString, PlayerData[playerid][pTogAdmin] ? ("{AEAEAE}Desabilitado") : ("Habilitado"));

	//pms
	format(sz_MiscString, sizeof(sz_MiscString), "%s\nMensagens de Particulares\t%s", sz_MiscString, PlayerData[playerid][pTogPM] ? ("{AEAEAE}Desabilitado") : ("Habilitado"));

	//hud vida e fome
	format(sz_MiscString, sizeof(sz_MiscString), "%s\nHUD de Vida e Fome\t%s", sz_MiscString, PlayerData[playerid][pTogHUD] ? ("{AEAEAE}Desabilitado") : ("Habilitado"));

	//hitmark
	format(sz_MiscString, sizeof(sz_MiscString), "%s\nHitmarker\t%s", sz_MiscString, PlayerData[playerid][pTogHitmark] ? ("{AEAEAE}Desabililtado") : ("Habilitado"));

	Dialog_Show(playerid, Tog_Player, DIALOG_STYLE_TABLIST_HEADERS, "Menu de personalização do jogador", sz_MiscString, "Selecionar", "Cancelar");

	return 1;
}

Boombox_Place(playerid)
{
	new Float:p_angle;

	GetPlayerFacingAngle(playerid, p_angle);
	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);

	static const f_string_1[] = "Boombox\nProprietário: %s\n('/boombox')";

	new string_1[sizeof(f_string_1)-2+24];

	format(string_1, sizeof(string_1), f_string_1, ReturnName(playerid, 0));

	BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, p_angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
	BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel(string_1, COLOR_WHITE, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}

Boombox_Nearest(playerid)
{
	foreach(new i : Player) if(BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 15.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2]))
		return i;

	return INVALID_PLAYER_ID;
}

Boombox_SetURL(playerid, url[])
{
	if(BoomboxData[playerid][boomboxPlaced])
	{
		strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

		foreach(new i : Player) if(PlayerData[i][pBoombox] == playerid)
		{
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 15.0, 1);
		}
	}

	return 1;
}

Boombox_Destroy(playerid)
{
	if(BoomboxData[playerid][boomboxPlaced])
	{
		if(IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
			DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if(IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
			DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach(new i : Player) if(PlayerData[i][pBoombox] == playerid)
			StopAudioStreamForPlayer(i);

		BoomboxData[playerid][boomboxPlaced] = false;
		BoomboxData[playerid][boomboxInterior] = 0;
		BoomboxData[playerid][boomboxWorld] = 0;
	}

	return 1;
}

Complex_Create(playerid, complexname[])
{
	new Float:x, Float:y, Float:z;

	if(GetPlayerPos(playerid, x, y, z))
	{		
		new i = -1;
		if((i = Iter_Free(Complex)) < MAX_COMPLEX)
		{
			ComplexData[i][complexExists] = true;

			format(ComplexData[i][complexName], 64, complexname);

			ComplexData[i][complexX] = x;
			ComplexData[i][complexY] = y;
			ComplexData[i][complexZ] = z;

			ComplexData[i][complexIntX] = 0.0;
			ComplexData[i][complexIntY] = 0.0;
			ComplexData[i][complexIntZ] = 0.0;

			ComplexData[i][complexInterior] = 0;
			ComplexData[i][complexVW] = 0;

			ComplexData[i][complexLocked] = 1;

			mysql_tquery(this, "INSERT INTO complex (complexID) VALUES (null)", "OnComplexCreated", "d", i);

			Iter_Add(Complex, i);	

			return i;
		}
	}

	return -1;
}

Complex_Save(complexid)
{
	if(complexid == -1 || !ComplexData[complexid][complexExists])
		return 0;

	new query[337];

	mysql_format(this, query, sizeof(query), "UPDATE complex SET complexName = '%e', complexX = '%f', complexY = '%f', complexZ = '%f', complexIntX = '%f', complexIntY = '%f', complexIntZ = '%f', complexLocked = '%d', complexInterior = '%d', complexVW = '%d' WHERE complexID = '%d'",
		ComplexData[complexid][complexName], ComplexData[complexid][complexX], ComplexData[complexid][complexY], ComplexData[complexid][complexZ], ComplexData[complexid][complexIntX], ComplexData[complexid][complexIntY], ComplexData[complexid][complexIntZ], ComplexData[complexid][complexLocked], ComplexData[complexid][complexInterior], ComplexData[complexid][complexVW], ComplexData[complexid][complexID]);
	mysql_tquery(this, query);

	return 1;
}

Complex_Delete(playerid, complexid)
{
	if(complexid == -1 || !ComplexData[complexid][complexExists])
		return 0;

	if(IsValidDynamicPickup(ComplexData[complexid][complexPickup]))
		DestroyDynamicPickup(ComplexData[complexid][complexPickup]);

	if(IsValidDynamic3DTextLabel(ComplexData[complexid][complexLabel]))
		DestroyDynamic3DTextLabel(ComplexData[complexid][complexLabel]);

	foreach(new i : Houses) if(HouseData[i][houseExists] && HouseData[i][houseComplex] == ComplexData[complexid][complexID])
	{
		House_Delete(i, playerid, 1);
		Iter_SafeRemove(Houses, i, i);
	}

	new query[54];
	mysql_format(this, query, sizeof(query), "DELETE FROM complex WHERE complexID = '%d'", ComplexData[complexid][complexID]);
	mysql_tquery(this, query);

	ComplexData[complexid][complexExists] = false;

	Iter_Remove(Complex, complexid);

	return 1;
}

Complex_Refresh(complexid)
{
	if(complexid == -1 || !ComplexData[complexid][complexExists])
		return 0;

	if(IsValidDynamicPickup(ComplexData[complexid][complexPickup]))
		DestroyDynamicPickup(ComplexData[complexid][complexPickup]);

	if(IsValidDynamic3DTextLabel(ComplexData[complexid][complexLabel]))
		DestroyDynamic3DTextLabel(ComplexData[complexid][complexLabel]);

	new string[64+19];

	format(string, sizeof(string), "%s\n('F' para entrar)", ComplexData[complexid][complexName]);

	ComplexData[complexid][complexPickup] = CreateDynamicPickup(1314, 23, ComplexData[complexid][complexX], ComplexData[complexid][complexY], ComplexData[complexid][complexZ]);
	ComplexData[complexid][complexLabel] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ComplexData[complexid][complexX], ComplexData[complexid][complexY], ComplexData[complexid][complexZ], 6.5);

	return 1;
}

Complex_Nearest(playerid)
{
	foreach(new i : Complex) if(ComplexData[i][complexExists] && IsPlayerInRangeOfPoint(playerid, 2.0, ComplexData[i][complexX], ComplexData[i][complexY], ComplexData[i][complexZ]))
		return i;

	return -1;
}

Complex_Inside(playerid)
{
	if(PlayerData[playerid][pComplex] != -1)
	{
		foreach(new i : Complex) if(ComplexData[i][complexExists] && ComplexData[i][complexID] == PlayerData[playerid][pComplex] && GetPlayerVirtualWorld(playerid) == ComplexData[i][complexVW] && GetPlayerInterior(playerid) == ComplexData[i][complexInterior])
			return i;
	}

	return -1;
}

Waypoint_Set(playerid, name[], Float:x, Float:y, Float:z)
{
	format(PlayerData[playerid][pLocation], 32, FixASCII(name));

	PlayerData[playerid][pWaypoint] = 1;

	PlayerData[playerid][pWaypointPos][0] = x;
	PlayerData[playerid][pWaypointPos][1] = y;
	PlayerData[playerid][pWaypointPos][2] = z;

	SetPlayerCheckpoint(playerid, x, y, z, 3.0);

	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraw][6], "~y~Destino:~w~ Calculando...");
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraw][6]);

	return 1;
}

Waypoint_Remove(playerid)
{
	if(PlayerData[playerid][pWaypoint])
	{
		PlayerData[playerid][pWaypoint] = 0;

		DisablePlayerCheckpoint(playerid);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraw][6]);
	}

	return 1;
}

Refund_GetType(type)
{
	new stype[18];

	switch(type)
	{
		case REFUND_WEAPON: stype = "Arma";
		case REFUND_MONEY: stype = "Dinheiro";
		case REFUND_VEHICLE: stype = "Veículo";
		case REFUND_LSD: stype = "Droga (LSD)";
		case REFUND_COCAINE: stype = "Droga (Cocaína)";
		case REFUND_MARIJUANA: stype = "Droga (Marijuana)";
		case REFUND_GUNPART: stype = "Gunparts";
		default: stype = "not found";
	}

	return stype;
}

IsAnAirplane(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(g_aVehicleType[model - 400] == VEHICLE_TYPE_AIRPLANE)
		return 1;

	return 0;
}

stock IsABoat(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(g_aVehicleType[model - 400] == VEHICLE_TYPE_BOAT)
		return 1;

	return 0;
}

IsABike(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(g_aVehicleType[model - 400] == VEHICLE_TYPE_BIKE)
		return 1;

	return 0;
}

stock IsASpecialCar(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(g_aVehicleType[model - 400] == VEHICLE_TYPE_SPECIAL)
		return 1;

	return 0;
}

stock IsATrailer(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(g_aVehicleType[model - 400] == VEHICLE_TYPE_TRAILER)
		return 1;

	return 0;
}

IsATruck(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(g_aVehicleType[model - 400] == VEHICLE_TYPE_TRUCK)
		return 1;

	return 0;
}

IsACar(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(g_aVehicleType[model - 400] == VEHICLE_TYPE_CAR)
		return 1;

	return 0;
}

RandomizeWord(const word[])
{
	new tmp, r;

	static string[144];
	format(string, sizeof(string), word);

	for(new i = strlen(string) - 1; i >= 0; i--)
	{
		r = random(strlen(string));
		tmp = string[i];
		string[i] = string[r];
		string[r] = tmp;
	}

	return string;
}
	
// ============================================================== LOGS ========================================================== //
Log_Write(userid, const text[], {Float,_}:...)
{
	static args, str[256], query[350];

	if((args = numargs()) <= 2)
	{
		mysql_format(this, query, sizeof(query), "INSERT INTO player_log VALUES (null, '%d', '%e')", userid, text);
		mysql_tquery(this, query);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL			5
			#emit LOAD.alt 		args
			#emit SHL.C.alt 	2
			#emit ADD.C 		12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		256
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		mysql_format(this, query, sizeof(query), "INSERT INTO player_log VALUES (null, '%d', '%e')", userid, str);
		mysql_tquery(this, query);

		#emit RETN
	}
	return 1;
}

// ============================================================== TIMESTAMPTODATE =============================================================== //

TimestampToDate(unix_timestamp, &year, &month, &day, &hour, &minute, &second, utc_hour = GMT_TIME, utc_minute = 0) 
{ 
    static days_of_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}, next_year, ut_of_next_year; 
    static const unix_timestamp_by_year[] = 
    { 
        -315619200, -283996800, -252460800, -220924800, -189388800, -157766400, -126230400, -94694400, -63158400, -31536000, 
        0, 31536000, 63072000, 94694400, 126230400, 157766400, 189302400, 220924800, 252460800, 283996800, 
        315532800, 347155200, 378691200, 410227200, 441763200, 473385600, 504921600, 536457600, 567993600, 599616000, 
        631152000, 662688000, 694224000, 725846400, 757382400, 788918400, 820454400, 852076800, 883612800, 915148800, 
        946684800, 978307200, 1009843200, 1041379200, 1072915200, 1104537600, 1136073600, 1167609600, 1199145600, 1230768000, 
        1262304000, 1293840000, 1325376000, 1356998400, 1388534400, 1420070400, 1451606400, 1483228800, 1514764800, 1546300800, 
        1577836800, 1609459200, 1640995200, 1672531200, 1704067200, 1735689600, 1767225600, 1798761600, 1830297600, 1861920000, 
        1893456000, 1924992000, 1956528000, 1988150400, 2019686400, 2051222400, 2082758400, 2114380800, 2145916800, -2117514496 
    }; 
     
    if (!(-315619200 <= (unix_timestamp += (utc_hour * 3600) + (utc_minute * 60)) <= cellmax)) return; 

    next_year = floatround(1970 + (unix_timestamp / 86400) * 0.00273790926, floatround_floor) + 1; 
    ut_of_next_year = unix_timestamp_by_year[next_year - 1960]; 
    year = (!(next_year & 3) && ((next_year % 25) || !(next_year & 15))) && ut_of_next_year <= unix_timestamp <= ut_of_next_year + 86400 ? next_year : next_year - 1; 
    days_of_month[1] = (!(year & 3) && ((year % 25) || !(year & 15))) ? 29 : 28; 
    unix_timestamp -= unix_timestamp_by_year[year - 1960] + ((hour = (unix_timestamp / 3600) % 24) * 3600) + ((minute = (unix_timestamp / 60) % 60) * 60) + (second = unix_timestamp % 60); 
    day = (unix_timestamp / 86400) + 1; 

    for (new i; i != sizeof days_of_month; i++) 
    { 
        if ((day -= days_of_month[i]) > 0) continue; 

        day = !day ? days_of_month[i] : day + days_of_month[i]; 
        month = i + 1; 

        break; 
    } 
}  


// ============================================================== COMANDOS DO DISCORD  ========================================================== //

#include "./modules/discord.pwn"

// ============================================================== COMANDOS DOS GRUPOS =========================================================== //

CMD:grupo(playerid, params[])
{
	new options[16], moreoption[64];

	if(sscanf(params, "s[16]S()[64]", options, moreoption))
	{
		SendSyntaxMessage(playerid, "/grupo [opção]");
		return SendFormatMessage(playerid, COLOR_YELLOW, "Opções", "criar, gerenciar, ver, sair, roubo");
	}

	if(!strcmp(options, "criar"))
	{
		new name[64];

		if(sscanf(moreoption, "s[64]", name))
			return SendSyntaxMessage(playerid, "/grupo criar [nome]");

		if(PlayerData[playerid][pGroup] != -1)
			return SendWarningMessage(playerid, "Você já é integrante de um grupo.");

		new id = -1;

		id = Group_Create(playerid, name);

		if(id == -1)
			return SendWarningMessage(playerid, "O servidor já atingiu o limite máximo de grupos criados.");

		SendGreenMessage(playerid, "Você criou o grupo \"%s\", use /grupo gerenciar para abrir o menu.", name);
		SendWarningMessage(playerid, "Seu grupo irá expirar em 15 dias a partir da data de criação.");
	}
	else if(!strcmp(options, "gerenciar"))
	{
		if(PlayerData[playerid][pGroup] == -1)
			return SendWarningMessage(playerid, "Você precisa fazer parte de um grupo.");

		if(PlayerData[playerid][pGroupRank] != GroupData[PlayerData[playerid][pGroup]][groupRanks])
			return SendWarningMessage(playerid, "Você não é o líder de um grupo para poder gerenciar.");
	
		Dialog_Show(playerid, EditGroup, DIALOG_STYLE_LIST, "Escolha a opção para gerenciar:", "Alterar nome\nGerenciar membros\nGerenciar funções\n{FFFF00}Deletar grupo", "Selecionar", "Cancelar");
	}
	else if(!strcmp(options, "ver"))
	{
		if(PlayerData[playerid][pGroup] == -1)
			return SendWarningMessage(playerid, "Você precisa ser integrante de um grupo.");

		SendGreenMessage(playerid, "Você é integrante do grupo: \"%s\". Sua função é: %s.", Group_GetName(playerid), Group_GetRank(playerid));
	}
	else if(!strcmp(options, "sair"))
	{
		new playergroup = PlayerData[playerid][pGroup];

		if(playergroup == -1)
			return SendWarningMessage(playerid, "Você não é integrante de um grupo.");

		if(PlayerData[playerid][pGroupRank] == GroupData[playergroup][groupRanks])
			return SendWarningMessage(playerid, "Você é o líder desse grupo, use o menu (/grupo gerenciar) para realizar a exclusão.");

		SendGreenMessage(playerid, "Você saiu do grupo: \"%s\".", Group_GetName(playerid));

		SendGroupMessage(playergroup, COLOR_YELLOW, "* %s saiu do grupo.", ReturnName(playerid, 0));
		
		ResetGroup(playerid);
	}
	else if(!strcmp(options, "roubo"))
	{
		new playergroup = PlayerData[playerid][pGroup];

		if(playergroup == -1)
			return SendWarningMessage(playerid, "Você não é integrante de um grupo.");

		if(PlayerData[playerid][pGroupRank] != GroupData[PlayerData[playerid][pGroup]][groupRanks])
			return SendWarningMessage(playerid, "Você não é o líder de um grupo para poder gerenciar os roubos.");

		Dialog_Show(playerid, GroupRob, DIALOG_STYLE_LIST, "Planejar roubo", "Local de roubo%s\nExecução%s\nRota de fuga%s", "Selecionar", "Fechar", Group_GetRobName(playergroup), Group_GetRobStyle(playergroup), Group_GetOut(playergroup));
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro informado é inválido.");
	}

	return 1;
}

// ============================================================== COMANDOS DOS NORMAIS ========================================================== //
CMD:ajuda(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_RP1, "GERAL: /entrar, /sair, /gps, /propriedades, /abastecer, /comprar, /grupo, /avisos");
		SendClientMessage(playerid, COLOR_RP1, "GERAL: /abandonar, /trancar, /vender, /inventario, /dropararma, /respawnhosp, /ferimentos");
		SendClientMessage(playerid, COLOR_RP1, "GERAL: /usardroga, /mascara, /itens, /boombox, /animlist, /anunciar, /veranuncios, /stats");
		SendClientMessage(playerid, COLOR_RP1, "GERAL: /admins, /mudarspawn, /presos, /aceitar, /r(2-4), /radio, /licencas, /pm");
		SendClientMessage(playerid, COLOR_RP1, "GERAL: /limparmeuchat, /sos, /abrircaixa, /abrir, /id, /horas, /punicoes, /refundos, /tog");
		SendClientMessage(playerid, COLOR_RP1, "GERAL: /tog, /empregos, /faccoes, /sairemprego, /removercp, /aceitarproposta, /familias, /pagar");
		SendClientMessage(playerid, COLOR_RP1, "DIÁLOGO: /sussurrar, /g(ritar)");
		SendClientMessage(playerid, COLOR_RP1, "CELULAR: /celular, /cc");
		SendClientMessage(playerid, COLOR_RP1, "PRIME: /prime, /cp (chat dos prime)");
		SendClientMessage(playerid, COLOR_RP2, "OUTROS: /ajuda casa, /ajuda empresa, /ajuda veiculo, /ajuda facção, /ajuda emprego, /ajuda banco e /ajuda família");
	}
	else
	{
		if(!strcmp(params, "casa"))
		{
			SendClientMessage(playerid, COLOR_RP1, "AJUDA CASA: /armazenamento, /mobilia, /porta, /trancar, /campainha, /vender");
		}
		else if(!strcmp(params, "empresa"))
		{
			SendClientMessage(playerid, COLOR_RP1, "AJUDA EMPRESA: /bmenu, /vender");
		}
		else if(!strcmp(params, "veiculo"))
		{
			SendClientMessage(playerid, COLOR_RP1, "AJUDA VEICULAR: /v(eiculo), /capo, /motor, /portaluvas, /portamalas, /farol");
		}
		else if(!strcmp(params, "facção"))
		{
			if(PlayerData[playerid][pFaction] == -1)
			{
				return SendWarningMessage(playerid, "Você não faz parte de uma facção.");
			}

			SendClientMessage(playerid, COLOR_RP1, "AJUDA FACÇÃO: /online, /sairfac, /locker, /cofre, /armas, /fac (chat da facção)");
			SendClientMessage(playerid, COLOR_RP1, "LÍDERES: /convidar, /demitir, /promover");

			if(GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_POLICE)
			{
				SendClientMessage(playerid, COLOR_RP1, "GOVERNAMENTAL: /repararveiculo, /gov (anúncio)");
			}
			else if(GetFactionType(playerid) == FACTION_GANGSTER || GetFactionType(playerid) == FACTION_CARTEL || GetFactionType(playerid) == FACTION_MOTOCLUB)
			{
				SendClientMessage(playerid, COLOR_RP1, "CRIMOSOS: /amarrar, /desamarrar, /assaltar");
			}

			if(GetFactionType(playerid) == FACTION_GOV)
			{
				SendClientMessage(playerid, COLOR_RP1, "GOVERNO: /tdepositar, /tsacar, /verificarestado");
			}
			else if(GetFactionType(playerid) == FACTION_MEDIC)
			{
				SendClientMessage(playerid, COLOR_RP1, "/curar");
			}
			else if(GetFactionType(playerid) == FACTION_POLICE)
			{
				SendClientMessage(playerid, COLOR_RP1, "POLÍCIA: /mdc, /callsign, /algemar, /desalgemar, /arrastar, /deter, /m(egaphone), /multar");
				SendClientMessage(playerid, COLOR_RP1, "POLÍCIA: /apreenderveiculo, /retirar, /arrombarporta, /prender, /procurar, /crb, /rrb, /rallrb, /bb");
				SendClientMessage(playerid, COLOR_RP1, "POLÍCIA: /cela");
			}
			else if(GetFactionType(playerid) == FACTION_GANGSTER)
			{
				SendClientMessage(playerid, COLOR_RP1, "GANGSTERS: /venderdroga, /venderarma (pistols only)");
			}
		}
		else if(!strcmp(params, "emprego"))
		{
			switch(PlayerData[playerid][pJob])
			{
				case EMPREGO_Taxista: 
				{
					SendClientMessage(playerid, COLOR_RP1, "AJUDA TAXISTA: /aceitartaxi, /taxi");
					SendClientMessage(playerid, COLOR_RP1, "DICA: Veja a documentação na íntegra em nosso fórum na aba de Documentação de Sistemas.");
				}
				case EMPREGO_Caminhoneiro:
				{
					SendClientMessage(playerid, COLOR_RP1, "AJUDA CAMINHONEIRO: /industria, /carga, /tpda");
					SendClientMessage(playerid, COLOR_RP1, "DICA: Veja a documentação na íntegra em nosso fórum na aba de Documentação de Sistemas.");
				}
				case EMPREGO_Mecanico:
				{
					SendClientMessage(playerid, COLOR_RP1, "AJUDA MECÂNICO: /aceitarmecanico, /reparar, /consertarmotor");
					SendClientMessage(playerid, COLOR_RP1, "DICA: Veja a documentação na íntegra em nosso fórum na aba de Documentação de Sistemas.");
				}
				case EMPREGO_Lixeiro:
				{
					SendClientMessage(playerid, COLOR_RP1, "AJUDA LIXEIRO: /procurarlixera, /pegarsaco, /entregarlixo");
					SendClientMessage(playerid, COLOR_RP1, "DICA: Veja a documentação na íntegra em nosso fórum na aba de Documentação de Sistemas.");
				}
				case EMPREGO_LadraoCarros:
				{
					SendClientMessage(playerid, COLOR_RP1, "AJUDA LADRÃO DE CARROS: /vroubar, /desembaralhar");
					SendClientMessage(playerid, COLOR_RP1, "DICA: Veja a documentação na íntegra em nosso fórum na aba de Documentação de Sistemas.");
				}
				case EMPREGO_Advogado:
				{
					SendClientMessage(playerid, COLOR_RP1, "AJUDA ADVOGADO: /oferecerservico");
					SendClientMessage(playerid, COLOR_RP1, "DICA: Veja a documentação na íntegra em nosso fórum na aba de Documentação de Sistemas.");
				}
				case EMPREGO_Pescador:
				{					
					SendClientMessage(playerid, COLOR_RP1, "AJUDA PESCADOR: /pescar, /venderpeixes, /meuspeixes");
					SendClientMessage(playerid, COLOR_RP1, "DICA: Veja a documentação na íntegra em nosso fórum na aba de Documentação de Sistemas.");
				}
				default: SendWarningMessage(playerid, "Você não faz parte de um emprego. Para fazer parte de um, dirija-se até o City Hall de Los Santos.");
			}
		}
		else if(!strcmp(params, "banco"))
		{
			SendClientMessage(playerid, COLOR_RP1, "AJUDA BANCO: /banco, /atm");
		}
		else if(!strcmp(params, "família"))
		{
			SendClientMessage(playerid, COLOR_RP1, "AJUDA FAMÍLIA: /criarfamilia, /gerenciarfamilia, /f (chat da família)");
			SendClientMessage(playerid, COLOR_RP1, "DICA: Veja a documentação na íntegra em nosso fórum na aba de Documentação de Sistemas.");
		}
		else
		{
			SendWarningMessage(playerid, "Opção informada é inválida, confira as opções em /ajuda.");
		}
	}

	return 1;
}

CMD:comprarlicencas(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, -2032.8527, -117.4229, 1035.1719)) 
		return SendWarningMessage(playerid, "Você não está no centro de licenças.");

	Dialog_Show(playerid, Licencas, DIALOG_STYLE_TABLIST, "Los Santos DMV", "Aérea\t$1,200\nNavegação\t$600\nTerreste\t$150", "Selecionar", "Cancelar");
	
	return 1;
}

CMD:mudarluta(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, 758.8973, -77.5249, 1000.6511)) 
		return SendWarningMessage(playerid, "Você não está em uma academia.");
	
	Dialog_Show(playerid, EstiloLuta, DIALOG_STYLE_LIST, "Estilos de luta", "Normal - {32CD32}($100)\nBoxe - {32CD32}($250)\nKung-Fu - {32CD32}($500)\nJoelho na cabeça - {32CD32}($250)\nSoco e chute - {32CD32}($150)\nCotovelada - {32CD32}($150)", "Comprar", "Cancelar");
	
	return 1;
}

CMD:entrar(playerid)
{
	if(PlayerData[playerid][pState] != PLAYER_STATE_ALIVE)
		return 1;

	new id = -1;
	if((id = Business_Nearest(playerid)) != -1)
	{
		if(BusinessData[id][businessType] == BUSINESS_FUEL || BusinessData[id][businessID] == 40) return 1;

		AC_SetPlayerPos(playerid, BusinessData[id][businessIntX], BusinessData[id][businessIntY], BusinessData[id][businessIntZ]);
		SetPlayerInterior(playerid, BusinessData[id][businessInterior]);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, BusinessData[id][businessVW]);
		PlayerData[playerid][pBusiness] = BusinessData[id][businessID];

		SendServerMessage(playerid, "Você entrou em uma empresa do tipo: {FFFF00}%s", Business_GetType(id));
		SendServerMessage(playerid, "Para comprar algo use: {FF0000}/comprar");
	}
	else if((id = Entrance_Nearest(playerid)) != -1)
	{
		AC_SetPlayerPos(playerid, EntranceData[id][entranceExit][0], EntranceData[id][entranceExit][1], EntranceData[id][entranceExit][2]);
		SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceVW]);
		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
	}
	else if((id = House_Nearest(playerid)) != -1)
	{
		if(HouseData[id][houseLocked])
			return SendWarningMessage(playerid, "Você não pode entrar em uma casa que está trancada.");

		AC_SetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);
		SetPlayerInterior(playerid, HouseData[id][houseInterior]);
		SetPlayerVirtualWorld(playerid, HouseData[id][houseVW]);
		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHouse] = HouseData[id][houseID];
	}
	else if((id = Complex_Nearest(playerid)) != -1)
	{
		if(ComplexData[id][complexLocked])
			return SendWarningMessage(playerid, "Você não pode entrar em um complexo que está trancado.");

		AC_SetPlayerPos(playerid, ComplexData[id][complexIntX], ComplexData[id][complexIntY], ComplexData[id][complexIntZ]);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, ComplexData[id][complexVW]);
		SetPlayerInterior(playerid, ComplexData[id][complexInterior]);
		PlayerData[playerid][pComplex] = ComplexData[id][complexID];
	}

	if(GetFactionType(playerid) == FACTION_POLICE)
	{
		//Garagem LSPD
		if(GetPlayerVirtualWorld(playerid) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 1171.4652, -1308.4059, 13.9918) && IsPlayerInAnyVehicle(playerid))
			{
				AC_SetVehiclePos(GetPlayerVehicleID(playerid), 1588.3383, -1641.6929, 12.6779);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 234.2096);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 498);

				SetPlayerVirtualWorld(playerid, 498);
				SetCameraBehindPlayer(playerid);

				foreach(new i : Player) if(PlayerData[i][pLogged] && GetVehicleDriver(GetPlayerVehicleID(i)) == playerid)
				{
					SetPlayerVirtualWorld(i, 498);
					SetCameraBehindPlayer(i);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1583.3334, -1636.8772, 13.3901))
			{
				AC_SetPlayerPos(playerid, 1583.3070, -1639.2206, 13.2683);

				SetPlayerVirtualWorld(playerid, 498);
				SetCameraBehindPlayer(playerid);
			}
		}
	}
	else if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		//Garagem ASGH
		if(GetPlayerVirtualWorld(playerid) == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 1171.4652, -1308.4059, 13.9918) && IsPlayerInAnyVehicle(playerid))
			{
				AC_SetVehiclePos(GetPlayerVehicleID(playerid), 2478.4160, 2382.6985, 8.1713);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 180.8952);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 498);

				SetPlayerVirtualWorld(playerid, 498);
				SetCameraBehindPlayer(playerid);

				foreach(new i : Player) if(PlayerData[i][pLogged] && GetVehicleDriver(GetPlayerVehicleID(i)) == playerid)
				{
					SetPlayerVirtualWorld(i, 498);
					SetCameraBehindPlayer(i);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1173.8604, -1312.8894, 13.9848))
			{
				AC_SetPlayerPos(playerid, 2492.7256, 2393.9387, 4.2109);

				SetPlayerVirtualWorld(playerid, 498);
				SetCameraBehindPlayer(playerid);
			}
		}
	}

	return 1;
}

CMD:sair(playerid)
{
	if(PlayerData[playerid][pState] == PLAYER_STATE_WOUNDED || PlayerData[playerid][pState] == PLAYER_STATE_DEAD || PlayerData[playerid][pHospital])
		return 1;

	new id = -1;

	if((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, BusinessData[id][businessIntX], BusinessData[id][businessIntY], BusinessData[id][businessIntZ]) && GetPlayerVirtualWorld(playerid) == BusinessData[id][businessVW])
	{
		AC_SetPlayerPos(playerid, BusinessData[id][businessX], BusinessData[id][businessY], BusinessData[id][businessZ]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pBusiness] = -1;
	}
	else if((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, EntranceData[id][entranceExit][0], EntranceData[id][entranceExit][1], EntranceData[id][entranceExit][2]))
	{
		if(EntranceData[id][entranceType] == ENTRANCE_TYPE_POLICE && PlayerData[playerid][pJailTime]) 
			return 1;

		AC_SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = -1;
	}
	else if((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
	{
		if(HouseData[id][houseLocked])
			return SendWarningMessage(playerid, "A porta está trancada.");

		AC_SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);
		SetPlayerInterior(playerid, HouseData[id][houseExtInterior]);
		SetPlayerVirtualWorld(playerid, HouseData[id][houseExtVW]);
		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHouse] = -1;
	}
	else if((id = Complex_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.0, ComplexData[id][complexIntX], ComplexData[id][complexIntY], ComplexData[id][complexIntZ]))
	{
		if(ComplexData[id][complexLocked])
			return SendWarningMessage(playerid, "A porta está trancada.");

		AC_SetPlayerPos(playerid, ComplexData[id][complexX], ComplexData[id][complexY], ComplexData[id][complexZ]);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerData[playerid][pComplex] = -1;
	}

	if(GetFactionType(playerid) == FACTION_POLICE)
	{
		//Garagem LSPD
		if(GetPlayerVirtualWorld(playerid) == 498)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 1171.4652, -1308.4059, 13.9918) && IsPlayerInAnyVehicle(playerid))
			{
				AC_SetVehiclePos(GetPlayerVehicleID(playerid), 1584.3990, -1630.5988, 13.1239);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 49.8746);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);

				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);

				foreach(new i : Player) if(PlayerData[i][pLogged] && GetVehicleDriver(GetPlayerVehicleID(i)) == playerid)
				{
					SetPlayerVirtualWorld(i, 0);
					SetCameraBehindPlayer(i);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.5, 1583.3334, -1636.8772, 13.3901))
			{
				AC_SetPlayerPos(playerid, 1583.3070, -1639.2206, 13.2683);

				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
		}
	}
	else if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		//Garagem ASGH
		if(GetPlayerVirtualWorld(playerid) == 498)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 2478.4160,2382.6985,8.1713) && IsPlayerInAnyVehicle(playerid))
			{
				AC_SetVehiclePos(GetPlayerVehicleID(playerid), 1180.2931, -1309.1053, 13.4291);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 266.8963);
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);

				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);

				foreach(new i : Player) if(PlayerData[i][pLogged] && GetVehicleDriver(GetPlayerVehicleID(i)) == playerid)
				{
					SetPlayerVirtualWorld(i, 0);
					SetCameraBehindPlayer(i);
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 1.5, 2492.7256, 2393.9387, 4.2109))
			{
				AC_SetPlayerPos(playerid, 1173.8604, -1312.8894, 13.9848);

				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
		}
	}

	return 1;
}

CMD:banco(playerid, params[])
{
	new id = -1;

	if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == ENTRANCE_TYPE_BANK)
	{
		Dialog_Show(playerid, MenuBanco, DIALOG_STYLE_LIST, "Banco", "Gerenciar conta corrente (%s)\nGerenciar poupança (%s)\nVer histórico de transações", "Selecionar", "Fechar", FormatNumber(PlayerData[playerid][pBank]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	else
	{
		SendWarningMessage(playerid, "Você não está dentro do interior do banco.");
	}
	return 1;
}

CMD:atm(playerid, params[])
{
	new id;
	if((id = ATM_Nearest(playerid)) != -1)
	{
		if(ATMData[id][atmRobbed])
			return SendWarningMessage(playerid, "Este ATM está indisponível nesse momento.");

		Dialog_Show(playerid, ATM, DIALOG_STYLE_INPUT, "Menu - ATM", "Saldo atual: %s\n\nDigite a quantidade que você deseja sacar da sua conta bancária:", "Sacar", "Cancelar", FormatNumber(PlayerData[playerid][pBank]));
	}
	else
	{
		SendWarningMessage(playerid, "Você não está perto de um caixa eletrônico.");
	}
	return 1;
}

CMD:gps(playerid)
{
	if(!Inventory_HasItem(playerid, "GPS"))
		return SendWarningMessage(playerid, "Você não possui um GPS.");

	if(PlayerData[playerid][pJailed] != 0)
		return SendWarningMessage(playerid, "Você não pode acessar o seu GPS enquanto estiver preso.");

	Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "GPS", "Encontrar casa\nEncontrar empresa\nEncontrar complexo\nPontos de interesse\nMeus lugares", "Selecionar", "Cancelar");

	return 1;
}

CMD:v(playerid, params[])
{
	new option[15], plate[10];

	if(sscanf(params, "s[15]S()[15]", option, plate))
	{
		SendSyntaxMessage(playerid, "/v [opção]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "Opções", "lista, comprarvaga, estacionar, trancar, localizar, stats");
	}

	new string[45 * 5];

	if(!strcmp(option, "comprar", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 4.0, DEALERSHIP_X, DEALERSHIP_Y, DEALERSHIP_Z))
			return SendWarningMessage(playerid, "Você não está na concessionária.");

		if(PlayerData[playerid][pBlockBuyVehicle] > gettime())
			return SendWarningMessage(playerid, "Você não está autorizado a comprar veículos. Veja o tempo restante em /punicoes.");

		Dialog_Show(playerid, DealershipOptions, DIALOG_STYLE_LIST, "Opções da concessionária:", DIALOG_LIST_VEHICLES, "Selecionar", "Cancelar");
	}

	else if(!strcmp(option, "upgrade", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 4.0, DEALERSHIP_X, DEALERSHIP_Y, DEALERSHIP_Z))
			return SendWarningMessage(playerid, "Você não está na concessionária.");

		new count;

		foreach(new i : Vehicles)
		{
			if(Vehicle_IsOwner(playerid, i))
			{
				format(string, sizeof(string), "%s%s (%s)\n", string, ReturnVehicleModelName(VehicleData[i][vehicleModel]), VehicleData[i][vehiclePlate]);
				ListedOptions[playerid][count++] = i;
			}
		}

		if(!count)
			return SendWarningMessage(playerid, "Você não possui um veículo ou não está spawnado.");

		Dialog_Show(playerid, VehicleUpgrade, DIALOG_STYLE_LIST, "Escolha o veículo:", string, "Selecionar", "Cancelar");
	}

	else if(!strcmp(option, "vender", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 4.0, DEALERSHIP_X, DEALERSHIP_Y, DEALERSHIP_Z))
			return SendWarningMessage(playerid, "Você não está na concessionária.");

		new id = INVALID_VEHICLE_ID;

		if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, id))
		{
			if(VehicleData[id][vehicleFaction] >= 1 || VehicleData[id][vehicleJob] >= 1)
				return SendWarningMessage(playerid, "Você não pode vender este veículo.");

			new Float:math, price;

			switch(PlayerData[playerid][pVip])
			{
				case 0: math = float(VehicleData[id][vehiclePrice]) * 0.3;
				case 1: math = float(VehicleData[id][vehiclePrice]) * 0.4;
				case 2: math = float(VehicleData[id][vehiclePrice]) * 0.5;
				case 3: math = float(VehicleData[id][vehiclePrice]) * 0.6;
			}

			price = floatround(math);

			Dialog_Show(playerid, VehicleSell, DIALOG_STYLE_MSGBOX, "Vender veículo para a concessionária:", "{FFFFFF}Você deseja vender o seu veículo \"{FFFF00}%s{FFFFFF}\" por {00FF00}%s{FFFFFF}?\n\nConfirme a sua venda clicando em uma das opções abaixo:", "Confirmar", "Cancelar", ReturnVehicleModelName(VehicleData[id][vehicleModel]), FormatNumber(price));
		}
		else return SendWarningMessage(playerid, "Você precisa estar dentro do seu veículo.");
	}

	else if(!strcmp(option, "lista", true))
	{
		new query[50];

		mysql_format(this, query, sizeof(query), "SELECT * FROM carros WHERE ID = '%d'", PlayerData[playerid][pID]);
		mysql_tquery(this, query, "VehicleShowList", "d", playerid);
	}

	else if(!strcmp(option, "comprarvaga", true))
	{
		new vaga = 3000, id = INVALID_VEHICLE_ID;

		if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, id))
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendWarningMessage(playerid, "Você precisa ser o motorista do seu veículo.");

			if(GetPlayerVirtualWorld(playerid) != 0 && GetPlayerInterior(playerid) != 0)
				return SendWarningMessage(playerid, "Você não pode estacionar o seu veículo aqui.");

			new houseid = -1;

			if((houseid = House_Closest(playerid)) != -1 && House_IsOwner(playerid, houseid))
				vaga = 0;

			if(vaga)
			{
				if(GetScriptedMoney(playerid) < vaga)
					return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(vaga));
			
				GiveScriptedMoney(playerid, -vaga);
			}

			SendGreenMessage(playerid, "Você comprou uma vaga para estacionar o seu veículo \"%s\" por %s.", ReturnVehicleModelName(VehicleData[id][vehicleModel]), FormatNumber(vaga));
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) comprou (%s) uma vaga de estacionamento para o veículo %s.", ReturnName(playerid, 0), playerid, FormatNumber(vaga), ReturnVehicleModelName(VehicleData[id][vehicleModel]));
			SendServerMessage(playerid, "Você poderá fazer o uso do comando '/v estacionar' neste local a partir de agora.");

			new Float:pos[4];
			GetVehiclePos(id, pos[0], pos[1], pos[2]);
			GetVehicleZAngle(id, pos[3]);

			VehicleData[id][vehicleParkedPos][0] = pos[0];
			VehicleData[id][vehicleParkedPos][1] = pos[1];
			VehicleData[id][vehicleParkedPos][2] = pos[2];
			VehicleData[id][vehicleParkedPos][3] = pos[3];
			VehicleData[id][vehicleParkedVW] = GetPlayerVirtualWorld(playerid);

			Vehicle_Save(id);
		}
		else return SendWarningMessage(playerid, "Você precisa estar dentro do seu veículo.");
	}

	else if(!strcmp(option, "trancar", true))
	{
		new id = INVALID_VEHICLE_ID;

		if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, id))
		{
			if(VehicleData[id][vehicleLocked])
			{
				SetDoorStatus(id, false);
				VehicleData[id][vehicleLocked] = 0;
				format(string, sizeof(string), "%s destrancado", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
				GameTextForPlayer(playerid, string, 3000, 4);
			}
			else
			{
				SetDoorStatus(id, true);
				VehicleData[id][vehicleLocked] = 1;
				format(string, sizeof(string), "%s trancado", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
				GameTextForPlayer(playerid, string, 3000, 4);
			}

			PlayerPlaySoundEx(playerid, 1145);
			Vehicle_Save(id);
		}
		else return SendWarningMessage(playerid, "Você não está dentro do seu veículo.");
	}

	else if(!strcmp(option, "estacionar", true))
	{
		new id = INVALID_VEHICLE_ID;

		if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, id))
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendWarningMessage(playerid, "Você precisa ser o motorista do seu veículo.");

			if(!(VehicleData[id][vehicleParkedPos][0] > 0))
				return SendWarningMessage(playerid, "Você não tem uma vaga comprada para poder estacionar o seu veículo.");

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, VehicleData[id][vehicleParkedPos][0], VehicleData[id][vehicleParkedPos][1], VehicleData[id][vehicleParkedPos][2]))
				return SendWarningMessage(playerid, "Você não está próximo a sua vaga para poder estacionar.");

			VehicleData[id][vehicleParked] = 0;		

			SendGreenMessage(playerid, "Você estacionou o seu(sua) %s.", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
			SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) estacionou o veículo %s.", ReturnName(playerid, 0), playerid, ReturnVehicleModelName(VehicleData[id][vehicleModel]));
			
			Vehicle_Save(id);
			Vehicle_Destroy(id);
		}
		else return SendWarningMessage(playerid, "Você precisa estar dentro do seu veículo.");
	}

	else if(!strcmp(option, "localizar", true))
	{
		new x = -1;

		if(!strlen(plate))
		{
			SendClientMessage(playerid, COLOR_ORANGE, "Seus veículos com localizador:");

			foreach(new i : Vehicles) if(Vehicle_IsOwner(playerid, i) && VehicleData[i][vehicleLocator] >= 1)
				SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "%s (%s)", ReturnVehicleModelName(VehicleData[i][vehicleModel]), VehicleData[i][vehiclePlate]);
			
			SendSyntaxMessage(playerid, "/v localizar [placa]");

			return 1;
		}

		foreach(new i : Vehicles) if(!strcmp(VehicleData[i][vehiclePlate], plate, true) && VehicleData[i][vehicleParked] == 1)
		{
			x = i;
			break;
		}

		if(!IsValidVehicle(x))
			return SendWarningMessage(playerid, "A placa informada é inválida ou seu veículo não está spawnado.");

		if(!Vehicle_IsOwner(playerid, x))
			return SendWarningMessage(playerid, "A placa informada não é pertencente ao seu veículo.");

		if(!VehicleData[x][vehicleLocator])
			return SendWarningMessage(playerid, "Seu veículo não possui um localizador, adquira na concessionária.");

		if(VehicleData[x][vehicleLocatorCD] > gettime())
			return SendWarningMessage(playerid, "Aguarde mais %d %s para poder localizar este veículo.", (VehicleData[x][vehicleLocatorCD] - gettime() / 60), (VehicleData[x][vehicleLocatorCD] - gettime() > 60) ? ("minuto(s)") : ("segundo(s)"));

		new Float:pos[3];
		GetVehiclePos(x, pos[0], pos[1], pos[2]);

		switch(VehicleData[x][vehicleLocator])
		{
			case 1:
			{
				SendGreenMessage(playerid, "Última localização do seu veículo: %s", GetVehicleLocation(x));

				VehicleData[x][vehicleLocatorCD] = gettime() + (60 * 16);
			}
			case 2:
			{
				Waypoint_Remove(playerid);
				SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5.0);
				SendGreenMessage(playerid, "Foi marcado em seu mini-mapa a última localização do seu veículo.");

				VehicleData[x][vehicleLocatorCD] = gettime() + (60 * 7);
			}
			case 3:
			{
				Waypoint_Remove(playerid);
				SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 5.0);
				SendGreenMessage(playerid, "Última localização do seu veículo: %s (marcado em seu mini-mapa).", GetVehicleLocation(x));

				VehicleData[x][vehicleLocatorCD] = gettime() + (60 * 2);
			}
		}
	}

	else if(!strcmp(option, "stats", true))
	{
		new id = INVALID_VEHICLE_ID;

		if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, id))
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "______________________________________");
			SendClientMessageEx(playerid, COLOR_WHITE, "Seguro[%d] - Trava[%d] - Localizador[%d] - XMRádio[%d]", VehicleData[id][vehicleSeguro], VehicleData[id][vehicleTrava], VehicleData[id][vehicleLocator], VehicleData[id][vehicleXMRadio]);
			SendClientMessageEx(playerid, COLOR_WHITE, "Motor[%.2f] - Milhas Rodadas[%.1f] - ExpressWay[%s - %s]", VehicleData[id][vehicleEngine], VehicleData[id][vehicleMileage], (VehicleData[id][vehicleExpressWay]) ? ("Sim") : ("Não"), FormatNumber(VehicleData[id][vehicleExpressMoney]));
		}
		else return SendWarningMessage(playerid, "Você precisa estar dentro do seu veículo.");
	}

	else if(!strcmp(option, "listatexto", true))
	{
		SendGreenMessage(playerid, "Meus veículos:");

		new query[71];

		mysql_format(this, query, sizeof(query), "SELECT * FROM carros WHERE ID = '%d'", PlayerData[playerid][pID]);
		mysql_tquery(this, query, "VehiclePlayerListText", "d", playerid);
	}

	else
		return SendWarningMessage(playerid, "Opção informada é inexistente.");

	return 1;
}
alias:v("veiculo");

CMD:propriedades(playerid)
{
	new count;

	SendClientMessage(playerid, COLOR_GREEN, "Minhas propriedades:");
	foreach(new i : Houses)
	{
		if(House_IsOwner(playerid, i))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Casa ID: %d | %s", HouseData[i][houseID], HouseData[i][houseAddress]);
			count++;
		}
	}
	foreach(new i : Business)
	{
		if(Business_IsOwner(playerid, i))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Empresa ID: %d | %s | %s", BusinessData[i][businessID], BusinessData[i][businessName], Business_GetType(i));
			count++;
		}
	}

	if(!count)
		return SendClientMessage(playerid, COLOR_GREY, "* Você não possui uma propriedade (casa/empresa).");

	return 1;
}

CMD:abastecer(playerid)
{
	new id, bizid, vehicleid = GetPlayerVehicleID(playerid);

	if((id = Pump_Nearest(playerid)) != -1 && (bizid = GetBusinessByID(PumpData[id][pumpBusinessID])) != -1)
	{
		if(PlayerData[playerid][pRefuelling])
			return SendWarningMessage(playerid, "Você já está abastecendo o seu veículo.");

		if(GetEngineStatus(vehicleid))
			return SendWarningMessage(playerid, "O motor do veículo precisa estar desligado.");

		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(IsACar(vehicleid) || IsABike(vehicleid) || IsATruck(vehicleid))
			{
				if(VehicleData[vehicleid][vehicleFuel] >= Fuel_GetQuantity(vehicleid))
					return SendWarningMessage(playerid, "Seu veículo não precisa ser abastecido.");

				if(!BusinessData[bizid][businessStock])
					return SendWarningMessage(playerid, "Não há combustível à venda neste posto.");

				GameTextForPlayer(playerid, "Abastecendo veiculo...", 2000, 4);
				PlayerData[playerid][pRefuelling] = true;
				PlayerData[playerid][pRefuellingPrice] = 0;
				PlayerData[playerid][pRefuellingTimer] = SetTimerEx("Pump_Refuelling", 1000, true, "dd", playerid, bizid);
			}
			else return SendWarningMessage(playerid, "O seu veículo não precisa de abastecimento.");			
		}
		else return SendWarningMessage(playerid, "Você não está em um veículo ou não é o motorista.");
	}	
	else return SendWarningMessage(playerid, "Você não está próximo a uma bomba de combustível.");

	return 1;
}

CMD:comprar(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1163.3539, -1452.1426, 15.8016))//CELULAR
	{	
		if(!PlayerData[playerid][pVip])
			return SendWarningMessage(playerid, "Apenas jogadores com o benefício prime ativo podem comprar outro modelo de celular.");

		new string[215], count;

		for(new i = 0; i < sizeof(g_aPhoneList); i++)
		{
			format(string, sizeof(string), "%s%d\t%s\t%s%s\n", string, i + 1, g_aPhoneList[i][cellName], (GetScriptedMoney(playerid) > g_aPhoneList[i][cellPrice]) ? ("{32CD32}") : ("{FF6347}"), FormatNumber(g_aPhoneList[i][cellPrice]));
			ListedOptions[playerid][count++] = i;
		}

		Dialog_Show(playerid, CellphoneBuy, DIALOG_STYLE_TABLIST_HEADERS, "Comprar celular:", "#.\tModelo\tPreço ($)\n%s", "Comprar", "Cancelar", string);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1092.6448, -1477.6792, 15.7825))//ACESSÓRIOS
	{
		Dialog_Show(playerid, BuyItem, DIALOG_STYLE_LIST, "Comprar acessórios", DIALOG_BUY_ITEMS, "Selecionar", "Cancelar");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 359.9689, -2031.7002, 7.8359))//COMPRAR ISCAS
	{
		if(PlayerData[playerid][pJob] != EMPREGO_Pescador)
			return SendWarningMessage(playerid, "Você não é um pescador.");

		Dialog_Show(playerid, FishBait, DIALOG_STYLE_TABLIST_HEADERS, "Comprar iscas", "Produto\tPreço ($)\nIscas para pescaria (x10)\t$30", "Comprar", "Cancelar");
	}
	else
	{
		new id = -1;
		if((id = Business_Nearest(playerid)) != - 1)
		{
			if(Business_GetCount(playerid) >= MAX_BUSINESS_PLAYER)
				return SendWarningMessage(playerid, "Você só pode ter %d empresas no total.", MAX_BUSINESS_PLAYER);

			if(BusinessData[id][businessOwnerID] != 0)
				return SendWarningMessage(playerid, "Essa empresa não está à venda.");

			if(BusinessData[id][businessPrice] > GetScriptedMoney(playerid))
				return SendWarningMessage(playerid, "Você precisa ter %s para poder comprar essa empresa.", FormatNumber(BusinessData[id][businessPrice]));

			BusinessData[id][businessOwnerID] = PlayerData[playerid][pID];
			format(BusinessData[id][businessOwnerName], 24, ReturnName(playerid));

			Business_Save(id);
			Business_Refresh(id);

			GiveScriptedMoney(playerid, - BusinessData[id][businessPrice]);
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) comprou a empresa %s (uid: %d) do Estado por %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], BusinessData[id][businessName], BusinessData[id][businessID], FormatNumber(BusinessData[id][businessPrice]));
			SendGreenMessage(playerid, "Você comprou a empresa %s por %s.", BusinessData[id][businessName], FormatNumber(BusinessData[id][businessPrice]));
		}
		else if((id = House_Nearest(playerid)) != -1)
		{
			if(House_GetCount(playerid) >= MAX_CASAS_JOGADOR)
				return SendWarningMessage(playerid, "Você só pode ter %d casas no total.", MAX_CASAS_JOGADOR);

			if(HouseData[id][houseOwner] != 0)
				return SendWarningMessage(playerid, "Essa casa não está à venda.");

			if(HouseData[id][housePrice] > GetScriptedMoney(playerid))
				return SendWarningMessage(playerid, "Você precisa ter %s para poder comprar essa casa.", FormatNumber(HouseData[id][housePrice]));

			HouseData[id][houseOwner] = PlayerData[playerid][pID];
			format(HouseData[id][houseOwnerName], 255, ReturnName(playerid));

			House_Refresh(id);
			House_Save(id);

			GiveScriptedMoney(playerid, - HouseData[id][housePrice]);
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) comprou a casa %s (uid: %d) do Estado por %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], HouseData[id][houseAddress], HouseData[id][houseID], FormatNumber(HouseData[id][housePrice]));
			SendGreenMessage(playerid, "Você comprou a casa %s por %s.", HouseData[id][houseAddress], FormatNumber(HouseData[id][housePrice]));
		}
		else if((id = Business_Inside(playerid)) != -1)
		{
			if(BusinessData[id][businessType] == BUSINESS_CLOTHSHOP)
			{
				Dialog_Show(playerid, LojaRoupa, DIALOG_STYLE_LIST, "Loja de Roupas", "Vestuário padrão\nVestuário 0.3.DL-R1", "Selecionar", "Cancelar");		
			}
			else
			{
				new count;

				sz_MiscString[0] = 0;

				format(sz_MiscString, sizeof(sz_MiscString), "Produto\tPreço ($)\n");

				for(new i = 0; i < MAX_BUSINESS_PRODUCT; i++)
				{
					if(!BusinessData[id][businessProduct][i])
						continue;

					format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t%s%s\n", sz_MiscString, Business_ProductName(BusinessData[id][businessProduct][i]), (GetScriptedMoney(playerid) > BusinessData[id][businessProductPrice][i]) ? ("{32CD32}") : ("{FF6347}"), FormatNumber(BusinessData[id][businessProductPrice][i]));

					ListedOptions[playerid][count++] = i;						
				}

				if(!count)
					return SendWarningMessage(playerid, "Esta empresa não vende nenhum produto.");

				Dialog_Show(playerid, Store, DIALOG_STYLE_TABLIST_HEADERS, "Qual produto você deseja comprar?", sz_MiscString, "Comprar", "Cancelar");
			}		
		}
		else
		{
			SendWarningMessage(playerid, "Você não está próximo de uma propriedade ou ponto de compra.");
		}
	}
	return 1;
}

CMD:bmenu(playerid)
{
	new id = -1;

	if((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != 1 && Business_IsOwner(playerid, id))
	{
		Dialog_Show(playerid, BusinessOwnerOptions, DIALOG_STYLE_LIST, "Qual opção você deseja acessar?", "Comprar produtos (estocar)\nAlterar preço dos produtos\nAcessar o cofre\nInformações da empresa", "Selecionar", "<<");
	}
	else return SendWarningMessage(playerid, "Você não está dentro ou próximo de uma empresa ou não é o proprietário.");

	return 1;
}

CMD:abandonar(playerid, params[])
{
	new id = -1;
	if(!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
	{
		if(isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
		{
			SendSyntaxMessage(playerid, "/abandonar [confirmar]");
			SendFormatMessage(playerid, COLOR_WARNING, "Aviso", "Você está prestes a abandonar a sua empresa sem nenhum refundo.");
		}
		else if(!strcmp(params, "confirmar", true))
		{
			BusinessData[id][businessOwnerID] = 0;
			format(BusinessData[id][businessOwnerName], 24, "O estado");

			Business_Save(id);
			Business_Refresh(id);			

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) abandonou a empresa %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], BusinessData[id][businessName], BusinessData[id][businessID]);
			SendGreenMessage(playerid, "Você abandonou a sua empresa: %s.", BusinessData[id][businessName]);
		}
	}
	else if(!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id))
	{
		if(isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
		{
			SendSyntaxMessage(playerid, "/abandonar [confirmar]");
			SendFormatMessage(playerid, COLOR_WARNING, "Aviso", "Você está prestes a abandonar a sua casa sem nenhum refundo.");
		}
		else if(!strcmp(params, "confirmar", true))
		{
			HouseData[id][houseOwner] = 0;
			format(HouseData[id][houseOwnerName], 24, "O estado");
			HouseData[id][houseFurnitureA1] = -1;
			HouseData[id][houseFurnitureA2] = -1;

			House_Refresh(id);
			House_Save(id);

			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) abandonou a casa %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], HouseData[id][houseAddress], HouseData[id][houseID]);
			SendGreenMessage(playerid, "Você abandonou a sua casa: %s.", HouseData[id][houseAddress]);
		}
	}
	else if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, id))
	{
		if(isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
		{
			SendSyntaxMessage(playerid, "/abandonar [confirmar]");
			SendFormatMessage(playerid, COLOR_WARNING, "Aviso", "Você está prestes a abandonar o seu veículo sem nenhum refundo.");
		}
		else if(!strcmp(params, "confirmar", true))
		{
			Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) abandonou o veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehicleID]);
			SendGreenMessage(playerid, "Você abandonou o seu veículo %s.", ReturnVehicleModelName(VehicleData[id][vehicleModel]));

			VehicleData[id][vehicleParked] = 0;

			Vehicle_Remove(id);
			Vehicle_Destroy(id);
		}
	}
	return 1;
}

CMD:trancar(playerid)
{
	new id = -1, string[32];
	//if(!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != 1 && Business_IsOwner(playerid, id))
	if((id = Vehicle_Nearest(playerid, 1)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, id) && !VehicleData[id][vehicleFaction])
	{
		if(VehicleData[id][vehicleLocked])
		{
			SetDoorStatus(id, false);
			VehicleData[id][vehicleLocked] = 0;
			format(string, sizeof(string), "%s destrancado", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
			GameTextForPlayer(playerid, string, 3000, 4);
		}
		else
		{
			SetDoorStatus(id, true);
			VehicleData[id][vehicleLocked] = 1;
			format(string, sizeof(string), "%s trancado", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
			GameTextForPlayer(playerid, string, 3000, 4);
		}

		PlayerPlaySoundEx(playerid, 1145);
		Vehicle_Save(id);
	}
	else if((id = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID && VehicleData[id][vehicleFaction] != 0)
	{
		if(PlayerData[playerid][pFactionID] == VehicleData[id][vehicleFaction])
		{
			if(VehicleData[id][vehicleLocked] == 1)
			{
				SetDoorStatus(id, false);
				VehicleData[id][vehicleLocked] = 0;
				format(string, sizeof(string), "%s destrancado", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
				GameTextForPlayer(playerid, string, 4000, 4);
			}
			else
			{
				SetDoorStatus(id, true);
				VehicleData[id][vehicleLocked] = 1;
				format(string, sizeof(string), "%s trancado", ReturnVehicleModelName(VehicleData[id][vehicleModel]));
				GameTextForPlayer(playerid, string, 4000, 4);
			}

			PlayerPlaySoundEx(playerid, 1145);
			Vehicle_Save(id);
		}
		else return SendWarningMessage(playerid, "Esse veículo não é pertencente da sua facção.");
	}
	else if(!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && House_IsOwner(playerid, id))
	{
		if(!HouseData[id][houseLocked])
		{
			HouseData[id][houseLocked] = true;
			House_Save(id);

			GameTextForPlayer(playerid, "~w~Casa ~r~Trancada", 3000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			HouseData[id][houseLocked] = false;
			House_Save(id);

			GameTextForPlayer(playerid, "~w~Casa ~g~Destrancada", 3000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	else return SendWarningMessage(playerid, "Você não está perto de nada que você possa trancar.");
	return 1;
}

CMD:vender(playerid, params[])
{
	new userid, tipo[24], string_vender[128];
	if(sscanf(params, "us[24]S()[128]", userid, tipo, string_vender))
	{
		SendSyntaxMessage(playerid, "/vender [id/nome] [tipo]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "Tipos", "empresa, veiculo, casa");
	}
	if(!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 4.0))
		return SendWarningMessage(playerid, "Esse jogador não está próximo a você ou está desconectado.");

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode vender para você mesmo.");

	if(!strcmp(tipo, "empresa", true))
	{
		new preco, emp_id = -1;
		if(sscanf(string_vender, "d", preco))
			return SendSyntaxMessage(playerid, "/vender %d empresa [preço]", userid);

		if(preco < 1)
			return SendWarningMessage(playerid, "O preço que você inseriu não pode ser menor que $1.");

		if((emp_id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, emp_id))
		{
			PlayerData[userid][pBusinessSeller] = playerid;
			SetPVarInt(userid, "Business_Offered", emp_id);
			SetPVarInt(userid, "Business_Price", preco);
			SetPVarInt(userid, "Business_OfferTime", gettime() + 30);

			SendGreenMessage(playerid, "Você ofertou a sua empresa %s por %s para %s.", BusinessData[emp_id][businessName], FormatNumber(preco), ReturnName(userid, 0));
			SendGreenMessage(userid, "%s ofertou a empresa dele (%s) por %s (digite \"/aceitar empresa\" para comprar)", ReturnName(playerid, 0), BusinessData[emp_id][businessName], FormatNumber(preco));
		}
		else return SendWarningMessage(playerid, "Você não está próximo de alguma empresa sua.");
	}
	else if(!strcmp(tipo, "veiculo", true))
	{
		new preco, carro_id = INVALID_VEHICLE_ID;
		if(sscanf(string_vender, "d", preco))
			return SendSyntaxMessage(playerid, "/vender %d veiculo [preço]", userid);

		if(preco < 1)
			return SendWarningMessage(playerid, "O preço que você inseriu não pode ser menor que $1.");

		if(PlayerData[userid][pBlockBuyVehicle] > gettime())
			return SendWarningMessage(playerid, "Este jogador não está autorizado a comprar veículos.");

		if((carro_id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && Vehicle_IsOwner(playerid, carro_id))
		{
			if(VehicleData[carro_id][vehicleFaction] >= 1 || VehicleData[carro_id][vehicleJob] >= 1)
				return SendWarningMessage(playerid, "Você não pode vender este veículo.");

			PlayerData[userid][pVehicleSeller] = playerid;
			SetPVarInt(userid, "Vehicle_Offered", carro_id);
			SetPVarInt(userid, "Vehicle_Price", preco);
			SetPVarInt(userid, "Vehicle_OfferTime", gettime() + 30);

			SendGreenMessage(playerid, "Você ofertou seu veículo %s por %s para %s.", ReturnVehicleModelName(VehicleData[carro_id][vehicleModel]), FormatNumber(preco), ReturnName(userid, 0));
			SendGreenMessage(playerid, "%s ofertou o veículo dele (%s) por %s (digite \"/aceitar veiculo\" para comprar)", ReturnName(playerid, 0), ReturnVehicleModelName(VehicleData[carro_id][vehicleModel]), FormatNumber(preco));
		}
		else return SendWarningMessage(playerid, "Você não está dentro de um de seus veículos.");
	}
	else if(!strcmp(tipo, "casa", true))
	{
		new preco, casa_id = -1;

		if(sscanf(params, "d", preco))
			return SendSyntaxMessage(playerid, "/vender %d casa [preço]", userid);

		if(preco < 1)
			return SendWarningMessage(playerid, "O preço que você inseriu não pode ser menor que $1.");

		if((casa_id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, casa_id))
		{
			PlayerData[userid][pHouseSeller] = playerid;
			SetPVarInt(userid, "House_Offered", casa_id);
			SetPVarInt(userid, "House_Price", preco);
			SetPVarInt(userid, "House_OfferTime", gettime() + 30);

			SendGreenMessage(playerid, "Você ofereceu sua casa %s por %s para %s.", HouseData[casa_id][houseAddress], FormatNumber(preco), ReturnName(userid, 0));
			SendGreenMessage(playerid, "%s ofertou a casa dele (%s) por %s (digite \"/aceitar casa\" para comprar).", ReturnName(playerid, 0), HouseData[casa_id][houseAddress], FormatNumber(preco));
		}
		else return SendWarningMessage(playerid, "Você não está próximo de alguma casa sua.");
	}
	return 1;
}

CMD:inventario(playerid, params[])
{
	if(PlayerData[playerid][pJailed] != 0)
		return SendWarningMessage(playerid, "Você não pode ver seu inventário agora.");

	new slot, funcao[24], string_amais[128];

	if(sscanf(params, "ds[24]S()[128]", slot, funcao, string_amais))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "|__________ Inventário de %s __________|", ReturnName(playerid, 0));
		SendClientMessageEx(playerid, COLOR_RP1, "[ 0. %s(%d) ][ 1. %s(%d) ][ 2. %s(%d) ][ 3. %s(%d) ]", InventoryData[playerid][0][invItem], InventoryData[playerid][0][invQuantity], InventoryData[playerid][1][invItem], InventoryData[playerid][1][invQuantity], InventoryData[playerid][2][invItem], InventoryData[playerid][2][invQuantity], InventoryData[playerid][3][invItem], InventoryData[playerid][3][invQuantity]);
		SendClientMessageEx(playerid, COLOR_RP2, "[ 4. %s(%d) ][ 5. %s(%d) ][ 6. %s(%d) ][ 7. %s(%d) ]", InventoryData[playerid][4][invItem], InventoryData[playerid][4][invQuantity], InventoryData[playerid][5][invItem], InventoryData[playerid][5][invQuantity], InventoryData[playerid][6][invItem], InventoryData[playerid][6][invQuantity], InventoryData[playerid][7][invItem], InventoryData[playerid][7][invQuantity]);
		SendClientMessageEx(playerid, COLOR_RP1, "[ 8. %s(%d) ][ 9. %s(%d) ][ 10. %s(%d) ][ 11. %s(%d) ]", InventoryData[playerid][8][invItem], InventoryData[playerid][8][invQuantity], InventoryData[playerid][9][invItem], InventoryData[playerid][9][invQuantity], InventoryData[playerid][10][invItem], InventoryData[playerid][10][invQuantity], InventoryData[playerid][11][invItem], InventoryData[playerid][11][invQuantity]);
		SendClientMessageEx(playerid, COLOR_RP2, "[ 12. %s(%d) ][ 13. %s(%d) ][ 14. %s(%d) ][ 15. %s(%d) ]", InventoryData[playerid][12][invItem], InventoryData[playerid][12][invQuantity], InventoryData[playerid][13][invItem], InventoryData[playerid][13][invQuantity], InventoryData[playerid][14][invItem], InventoryData[playerid][14][invQuantity], InventoryData[playerid][15][invItem], InventoryData[playerid][15][invQuantity]);
		SendClientMessageEx(playerid, COLOR_RP1, "[ 16. %s(%d) ][ 17. %s(%d) ][ 18. %s(%d) ][ 19. %s(%d) ]", InventoryData[playerid][16][invItem], InventoryData[playerid][16][invQuantity], InventoryData[playerid][17][invItem], InventoryData[playerid][17][invQuantity], InventoryData[playerid][18][invItem], InventoryData[playerid][18][invQuantity], InventoryData[playerid][19][invItem], InventoryData[playerid][19][invQuantity]);
		SendSyntaxMessage(playerid, "/i(nv) [slotid] [usar/dropar/dar/jogarfora]");
		return 1;
	}

	if(!(0 <= slot <= MAX_INVENTORY))
		return SendWarningMessage(playerid, "Slot informado é inválido.");

	if(!InventoryData[playerid][slot][invExists])
		return SendWarningMessage(playerid, "Não há item nesse slot do seu inventário.");

	if(strfind(InventoryData[playerid][slot][invItem], "item único", true) != -1 && strcmp(funcao, "jogarfora", true))
		return SendWarningMessage(playerid, "Itens únicos são intransferíveis para terceiros, apenas o descarte é permitido.");

	if(!strcmp(funcao, "usar", true))
	{
		CallLocalFunction("OnPlayerUseItem", "dds", playerid, slot, InventoryData[playerid][slot][invItem]);
	}
	else if(!strcmp(funcao, "dropar", true))
	{		
		if(!strcmp(InventoryData[playerid][slot][invItem], "Boombox", true) && BoomboxData[playerid][boomboxPlaced] && Inventory_Count(playerid, "Boombox") == 1)
			return SendWarningMessage(playerid, "Você precisa recolher a sua boombox primeiro.");

		if(InventoryData[playerid][slot][invQuantity] == 1)
		{
			DropPlayerItem(playerid, slot);
		}
		else
		{
			new quantia;
			if(sscanf(string_amais, "d", quantia))
				return SendSyntaxMessage(playerid, "/i(nv) %d dropar [quantia]", slot);

			if(quantia < 1 || quantia > InventoryData[playerid][slot][invQuantity])
				return SendWarningMessage(playerid, "Valor especificado inválido.");

			DropPlayerItem(playerid, slot, quantia);
		}
	}
	else if(!strcmp(funcao, "dar", true))
	{
		if(!strcmp(InventoryData[playerid][slot][invItem], "Boombox", true) && BoomboxData[playerid][boomboxPlaced] && Inventory_Count(playerid, "Boombox") == 1)
			return SendWarningMessage(playerid, "Você precisa recolher a sua boombox primeiro.");

		new id, amount;

		if(sscanf(string_amais, "ud", id, amount))
			return SendSyntaxMessage(playerid, "/i(nv) %d dar [id/nome] [quantia]", slot);

		if(!IsPlayerConnected(id) || !IsPlayerNearPlayer(playerid, id, 3.0))
			return SendWarningMessage(playerid, "Esse jogador está desconectado ou você não está próximo a ele.");

		if(id == playerid)
			return SendWarningMessage(playerid, "Você não pode dar um item para si mesmo.");

		if(amount < 1 || amount > InventoryData[playerid][slot][invQuantity])
			return SendWarningMessage(playerid, "Valor especificado inválido.");

		new invid = Inventory_Add(id, InventoryData[playerid][slot][invItem], InventoryData[playerid][slot][invModel], amount);

		if(invid == -1)
			return SendWarningMessage(playerid, "Não foi possível dar o item \"%s\" para %s.", InventoryData[playerid][slot][invItem], ReturnName(id, 0));

		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s da o item \"%s\" para %s.", ReturnName(playerid, 0), InventoryData[playerid][slot][invItem], ReturnName(id, 0));
		Inventory_Remove(playerid, InventoryData[playerid][slot][invItem], amount);
	}
	else if(!strcmp(funcao, "jogarfora", true))
	{
		if(!strcmp(InventoryData[playerid][slot][invItem], "Boombox", true) && BoomboxData[playerid][boomboxPlaced] && Inventory_Count(playerid, "Boombox") == 1)
			return SendWarningMessage(playerid, "Você precisa recolher a sua boombox primeiro.");

		if(InventoryData[playerid][slot][invQuantity] == 1)
		{
			SendGreenMessage(playerid, "Você jogou fora o item \"%s\".", InventoryData[playerid][slot][invItem]);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s descarta o item \"%s\".", ReturnName(playerid, 0), InventoryData[playerid][slot][invItem]);
			Inventory_Remove(playerid, InventoryData[playerid][slot][invItem], -1);
		}
		else
		{
			new amount;

			if(sscanf(string_amais, "d", amount))
				return SendSyntaxMessage(playerid, "/i(nv) %d jogarfora [quantia]", slot);

			if(amount < 1 || amount > InventoryData[playerid][slot][invQuantity])
				return SendWarningMessage(playerid, "Quantia especificada é inválida.");

			SendGreenMessage(playerid, "Você jogou o item \"%s\" (Quantia: %d) fora.", InventoryData[playerid][slot][invItem], amount);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s descarta o item \"%s\".", ReturnName(playerid, 0), InventoryData[playerid][slot][invItem]);
			Inventory_Remove(playerid, InventoryData[playerid][slot][invItem], amount);
		}
	}
	else return SendWarningMessage(playerid, "Não há uma função registrada para: \"%s\".", funcao);
	return 1;	
}
alias:inventario("i", "inv");

CMD:dropararma(playerid, params[])
{
	new weaponid = 0;

	if(IsPlayerInAnyVehicle(playerid) || !PlayerData[playerid][pLogged])
		return SendWarningMessage(playerid, "Você não pode dropar nenhuma arma agora.");

	if((weaponid = GetWeapon(playerid)) == 0)
		return SendWarningMessage(playerid, "Você não está segurando nenhuma arma para poder dropar.");

	if(weaponid == WEAPON_SHOTGUN && PlayerData[playerid][pBeanBag])
		return SendWarningMessage(playerid, "Você não pode dropar sua beanbag shotgun.");

	if(PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não pode dropar uma arma da sua corporação.");

	/*if(GetPVarInt(playerid, "InHalloween"))
	{
		Hallo_Reset(playerid);
		return SendWarningMessage(playerid, "Você foi desclassificado por tentar dropar a arma do mini-game.");
	}*/

	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	GetXYInFrontOfPlayer(playerid, x, y, 1);

	DropItem(ReturnWeaponName(weaponid), ReturnName(playerid), GetWeaponModel(weaponid), 1, x, y, z - 1, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), weaponid, GetAmmo(playerid));
	ResetWeapon(playerid, weaponid);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s joga um(a) \"%s\" no chão.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}

CMD:armazenamento(playerid, params[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid)))
		House_OpenStorage(playerid, houseid);
	else SendWarningMessage(playerid, "Você não está no interior da sua casa.");
	
	return 1;
}

CMD:mobilia(playerid)
{
	new id = -1;

	PlayerData[playerid][pFurnitureCategory] = EOS;
	PlayerData[playerid][pFurnitureSubCategory] = EOS;

	if((id = House_Inside(playerid)) != -1)
	{
		if(House_IsOwner(playerid, id))
		{
			Dialog_Show(playerid, Furniture, DIALOG_STYLE_LIST, "Opções da mobília", DIALOG_MAIN_FURNITURE, "Selecionar", "Cancelar");
		}
		else if(Furniture_HasAccess(playerid, id))
		{
			Dialog_Show(playerid, Furniture, DIALOG_STYLE_LIST, "Opções da mobília", DIALOG_MAIN_FURNITURE_NO, "Selecionar", "Cancelar");
		}
		else
		{
			SendWarningMessage(playerid, "Você não tem acesso no menu de mobílias desta casa.");
		}
	}
	
	else return SendWarningMessage(playerid, "Você não está no interior da sua casa.");
	
	return 1;
}

CMD:porta(playerid, params[])
{
	new houseid = -1;

	if((houseid = House_Inside(playerid)) != -1)
	{
		if(House_IsOwner(playerid, houseid) || (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pOnDuty]))
		{
			new query[64];
			mysql_format(this, query, sizeof(query), "SELECT * FROM `mobilias` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
			mysql_tquery(this, query, "OnFurnitureOptions", "dd", playerid, 0);
		}
	}
	else return SendWarningMessage(playerid, "Você não está no interior da sua casa.");
	
	return 1;
}

CMD:campainha(playerid, params[])
{
	new id = House_Nearest(playerid);

	if(id == -1)
		return SendWarningMessage(playerid, "Você não está na porta de uma casa.");

	foreach(new i : Player) if(House_Inside(i) == id) 
	{
		SendClientMessage(i, COLOR_PURPLE, "** A campainha da casa está tocando.");
		PlayerPlaySound(i, 20801, 0, 0, 0);
	}
	
	PlayerPlaySoundEx(playerid, 20801);
	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s toca a campainha da casa.", ReturnName(playerid, 0));
	
	return 1;
}

CMD:capo(playerid, params[])
{
	new id = INVALID_VEHICLE_ID;
	if((id = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID)
	{
		if(IsPlayerInAnyVehicle(playerid))
			return SendWarningMessage(playerid, "Você precisa descer do carro para poder abrir o capô.");

		if(!IsPlayerNearHood(playerid, id))
			return SendWarningMessage(playerid, "Você não está próximo ao capô do veículo.");

		if(VehicleData[id][vehicleLocked] == 1)
			return SendWarningMessage(playerid, "O veiculo está trancado.");

		if(!IsDoorVehicle(id))
			return SendWarningMessage(playerid, "Esse veículo não tem um capô.");

		if(!GetHoodStatus(id))
		{
			SetHoodStatus(id, true);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s abre o capô do(a) %s.", ReturnName(playerid, 0), ReturnVehicleModelName(VehicleData[id][vehicleModel]));
		}
		else
		{
			SetHoodStatus(id, false);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s fecha o capô do(a) %s.", ReturnName(playerid, 0), ReturnVehicleModelName(VehicleData[id][vehicleModel]));
		}
	}
	else return SendWarningMessage(playerid, "Você não está perto de um veículo.");

	return 1;
}

CMD:portamalas(playerid, params[])
{
	new type[24];

	if(sscanf(params, "s[24]", type))
	{
		SendSyntaxMessage(playerid, "/portamalas [tipo]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "Tipos", "abrir, fechar, ver");
	}

	if(IsPlayerInAnyVehicle(playerid))
		return SendWarningMessage(playerid, "Você precisa descer do veículo e se aproximar do porta malas.");

	new id = INVALID_VEHICLE_ID;

	if((id = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID && !(VehicleData[id][vehicleFaction] >= 1 || VehicleData[id][vehicleJob] >= 1))
	{
		if(!IsPlayerNearBoot(playerid, id))
			return SendWarningMessage(playerid, "Você não está próximo ao porta malas do veículo.");

		if(!IsDoorVehicle(id))
			return SendWarningMessage(playerid, "Este carro não tem um porta malas.");

		if(id == PlayerData[playerid][pTestCar] || id == PlayerData[playerid][pCreateCar])
			return SendWarningMessage(playerid, "Não é possível acessar o porta-malas deste veículo.");

		if(!strcmp(type, "abrir", true))
		{
			if(Vehicle_IsOwner(playerid, id))
			{
				if(VehicleData[id][vehicleLocked] == 1)
					return SendWarningMessage(playerid, "O veículo está trancado.");

				if(GetTrunkStatus(id))
					return SendWarningMessage(playerid, "O porta malas desse veículo já está aberto.");

				SetTrunkStatus(id, true);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s abre o porta malas do(a) %s.", ReturnName(playerid, 0), ReturnVehicleModelName(VehicleData[id][vehicleModel]));
			}
			else return SendWarningMessage(playerid, "Você não possui a chave desse veículo.");
		}
		else if(!strcmp(type, "fechar", true))
		{
			if(Vehicle_IsOwner(playerid, id))
			{
				if(VehicleData[id][vehicleLocked] == 1)
					return SendWarningMessage(playerid, "O veículo está trancado.");

				if(!GetTrunkStatus(id))
					return SendWarningMessage(playerid, "O porta malas desse veículo já está fechado.");

				SetTrunkStatus(id, false);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s fecha o porta malas do(a) %s.", ReturnName(playerid, 0), ReturnVehicleModelName(VehicleData[id][vehicleModel]));
			}
			else return SendWarningMessage(playerid, "Você não possui a chave desse veículo.");
		}
		else if(!strcmp(type, "ver", true))
		{
			if(!GetTrunkStatus(id))
				return SendWarningMessage(playerid, "O porta malas desse veículo está fechado.");

			Car_TrunkShow(playerid, id);
		}
	}
	else return SendWarningMessage(playerid, "Você não está perto de um veículo ou não pode armazenar itens nesse porta-malas.");
	return 1;
}

CMD:portaluvas(playerid, params[])
{
	new id = INVALID_VEHICLE_ID;

	if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID && !(VehicleData[id][vehicleFaction] >= 1 || VehicleData[id][vehicleJob] >= 1))
	{
		if(!IsDoorVehicle(id))
			return SendWarningMessage(playerid, "Esse carro não tem um porta luvas.");

		if(id == PlayerData[playerid][pTestCar] || id == PlayerData[playerid][pCreateCar])
			return SendWarningMessage(playerid, "Não é possível acessar o porta-malas deste veículo.");

		if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1)
			return SendWarningMessage(playerid, "Você não está próximo ao porta luvas do veículo.");

		Car_InsideWeapon(playerid, id);
	}
	else return SendWarningMessage(playerid, "Você não está dentro de um veículo ou não pode armazenar itens nesse porta-luvas.");

	return 1;
}

CMD:respawnhosp(playerid, params[])
{
	if(PlayerData[playerid][pDeathTime] > gettime())
		return SendWarningMessage(playerid, "Você ainda não pode usar esse comando, aguarde %d segundos.", PlayerData[playerid][pDeathTime] - gettime());

	if(PlayerData[playerid][pState] == PLAYER_STATE_WOUNDED || PlayerData[playerid][pState] == PLAYER_STATE_DEAD)
	{
		if(GetPlayerAnimationIndex(playerid) != 1189 && GetPlayerAnimationIndex(playerid) != 1190)
		{
			SetPlayerFreezed(playerid, false);
		}

		SetScriptedHealth(playerid, 0);
		ResetWeapons(playerid);

		PlayerData[playerid][pDeathTime] = 0;
	}
	else
	{
		SendWarningMessage(playerid, "Você não está gravemente ferido ou morto.");
	}

	return 1;
}

CMD:ferimentos(playerid, params[])
{
	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/ferimentos [id/nome]");

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	if(!PlayerData[userid][pLogged])
		return SendWarningMessage(playerid, "Este jogador não realizou o login.");

	if(PlayerData[playerid][pAdminStatus])
	{
		Damage_Show(userid, playerid, true);
	}
	else
	{
		if(PlayerData[userid][pState] == PLAYER_STATE_ALIVE && playerid != userid)
			return SendWarningMessage(playerid, "Este personagem não está gravemente ferido ou morto.");

		if(!IsPlayerNearPlayer(playerid, userid, 8.0))
			return SendWarningMessage(playerid, "Você não está próximo deste personagem.");

		Damage_Show(userid, playerid, false);
	}

	return 1;
}

CMD:usardroga(playerid, params[])
{
	if(isnull(params))
	{
		SendSyntaxMessage(playerid, "/usardroga [nome]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "Nomes", "marijuana, cocaína, lsd"); 
	}

	new Float:vida, Float:colete;

	GetPlayerHealth(playerid, vida);
	GetPlayerArmour(playerid, colete);

	if(PlayerData[playerid][pDrugUsed])
		return SendWarningMessage(playerid, "Você precisa esperar o efeito da droga atual acabar.");

	if(!strcmp(params, "marijuana", true))
	{
		if(!Inventory_HasItem(playerid, "Marijuana"))
			return SendWarningMessage(playerid, "Você precisa de pelo menos 1 grama de marijuana.");

		PlayerData[playerid][pDrugTime] = 300;
		PlayerData[playerid][pDrugUsed] = 1;

		Inventory_Remove(playerid, "Marijuana");
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

		SetScriptedHealth(playerid, vida + 20);
		SetPlayerWeather(playerid, 21);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s acende um baseado.", ReturnName(playerid, 0));
	}
	else if(!strcmp(params, "cocaína", true))
	{
		if(!Inventory_HasItem(playerid, "Cocaína"))
			return SendWarningMessage(playerid, "Você precisa de pelo menos 1 grama de cocaína.");

		PlayerData[playerid][pDrugTime] = 300;
		PlayerData[playerid][pDrugUsed] = 2;

		Inventory_Remove(playerid, "Cocaína");
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

		SetScriptedHealth(playerid, 120);
		SetScriptedArmour(playerid, colete + 20);
		SetPlayerWeather(playerid, 21);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s cheira cocaína.", ReturnName(playerid, 0));
	}
	else if(!strcmp(params, "lsd", true))
	{
		if(!Inventory_HasItem(playerid, "LSD"))
			return SendWarningMessage(playerid, "Você precisa de pelo menos 1 lsd.");

		PlayerData[playerid][pDrugTime] = 600;
		PlayerData[playerid][pDrugUsed] = 3;

		Inventory_Remove(playerid, "LSD");
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

		SetScriptedHealth(playerid, 130);
		SetScriptedArmour(playerid, colete + 20);
		SetPlayerWeather(playerid, 21);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s injeta LSD.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:mascara(playerid)
{
	if(!PlayerData[playerid][pMask])
		return SendWarningMessage(playerid, "Você não possui uma máscara.");

	if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV || GetFactionType(playerid) == FACTION_MEDIC)
		return SendWarningMessage(playerid, "Você não pode usar uma máscara.");

	if(!PlayerData[playerid][pMasked])
	{
		PlayerData[playerid][pMasked] = 1;
		SendGreenMessage(playerid, "Você colocou a sua máscara.");
	}
	else
	{
		PlayerData[playerid][pMasked] = 0;
		SendGreenMessage(playerid, "Você retirou a sua máscara.");
	}

	return 1;
}

CMD:itens(playerid)
{
	new count = 0;

	sz_MiscString[0] = 0;

	format(sz_MiscString, sizeof(sz_MiscString), "{00FF00}>> Carregar últimos\n");

	for(new i = 0; i < MAX_ITEM_PLAYER; i++) if(AttachData[playerid][i][attachExists])
	{
		if(AttachData[playerid][i][attachUsing])
			format(sz_MiscString, sizeof(sz_MiscString), "%s{8D8D8D}%d. %s (Index: %d)\n", sz_MiscString, i, AttachData[playerid][i][attachName], AttachData[playerid][i][attachIndex]);
		else
			format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s (Index: %d)\n", sz_MiscString, i, AttachData[playerid][i][attachName], AttachData[playerid][i][attachIndex]);

		count++;
		ListedOptions[playerid][count] = i;
	}

	if(!count)
		return SendWarningMessage(playerid, "Você não possui nenhum acessório.");

	Dialog_Show(playerid, PlayerItems, DIALOG_STYLE_LIST, "Meus acessórios", sz_MiscString, "Selecionar", "Cancelar");

	return 1;
}
alias:itens("acessorios");

CMD:boombox(playerid, params[])
{
	if(!Inventory_HasItem(playerid, "Boombox"))
		return SendWarningMessage(playerid, "Você não tem uma boombox no seu inventário.");

	new type[24], string[128];

	if(sscanf(params, "s[24]S()[128]", type, string))
	{
		SendSyntaxMessage(playerid, "/boombox [opção]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "OPÇÕES", "colocar, pegar, url");		
	}

	if(!strcmp(type, "colocar"))
	{
		if(BoomboxData[playerid][boomboxPlaced])
			return SendWarningMessage(playerid, "Você já colocou uma boombox.");

		if(Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
			return SendWarningMessage(playerid, "Você está no alcance de outra boombox.");

		if(IsPlayerInAnyVehicle(playerid))
			return SendWarningMessage(playerid, "Você precisa estar fora de um veículo.");

		Boombox_Place(playerid);

		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega a boombox e a posiciona no chão.", ReturnName(playerid, 0));
		SendGreenMessage(playerid, "Você colocou a sua boombox no chão (\"/boombox\" para ver as opções).");
	}
	else if(!strcmp(type, "pegar"))
	{
		if(!BoomboxData[playerid][boomboxPlaced])
			return SendWarningMessage(playerid, "Você não colocou uma boombox.");

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
			return SendWarningMessage(playerid, "Você não está próximo da sua boombox.");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega a sua boombox do chão.", ReturnName(playerid, 0));
	}
	else if(!strcmp(type, "url"))
	{
		if(sscanf(string, "s[128]", string))
			return SendSyntaxMessage(playerid, "/boombox url [url da música/rádio]");

		if(!BoomboxData[playerid][boomboxPlaced])
			return SendWarningMessage(playerid, "Você não colocou uma boombox.");
		
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
			return SendWarningMessage(playerid, "Você não está próximo da sua boombox.");

		Boombox_SetURL(playerid, string);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s altera a estação da boombox.", ReturnName(playerid, 0));
	}
	else 
		SendWarningMessage(playerid, "Parâmetro inválido.");

	return 1;
}

// =================================== ANIMATIONS ======================================================

CMD:animlist(playerid, params[])
{
	SendClientMessage(playerid, COLOR_LEMON, "|__________ Lista de animações __________|");
	SendClientMessage(playerid, COLOR_WHITE, "/dance - /handsup - /mijar - /bat - /slap - /bar - /lay - /sleep");
	SendClientMessage(playerid, COLOR_WHITE, "/deal - /gsign - /wave - /taichi - /sit - /crossarms - /fucku");
	SendClientMessage(playerid, COLOR_WHITE, "/what");
	SendClientMessage(playerid, COLOR_LEMON, "|______________________________________|");

	return 1;
}

CMD:dance(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/dance [1-4]");

	if(type < 1 || type > 4)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch(type)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}

	return 1;
}

CMD:handsup(playerid, params[])
{
	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);

	return 1;
}

CMD:mijar(playerid, params[])
{
	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	SetPlayerSpecialAction(playerid, 68);

	return 1;
}

CMD:bat(playerid, params[])
{
	new type; 

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/bat [1-5]");

	if(type < 1 || type > 5)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch (type) 
	{
		case 1: ApplyAnimation(playerid, "BASEBALL", "Bat_1", 4.1, 0, 1, 1, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "BASEBALL", "Bat_2", 4.1, 0, 1, 1, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "BASEBALL", "Bat_3", 4.1, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "BASEBALL", "Bat_IDLE", 4.1, 1, 0, 0, 0, 0, 1);
	}

	return 1;
}

CMD:slap(playerid, params[])
{
	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	ApplyAnimation(playerid, "BASEBALL", "Bat_M", 4.1, 0, 0, 0, 0, 0, 1);

	return 1;
}

CMD:bar(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/bar [1-8]");

	if(type < 1 || type > 8)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch(type)
	{
		case 1: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "BAR", "Barserve_glass", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "BAR", "Barserve_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "BAR", "Barserve_order", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnimationEx(playerid, "BAR", "dnk_stndM_loop", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
	}

	return 1;
}

CMD:lay(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/lay [1-5]");

	if(type < 1 || type > 5)
	    return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch(type) 
	{
		case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0, 1);
	}

	return 1;
}

CMD:sleep(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/sleep [1-2]");

	if(type < 1 || type > 2)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch(type) 
	{
		case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0, 1);
		case 2: ApplyAnimationEx(playerid, "CRACK", "crckidle4", 4.1, 0, 0, 0, 1, 0, 1);
	}

	return 1;
}

CMD:deal(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/deal [1-6]");

	if(type < 1 || type > 6)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch(type)
	{
		case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "DEALER", "DRUGS_BUY", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_02", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_03", 4.1, 1, 0, 0, 0, 0, 1);
	}

	return 1;
}

CMD:gsign(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/gsign [1-15]");

	if(type < 1 || type > 15)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch (type)
	{
		case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.1, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.1, 0, 0, 0, 0, 0, 1);
		case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.1, 0, 0, 0, 0, 0, 1);
	}

	return 1;
}

CMD:wave(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/wave [1-3]");

	if(type < 1 || type > 3)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch(type) 
	{
		case 1: ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0, 1);
	}

	return 1;
}

CMD:taichi(playerid, params[])
{
	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0, 1);

	return 1;
}

CMD:sit(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/sit [1-6]");

	if(type < 1 || type > 6)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch(type)
	{
		case 1: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 1, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 1, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "MISC", "Seat_talk_02", 4.1, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid, "ped", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
	}

	return 1;
}

CMD:crossarms(playerid, params[])
{
	new type;

	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	if(sscanf(params, "d", type))
		return SendSyntaxMessage(playerid, "/crossarms [1-4]");

	if(type < 1 || type > 4)
		return SendWarningMessage(playerid, "Valor especificado inválido.");

	switch(type)
	{
		case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 0, 1);
		case 2: ApplyAnimationEx(playerid, "GRAVEYARD", "prst_loopa", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 0, 1, 1, 1, 0, 1);
	}

	return 1;
}

CMD:fucku(playerid, params[])
{
	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	ApplyAnimation(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:what(playerid, params[])
{
	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer uma animação agora.");

	ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stopanim(playerid, params[])
{
	if(!AnimationCheck(playerid))
		return SendWarningMessage(playerid, "Você não pode fazer esse comando agora.");

	if(PlayerData[playerid][pCarrying])
		return SendWarningMessage(playerid, "Você não pode parar o seu anim agora.");

	ClearAnimations(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);

	HidePlayerFooter(playerid);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	PlayerData[playerid][pLoopAnim] = 0;
	SendGreenMessage(playerid, "Você parou as suas animações.");

	return 1;
}

// ============================================================ COMANDOS DOS JOGADORES ========================================================= //
CMD:refundos(playerid)
{
	new query[58];

	mysql_format(this, query, sizeof(query), "SELECT * FROM refunds WHERE refundOwnerID = '%d'", PlayerData[playerid][pID]);
	mysql_tquery(this, query, "OnPlayerSearchRefund", "d", playerid);

	return 1;
}

CMD:consultar(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1550.2039, -1623.3818, 13.3825))
		return SendWarningMessage(playerid, "Você não está no pátio do departamento de polícia de Los Santos.");

	new ownerid = PlayerData[playerid][pID], query[71];

	mysql_format(this, query, sizeof(query), "SELECT * FROM `carrosapreendidos` WHERE `owner_id` = '%d'", ownerid);
	mysql_tquery(this, query, "OnUnimpoundVehicleSearch", "d", playerid);

	return 1;
}

CMD:anunciar(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1091.2458, -1506.0028, 15.7969))
		return SendWarningMessage(playerid, "Você não está próximo ao local de anúncios no Verona Mall.");

	new string[128];

	if(sscanf(params, "s[128]", string))
		return SendSyntaxMessage(playerid, "/anunciar [texto]");	

	new price = PlayerData[playerid][pVip] ? 75 : 150;
	
	if(!PlayerData[playerid][pVip] && strlen(string) > 64)
	{
		SendWarningMessage(playerid, "Você não possui um benefício prime ativo em sua conta para poder en");
		return SendWarningMessage(playerid, "...viar uma mensagem longa.");
	}

	if(GetScriptedMoney(playerid) < price)
		return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(price));

	GiveScriptedMoney(playerid, -price);

	mysql_tquery(this, "SELECT * from advertisements WHERE adInQueue = '1' ORDER BY adTime DESC LIMIT 1", "OnAdCheck", "ds", playerid, string);

	return 1;
}

CMD:veranuncios(playerid)
{
	Ad_Show(playerid, 1);
	return 1;
}

CMD:stats(playerid, params[])
{
	if(PlayerData[playerid][pAdmin])
	{
		new userid;

		if(sscanf(params, "I(-1)", userid))
			return 1;

		if(userid == -1)
		{
			ShowCharacterStats(playerid, playerid);
		}
		else
		{
			if(!IsPlayerConnected(userid))
			{
				return SendWarningMessage(playerid, JogadorOff);
			}

			if(!PlayerData[userid][pLogged])
			{
				return SendWarningMessage(playerid, "Você não consegue visualizar os stats de um jogador sem ele ter feito o login.");
			}

			ShowCharacterStats(userid, playerid);
		}
	}	
	else return ShowCharacterStats(playerid, playerid);

	return 1;
}

CMD:admins(playerid)
{
	new count;

	SendClientMessage(playerid, COLOR_LEMON, "Administradores Online:");

	foreach(new i : Player) if(IsPlayerConnected(i))
	{
		if(PlayerData[i][pAdmin] && !PlayerData[i][pAdminHide])
		{
			if(!PlayerData[i][pAdminStatus])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "  [%s] %s (ID: %d) - Modo: Jogando", ReturnAdminRank(i), ReturnName(i, 0), i);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "  [%s] %s (ID: %d) - Modo: Trabalhando", ReturnAdminRank(i), ReturnName(i, 0), i);
			}
			count++;
		}
	}

	if(!count)
	{
		SendClientMessage(playerid, COLOR_WARNING, "* Nenhum administrador está online no momento.");
	}

	if(!PlayerData[playerid][pAdmin])
	{
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) visualizou a lista de administradores (/admins).", ReturnName(playerid, 0), playerid);
	}

	return 1;
}

CMD:motor(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendWarningMessage(playerid, "Você não está dentro de um veículo.");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendWarningMessage(playerid, "Você precisa ser o motorista do veículo.");

	if(GetVehicleModel(vehicle) == 481 || GetVehicleModel(vehicle) == 509 || GetVehicleModel(vehicle) == 510)
		return SendWarningMessage(playerid, "Não há um motor nesse veículo.");

	if(IsVehicleMoving(vehicle) && GetEngineStatus(vehicle))
		return SendWarningMessage(playerid, "Essa ação não pode ser realizada com o veículo em movimento.");

	new Float:vehcar;

	GetVehicleHealth(vehicle, vehcar);

	if(vehcar <= 270.0)
		return SendWarningMessage(playerid, "Este veículo está com o motor danificado.");

	if(vehicle == PlayerData[playerid][pTestCar])
	{
		if(!GetEngineStatus(vehicle))
		{
			GameTextForPlayer(playerid, "Motor ligado", 3000, 4);
			SetEngineStatus(vehicle, true);
		}
		else
		{
			GameTextForPlayer(playerid, "Motor desligado", 3000, 4);
			SetEngineStatus(vehicle, false);
		}

		return 1;
	}

	if(IsABike(vehicle) || IsACar(vehicle) || IsATruck(vehicle))
	{
		if(VehicleData[vehicle][vehicleFuel] == 0.0)
			return SendWarningMessage(playerid, "Este veículo está combustível.");
	}

	if(vehicle != -1)
	{
		if(Vehicle_IsOwner(playerid, vehicle) || VehicleData[vehicle][vehicleFaction] == PlayerData[playerid][pFactionID] || VehicleData[vehicle][vehicleJob] == PlayerData[playerid][pJob])
		{
			if(!GetEngineStatus(vehicle))
			{
				if(!VehicleData[vehicle][vehicleTweak])
				{
					if(VehicleData[vehicle][vehicleEngine] >= 50.0)
					{
						GameTextForPlayer(playerid, "Motor ligado", 3000, 4);
						SetEngineStatus(vehicle, true);
						SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s liga o motor do veículo.", ReturnName(playerid, 0));
					}
					else if(VehicleData[vehicle][vehicleEngine] >= 25.0 && VehicleData[vehicle][vehicleEngine] < 50.0)
					{
						new rand = random(3);

						if(!rand)
						{
							VehicleData[vehicle][vehicleTweak] = true;
							VehicleData[vehicle][vehicleTweakTime] = gettime();
							SendGreenMessage(playerid, "O motor do seu veículo está ficando ruim.");
							SendGreenMessage(playerid, "INFO: Mantenha 'W' apertado e fique teclando 'S' para iniciar a ignição.");
						}
						else
						{
							GameTextForPlayer(playerid, "Motor ligado", 3000, 4);
							SetEngineStatus(vehicle, true);
							SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s liga o motor do veículo.", ReturnName(playerid, 0));
						}
					}
					else if(VehicleData[vehicle][vehicleEngine] >= 1.0 && VehicleData[vehicle][vehicleEngine] < 25.0)
					{
						VehicleData[vehicle][vehicleTweak] = true;
						VehicleData[vehicle][vehicleTweakTime] = gettime();
						SendGreenMessage(playerid, "O motor do seu veículo está ruim.");
						SendGreenMessage(playerid, "INFO: Mantenha 'W' apertado e fique teclando 'S' para iniciar a ignição.");
					}
					else
					{
						GameTextForPlayer(playerid, "~r~MOTOR FALHOU EM LIGAR~n~~w~Tente novamente!", 3000, 4);
						SendWarningMessage(playerid, "Seu motor está em péssima condições, contate um mecânico.");
					}
				}
			}
			else
			{
				GameTextForPlayer(playerid, "Motor desligado", 3000, 4);
				SetEngineStatus(vehicle, false);
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s desliga o motor do veículo.", ReturnName(playerid, 0));
			}
		}
		else return SendWarningMessage(playerid, "Você não possui a chave desse veículo.");
	}
	else return SendWarningMessage(playerid, "Não foi possível localizar este veículo na database.");	
	
	return 1;
}

CMD:farol(playerid)
{
	new vid = GetPlayerVehicleID(playerid);
	new veh = GetVehicleModel(GetPlayerVehicleID(playerid));

	if(veh == 481 || veh == 509 || veh == 510) 
		return SendWarningMessage(playerid, "Este veículo não tem farol.");
	
	if(!IsPlayerInAnyVehicle(playerid)) 
		return SendWarningMessage(playerid, "Você precisa estar dentro de um veículo para ligar o Farol.");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendWarningMessage(playerid, "Você não é o motorista/piloto do veículo.");
	
	if(!GetLightStatus(vid))
	{
		SetLightStatus(vid, true);
		//SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "%s ligou o farol do veículo.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "Farol ligado", 3000, 4);
	}
	else
	{
		SetLightStatus(vid, false);
		//SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "%s desligou o farol do veículo.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "Farol ligado", 3000, 4);
	}
	return 1;
}
alias:farol("luzes");

CMD:mudarspawn(playerid, params[])
{
	Dialog_Show(playerid, Nascimento, DIALOG_STYLE_LIST, "Local de Nascimento", "Padrão\nEmprego\nFacção%s", "Selecionar", "Fechar", House_GetCount(playerid) >= 1 ? ("\nMinhas propriedades") : (""));
	return 1;
}
alias:mudarspawn("meuspawn");

CMD:presos(playerid)
{
	new id, count;

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i) && PlayerData[i][pLogged])
		{
			if(PlayerData[i][pJailed] > 1)
			{
				id = GetEntranceByID(PlayerData[i][pEntrance]);
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s (ID: %d) está preso por %d segundo(s) em(no) %s.", ReturnName(i, 0), i, PlayerData[i][pJailTime], EntranceData[id][entranceName]);
				count++;
			}
			else if(PlayerData[i][pJailed] == 1 && PlayerData[playerid][pAdmin])
			{ 
				SendClientMessageEx(playerid, COLOR_WARNING, "* %s (ID: %d) está preso por %d segundo(s) em(no) Ajail.", ReturnName(i, 0), i, PlayerData[i][pJailTime]);
				count++;
			}
		}
	}

	if(!count)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Nenhum jogador preso neste momento.");
	}

	return 1;
}

CMD:aceitar(playerid, params[])
{
	if(isnull(params))
	{
		SendSyntaxMessage(playerid, "/aceitar [nome]");
		SendFormatMessage(playerid, COLOR_ORANGE, "Nomes", "empresa, veiculo, casa, convite, reparo, droga, arma");
		return 1;
	}
	if(!strcmp(params, "empresa", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Business_OfferTime") < gettime())
		{
			PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de venda de empresa expirou.");
		}

		new sellerid = PlayerData[playerid][pBusinessSeller],
		bizid = GetPVarInt(playerid, "Business_Offered"),
		price = GetPVarInt(playerid, "Business_Price");

		if(Business_GetCount(playerid) >= MAX_BUSINESS_PLAYER)
			return SendWarningMessage(playerid, "Você só pode ter %d empresas no total.", MAX_BUSINESS_PLAYER);

		if(!IsPlayerNearPlayer(playerid, sellerid, 4.0))
			return SendWarningMessage(playerid, "Você não está próximo do vendedor da empresa.");

		if(GetScriptedMoney(playerid) < price)
			return SendWarningMessage(playerid, "Você não possui fundos para comprar essa empresa.");

		if(Business_Nearest(playerid) != bizid)
			return SendWarningMessage(playerid, "Você precisa estar perto da empresa para poder comprar.");

		if(!Business_IsOwner(sellerid, bizid))
			return SendWarningMessage(playerid, "Essa oferta de venda de empresa não é mais válida.");

		SendGreenMessage(playerid, "Você comprou com sucesso a empresa de %s por %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendGreenMessage(sellerid, "%s comprou com sucesso a sua empresa por %s.", ReturnName(playerid, 0), FormatNumber(price));

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) comprou a empresa %s (uid: %d) do %s (uid: %d) por %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], BusinessData[bizid][businessName], BusinessData[bizid][businessID], ReturnName(sellerid), PlayerData[sellerid][pID], FormatNumber(price));
		Log_Write(PlayerData[sellerid][pID], "[%s] %s (uid: %d) vendeu a empresa %s (uid: %d) para %s (uid: %d) por %s.", FormatFullTime(), ReturnName(sellerid), PlayerData[sellerid][pID], BusinessData[bizid][businessName], BusinessData[bizid][businessID], ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(price));

		format(BusinessData[bizid][businessOwnerName], 24, ReturnName(playerid));
		BusinessData[bizid][businessOwnerID] = PlayerData[playerid][pID];
		
		Business_Save(bizid);
		Business_Refresh(bizid);

		GiveScriptedMoney(playerid, -price);
		GiveScriptedMoney(sellerid, price);

		PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "Business_Offered");
		DeletePVar(playerid, "Business_Price");
	}
	else if(!strcmp(params, "veiculo", true) && PlayerData[playerid][pVehicleSeller] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Vehicle_OfferTime") < gettime())
		{
			PlayerData[playerid][pVehicleSeller] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de venda de veículo expirou.");
		}

		new sellerid = PlayerData[playerid][pVehicleSeller],
		carid = GetPVarInt(playerid, "Vehicle_Offered"),
		price = GetPVarInt(playerid, "Vehicle_Price");

		if(Vehicle_GetCount(playerid) >= Vehicle_GetSlots(playerid))
			return SendClientMessageEx(playerid, COLOR_WARNING, "Você só pode ter %d veículos no total.", Vehicle_GetSlots(playerid));

		if(!IsPlayerNearPlayer(playerid, sellerid, 4.0))
			return SendWarningMessage(playerid, "Você não está próximo do vendedor do veículo."); 

		if(GetScriptedMoney(playerid) < price)
			return SendWarningMessage(playerid, "Você não possui fundos para comprar esse veículo.");

		if(Vehicle_Nearest(playerid) != carid)
			return SendWarningMessage(playerid, "Você precisa estar perto do veículo para poder comprar.");

		if(!Vehicle_IsOwner(sellerid, carid))
			return SendWarningMessage(playerid, "Essa oferta de venda de veículo não é mais válida.");

		if(PlayerData[playerid][pBlockBuyVehicle] > gettime())
			return SendWarningMessage(playerid, "Você não está autorizado a comprar veículos. Veja o tempo restante em /punicoes.");

		if(!Dealership_CanBuy(playerid, VehicleData[carid][vehicleModel]))
			return 1;

		SendGreenMessage(playerid, "Você comprou com sucesso o veículo de %s por %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendGreenMessage(sellerid, "%s comprou com sucesso o seu veículo por %s.", ReturnName(playerid, 0), FormatNumber(price));

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) comprou o veículo %s (uid: %d) do %s (uid: %d) por %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID], ReturnName(sellerid), PlayerData[sellerid][pID], FormatNumber(price));
		Log_Write(PlayerData[sellerid][pID], "[%s] %s (uid: %d) vendeu o veículo %s (uid: %d) para %s (uid: %d) por %s.", FormatFullTime(), ReturnName(sellerid), PlayerData[sellerid][pID], ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID], ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(price));

		SendServerMessage(playerid, "Você possui um novo veículo (/v lista).");

		new Float:Pos[4];
		GetVehiclePos(carid, Pos[0], Pos[1], Pos[2]);
		GetVehicleZAngle(carid, Pos[3]);

		format(VehicleData[carid][vehicleOwnerName], 255, ReturnName(playerid));
		VehicleData[carid][vehicleOwnerID] = PlayerData[playerid][pID];
		VehicleData[carid][vehicleParked] = 0;
		VehicleData[carid][vehicleParkedPos][0] = Pos[0];
		VehicleData[carid][vehicleParkedPos][1] = Pos[1];
		VehicleData[carid][vehicleParkedPos][2] = Pos[2];
		VehicleData[carid][vehicleParkedPos][3] = Pos[3];
		VehicleData[carid][vehicleParkedVW] = GetPlayerVirtualWorld(playerid);

		Vehicle_Save(carid);
		Vehicle_Destroy(carid);

		GiveScriptedMoney(playerid, -price);
		GiveScriptedMoney(sellerid, price);

		PlayerData[playerid][pVehicleSeller] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "Vehicle_Offered");
		DeletePVar(playerid, "Vehicle_Price");
	}
	else if(!strcmp(params, "casa", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "House_OfferTime") < gettime())
		{
			PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de venda de casa expirou.");
		}

		new sellerid = PlayerData[playerid][pHouseSeller],
		houseid = GetPVarInt(playerid, "House_Offered"),
		price = GetPVarInt(playerid, "House_Price");

		if(House_GetCount(playerid) >= MAX_CASAS_JOGADOR)
			return SendWarningMessage(playerid, "Você só pode ter %d casas no total.", MAX_CASAS_JOGADOR);

		if(!IsPlayerNearPlayer(playerid, sellerid, 4.0))
			return SendWarningMessage(playerid, "Você não está próximo do vendedor da casa."); 

		if(GetScriptedMoney(playerid) < price)
			return SendWarningMessage(playerid, "Você não possui fundos para comprar essa casa.");

		if(House_Nearest(playerid) != houseid)
			return SendWarningMessage(playerid, "Você precisa estar perto da casa para poder comprar.");

		if(!House_IsOwner(sellerid, houseid))
			return SendWarningMessage(playerid, "Essa oferta de venda de casa não é mais válida.");

		SendGreenMessage(playerid, "Você comprou com sucesso a casa de %s por %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendGreenMessage(sellerid, "%s comprou com sucesso a sua casa por %s.", ReturnName(playerid, 0), FormatNumber(price));

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) comprou a casa %s (uid: %d) do %s (uid: %d) por %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], HouseData[houseid][houseAddress], HouseData[houseid][houseID], ReturnName(sellerid), PlayerData[sellerid][pID], FormatNumber(price));
		Log_Write(PlayerData[sellerid][pID], "[%s] %s (uid: %d) vendeu a casa %s (uid: %d) para %s (uid: %d) por %s.", FormatFullTime(), ReturnName(sellerid), PlayerData[sellerid][pID], HouseData[houseid][houseAddress], HouseData[houseid][houseID], ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(price));

		format(HouseData[houseid][houseOwnerName], 255, ReturnName(playerid));
		HouseData[houseid][houseOwner] = PlayerData[playerid][pID];
		HouseData[houseid][houseFurnitureA1] = -1;
		HouseData[houseid][houseFurnitureA2] = -1;
		House_Refresh(houseid);
		House_Save(houseid);

		GiveScriptedMoney(playerid, -price);
		GiveScriptedMoney(sellerid, price);

		PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "House_Offered");
		DeletePVar(playerid, "House_Price");
	}
	else if(!strcmp(params, "convite", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Faction_OfferTime") < gettime())
		{
			PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de entrar na facção expirou.");
		}

		new targetid = PlayerData[playerid][pFactionOffer],
		factionid = PlayerData[playerid][pFactionOffered];

		if(!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] < FactionData[PlayerData[targetid][pFaction]][factionRanks] - 1)
			return SendWarningMessage(playerid, "Essa proposta de convite na facção não é mais válida.");

		PlayerData[playerid][pFactionRank] = 1;
		SetFaction(playerid, factionid);

		SendGreenMessage(playerid, "Você aceitou o convite de %s para entrar na facção \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));
		SendGreenMessage(targetid, "%s aceitou o seu convite para entrar na facção \"%s\".", ReturnName(playerid, 0), Faction_GetName(targetid));

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) aceitou o convite de %s (uid: %d) para entrar na facção %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(targetid), PlayerData[targetid][pID], Faction_GetName(targetid), PlayerData[targetid][pFactionID]);

		SendFactionMessage(factionid, FactionData[PlayerData[playerid][pFaction]][factionColor], "%s: %s é o mais novo membro da facção!", Faction_GetName(targetid), ReturnName(playerid, 0));

		PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFactionOffered] = -1;
	}
	else if(!strcmp(params, "reparo", true) && PlayerData[playerid][pMechanicRepair] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Reparo_OfferTime") < gettime())
		{
			PlayerData[playerid][pMechanicRepair] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de reparo na lataria do veículo expirou.");
		}

		new mecanico = PlayerData[playerid][pMechanicRepair],
		carroid = GetPVarInt(playerid, "Reparo_Carro"), 
		valor = GetPVarInt(playerid, "Reparo_Valor");

		if(!IsPlayerNearPlayer(playerid, mecanico, 5.0))
			return SendWarningMessage(playerid, "Você não está próximo do mecânico.");

		if(GetScriptedMoney(playerid) < valor)
			return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(valor));

		if(!IsPlayerNearHood(mecanico, carroid))
			return SendWarningMessage(playerid, "O mecânico precisa estar próximo ao capô do veículo.");

		SendGreenMessage(playerid, "Você aceitou a oferta de reparo do mecânico %s no valor de %s.", ReturnName(mecanico, 0), FormatNumber(valor));
		SendGreenMessage(mecanico, "%s aceitou a sua oferta de reparo no valor de %s.", ReturnName(playerid, 0), FormatNumber(valor));

		GiveScriptedMoney(playerid, -valor);
		GiveScriptedMoney(mecanico, valor);

		ApplyAnimation(mecanico, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

		SetTimerEx("RepairCar", 5000, false, "ddd", mecanico, playerid, carroid);
		SendNearbyMessage(mecanico, 10.0, COLOR_PURPLE, "* %s pega as suas ferramentas e inicia o processo de reparo.", ReturnName(mecanico, 0));
		GameTextForPlayer(mecanico, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Reparando...", 5500, 3);

		PlayerData[playerid][pMechanicRepair] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "Reparo_Carro"); 
		DeletePVar(playerid, "Reparo_Valor");
	}
	else if(!strcmp(params, "droga", true) && PlayerData[playerid][pDrugSeller] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Drug_OfferTime") < gettime())
		{
			PlayerData[playerid][pDrugSeller] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de venda de droga expirou.");
		}

		new vendedor = PlayerData[playerid][pDrugSeller],
		tipo = GetPVarInt(playerid, "Drug_Type"),
		quantidade = GetPVarInt(playerid, "Drug_Amount"),
		valor = GetPVarInt(playerid, "Drug_Price");

		if(!IsPlayerNearPlayer(playerid, vendedor, 3.0))
			return SendWarningMessage(playerid, "Você não próximo do vendedor de droga.");

		if(GetScriptedMoney(playerid) < valor)
			return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(valor));

		if(tipo == 1)
		{
			if(Inventory_Count(vendedor, "Marijuana") < quantidade)
				return SendWarningMessage(playerid, "O vendedor não está portando esta quantia de drogas.");

			new inv = Inventory_Add(playerid, "Marijuana", 1578, quantidade);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			Inventory_Remove(vendedor, "Marijuana", quantidade);

			GiveScriptedMoney(playerid, - valor);
			GiveScriptedMoney(vendedor, valor);

			SendGreenMessage(playerid, "Você aceitou a oferta de %s e comprou %d marijuana por %s.", ReturnName(vendedor, 0), quantidade, FormatNumber(valor));
			SendGreenMessage(vendedor, "%s aceitou a oferta de %d marijuana por %s.", ReturnName(playerid, 0), quantidade, FormatNumber(valor));
		}
		else if(tipo == 2)
		{
			if(Inventory_Count(vendedor, "Cocaína") < quantidade)
				return SendWarningMessage(playerid, "O vendedor não está portando esta quantia de drogas.");

			new inv = Inventory_Add(playerid, "Cocaína", 1575, quantidade);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			Inventory_Remove(vendedor, "Cocaína", quantidade);

			GiveScriptedMoney(playerid, - valor);
			GiveScriptedMoney(vendedor, valor);

			SendGreenMessage(playerid, "Você aceitou a oferta de %s e comprou %d cocaína por %s.", ReturnName(vendedor, 0), quantidade, FormatNumber(valor));
			SendGreenMessage(vendedor, "%s aceitou a oferta de %d cocaína por %s.", ReturnName(playerid, 0), quantidade, FormatNumber(valor));
		}
		else if(tipo == 3)
		{
			if(Inventory_Count(vendedor, "LSD") < quantidade)
				return SendWarningMessage(playerid, "O vendedor não está portando esta quantia de drogas.");

			new inv = Inventory_Add(playerid, "LSD", 1577, quantidade);

			if(inv == -1)
				return SendWarningMessage(playerid, "Você precisa ter um espaço livre no seu inventário.");

			Inventory_Remove(vendedor, "LSD", quantidade);

			GiveScriptedMoney(playerid, - valor);
			GiveScriptedMoney(vendedor, valor);

			SendGreenMessage(playerid, "Você aceitou a oferta de %s e comprou %d lsd por %s.", ReturnName(vendedor, 0), quantidade, FormatNumber(valor));
			SendGreenMessage(vendedor, "%s aceitou a oferta de %d lsd por %s.", ReturnName(playerid, 0), quantidade, FormatNumber(valor));
		}

		PlayerData[playerid][pDrugSeller] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "Drug_Type"); 
		DeletePVar(playerid, "Drug_Amount");
		DeletePVar(playerid, "Drug_Price");
	}
	else if(!strcmp(params, "arma", true) && PlayerData[playerid][pWeaponSeller] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Weapon_OfferTime") < gettime())
		{
			PlayerData[playerid][pWeaponSeller] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de venda de arma expirou.");
		}

		new vendedor = PlayerData[playerid][pWeaponSeller],
		weaponid = GetPVarInt(playerid, "Weapon_ID"),
		ammo = GetPVarInt(playerid, "Weapon_Ammo"),
		price = GetPVarInt(playerid, "Weapon_Price");

		if(!IsPlayerNearPlayer(playerid, vendedor, 2.5))
			return SendWarningMessage(playerid, "Você não próximo do vendedor da arma.");

		if(GetScriptedMoney(playerid) < price)
			return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(price));

		if(!PlayerHasWeapon(vendedor, weaponid))
			return SendWarningMessage(playerid, "Não foi possível completar a compra da arma. (vendedor não está com a arma)");

		if(PlayerData[vendedor][pAmmo][g_aWeaponSlots[weaponid]] != ammo)
			return SendWarningMessage(playerid, "Não foi possível completar a compra da arma. (munição na hora da venda não é a mesma)");

		if(PlayerData[playerid][pTimePlayed] < 2)
			return SendWarningMessage(playerid, "Você precisa de pelo menos 2 horas jogadas.");

		if(PlayerHasWeapon(playerid, weaponid))
			return SendWarningMessage(playerid, "Você já está equipado com essa arma.");

		if(PlayerHasWeaponInSlot(playerid, weaponid))
			return SendWarningMessage(playerid, "Você já está equipado com uma arma desse porte.");

		GiveScriptedMoney(playerid, -price);
		GiveScriptedMoney(vendedor, price);

		ResetWeapon(vendedor, weaponid);
		GiveWeaponToPlayer(playerid, weaponid, ammo);

		SendGreenMessage(playerid, "Você aceitou a oferta de %s e comprou um(a) %s com %d de munição por %s.", ReturnName(vendedor, 0), ReturnWeaponName(weaponid), ammo, FormatNumber(price));
		SendGreenMessage(vendedor, "%s aceitou a oferta de um(a) %s com %d de munição por %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ammo, FormatNumber(price));

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) comprou a arma %s com %d de munição do %s (uid: %d) por %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnWeaponName(weaponid), ammo, ReturnName(vendedor), PlayerData[vendedor][pID], FormatNumber(price));
		Log_Write(PlayerData[vendedor][pID], "[%s] %s (uid: %d) vendeu a arma %s com %d de munição para %s (uid: %d) por %s.", FormatFullTime(), ReturnName(vendedor), PlayerData[vendedor][pID], ReturnWeaponName(weaponid), ammo, ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(price));

		PlayerData[playerid][pWeaponSeller] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "Weapon_ID");
		DeletePVar(playerid, "Weapon_Ammo");
		DeletePVar(playerid, "Weapon_Price");
	}
	else if(!strcmp(params, "reparomotor", true) && PlayerData[playerid][pMechanicEngine] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Reparo_MotorOfferTime") < gettime())
		{
			PlayerData[playerid][pMechanicEngine] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de reparo no motor do veículo expirou.");
		}

		new mecanico = PlayerData[playerid][pMechanicEngine],
		carroid = GetPVarInt(playerid, "Reparo_MotorCarro"),
		valor = GetPVarInt(playerid, "Reparo_MotorValor");

		if(!IsPlayerNearPlayer(playerid, mecanico, 5.0))
			return SendWarningMessage(playerid, "Você não está próximo do mecânico.");

		if(GetScriptedMoney(playerid) < valor)
			return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(valor));

		if(!IsPlayerNearHood(mecanico, carroid))
			return SendWarningMessage(playerid, "O mecânico precisa estar próximo ao capô do veículo.");

		SendGreenMessage(playerid, "Você aceitou a oferta de reparo no motor do mecânico %s no valor de %s.", ReturnName(mecanico, 0), FormatNumber(valor));
		SendGreenMessage(mecanico, "%s aceitou a sua oferta de reparo no motor no valor de %s.", ReturnName(playerid, 0), FormatNumber(valor));

		GiveScriptedMoney(playerid, -valor);
		GiveScriptedMoney(mecanico, valor);

		ApplyAnimation(mecanico, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

		SetTimerEx("RepairEngineCar", 30000, false, "ddd", mecanico, playerid, carroid);
		SendNearbyMessage(mecanico, 10.0, COLOR_PURPLE, "* %s pega as suas ferramentas e inicia o processo de reparo no motor.", ReturnName(mecanico, 0));
		GameTextForPlayer(mecanico, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Reparando o motor...", 35000, 3);

		PlayerData[playerid][pMechanicEngine] = INVALID_PLAYER_ID;
		DeletePVar(playerid, "Reparo_MotorCarro"); 
		DeletePVar(playerid, "Reparo_MotorValor");
	}
	else if(!strcmp(params, "familia", true) && PlayerData[playerid][pFamilyOffer] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Family_OfferTime") < gettime())
		{
			PlayerData[playerid][pFamilyOffer] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de entrar na família expirou.");
		}

		new familyleader = PlayerData[playerid][pFamilyOffer],
		familyid = PlayerData[playerid][pFamilyInvite];

		if(!FamilyData[familyid][familyExists] || PlayerData[familyleader][pFamilyRank] < FamilyData[familyid][familyRanks])
			return SendWarningMessage(playerid, "Essa proposta de convite na família não é mais válida.");

		SendFamilyMessage(familyid, COLOR_RP1, "** %s (ID: %d) entrou para a família.", ReturnName(playerid, 0), playerid);

		SetFamily(playerid, familyid);

		SendGreenMessage(playerid, "Você aceitou o convite de %s para entrar na família: \"%s\".", ReturnName(familyleader, 0), Family_GetName(familyleader));
		SendGreenMessage(familyleader, "%s aceitou o seu convite e agora é membro da sua família.", ReturnName(playerid, 0));

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) aceitou o convite de %s (uid: %d) para entrar na família %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(familyleader), PlayerData[familyleader][pID], Family_GetName(familyleader), PlayerData[familyleader][pFamilyID]);

		PlayerData[playerid][pFamilyOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFamilyInvite] = -1;
	}
	else if(!strcmp(params, "assalto", true) && PlayerData[playerid][pRobPlayer] != INVALID_PLAYER_ID)
	{
		if(GetPVarInt(playerid, "Rob_OfferTime") < gettime())
		{
			PlayerData[playerid][pRobPlayer] = INVALID_PLAYER_ID;
			return SendWarningMessage(playerid, "Essa oferta de aceitar roubo expirou.");
		}

		new robber = PlayerData[playerid][pRobPlayer];

		if(IsPlayerNearPlayer(playerid, robber, 2.0))
			return SendWarningMessage(playerid, "Você precisa estar próximo do assaltante.");

		new money = GetScriptedMoney(playerid);

		GiveScriptedMoney(playerid, - money);
		GiveScriptedMoney(robber, money);

		SendGreenMessage(playerid, "Você se rendeu ao assalto e entregou %s para o assaltante (%s).", FormatNumber(money), ReturnName(robber, 0));
		SendGreenMessage(robber, "%s se rendeu e entregou todo o dinheiro (%s) para você.", ReturnName(playerid, 0), FormatNumber(money));

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) se rendeu ao assalto de %s (uid: %d) e perdeu %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(robber), PlayerData[robber][pID], FormatNumber(money));

		SendNearbyMessage(playerid, 5.0, COLOR_PURPLE, "* %s faz alguns movimentos suspeitos em %s.", ReturnName(robber, 0), ReturnName(playerid, 0));

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro informado é inválido ou você não recebeu esta oferta.");
	}

	return 1;
}

CMD:radio(playerid, params[])
{
	if(!Inventory_HasItem(playerid, "Rádio Portátil"))
		return SendWarningMessage(playerid, "Você não tem um rádio portátil.");

	new option[16], plusoption[16];

	if(sscanf(params, "s[16]S()[16]", option, plusoption))
	{
		SendSyntaxMessage(playerid, "/radio [opção]");
		SendFormatMessage(playerid, COLOR_YELLOW, "Opções", "vercanais, canal");
		return SendFormatMessage(playerid, COLOR_RP1, "Dica", "Para usar: /r(2,3,4) [texto]. O slot do rádio precisar estar em um canal.");
	}

	if(!strcmp(option, "canal"))
	{
		new slot, channel;

		if(sscanf(plusoption, "dd", slot, channel))
			return SendSyntaxMessage(playerid, "/radio canal [slot] [canal]");

		if(slot < 1 || slot > 4)
			return SendWarningMessage(playerid, "Slot inválido, atente-se a quantia de slots disponíveis do seu rádio (4).");

		if(channel < 0 || channel > 999999)
			return SendWarningMessage(playerid, "Seu rádio não consegue sintonizar neste canal, tente outro (1 à 999999).");

		if(channel == 911 && GetFactionType(playerid) != FACTION_POLICE)
		{
			return SendWarningMessage(playerid, "Seu rádio não consegue sintonizar nesse canal (911).");
		}
		else if(channel == 913 && GetFactionType(playerid) != FACTION_GOV)
		{
			return SendWarningMessage(playerid, "Seu rádio não consegue sintonizar nesse canal (913).");
		}
		else if(channel == 912 && GetFactionType(playerid) != FACTION_MEDIC)
		{
			return SendWarningMessage(playerid, "Seu rádio não consegue sintonizar nesse canal (912).");
		}
		else if(channel == 999 && GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		{
			return SendWarningMessage(playerid, "Seu rádio não consegue sintonizar nesse canal (999).");
		}

		for(new i = 0; i < 4; i++) 
		{
			if(PlayerData[playerid][pRadioSlot][i] == channel && channel != 0)
				return SendWarningMessage(playerid, "O SLOT %d do seu rádio já está sintonizado no canal %d. Confira em: /radio vercanais.", i + 1, channel);
		}

		PlayerData[playerid][pRadioSlot][slot - 1] = channel;

		if(channel)
		{
			if(slot == 1)
			{
				SendGreenMessage(playerid, "Você alterou o canal do SLOT %d para %d (/r [texto]).", slot, channel);
			}
			else
			{
				SendGreenMessage(playerid, "Você alterou o canal do SLOT %d para %d. Use (/r%d [texto].", slot, channel, slot);
			}
		}
		else
		{
			SendGreenMessage(playerid, "Você desligou o SLOT %d do seu rádio.", slot);
		}

	}
	else if(!strcmp(option, "vercanais"))
	{
		SendClientMessage(playerid, COLOR_LIGHTYELLOW, "______________________________________");
		for(new i = 0; i < 4; i++)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "SLOT: %d - CHANNEL: %d", i + 1, PlayerData[playerid][pRadioSlot][i]);
		}
		SendClientMessage(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro informado é inválido.");
	}

	return 1;
}

CMD:r(playerid, params[])
{
	if(!Inventory_HasItem(playerid, "Rádio Portátil"))
		return SendWarningMessage(playerid, "Você não tem um rádio portátil.");

	if(!PlayerData[playerid][pRadioSlot][0])
		return SendWarningMessage(playerid, "Este SLOT não está configurado em um canal, use /radio canal 1 [hz] para configurar.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/r [texto]");

	new freq = PlayerData[playerid][pRadioSlot][0];

	foreach(new i : Player)
	{
		for(new r = 0; r < 4; r++)
		{
			if(PlayerData[i][pRadioSlot][r] == freq)
			{
				if(strlen(params) > 64)
				{
					SendClientMessageEx(i, COLOR_RADIO, "** [S: %d CH: %d] %s: %.64s", r + 1, PlayerData[i][pRadioSlot][r], ReturnName(playerid, 0), params);
					SendClientMessageEx(i, COLOR_RADIO, "...%s **", params[64]);
				}
				else
				{
					SendClientMessageEx(i, COLOR_RADIO, "** [S: %d CH: %d] %s: %s **", r + 1, PlayerData[i][pRadioSlot][r], ReturnName(playerid, 0), params);
				}
			}
		}
	}

	if(strlen(params) > 64)
	{
		SendChatMessage(5.5, playerid, "(rádio) %s: %.64s", ReturnName(playerid, 0), params);
		SendChatMessage(5.5, playerid, "...%s **", params[64]);
	}
	else
	{
		SendChatMessage(5.5, playerid, "(rádio) %s: %s **", ReturnName(playerid, 0), params);
	}

	return 1;
}

CMD:r2(playerid, params[])
{
	if(!Inventory_HasItem(playerid, "Rádio Portátil"))
		return SendWarningMessage(playerid, "Você não tem um rádio portátil.");

	if(!PlayerData[playerid][pRadioSlot][1])
		return SendWarningMessage(playerid, "Este SLOT não está configurado em um canal, use /radio canal 2 [hz] para configurar.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/r2 [texto]");

	new freq = PlayerData[playerid][pRadioSlot][1];

	foreach(new i : Player)
	{
		for(new r = 0; r < 4; r++)
		{
			if(PlayerData[i][pRadioSlot][r] == freq)
			{
				if(strlen(params) > 64)
				{
					SendClientMessageEx(i, COLOR_RADIO, "** [S: %d CH: %d] %s: %.64s", r + 1, PlayerData[i][pRadioSlot][r], ReturnName(playerid, 0), params);
					SendClientMessageEx(i, COLOR_RADIO, "...%s **", params[64]);
				}
				else
				{
					SendClientMessageEx(i, COLOR_RADIO, "** [S: %d CH: %d] %s: %s **", r + 1, PlayerData[i][pRadioSlot][r], ReturnName(playerid, 0), params);
				}
			}
		}
	}

	if(strlen(params) > 64)
	{
		SendChatMessage(5.5, playerid, "(rádio) %s: %.64s", ReturnName(playerid, 0), params);
		SendChatMessage(5.5, playerid, "...%s **", params[64]);
	}
	else
	{
		SendChatMessage(5.5, playerid, "(rádio) %s: %s **", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:r3(playerid, params[])
{
	if(!Inventory_HasItem(playerid, "Rádio Portátil"))
		return SendWarningMessage(playerid, "Você não tem um rádio portátil.");

	if(!PlayerData[playerid][pRadioSlot][2])
		return SendWarningMessage(playerid, "Este SLOT não está configurado em um canal, use /radio canal 3 [hz] para configurar.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/r3 [texto]");

	new freq = PlayerData[playerid][pRadioSlot][2];

	foreach(new i : Player)
	{
		for(new r = 0; r < 4; r++)
		{
			if(PlayerData[i][pRadioSlot][r] == freq)
			{
				if(strlen(params) > 64)
				{
					SendClientMessageEx(i, COLOR_RADIO, "** [S: %d CH: %d] %s: %.64s", r + 1, PlayerData[i][pRadioSlot][r], ReturnName(playerid, 0), params);
					SendClientMessageEx(i, COLOR_RADIO, "...%s **", params[64]);
				}
				else
				{
					SendClientMessageEx(i, COLOR_RADIO, "** [S: %d CH: %d] %s: %s **", r + 1, PlayerData[i][pRadioSlot][r], ReturnName(playerid, 0), params);
				}
			}
		}
	}

	if(strlen(params) > 64)
	{
		SendChatMessage(5.5, playerid, "(rádio) %s: %.64s", ReturnName(playerid, 0), params);
		SendChatMessage(5.5, playerid, "...%s **", params[64]);
	}
	else
	{
		SendChatMessage(5.5, playerid, "(rádio) %s: %s **", ReturnName(playerid, 0), params);
	}

    return 1;
}

CMD:r4(playerid, params[])
{
	if(!Inventory_HasItem(playerid, "Rádio Portátil"))
		return SendWarningMessage(playerid, "Você não tem um rádio portátil.");

	if(!PlayerData[playerid][pRadioSlot][3])
		return SendWarningMessage(playerid, "Este SLOT não está configurado em um canal, use /radio canal 4 [hz] para configurar.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/r4 [texto]");

	new freq = PlayerData[playerid][pRadioSlot][3];

	foreach(new i : Player)
	{
		for(new r = 0; r < 4; r++)
		{
			if(PlayerData[i][pRadioSlot][r] == freq)
			{
				if(strlen(params) > 64)
				{
					SendClientMessageEx(i, COLOR_RADIO, "** [S: %d CH: %d] %s: %.64s", r + 1, PlayerData[i][pRadioSlot][r], ReturnName(playerid, 0), params);
					SendClientMessageEx(i, COLOR_RADIO, "...%s **", params[64]);
				}
				else
				{
					SendClientMessageEx(i, COLOR_RADIO, "** [S: %d CH: %d] %s: %s **", r + 1, PlayerData[i][pRadioSlot][r], ReturnName(playerid, 0), params);
				}
			}
		}
	}

	if(strlen(params) > 64)
	{
		SendChatMessage(5.5, playerid, "(rádio) %s: %.64s", ReturnName(playerid, 0), params);
		SendChatMessage(5.5, playerid, "...%s **", params[64]);
	}
	else
	{
		SendChatMessage(5.5, playerid, "(rádio) %s: %s **", ReturnName(playerid, 0), params);
	}

	return 1;
}

CMD:licencas(playerid, params[])
{
	new userid;

	if(sscanf(params, "u", userid))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s confere a sua licença de motorista.", ReturnName(playerid, 0), ReturnName(userid));
		ShowPlayerLicenses(playerid, playerid);		
		return SendGreenMessage(playerid, "Você pode mostrar para alguém digitando: /licencas [id/nome]");
	}

	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(!IsPlayerNearPlayer(playerid, userid, 3.5))
		return SendWarningMessage(playerid, "Você está longe de mais do outro jogador.");

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s mostra as suas licenças para %s.", ReturnName(playerid, 0), ReturnName(userid));

	ShowPlayerLicenses(playerid, userid);

	return 1;
}

CMD:pm(playerid, params[])
{
	new userid, text[128];

	if(sscanf(params, "us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/pm [id/nome (apenas admins)] [mensagem]");

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	if(!PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você só pode enviar mensagens particulares para administradores.");

	if(PlayerData[playerid][pTogPM])
		return SendWarningMessage(playerid, "Este administrador não está recebendo mensagens particulres no momento.");

	if(PlayerData[playerid][pPMMuted])
		return SendWarningMessage(playerid, "Você está proíbido de enviar mensagens particulares por %d segundo(s).", PlayerData[playerid][pPMMuted]);

	if(strlen(text) > 64)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, ">> PM para %s%s{EBEB00} (ID: %d): %.64s", (PlayerData[userid][pAdminStatus]) ? ("{8B96AB}") : (""), ReturnName(userid, 0), userid, text);
		SendClientMessageEx(playerid, COLOR_YELLOW, "...%s <<", text[64]);

		SendClientMessageEx(userid, COLOR_DARKYELLOW, ">> PM de %s%s{FFAE00} (ID: %d): %.64s", (PlayerData[playerid][pAdminStatus]) ? ("{8B96AB}") : (""), ReturnName(playerid, 0), playerid, text);
		SendClientMessageEx(userid, COLOR_DARKYELLOW, "...%s <<", text[64]);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, ">> PM para %s%s{EBEB00} (ID: %d): %s <<", (PlayerData[userid][pAdminStatus]) ? ("{8B96AB}") : (""), ReturnName(userid, 0), userid, text);

		SendClientMessageEx(userid, COLOR_DARKYELLOW, ">> PM de %s%s{FFAE00} (ID: %d): %s <<", (PlayerData[playerid][pAdminStatus]) ? ("{8B96AB}") : (""), ReturnName(playerid, 0), playerid, text);
	}

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) enviou uma mensagem particular para %s (uid: %d): %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], text);
	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) recebeu uma mensagem particular de %s (uid: %d): %s", FormatFullTime(), ReturnName(userid), PlayerData[userid][pID], ReturnName(playerid), PlayerData[playerid][pID], text);

	return 1;
}

CMD:limparmeuchat(playerid, params[])
{
	if(GetPVarInt(playerid, "ClearChatDelay") > gettime())
		return SendWarningMessage(playerid, "Não seja apressado, você pode limpar o seu chat a cada 3 segundos.");

	ClearPlayerChat(playerid, 50);
	
	SetPVarInt(playerid, "ClearChatDelay", gettime() + 3);
    
	return 1;
}

CMD:pagar(playerid, params[])
{
	if(PlayerData[playerid][pJailed] > 0)
		return SendWarningMessage(playerid, "Você está preso e não pode pagar a ninguém.");

	new userid, amount;

	if(sscanf(params, "ud", userid, amount))
		return SendSyntaxMessage(playerid, "/pagar [id/nome] [quantia]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 3.0))
		return SendWarningMessage(playerid, "Esse jogador está desconectado ou você não está próximo a ele.");

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode pagar para si mesmo.");

	if(amount < 1)
		return SendWarningMessage(playerid, "O valor deve ser maior que $1.");

	if(amount > 500 && PlayerData[playerid][pTimePlayed] < 2)
		return SendWarningMessage(playerid, "Você possui menos de 2 horas jogadas e só pode pagar até $500.");

	if(amount > GetScriptedMoney(playerid))
		return SendWarningMessage(playerid, "Você não possui %s em mãos.", FormatNumber(amount));

	GiveScriptedMoney(playerid, -amount);
	GiveScriptedMoney(userid, amount);

	SendGreenMessage(playerid, "Você pagou %s para %s.", FormatNumber(amount), ReturnName(userid, 0));
	SendServerMessage(userid, "Você recebeu %s de %s.", FormatNumber(amount), ReturnName(playerid, 0));

	SendNearbyMessage(playerid, 3.0, COLOR_PURPLE, "* %s paga %s para %s.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pagou a quantia de dinheiro %s para %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(amount), ReturnName(userid), PlayerData[userid][pID]);
	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) recebeu a quantia de dinheiro %s para %s (uid: %d).", FormatFullTime(), ReturnName(userid), PlayerData[userid][pID], FormatNumber(amount), ReturnName(playerid), PlayerData[playerid][pID]);

	return 1;
}

CMD:report(playerid, params[])
{
	new reportid = -1;

	if(isnull(params))
	{
		SendSyntaxMessage(playerid, "/report, /sos, /relatorio [motivo]");
		SendFormatMessage(playerid, COLOR_YELLOW, "Info", "Use para reportar um jogador ou fazer um pedido de ajuda.");
		return 1;
	}

	if(Report_GetCount(playerid) >= 2)
		return SendWarningMessage(playerid, "Você já possui dois (2) pedidos de ajuda em andamento, aguarde.");

	if(PlayerData[playerid][pReportTime] > gettime())
		return SendWarningMessage(playerid, "Você precisa esperar mais %d segundo(s) para poder enviar outro report.", PlayerData[playerid][pReportTime]-gettime());

	if((reportid = Report_Add(playerid, params)) != -1)
	{
		if(strlen(params) > 64)
		{
			SendAdminMessage(COLOR_WARNING, "[SOS %d]:{FFFFFF} %s (ID: %d): %.64s", reportid, ReturnName(playerid, 0), playerid, params);
			SendAdminMessage(COLOR_WHITE, "...%s [/ar %d | /rr %d]", params[64], reportid, reportid);
		}
		else
		{
			SendAdminMessage(COLOR_WARNING, "[SOS %d]:{FFFFFF} %s (ID: %d): %s [/ar %d | /rr %d]", reportid, ReturnName(playerid, 0), playerid, params, reportid, reportid);
		}
			
		PlayerData[playerid][pReportTime] = gettime() + 30;
		SendGreenMessage(playerid, "Seu pedido de ajuda foi enviado para os administradores em trabalho.");

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) enviou o pedido de ajuda (ID: %d): %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], reportid, params);
	}
	else return SendClientMessage(playerid, COLOR_WARNING, "Existem muitos reports/sos ativos no momento, tente mais tarde.");

	return 1;
}
alias:report("relatorio", "sos");

CMD:abrircaixa(playerid, params[])
{
	new id = Crate_Nearest(playerid);

	if(id == -1)
		return SendWarningMessage(playerid, "Você não está próximo a uma caixa.");

	if(!Inventory_HasItem(playerid, "Crowbar"))
		return SendWarningMessage(playerid, "Você não tem um Crowbar no seu inventário.");

	if(PlayerData[playerid][pOpeningCrate])
		return SendWarningMessage(playerid, "Você já está abrindo uma caixa.");

	PlayerData[playerid][pOpeningCrate] = 1;

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s pega o crowbar e começa abrir a caixa.", ReturnName(playerid, 0));
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Abrindo caixa...", 3000, 3);

	SetPlayerFreezed(playerid, true);
	ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.0, 1, 1, 1, 1, 0, 1);

	SetTimerEx("OpenCrate", 3000, false, "ddd", playerid, id, CrateData[id][crateType]);
	return 1;
}

CMD:abrir(playerid)
{
	new id = Gate_Nearest(playerid);

	if(id != -1)
	{
		if(GateData[id][gatePassword] != 0) //ADAPTAR EM DIALOG
		{
			Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Insira a senha", "Digite a senha para poder abrir esse portão:", "Abrir", "Cancelar");
		}
		else
		{
			Gate_Operate(id);
		}
	}
	else if(IsPlayerNearDynamicObject(playerid, CancelaLSPD, 10.0)) //Cancela garagem
	{
		if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
			return 1;

		if(IsDynamicObjectMoving(CancelaLSPD))
			return 1;

		new Float:x, Float:y, Float:z;
		GetDynamicObjectPos(CancelaLSPD, x, y, z);

		if(!StatusCancelaLSPD)
		{
			MoveDynamicObject(CancelaLSPD, x, y, z + 0.05, 0.05, 0.899979, 0.199966, -89.799934);

			StatusCancelaLSPD = true;
		}
		else
		{
			MoveDynamicObject(CancelaLSPD, x, y, z - 0.05, 0.05, 0.899979, -90.199966, -89.799934);

			StatusCancelaLSPD = false;
		}
	}
	else
	{
		new Float:angle;

		for(new i = 0; i < sizeof(PrisionDoor); i++)
		{
			if(IsPlayerNearDynamicObject(playerid, PrisionDoor[i], 3.0))
			{
				if(GetFactionType(playerid) != FACTION_POLICE && PlayerData[playerid][pJob] != EMPREGO_Advogado)
					return SendWarningMessage(playerid, "Você não é um oficial da justiça ou um advogado.");

				Streamer_GetFloatData(STREAMER_TYPE_OBJECT, PrisionDoor[i], E_STREAMER_R_Z, angle);

				if(!StatusPrisionDoor[i])
				{
					GameTextForPlayer(playerid, "~y~Porta Aberta", 2000, 4);
					SetDynamicObjectRot(PrisionDoor[i], 0.0, 0.0, angle + 90.0);
					StatusPrisionDoor[i] = true;
				}
				else
				{
					GameTextForPlayer(playerid, "~y~Porta Fechada", 2000, 4);
					SetDynamicObjectRot(PrisionDoor[i], 0.0, 0.0, angle - 90.0);
					StatusPrisionDoor[i] = false;
				}
				return 1;
			}			
		}
	}	

	return 1;
}
alias:abrir("fechar");

CMD:id(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/id [id/nome]");

	if(IsNumber(params))
	{
		new id;

		sscanf(params, "d", id);

		if(!IsPlayerConnected(id) || !PlayerData[id][pLogged])
			return SendWarningMessage(playerid, "O ID informado é inválido ou ainda não realizou o login.");

		SendClientMessageEx(playerid, COLOR_GREY, "** ID: %d - %s (Nível %d)", id, ReturnName(id, 0), PlayerData[id][pLevel]);
	}
	else
	{
		if(strlen(params) < 3)
			return SendWarningMessage(playerid, "É necessário especificar 3 caracteres.");

		new count;

		foreach(new i : Player)
		{
			if(strfind(ReturnName(i), params, true) != -1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "** ID: %d - %s (Nível %d)", i, ReturnName(i, 0), PlayerData[i][pLevel]);
				count++;
			}
		}

		if(!count)
			return SendWarningMessage(playerid, "Não foi possível encontrar um usuário com o critério: \"%s\".", params);
	}

	return 1;
}

CMD:sussurrar(playerid, params[])
{
	new userid, text[128];

	if(sscanf(params, "us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/(s)ussurar [playerid] [texto]");

	if(!IsPlayerConnected(userid) || !IsPlayerNearPlayer(playerid, userid, 2.0))
		return SendWarningMessage(playerid, "Esse jogador está desconectado ou não está perto de você.");

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode sussurrar para si mesmo.");

	if(strlen(text) > 64)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** Sussurro para %s (%d): %.64s", ReturnName(userid, 0), userid, text);
		SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);

		SendClientMessageEx(userid, COLOR_YELLOW, "** Sussurro de %s (%d): %.64s", ReturnName(playerid, 0), playerid, text);
		SendClientMessageEx(userid, COLOR_YELLOW, "...%s **", text[64]);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "** Sussurro para %s (%d): %s **", ReturnName(userid, 0), userid, text);

		SendClientMessageEx(userid, COLOR_YELLOW, "** Sussurro de %s (%d): %s **", ReturnName(playerid, 0), playerid, text);		
	}
	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s sussurra algo no ouvido de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));

	return 1;
}
alias:sussurrar("s");

CMD:g(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(g)ritar [texto]");

	if(strlen(params) > 64)
	{
		SendChatMessage(20.0, playerid, "%s grita: %.64s", ReturnName(playerid, 0), params);
		SendChatMessage(20.0, playerid, "...%s", params[64]);
	}
	else
	{
		SendChatMessage(20.0, playerid, "%s grita: %s", ReturnName(playerid, 0), params);
	}

	return 1;
}
alias:g("gritar");

CMD:horas(playerid)
{
	new string[64], month[12], date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	switch(date[1])
	{
		case 1: month = "Janeiro";
		case 2: month = "Fevereiro";
		case 3: month = "Março";
		case 4: month = "Abril";
		case 5: month = "Maio";
		case 6: month = "Junho";
		case 7: month = "Julho";
		case 8: month = "Agosto";
		case 9: month = "Setembro";
		case 10: month = "Outubro";
		case 11: month = "Novembro";
		case 12: month = "Dezembro";
	}

	SendClientMessageEx(playerid, COLOR_GREEN, "%d/60 minutos para o seu próximo paycheck.", PlayerData[playerid][pPaycheck]);

	format(string, sizeof(string), "~y~%02d de %s~n~~w~%02d:%02d:%02d", date[0], month, date[3], date[4], date[5]);
	GameTextForPlayer(playerid, string, 6000, 1);

	return 1;
}

CMD:levelup(playerid)
{
	new nextlevel = ((PlayerData[playerid][pLevel]) * 4 + 2);

	if(PlayerData[playerid][pEXP] >= nextlevel)
	{
		if(PlayerData[playerid][pVip])
		{
			PlayerData[playerid][pEXP] -= nextlevel;

			if(PlayerData[playerid][pEXP] < 0) //caso dê algum bug...
			{
				PlayerData[playerid][pEXP] = 0;
			}
		}
		else
		{
			PlayerData[playerid][pEXP] = 0;
		}
		
		PlayerData[playerid][pLevel]++;
		SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
		SendServerMessage(playerid, "Você subiu para o level %d.", PlayerData[playerid][pLevel]);
	}
	else
	{
		SendWarningMessage(playerid, "Você precisa de %d de experiência para o próximo level.", nextlevel);
	}

	return 1;
}

CMD:punicoes(playerid)
{
	new count, ano, mes, dia, hora, minuto, segundo;

	SendClientMessage(playerid, COLOR_WARNING, "Punições ativas:");

	if(PlayerData[playerid][pBlockFurniture] > gettime())
	{
		TimestampToDate(PlayerData[playerid][pBlockFurniture], ano, mes, dia, hora, minuto, segundo);
		
		SendClientMessageEx(playerid, COLOR_WHITE, "* Furniture, expira em %d/%d/%d, %d:%d:%d", dia, mes, ano, hora, minuto, segundo);	
			
		count++;
	}
	if(PlayerData[playerid][pBlockBuyVehicle] > gettime())
	{
		TimestampToDate(PlayerData[playerid][pBlockBuyVehicle], ano, mes, dia, hora, minuto, segundo);
		
		SendClientMessageEx(playerid, COLOR_WHITE, "* Comprar veículos, expira em %d/%d/%d, %d:%d:%d", dia, mes, ano, hora, minuto, segundo);

		count++;
	}
	if(PlayerData[playerid][pBlockMoney] > gettime())
	{
		TimestampToDate(PlayerData[playerid][pBlockMoney], ano, mes, dia, hora, minuto, segundo);

		SendClientMessageEx(playerid, COLOR_WHITE, "* Dinheiro bloqueado (%s), expira em %d/%d/%d, %d:%d:%d", FormatNumber(PlayerData[playerid][pMoneyBlocked]), dia, mes, ano, hora, minuto, segundo);

		count++;
	}

	if(!count)
		return SendClientMessage(playerid, COLOR_GREY, "* Nenhuma punição encontrada no seu personagem.");

	return 1;
}

CMD:avisos(playerid)
{
	SendClientMessage(playerid, COLOR_LIGHTYELLOW, "______________________________________");

	SendClientMessageEx(playerid, COLOR_WARNING, "Meus avisos (%d/3)", PlayerData[playerid][pWarns]);
	
	if(PlayerData[playerid][pWarns] >= 1 && strlen(PlayerData[playerid][pWarn1]))
		SendClientMessageEx(playerid, COLOR_WHITE, "* Primeiro aviso: \"%s\"", PlayerData[playerid][pWarn1]);

	if(PlayerData[playerid][pWarns] >= 2 && strlen(PlayerData[playerid][pWarn2]))
		SendClientMessageEx(playerid, COLOR_WHITE, "* Segundo aviso: \"%s\"", PlayerData[playerid][pWarn2]);

	SendClientMessage(playerid, COLOR_LIGHTYELLOW, "______________________________________");

	return 1;	
}

CMD:tog(playerid)
{
	Tog_ShowList(playerid);

	return 1;
}
alias:tog("bloq");

CMD:removercp(playerid, params[])
{
	if(PlayerData[playerid][pDrivingTest])
		return SendWarningMessage(playerid, "Você precisa terminar o teste de direção primeiro.");

	Waypoint_Remove(playerid);
	DisablePlayerCheckpoint(playerid);
	SendGreenMessage(playerid, "Você removeu o checkpoint do seu mini-mapa.");
	return 1;
}

/*CMD:(playerid, params[])
{
	return 1;
}*/
// ============================================================ COMANDOS EMPREGOS ============================================================== //
CMD:empregos(playerid)
{
	ViewJobs(playerid);
	return 1;
}
alias:empregos("jobs");

CMD:sairemprego(playerid, params[])
{
	if(PlayerData[playerid][pJob] == EMPREGO_Nenhum) 
		return SendWarningMessage(playerid, "Você não faz parte de um emprego.");
	
	if(PlayerData[playerid][pJailed] != 0)
		return SendWarningMessage(playerid, "Você não pode sair do emprego nessa situação.");
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid)) 
		return SendWarningMessage(playerid, "Você não pode sair do seu emprego agora.");
	
	PlayerData[playerid][pJob] = EMPREGO_Nenhum;
	
	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

	SendGreenMessage(playerid, "Você saiu do seu emprego atual.");

	return 1;
}

CMD:industria(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Caminhoneiro)
		return SendWarningMessage(playerid, "Você não é um caminhoneiro.");

	new string[32], string_dialog[256], count;

	if(sscanf(params, "s[32]", string))
		return SendSyntaxMessage(playerid, "/industria [comprar/vender/info]");

	new id;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		if(!strcmp(string, "comprar", true))
		{
			for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++) if(IndustryData[id][industryProduct][i])
			{
				format(string_dialog, sizeof(string_dialog), "%s%s\t%s\n", string_dialog, Industry_ProductName(IndustryData[id][industryProduct][i]), FormatNumber(IndustryData[id][industryProductPrice][i]));
				ListedOptions[playerid][count++] = i;
			}

			Dialog_Show(playerid, IndustryBuyProduct, DIALOG_STYLE_TABLIST, "Produtos a venda:", string_dialog, "Comprar", "Cancelar");
		}
		else if(!strcmp(string, "vender", true))
		{
			if(!TempData[playerid][tempHoldingProduct])
				return SendWarningMessage(playerid, "Você não está carregando um produto.");

			for(new i = 0; i < MAX_INDUSTRY_PRODUCT; i++)
			{
				if(IndustryData[id][industryBuying][i] == TempData[playerid][tempHoldingProduct])
				{
					if(IndustryData[id][industryBuyingStock][i] >= IndustryData[id][industryBuyingMaxStock][i])
						return SendWarningMessage(playerid, "A indústria não está aceitando mais este produto (%s) por excesso de estoque.", Industry_ProductName(TempData[playerid][tempHoldingProduct]));

					Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) vendeu o produto para a indústria %s (uid: %d) por %s.", FormatFullTime(), ReturnName(playerid), playerid, Industry_ProductName(TempData[playerid][tempHoldingProduct]), IndustryData[id][industryName], IndustryData[id][industryID], FormatNumber(IndustryData[id][industryBuyingPrice][i]));
					SendGreenMessage(playerid, "Você vendeu o produto '%s' para a indústria %s por %s.", Industry_ProductName(TempData[playerid][tempHoldingProduct]), IndustryData[id][industryName], FormatNumber(IndustryData[id][industryBuyingPrice][i]));
					
					Daily_Update(playerid, 1);

					IndustryData[id][industryBuyingStock][i] += 1;
					
					GiveScriptedMoney(playerid, IndustryData[id][industryBuyingPrice][i]);

					Carga_UnsetAttach(playerid);

					Industry_Save(id);

					return 1;
				}
			}

			SendWarningMessage(playerid, "Você não consegue vender este produto aqui, veja as informações em: /industria info.");
		}
		else if(!strcmp(string, "info", true))
		{
			Industry_ShowInfo(playerid, id);
		}
		else return SendWarningMessage(playerid, "Parâmetro inválido.");
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma indústria.");

	return 1;
}

CMD:carga(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Caminhoneiro)
		return SendWarningMessage(playerid, "Você não é um caminhoneiro.");

	new option[32];

	sz_MiscString[0] = 0;

	if(sscanf(params, "s[32]", option))
		return SendSyntaxMessage(playerid, "/carga [colocar/pegar/vender/lista/jogarfora]");

	if(!strcmp(option, "colocar", true))
	{
		if(!TempData[playerid][tempHoldingProduct])
			return SendWarningMessage(playerid, "Você não está carregando um produto.");

		new vehicleid = Vehicle_Nearest(playerid);

		if(vehicleid == INVALID_VEHICLE_ID)
			return SendWarningMessage(playerid, "Você não está próximo de um veículo.");

		if(IsPlayerNearBoot(playerid, vehicleid) && GetTrunkStatus(vehicleid))
		{
			new vehicle_load = IsLoadableVehicle(vehicleid);

			if(vehicle_load == -1)
				return SendWarningMessage(playerid, "Esse veículo não consegue transportar cargas.");

			for(new i = 0; i < vehicle_load; i++) 
			{
				if(!VehicleData[vehicleid][vehicleCrateSlot][i]) 
				{
					VehicleData[vehicleid][vehicleCrateSlot][i] = TempData[playerid][tempHoldingProduct];
					
					Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) guardou o produto %s dentro do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], Industry_ProductName(TempData[playerid][tempHoldingProduct]), ReturnVehicleModelName(VehicleData[vehicleid][vehicleModel]), VehicleData[vehicleid][vehicleID]);
					SendGreenMessage(playerid, "Você colocou o produto '%s' no compartimento do seu veículo. (%d/%d)", Industry_ProductName(TempData[playerid][tempHoldingProduct]), Vehicle_GetCrates(vehicleid), vehicle_load);
					
					Industry_VehicleAttach(vehicleid, i);
					Carga_UnsetAttach(playerid);
					
					return 1;
				}
			}
		}
		else return SendWarningMessage(playerid, "Você não está próximo a traseira ou o porta malas do veículo está fechado.");
	}

	else if(!strcmp(option, "pegar", true))
	{
		if(TempData[playerid][tempHoldingProduct])
			return SendWarningMessage(playerid, "Você já está carregando um produto.");

		new vehicleid = Vehicle_Nearest(playerid);

		if(vehicleid == INVALID_VEHICLE_ID)
			return SendWarningMessage(playerid, "Você não está próximo de um veículo.");

		if(IsPlayerNearBoot(playerid, vehicleid) && GetTrunkStatus(vehicleid))
		{
			new vehicle_load = IsLoadableVehicle(vehicleid);

			if(vehicle_load == -1)
				return SendWarningMessage(playerid, "Esse veículo não é de transportar cargas.");

			for(new i = 0; i < vehicle_load; i++) 
			{
				if(VehicleData[vehicleid][vehicleCrateSlot][i]) 
				{
					TempData[playerid][tempHoldingProduct] = VehicleData[vehicleid][vehicleCrateSlot][i];
					VehicleData[vehicleid][vehicleCrateSlot][i] = 0;
					
					if(i < 5)
					{
						if(IsValidDynamicObject(VehicleData[vehicleid][vehicleObjectSlot][i]))
							DestroyDynamicObject(VehicleData[vehicleid][vehicleObjectSlot][i]);			
					}
					
					Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) pegou o produto %s de dentro do veículo %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], Industry_ProductName(TempData[playerid][tempHoldingProduct]), ReturnVehicleModelName(VehicleData[vehicleid][vehicleModel]), VehicleData[vehicleid][vehicleID]);
					SendGreenMessage(playerid, "Você pegou o produto '%s' de dentro do compartimento seu veículo.", Industry_ProductName(TempData[playerid][tempHoldingProduct])); 
					Carga_SetAttach(playerid);
					return 1;
				}
			}

			SendWarningMessage(playerid, "Não há o que pegar nesse veículo.");
		}
		else return SendWarningMessage(playerid, "Você não está próximo a traseira ou o porta malas do veículo está fechado.");
	}

	else if(!strcmp(option, "vender", true))
	{
		if(!TempData[playerid][tempHoldingProduct])
			return SendWarningMessage(playerid, "Você não está carregando um produto.");

		new id;

		if((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
		{
			if(BusinessData[id][businessBuyingProduct] == TempData[playerid][tempHoldingProduct])
			{
				if(!BusinessData[id][businessBuying])
					return SendWarningMessage(playerid, "A empresa não está comprando por produtos.");

				BusinessData[id][businessBuying] -= 1;
				BusinessData[id][businessStock] += 10;

				Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) vendeu o produto %s para a empresa %s (uid: %d) por %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], Industry_ProductName(TempData[playerid][tempHoldingProduct]), BusinessData[id][businessName], BusinessData[id][businessID], FormatNumber(BusinessData[id][businessBuyingPrice]));
				SendGreenMessage(playerid, "Você vendeu o produto '%s' por %s.", Industry_ProductName(TempData[playerid][tempHoldingProduct]), FormatNumber(BusinessData[id][businessBuyingPrice]));

				GiveScriptedMoney(playerid, BusinessData[id][businessBuyingPrice]);

				Temp_ResetData(playerid);

				Carga_UnsetAttach(playerid);

				Business_Save(id);
			}
			else return SendWarningMessage(playerid, "Esta empresa não compra esse tipo de produto.");
		}
		else return SendWarningMessage(playerid, "Você não está próximo ou dentro de uma empresa.");
	}

	else if(!strcmp(option, "lista", true))
	{
		new vehicleid = Vehicle_Nearest(playerid);

		if(vehicleid == INVALID_VEHICLE_ID)
			return SendWarningMessage(playerid, "Você não está próximo de um veículo.");

		if(IsPlayerNearBoot(playerid, vehicleid) && GetTrunkStatus(vehicleid))
		{
			new vehicle_load = IsLoadableVehicle(vehicleid);

			if(vehicle_load == -1)
				return SendWarningMessage(playerid, "Esse veículo não consegue transportar cargas.");

			for(new i = 0; i < vehicle_load; i++)
			{					
				if(!VehicleData[vehicleid][vehicleCrateSlot][i])
					format(sz_MiscString, sizeof(sz_MiscString), "%s%d. Livre\n", sz_MiscString, i);
				else
					format(sz_MiscString, sizeof(sz_MiscString), "%s%d. %s\n", sz_MiscString, i, Industry_ProductName(VehicleData[vehicleid][vehicleCrateSlot][i]));
			}

			Dialog_Show(playerid, ProductTrunkList, DIALOG_STYLE_LIST, "Carregamento do veículo:", sz_MiscString, "Pegar", "Cancelar");
		}
		else return SendWarningMessage(playerid, "Você não está próximo a traseira ou o porta malas do veículo está fechado.");
	}

	else if(!strcmp(option, "jogarfora", true))
	{
		if(!TempData[playerid][tempHoldingProduct])
			return SendWarningMessage(playerid, "Você não está carregando um produto.");

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) descartou o produto %s.", FormatFullTime(), ReturnName(playerid), playerid, Industry_ProductName(TempData[playerid][tempHoldingProduct]));
		SendGreenMessage(playerid, "Você descartou o produto '%s'.", Industry_ProductName(TempData[playerid][tempHoldingProduct]));

		Carga_UnsetAttach(playerid);
	}

	else return SendWarningMessage(playerid, "Parâmetro inválido.");

	return 1;
}

CMD:tpda(playerid)
{
	if(PlayerData[playerid][pJob] != EMPREGO_Caminhoneiro)
		return SendWarningMessage(playerid, "Você não é um caminhoneiro.");

	Dialog_Show(playerid, TPDA, DIALOG_STYLE_LIST, "Escolha a opção para ter acesso:", "Informações sobre as indústrias primárias\nInformações sobre as indústrias secúndarias\nInformações sobre as empresas\nInformações sobre a exportação", "Selecionar", "Cancelar");

	return 1;
}

CMD:aceitartaxi(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Taxista) 
		return SendWarningMessage(playerid, "Você não é um taxista.");

	if(!PlayerData[playerid][pTaxiDuty])
		return SendWarningMessage(playerid, "Você precisa estar em serviço no taxi para poder aceitar um chamado.");

	Taxi_ShowCalls(playerid);
	return 1;
}

CMD:taxi(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Taxista) 
		return SendWarningMessage(playerid, "Você não é um taxista.");

	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

	if(!CanBeTaxi(modelid))
		return SendWarningMessage(playerid, "Você precisa estar dentro de um taxi.");

	if(PlayerData[playerid][pTaxiDuty])
	{
		foreach(new i : Player) if(PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
		{
			LeaveTaxi(i, playerid);
		}
		PlayerData[playerid][pTaxiDuty] = false;
		SendGreenMessage(playerid, "Você não está mais trabalhando como taxista.");
	}
	else
	{
		PlayerData[playerid][pTaxiDuty] = true;
		SendClientMessage(playerid, COLOR_YELLOW, "TAXI: {FFFFFF}Você está em serviço agora. Verifique o /aceitartaxi regularmente.");
	}
	return 1;
}

CMD:aceitarmecanico(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Mecanico)
		return SendWarningMessage(playerid, "Você não é um mecânico.");

	Mechanic_ShowCalls(playerid);
	return 1;
}

CMD:reparar(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Mecanico)
		return SendWarningMessage(playerid, "Você não é um mecânico.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendWarningMessage(playerid, "Você precisa sair do veículo primeiro.");

	new userid, amount;

	if(sscanf(params, "ud", userid, amount))
		return SendSyntaxMessage(playerid, "/reparar [id/nome] [valor]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
		return SendWarningMessage(playerid, "Esse jogador está desconectado ou você não está próximo a ele.");

	if(amount < 1 || amount > 1000)
		return SendWarningMessage(playerid, "Há um limite do no preço do reparo, confira a tabela de preço no fórum.");

	foreach(new i : Vehicles) if(IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
		if(!IsEngineVehicle(i))
			return SendWarningMessage(playerid, "O motor do veículo precisa estar desligado.");

		if(!GetHoodStatus(i))
			return SendWarningMessage(playerid, "O capô do carro precisa estar aberto para poder fazer o reparo.");

		PlayerData[userid][pMechanicRepair] = playerid;
		SetPVarInt(userid, "Reparo_Carro", i);
		SetPVarInt(userid, "Reparo_Valor", amount);
		SetPVarInt(userid, "Reparo_OfferTime", gettime() + 30);

		SendGreenMessage(playerid, "Você ofertou um serviço de reparo por %s para %s.", FormatNumber(amount), ReturnName(userid, 0));
		SendGreenMessage(userid, "%s ofertou um serviço de reparo por %s (digite \"/aceitar reparo\" para aceitar)", ReturnName(playerid, 0), FormatNumber(amount));

		return 1;
	}
	SendWarningMessage(playerid, "Você não está próximo de um veículo com capô.");

	return 1;
}

CMD:consertarmotor(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Mecanico)
		return SendWarningMessage(playerid, "Você não é um mecânico.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendWarningMessage(playerid, "Você precisa sair do veículo primeiro.");

	new userid, amount;

	if(sscanf(params, "ud", userid, amount))
		return SendSyntaxMessage(playerid, "/consertarmotor [id/nome] [valor]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
		return SendWarningMessage(playerid, "Esse jogador está desconectado ou você não está próximo a ele.");

	if(amount < 1 || amount > 15000)
		return SendWarningMessage(playerid, "Há um limite de preço, confira a tabela de preço no fórum.");

	foreach(new i : Vehicles) if(IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
		if(!IsEngineVehicle(i))
			return SendWarningMessage(playerid, "O motor do veículo precisa estar desligado.");

		if(!GetHoodStatus(i))
			return SendWarningMessage(playerid, "O capô do carro precisa estar aberto para poder fazer o serviço.");

		PlayerData[userid][pMechanicEngine] = playerid;
		SetPVarInt(userid, "Reparo_MotorCarro", i);
		SetPVarInt(userid, "Reparo_MotorValor", amount);
		SetPVarInt(userid, "Reparo_MotorOfferTime", gettime() + 30);

		SendGreenMessage(playerid, "Você ofertou um serviço de reparo no motor por %s para %s.", FormatNumber(amount), ReturnName(userid, 0));
		SendGreenMessage(userid, "%s ofertou um serviço de reparo no motor por %s (digite \"/aceitar reparomotor\" para aceitar).", ReturnName(playerid, 0), FormatNumber(amount));

		return 1;
	}
	SendWarningMessage(playerid, "Você não está próximo de um veículo com capô.");

	return 1;
}

CMD:procurarlixeira(playerid)
{
	if(PlayerData[playerid][pJob] != EMPREGO_Lixeiro)
		return SendWarningMessage(playerid, "Você não é um lixeiro.");

	new vehicleid;

	if((vehicleid = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID)
	{
		if(GetVehicleModel(vehicleid) != 408)
			return SendWarningMessage(playerid, "Você não está dentro de um caminhão de lixo.");

		new nearest_trash = GetClosestTrashcan(playerid);

		if(nearest_trash == -1)
			return SendWarningMessage(playerid, "Não foi possível localizar uma lixeira, tente novamente mais tarde.");

		SendGreenMessage(playerid, "A lixeira mais próxima foi marcada no seu mini-mapa.");

		Waypoint_Remove(playerid);
		SetPlayerCheckpoint(playerid, TrashData[nearest_trash][trashPos][0], TrashData[nearest_trash][trashPos][1], TrashData[nearest_trash][trashPos][2], 2.45);
	}
	else
	{
		SendWarningMessage(playerid, "Você não está dentro de um veículo.");
	}

	return 1;
}

CMD:pegarsaco(playerid)
{
	if(PlayerData[playerid][pJob] != EMPREGO_Lixeiro) 
		return SendWarningMessage(playerid, "Você não é um lixeiro.");

	new id;

	if((id = TrashCan_Nearest(playerid)) != -1)
	{
		if(TrashData[id][trashQuantity])
		{
			if(TempData[playerid][tempHoldingTrash])
				return SendWarningMessage(playerid, "Você já está carregando um saco de lixo, jogue-o no caminhão.");

			//Attachments e variveis jogador
			TempData[playerid][tempHoldingTrash] = true;
			SetPlayerAttachedObject(playerid, 9, 1264, 6, 0.222, 0.024, 0.128, 1.90, -90.0, 0.0, 0.5,0.5, 0.5);
			ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0);
			GameTextForPlayer(playerid, "Pressione 'N' para carregar o saco de lixo", 2000, 4);

			//Variaveis do trashdata
			TrashData[id][trashQuantity]--;

			TrashCan_Save(id);
		}
		else
		{
			SendWarningMessage(playerid, "Esta lata de lixo está vazia.");
		}
	}
	else
	{
		SendWarningMessage(playerid, "Você não está próximo de uma lata de lixo.");
	}

	return 1;
}

CMD:entregarlixo(playerid)
{
	if(PlayerData[playerid][pJob] != EMPREGO_Lixeiro)
		return SendWarningMessage(playerid, "Você não é um lixeiro.");

	if(!IsPlayerInRangeOfPoint(playerid, 3.5, 2104.6741, -2021.8763, 13.5544))
		return SendWarningMessage(playerid, "Você não está no depósito de entulhos.");

	new vehicle;

	if((vehicle = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID)
	{
		new price;

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendWarningMessage(playerid, "Você precisa ser o motorista do caminhão.");

		if(GetVehicleModel(vehicle) != 408)
			return SendWarningMessage(playerid, "Você precisa estar dentro de um Trashmaster.");

		if(!VehicleData[vehicle][vehicleTrash])
			return SendWarningMessage(playerid, "Não há sacos de lixos na caçamba do caminhão.");

		price = VehicleData[vehicle][vehicleTrash] * 3;

		SendGreenMessage(playerid, "Você recebeu %s por trazer %d sacos de lixo para a reciclagem.", FormatNumber(price), VehicleData[vehicle][vehicleTrash]);

		VehicleData[vehicle][vehicleTrash] = 0;
		GiveScriptedMoney(playerid, price);
	}
	else
	{
		SendWarningMessage(playerid, "Você não está dentro de um veículo.");
	}

	return 1;
}

CMD:vroubar(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_LadraoCarros)
		return SendWarningMessage(playerid, "Você não é um ladrão de carros.");

	new option[32];

	if(sscanf(params, "s[32]", option))
	{
		SendSyntaxMessage(playerid, "/vroubar [ação]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "Ações", "tranca, motor, desmontar, esconder");
	}

	if(!strcmp(option, "tranca", true))
	{
		new id;

		if((id = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID)
		{
			if(VehicleData[id][vehicleFaction] >= 1 || VehicleData[id][vehicleJob] >= 1)
				return SendWarningMessage(playerid, "Você só pode fazer isto em veículos particulares.");

			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
				return SendWarningMessage(playerid, "Não é possível executar este comando estando dentro de um veículo.");

			if(!VehicleData[id][vehicleLocked])
				return SendWarningMessage(playerid, "Este veículo não está trancada para poder quebrar a tranca.");

			if(Vehicle_IsOwner(playerid, id))
				return SendWarningMessage(playerid, "Você não pode quebrar a tranca de seu próprio veículo.");

			new Float:cX, Float:cY, Float:cZ, Float:dX, Float:dY, Float:dZ;

			GetVehicleModelInfo(VehicleData[id][vehicleModel], VEHICLE_MODEL_INFO_FRONTSEAT, cX, cY, cZ);
			GetVehicleRelativePos(id, dX, dY, dZ, -cX -0.5, cY, cZ);

			if(!IsPlayerInRangeOfPoint(playerid, 1.2, dX, dY, dZ))
				return SendWarningMessage(playerid, "Você não está próximo à porta da frente do veículo (motorista).");

			if(VehicleData[id][vehiclePhysicalAttack] && VehicleData[id][vehicleDoorHealth] > 0)
			{
				new doorhealth[12];

				format(doorhealth, sizeof(doorhealth), "%d", VehicleData[id][vehicleDoorHealth]);

				VehicleData[id][vehiclePhysicalAttack] = true;

				SendClientMessageEx(playerid, COLOR_WHITE, "-%s", ReturnWeaponName(GetPlayerWeapon(playerid)));
				SendClientMessageEx(playerid, COLOR_WHITE, "-%s", ReturnWeaponType(GetPlayerWeapon(playerid)));

				PlayerData[playerid][pBreakinVehicle] = id;

				if(!IsValidDynamic3DTextLabel(VehicleData[id][vehicleLabel]))
				{
					VehicleData[id][vehicleLabel] = CreateDynamic3DTextLabel(doorhealth, COLOR_WHITE, 0.0, 0.0, 0.0, 5.0, INVALID_PLAYER_ID, id, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
				}

				return 1;
			}

			switch(VehicleData[id][vehicleTrava])
			{
				case 0:
				{
					VehicleData[id][vehicleDoorHealth] = 50, VehicleData[id][vehicleDoorEffect] = BLOCK_NONE;
				}
				case 1:
				{
					VehicleData[id][vehicleDoorHealth] = 75, VehicleData[id][vehicleDoorEffect] = LESS_DAMAGE_FIST;
				}
				case 2:
				{
					VehicleData[id][vehicleDoorHealth] = 150, VehicleData[id][vehicleDoorEffect] = LESS_DAMAGE_MELEE;
				}
				case 3:
				{
					VehicleData[id][vehicleDoorHealth] = 200, VehicleData[id][vehicleDoorEffect] = BLOCK_PHYSICAL;
				}
			}

			VehicleData[id][vehiclePhysicalAttack] = true;

			Vehicle_TriggerAlarm(id, GetPlayerLocation(playerid), VehicleData[id][vehicleTrava]);

			SendGreenMessage(playerid, "Você pode começar a quebrar a trava da porta do veículo agora.");
			SendServerMessage(playerid, "Arma: %s (Categoria: %s)", ReturnWeaponName(GetPlayerWeapon(playerid)), ReturnWeaponType(GetPlayerWeapon(playerid)));

			PlayerData[playerid][pBreakinVehicle] = id;

			new doorhealth[12];

			format(doorhealth, sizeof(doorhealth), "%d", VehicleData[id][vehicleDoorHealth]);

			VehicleData[id][vehicleLabel] = CreateDynamic3DTextLabel(doorhealth, COLOR_WHITE, 0.0, 0.0, 0.0, 5.0, INVALID_PLAYER_ID, id, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid);
		}
		else
		{
			SendWarningMessage(playerid, "Você não está próximo a um veículo.");
		}
	}
	else if(!strcmp(option, "motor", true))
	{
		new idx, str[70], id;

		if((id = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID)
		{
			if(VehicleData[id][vehicleFaction] >= 1 || VehicleData[id][vehicleJob] >= 1 || VehicleData[id][vehicleOwnerID] == PlayerData[playerid][pID])
				return SendWarningMessage(playerid, "Você só pode fazer isso em veículos particulares.");

			PlayerData[playerid][pUnscrambling] = true;

			idx = random(sizeof(UnscrambleData));

			PlayerData[playerid][pUnscrambleID] = idx;

			switch(VehicleData[id][vehicleTrava])
			{
				case 0: PlayerData[playerid][pUnscrambleTime] = 125;
				case 1: PlayerData[playerid][pUnscrambleTime] = 100;
				case 2: PlayerData[playerid][pUnscrambleTime] = 75;
				case 3: PlayerData[playerid][pUnscrambleTime] = 50;
			}

			PlayerData[playerid][pUnscrambleTimer] = SetTimerEx("OnPlayerUnscramble", 1000, true, "d", playerid);

			format(str, sizeof(str), "%s", RandomizeWord(UnscrambleData[idx][unscrambleWorld]));
			PlayerTextDrawSetString(playerid, Unscrambler_PTD[playerid][3], str);

			format(str, sizeof(str), "%d", PlayerData[playerid][pUnscrambleTime]);
			PlayerTextDrawSetString(playerid, Unscrambler_PTD[playerid][5], str);

			ShowUnscrambleTextdraw(playerid);
		}
	}
	else if(!strcmp(option, "desmontar", true))
	{
		if(PlayerData[playerid][pInMission])
			return SendWarningMessage(playerid, "Você já está em uma missão.");

		new id;

		if((id = Vehicle_Inside(playerid)) != INVALID_VEHICLE_ID)
		{
			if(VehicleData[id][vehicleFaction] >= 1 || VehicleData[id][vehicleJob] >= 1)
				return SendWarningMessage(playerid, "Você só pode fazer isto em veículos particulares.");

			if(VehicleData[id][vehicleOwnerID] == PlayerData[playerid][pID])
				return SendWarningMessage(playerid, "Você não pode fazer isto no seu próprio veículo.");

			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendWarningMessage(playerid, "Você precisa ser o motorista do veículo.");

			if(IsPlayerInVehicle(playerid, id))
			{
				new c_id, count;
				if((c_id = Chopshop_Nearest(playerid)) != -1)
				{
					if(Chopshop_CheckWanted(c_id, VehicleData[id][vehicleModel]))
					{
						for(new i = 0; i < 14; i++)
						{
							if(VehicleData[id][vehicleMod][i] > 0)
								count++;
						}
						PlayerData[playerid][pInMission] = DISMANTLING_CAR;
						PlayerData[playerid][pMissionTime] = 25 + count;
						PlayerData[playerid][pMissionTarget][0] = id;
						PlayerData[playerid][pMissionTarget][1] = c_id;

						SendGreenMessage(playerid, "Você começou a desmontar o veículo, aguarde %d segundo(s) para completar a ação.", PlayerData[playerid][pMissionTime]);
					}
					else
					{
						SendWarningMessage(playerid, "Não estamos precisando deste veículo, veja os modelos no quadro.");
					}
				}
				else
				{
					SendWarningMessage(playerid, "Você não está próximo a um local de desmanche.");
				}
			}
			else
			{
				SendWarningMessage(playerid, "Você não está dentro de um veículo.");
			}
		}
		else
		{
			SendWarningMessage(playerid, "Você não está dentro de um veículo.");
		}
	}
	else if(!strcmp(option, "esconder", true))
	{
		if(PlayerData[playerid][pInMission] != DISMANTLING_DROPOFF)
			return SendWarningMessage(playerid, "Você precisa desmontar o veículo primeiro.");

		new vehicle = PlayerData[playerid][pMissionTarget][0], c_id = PlayerData[playerid][pMissionTarget][1];

		if(GetPlayerVehicleID(playerid) != vehicle)
			return SendWarningMessage(playerid, "Você precisa estar no mesmo veículo que foi desmontado.");

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendWarningMessage(playerid, "Você precisa ser o motorista do veículo.");

		new Float:PPos[3];
		GetPlayerPos(playerid, PPos[0], PPos[1], PPos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, 50.0, ChopshopData[c_id][chopshopX], ChopshopData[c_id][chopshopY], ChopshopData[c_id][chopshopZ]))
		{
			new Float:distance_reward = GetDistanceBetweenTwoPoints(PPos[0], PPos[1], PPos[2], ChopshopData[c_id][chopshopX], ChopshopData[c_id][chopshopY], ChopshopData[c_id][chopshopZ]);

			if(distance_reward > 200.0) PlayerData[playerid][pMissionReward] += 400;
			else PlayerData[playerid][pMissionReward] += floatround(distance_reward) * 2;

			GiveScriptedMoney(playerid, PlayerData[playerid][pMissionReward]);

			SendGreenMessage(playerid, "Você ganhou %s por completar a missão.", FormatNumber(PlayerData[playerid][pMissionReward]));

			Daily_Update(playerid, 4);

			foreach(new i : Player) if(PlayerData[i][pLogged] && PlayerData[i][pID] == VehicleData[vehicle][vehicleOwnerID])
			{
				SendClientMessageEx(i, COLOR_WARNING, "* Seu(sua) %s foi roubado. Caso tenha seguro, ligue para 141.", ReturnVehicleModelName(VehicleData[vehicle][vehicleModel]));
			}

			Vehicle_Stolen(vehicle);

			PlayerData[playerid][pInMission] = MISSION_NONE;
			PlayerData[playerid][pMissionReward] = 0;
			PlayerData[playerid][pMissionTime] = 0;
			PlayerData[playerid][pMissionTarget][0] = -1;
			PlayerData[playerid][pMissionTarget][1] = -1;
		}	
		else
		{
			SendWarningMessage(playerid, "Você precisa se distanciar do local de dismanche!");
		}
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro inválido.");
	}

	return 1;
}

CMD:abandonarmissao(playerid)
{
	if(PlayerData[playerid][pInMission] == MISSION_NONE)
		return SendWarningMessage(playerid, "Você não está em alguma missão.");

	if(IsPlayerInVehicle(playerid, PlayerData[playerid][pMissionTarget][0]))
	{
		AC_RemovePlayerFromVehicle(playerid);
	}

	PlayerData[playerid][pInMission] = MISSION_NONE;
	PlayerData[playerid][pMissionReward] = 0;
	PlayerData[playerid][pMissionTime] = 0;
	PlayerData[playerid][pMissionTarget][0] = -1;
	PlayerData[playerid][pMissionTarget][1] = -1;

	SendWarningMessage(playerid, "Você abandonou a sua missão atual.");

	return 1;
}

CMD:desembaralhar(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendWarningMessage(playerid, "Você não é o motorista de nenhum veículo.");

	if(!PlayerData[playerid][pUnscrambling])
		return SendWarningMessage(playerid, "Você não está tentado fazer ligação direta em um veículo.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(desem)baralhar [palavra]");

	if(!strcmp(UnscrambleData[PlayerData[playerid][pUnscrambleID]][unscrambleWorld], params, true))
	{
		PlayerData[playerid][pUnscrambleID] = random(sizeof(UnscrambleData));

		new str[70];

		format(str, sizeof(str), "%s", RandomizeWord(UnscrambleData[PlayerData[playerid][pUnscrambleID]][unscrambleWorld]));
		PlayerTextDrawSetString(playerid, Unscrambler_PTD[playerid][3], str);

		//Aumentar a duracao
		PlayerData[playerid][pUnscrambleTime] += 5;
		PlayerData[playerid][pScrambleSuccess]++;

		PlayerPlaySound(playerid, 1052, 0, 0, 0);

		if(PlayerData[playerid][pScrambleSuccess] >= 7)
		{
			PlayerData[playerid][pUnscrambling] = false;
			PlayerData[playerid][pUnscrambleTime] = 0;
			PlayerData[playerid][pUnscrambleID] = 0;

			PlayerData[playerid][pScrambleSuccess] = 0;
			PlayerData[playerid][pScrambleFailed] = 0;

			KillTimer(PlayerData[playerid][pUnscrambleTimer]);

			ShowUnscrambleTextdraw(playerid, false);

			new vehicleid = GetPlayerVehicleID(playerid);

			GameTextForPlayer(playerid, "Motor ligado", 3000, 4);
			SetEngineStatus(vehicleid, true);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s liga o motor do veículo.", ReturnName(playerid, 0));
		}
	}
	else
	{
		PlayerPlaySound(playerid, 1055, 0, 0, 0);

		PlayerData[playerid][pUnscrambleID] = random(sizeof(UnscrambleData));

		new str[80];

		format(str, sizeof(str), "%s", RandomizeWord(UnscrambleData[PlayerData[playerid][pUnscrambleID]][unscrambleWorld]));
		PlayerTextDrawSetString(playerid, Unscrambler_PTD[playerid][3], str);

		//Reduz a duracao
		PlayerData[playerid][pUnscrambleTime] -= randomEx(1,6);
		PlayerData[playerid][pScrambleFailed]++;

		if(PlayerData[playerid][pScrambleFailed] >= 5)
		{
			PlayerData[playerid][pUnscrambling] = false;
			PlayerData[playerid][pUnscrambleTime] = 0;
			PlayerData[playerid][pUnscrambleID] = 0;

			PlayerData[playerid][pScrambleSuccess] = 0;
			PlayerData[playerid][pScrambleFailed] = 0;

			KillTimer(PlayerData[playerid][pUnscrambleTimer]);

			ShowUnscrambleTextdraw(playerid, false);

			new id = GetPlayerVehicleID(playerid);

			ToggleVehicleAlarms(id, true);
			format(str, sizeof(str), "Alarme do veículo %s (%s) foi ativado.", ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehiclePlate]);
			Phone_SendMessage(141, Phone_GetNumberByID(VehicleData[id][vehicleOwnerID]), str);
			ClearAnimations(playerid);
		}
	}

	return 1;
}
alias:desembaralhar("desem");

CMD:oferecerservico(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Advogado) 
		return SendClientMessage(playerid,COLOR_WARNING,"Você não é um advogado.");

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/oferecerservico [id/nome]");

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	if(!IsPlayerNearArrest(playerid))
		return SendWarningMessage(playerid, "Você não está próximo a um ponto de prisão.");

	if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(userid))
		return SendWarningMessage(playerid, "Esse jogador não pode receber esta oferta agora.");

	if(PlayerData[userid][pLawyerTime] > gettime())
		return SendWarningMessage(playerid, "Este jogador já aceitou uma oferta de um advogado recentemente.");

	if(PlayerData[userid][pLawyerBlock])
		return SendWarningMessage(playerid, "Algum advogado já concluiu os serviços neste jogador.");

	if(PlayerData[userid][pJailTime] < 300)
		return SendWarningMessage(playerid, "Este jogador não precisa de um advogado.");

	PlayerData[userid][pLawyer] = playerid;

	SendGreenMessage(userid, "Advogado %s lhe ofereceu uma proposta para a redução da sua pena. Digite (/aceitarproposta) para aceitar.", ReturnName(playerid, 0));
	SendGreenMessage(playerid, "Você ofereceu seus serviços para %s.", ReturnName(userid, 0));

	return 1;
}

CMD:aceitarproposta(playerid, params[])
{
	if(!PlayerData[playerid][pJailed] || PlayerData[playerid][pJailed] == 1)
		return SendWarningMessage(playerid, "Você não está em condições de aceitar a proposta de um advogado.");

	if(PlayerData[playerid][pLawyer] == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, "Você não recebeu uma proposta de um advogado.");

	new advogado = PlayerData[playerid][pLawyer],
	price = (PlayerData[playerid][pJailTime] / 60) * 50;

	if(!IsPlayerNearPlayer(playerid, advogado, 10.0))
		return SendWarningMessage(playerid, "O advogado precisa estar próximo a você.");

	if(PlayerData[playerid][pBank] < price)
		return SendWarningMessage(playerid, "Você não possui %s na sua conta bancária.", FormatNumber(price));

	if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(advogado))
		return SendWarningMessage(playerid, "Você não pode aceitar esta proposta por ora.");

	GiveBankMoney(playerid, -price);
	GiveBankMoney(advogado, price);

	SendGreenMessage(advogado, "%s aceitou a sua proposta, foram transferido %s para a sua conta bancária.", ReturnName(playerid, 0), FormatNumber(price));
	SendGreenMessage(playerid, "Você aceitou a proposta do advogado %s por %s.", ReturnName(advogado, 0), FormatNumber(price));

	new randjailed = randomEx(1,6), success;

	switch(randjailed)
	{
		case 1,3,5: success = false;
		case 2,4,6: success = true;
	}

	new Float:time;

	switch(PlayerData[playerid][pVip])
	{
		case 0: time = float(PlayerData[playerid][pJailTime]) * 0.25;
		case 1: time = float(PlayerData[playerid][pJailTime]) * 0.35;
		case 2: time = float(PlayerData[playerid][pJailTime]) * 0.45;
		case 3: time = float(PlayerData[playerid][pJailTime]) * 0.60;
	}

	if(success)
	{
		new reduction_time = floatround(time);

		PlayerData[playerid][pJailTime] -= reduction_time;

		PlayerData[playerid][pLawyerBlock] = true;

		SendGreenMessage(playerid, "Sua sentença foi declarada: deferido, seu tempo de detenção foi reduzido por %s segundos.", reduction_time);
		SendGreenMessage(advogado, "Você conseguiu diminuir o tempo de detenção de %s.", ReturnName(playerid, 0));

		Daily_Update(advogado, 5);
	}
	else
	{
		PlayerData[playerid][pLawyerTime] = gettime() + 300;

		SendGreenMessage(playerid, "Sua sentença foi declarada: indeferido, seu tempo não foi alterado e foi adicion");
		SendGreenMessage(playerid, "...ado um bloqueio de 5 minutos para poder contratar outro advogado.");
		SendGreenMessage(advogado, "Você não conseguiu diminuir o tempo de detenção de %s.", ReturnName(playerid, 0));
	}

	PlayerData[playerid][pLawyer] = INVALID_PLAYER_ID;

	return 1;
}

CMD:pescar(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Pescador) 
		return SendWarningMessage(playerid, "Você não é um pescador.");

	if(!PlayerData[playerid][pFishBait])
		return SendWarningMessage(playerid, "Você precisa de iscas para poder pescar.");

	for(new i = 0; i < sizeof(FishingPoints); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, FishingPoints[i][0], FishingPoints[i][1], FishingPoints[i][2]))
		{
			if(PlayerData[playerid][pFishing])
				return SendWarningMessage(playerid, "Você já está pescando.");

			if(PlayerData[playerid][pFishingWeight] >= 1000)
				return SendWarningMessage(playerid, "Você está com o máximo de peixes em seu inventário (1.000lbs), vá vender seus peixes (/venderpeixes).");

			if(!IsPlayerInAnyVehicle(playerid))
			{
				ApplyAnimation(playerid, "SWORD", "sword_block", 50.0, 0, 1, 0, 1, 1);
				SetPlayerAttachedObject(playerid, 9, 18632, 6, 0.079376, 0.037070, 0.007706, 181.482910, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				SendGreenMessage(playerid, "Você iniciou a pesca.");
				
				new Float:Fish_PosX, Float:Fish_PosY, Float:Fish_PosZ;
				GetPlayerPos(playerid, Fish_PosX, Fish_PosY, Fish_PosZ);

				PlayerData[playerid][pFishing] = true;
				PlayerData[playerid][pFishBait]--;
				
				SetTimerEx("PlayerFishing", 13000, false, "dfff", playerid, Fish_PosX, Fish_PosY, Fish_PosZ);
			}
			else
			{
				SendWarningMessage(playerid, "Você não pode pescar dentro de um veículo.");
			}
			return 1;
		}
	}
	SendWarningMessage(playerid, "Você não está no pier de Santa Maria.");

	return 1;
}

CMD:venderpeixes(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Pescador) 
		return SendWarningMessage(playerid, "Você não é um pescador.");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2735.3303, -2466.1865, 13.6484) && !PlayerData[playerid][pDrivingTest])
	{
		SendWarningMessage(playerid, "Você não está próximo ao ponto de vendas, confira o local em seu mini-mapa.");
		Waypoint_Set(playerid, "Mercado de Peixes", 2735.3303, -2466.1865, 13.6484);
		return 1;
	}

	if(!PlayerData[playerid][pFishingWeight])
		return SendWarningMessage(playerid, "Você não tem peixes para vender.");

	GiveScriptedMoney(playerid, PlayerData[playerid][pFishingWeight] / 2);
	SendGreenMessage(playerid, "Você vendeu seus peixes (%d libras) por %s.", PlayerData[playerid][pFishingWeight], FormatNumber(PlayerData[playerid][pFishingWeight] / 2));
	PlayerData[playerid][pFishingWeight] = 0;

	return 1;
}

CMD:meuspeixes(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_Pescador)
		return SendWarningMessage(playerid, "Você não é um pescador.");

	SendClientMessageEx(playerid, COLOR_GREEN, "* Você está com um total de %d/1000 libras e %d %s.", PlayerData[playerid][pFishingWeight], PlayerData[playerid][pFishBait], (PlayerData[playerid][pFishBait]) ? ("iscas restantes") : ("iscas"));

	return 1;
}

/*CMD:(playerid, params[])
{
	if(PlayerData[playerid][pJob] != EMPREGO_) 
		return SendWarningMessage(playerid, "Você não é um emprego.");

	return 1;
}*/

// ============================================================== COMANDOS DOS VIP'S =========================================================== //
CMD:prime(playerid)
{
	if(!PlayerData[playerid][pVip])
	{
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Benefícios Prime:", "{FFFFFF}Você não é um jogador com os benefícios prime ativo.\n\nFaça uma doação e receba, como brinde da equipe, os benefícios de um prime account.\nAcesse nosso fórum, Informações sobre contas -> Vantagens prime e confira.", "Fechar", "");
	}
	else
	{
		new hora, minuto, segundo, dia, mes, ano;
		TimestampToDate(PlayerData[playerid][pVipTime], ano, mes, dia, hora, minuto, segundo);

		Dialog_Show(playerid, PrimeAccount, DIALOG_STYLE_MSGBOX, "Benefícios Prime:", "{FFFFFF}Você é um jogador com benefícios prime ativo.\n\nConta: %s\nBenefícios ativos até: %02d/%02d - %02d:%02d\n\nConfira seus benefícios ativos clicando em 'Benefícios' abaixo:", "Benefícios", "Fechar", Prime_GetType(PlayerData[playerid][pVip]), dia, mes, hora, minuto);
	}

	return 1;
}

CMD:cp(playerid, params[])
{
	if(!PlayerData[playerid][pVip] && !PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não é um jogador com os benefícios prime ativo.");

	if(!serverchatVIP)
		return SendWarningMessage(playerid, "O chat prime está desativado por ora.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/cp [texto]");

	foreach(new i : Player) if(PlayerData[i][pLogged] && (PlayerData[i][pVip] || PlayerData[i][pAdmin]))
	{
		if(strlen(params) > 64)
		{
			SendClientMessageEx(i, COLOR_RP2, "[Chat Prime] %s: %.64s", ReturnName(playerid, 0), params);
			SendClientMessageEx(i, COLOR_RP2, "...%s", params[64]);
		}
		else
		{
			SendClientMessageEx(i, COLOR_RP2, "[Chat Prime] %s: %s", ReturnName(playerid, 0), params);
		}
	}

	return 1;
}

// ============================================================ COMANDOS DAS FAMÍLIAS =========================================================== //

CMD:criarfamilia(playerid, params[])
{
	if(PlayerData[playerid][pFamily] != -1)
		return SendWarningMessage(playerid, "Você já faz parte de uma família.");

	if(PlayerData[playerid][pVip] != 3)
		return SendWarningMessage(playerid, "Você precisa ter um benefício Prime Ouro ativo na sua conta.");

	if(!PlayerData[playerid][pCreateFamily])
		return SendWarningMessage(playerid, "Você precisa de uma autorização para poder criar. Acesse o seu UCP/Famílias para adquirir.");

	new familyname[64], familytag[10];

	if(sscanf(params, "s[10]s[64]", familytag, familyname))
		return SendSyntaxMessage(playerid, "/criarfamilia [sigla da família] [nome da família]");

	if(!strlen(familytag) || strlen(familytag) > 3)
		return SendWarningMessage(playerid, "A sigla da sua família precisa ter, no máximo, 3 caracteres.");

	foreach(new i : Families) if(FamilyData[i][familyExists])
	{
		if(!strcmp(FamilyData[i][familyTag], familytag, true) || !strcmp(FamilyData[i][familyName], familyname, true))
			return SendWarningMessage(playerid, "Já existe uma família com este nome ou tag.");
	}

	new id;

	id = Family_Create(playerid, familyname, familytag);

	if(id == -1)
		return SendWarningMessage(playerid, "Não foi possível prosseguir com a operação, contate um administrador.");

	SendGreenMessage(playerid, "Família \"%s (%s)\" criada com sucesso. Para gerenciar use: /gerenciarfamilia", familyname, familytag);

	return 1;
}

CMD:gerenciarfamilia(playerid, params[])
{
	if(PlayerData[playerid][pFamily] == -1)
		return SendWarningMessage(playerid, "Você não faz parte de uma família.");

	new option[16], more[126];

	if(sscanf(params, "s[16]S()[128]", option, more))
	{
		SendSyntaxMessage(playerid, "/gerenciarfamilia [opção]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "Opções", "convidar, expulsar, promover, eranks, renovar, membros, sair, renovar");
	}

	if(!strcmp(option, "convidar"))
	{
		if(PlayerData[playerid][pFamilyRank] < FamilyData[PlayerData[playerid][pFamily]][familyRanks])
			return SendWarningMessage(playerid, "Você precisa ser o líder da família.");

		if(FamilyData[PlayerData[playerid][pFamily]][familyWarned])
			return SendWarningMessage(playerid, "Por ora, sua família está desativada. Renove-a utilizando: /renovarfamilia.");

		new userid;

		if(sscanf(more, "u", userid))
			return SendSyntaxMessage(playerid, "/gerenciarfamilia convidar [id/nome]");

		if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
			return SendWarningMessage(playerid, JogadorOff);

		if(PlayerData[userid][pFamily] != -1)
			return SendWarningMessage(playerid, "Este personagem já faz parte de uma família.");

		if(userid == playerid)
			return SendWarningMessage(playerid, "Você não pode se convidar para sua própria família.");

		PlayerData[userid][pFamilyInvite] = PlayerData[playerid][pFamily];
		PlayerData[userid][pFamilyOffer] = playerid;
		SetPVarInt(userid, "Family_OfferTime", gettime() + 60);

		SendGreenMessage(playerid, "Você convidou %s para a sua família: \"%s\".", ReturnName(userid, 0), Family_GetName(playerid));
		SendGreenMessage(userid, "%s lhe convidou para entrar na família %s, digite (/aceitar familia) para aceitar.", ReturnName(playerid, 0), Family_GetName(playerid));
	}
	else if(!strcmp(option, "expulsar"))
	{
		if(PlayerData[playerid][pFamilyRank] < FamilyData[PlayerData[playerid][pFamily]][familyRanks])
			return SendWarningMessage(playerid, "Você precisa ser o líder da família.");

		if(FamilyData[PlayerData[playerid][pFamily]][familyWarned])
			return SendWarningMessage(playerid, "Por ora, sua família está desativada. Renove-a utilizando: /renovarfamilia.");

		new userid, reason[32];

		if(sscanf(more, "us[32]", userid, reason))
			return SendSyntaxMessage(playerid, "/gerenciarfamilia expulsar [id/nome] [motivo]");

		if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
			return SendWarningMessage(playerid, JogadorOff);

		if(PlayerData[userid][pFamily] != PlayerData[playerid][pFamily])
			return SendWarningMessage(playerid, "Este personagem não faz parte da sua família.");

		if(userid == playerid)
			return SendWarningMessage(playerid, "Você não pode executar esta ação em si mesmo.");

		ResetFamily(userid);

		SendFamilyMessage(PlayerData[playerid][pFamily], COLOR_RP1, "** %s (ID: %d) foi expulso da família pelo motivo: %s", ReturnName(userid, 0), userid, reason);
	
		SendGreenMessage(playerid, "Você expulsou %s da sua família pelo motivo: %s", ReturnName(userid, 0), reason);
		SendGreenMessage(playerid, "Você foi expulso da família por %s pelo motivo: %s", ReturnName(playerid, 0), reason);
	}
	else if(!strcmp(option, "promover"))
	{
		if(PlayerData[playerid][pFamilyRank] < FamilyData[PlayerData[playerid][pFamily]][familyRanks])
			return SendWarningMessage(playerid, "Você precisa ser o líder da família.");

		if(FamilyData[PlayerData[playerid][pFamily]][familyWarned])
			return SendWarningMessage(playerid, "Por ora, sua família está desativada. Renove-a utilizando: /renovarfamilia.");

		new userid, rank;

		if(sscanf(more, "ud", userid, rank))
			return SendSyntaxMessage(playerid, "/gerenciarfamilia promover [id/nome] [rank 1-3]");

		if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
			return SendWarningMessage(playerid, JogadorOff);

		if(PlayerData[userid][pFamily] != PlayerData[playerid][pFamily])
			return SendWarningMessage(playerid, "Este personagem não faz parte da sua família.");

		if(userid == playerid)
			return SendWarningMessage(playerid, "Você não pode se promover.");

		if(rank < 1 || rank > 3)
			return SendWarningMessage(playerid, "Valor do rank é inválido, use de 1 à 3.");

		PlayerData[userid][pFamilyRank] = rank;

		new query[75];

		mysql_format(this, query, sizeof(query), "UPDATE players SET FamilyRank = '%d' WHERE UserID = '%d'", rank, PlayerData[userid][pID]);
		mysql_tquery(this, query);

		SendGreenMessage(playerid, "Você promoveu o membro %s da sua família para: %s (Rank: %d).", ReturnName(userid, 0), Family_GetRank(userid), rank);
		SendGreenMessage(playerid, "%s alterou o seu da rank da família para: %s (Rank: %d).", ReturnName(playerid, 0), Family_GetRank(userid), rank);
	}
	else if(!strcmp(option, "eranks"))
	{
		if(PlayerData[playerid][pFamilyRank] < FamilyData[PlayerData[playerid][pFamily]][familyRanks])
			return SendWarningMessage(playerid, "Você precisa ser o líder da família.");

		if(FamilyData[PlayerData[playerid][pFamily]][familyWarned])
			return SendWarningMessage(playerid, "Por ora, sua família está desativada. Renove-a utilizando: /gerenciarfamilia renovar.");

		Family_ManageRanks(playerid, PlayerData[playerid][pFamily]);
	}
	else if(!strcmp(option, "renovar"))
	{
		new family = PlayerData[playerid][pFamily];

		if(PlayerData[playerid][pFamilyRank] != FamilyData[family][familyRanks])
			return SendWarningMessage(playerid, "Você não é o líder/fundador da sua família.");

		if(!PlayerData[playerid][pCreateFamily])
			return SendWarningMessage(playerid, "Você não possui uma permissão para renovar (a mesma de criar) a família.");

		if(!FamilyData[family][familyWarned])
			return SendWarningMessage(playerid, "Sua família não precisa ser renovada neste momento, você terá três dias de carência após o vencimento.");

		FamilyData[family][familyExpiresAt] = gettime() + (86400 * 30);

		FamilyData[family][familyWarned] = false;

		new query[75];

		mysql_format(this, query, sizeof(query), "UPDATE families SET familyWarned = '0' WHERE familyID = '%d'", FamilyData[family][familyID]);
		mysql_tquery(this, query);

		FamilyData[family][familyPlusRenew] = 0;

		SendGreenMessage(playerid, "Você renovou a sua família por mais trinta (30) dias.");
	}
	else if(!strcmp(option, "membros"))
	{
		Family_ShowMembers(playerid, PlayerData[playerid][pFamily]);
	}
	else if(!strcmp(option, "sair"))
	{
		if(PlayerData[playerid][pFamilyRank] == FamilyData[PlayerData[playerid][pFamily]][familyRanks])
			return SendWarningMessage(playerid, "Você é o dono da sua família, para deletar antes do prazo, faça uma requisição no fórum.");

		SendFamilyMessage(PlayerData[playerid][pFamily], COLOR_RP1, "** %s (ID: %d) saiu da família.", ReturnName(playerid, 0), playerid);
		SendGreenMessage(playerid, "Você saiu da família: \"%s\".", Family_GetName(playerid));

		ResetFamily(playerid);
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro informado é inválido.");
	}

	return 1;
}

CMD:f(playerid, params[])
{
	if(PlayerData[playerid][pFamily] == -1)
		return SendWarningMessage(playerid, "Você não faz parte de uma família.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(f)amilia [texto]");

	if(strlen(params) > 64)
	{
		SendFamilyMessage(PlayerData[playerid][pFamily], COLOR_RP1, "[Família]: %s %s: %.64s", Family_GetRank(playerid), ReturnName(playerid, 0), params);
		SendFamilyMessage(PlayerData[playerid][pFamily], COLOR_RP1, "...%s", params[64]);
	}
	else
	{
		SendFamilyMessage(PlayerData[playerid][pFamily], COLOR_RP1, "[Família]: %s %s: %s", Family_GetRank(playerid), ReturnName(playerid, 0), params);
	}

	return 1;
}
alias:f("familia");

CMD:familias(playerid, params[])
{
	ViewFamilies(playerid);

	return 1;
}

// =========================================================== COMANDOS DAS FACCOES ============================================================= //

CMD:faccoes(playerid, params[])
{
	ViewFactions(playerid);
	return 1;
}
alias:faccoes("facs", "orgs", "organizacoes");

CMD:online(playerid, params[])
{
	if(PlayerData[playerid][pFaction] == -1)
		return SendWarningMessage(playerid, "Você não faz parte de nenhuma facção.");

	new fid = PlayerData[playerid][pFaction];

	if(isnull(params) || strlen(params) > 5)
	{
		new count;

		foreach(new i : Player) if(IsPlayerConnected(i) && PlayerData[i][pLogged] && PlayerData[i][pFaction] == fid) count++;

		SendClientMessageEx(playerid, FactionData[fid][factionColor], "Sua facção tem %d membro(s) online(s) atualmente. Use /online lista para ver todos os membros.", count);
	}
	else if(!strcmp(params, "lista", true))
	{
		new query[256];

		mysql_format(this, query, sizeof(query), "SELECT * FROM `players` WHERE `Faction` = '%d' ORDER BY `FactionRank` DESC", PlayerData[playerid][pFactionID]);
		mysql_tquery(this, query, "OnFactionListSearch", "dd", playerid, fid);
	}
	else return SendSyntaxMessage(playerid, "/online lista");
	return 1;
}

CMD:sairfac(playerid, params[])
{
	if(PlayerData[playerid][pFaction] == -1)
		return SendWarningMessage(playerid, "Você não faz parte de nenhuma facção.");

	if(GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pOnDuty])
	{
		SetScriptedArmour(playerid, 0);
		ResetWeapons(playerid);
	}
	SendGreenMessage(playerid, "Você saiu da facção \"%s\" (Rank: %d).", Faction_GetName(playerid), PlayerData[playerid][pFactionRank]);
	ResetFaction(playerid);
	return 1;
}

CMD:locker(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if(PlayerData[playerid][pFaction] == -1)
		return SendWarningMessage(playerid, "Você não faz parte de nenhuma facção.");

	if(!IsNearFactionLocker(playerid))
		return SendWarningMessage(playerid, "Você não está perto do locker da sua facção.");

	if(FactionData[factionid][factionType] != FACTION_GANGSTER && FactionData[factionid][factionType] != FACTION_CARTEL && FactionData[factionid][factionType] != FACTION_MOTOCLUB)
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Locker da facção", "Entrar ou sair de serviço\nPegar vida e armadura\nRoupas de serviço\nEquipamentos", "Selecionar", "Cancelar");
	else
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Locker da facção", "Colocar roupa\nRetirar roupa\nArmas", "Selecionar", "Cancelar");

	return 1;
}

CMD:convidar(playerid, params[])
{
	new userid;

	if(PlayerData[playerid][pFaction] == -1)
		return SendWarningMessage(playerid, "Você não faz parte de nenhuma facção.");

	if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
		return SendWarningMessage(playerid, "Você precisa ser pelo menos rank %s (%d) para poder convidar alguém.", FactionRanks[PlayerData[playerid][pFaction]][FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1], FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/convidar [id/nome]");

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se convidar.");

	if(PlayerData[userid][pFaction] == PlayerData[playerid][pFaction])
		return SendWarningMessage(playerid, "O jogador que você enviou a oferta já é da sua facção.");

	if(PlayerData[userid][pFaction] != -1)
		return SendWarningMessage(playerid, "O jogador que você enviou a oferta já é de uma facção.");

	PlayerData[userid][pFactionOffer] = playerid;
	PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];
	SetPVarInt(userid, "Faction_OfferTime", gettime() + 60);

	SendGreenMessage(playerid, "Você enviou uma oferta para %s entrar na sua facção \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
	SendGreenMessage(userid, "%s fez uma oferta para você entrar na facção dele \"%s\" (digite \"/aceitar convite\" para entrar).", ReturnName(playerid, 0), Faction_GetName(playerid));
	return 1;
}

CMD:demitir(playerid, params[])
{
	new userid;

	if(PlayerData[playerid][pFaction] == -1)
		return SendWarningMessage(playerid, "Você não faz parte de nenhuma facção.");

	if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
		return SendWarningMessage(playerid, "Você precisa ser pelo menos rank %s (%d) para poder demitir alguém.", FactionRanks[PlayerData[playerid][pFaction]][FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1], FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/demitir [id/nome]");

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se demitir.");

	if(PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
		return SendWarningMessage(playerid, "O jogador que você está tentando demitir não é da sua facção.");

	if(FactionData[PlayerData[userid][pFaction]][factionRanks] >= FactionData[PlayerData[playerid][pFaction]][factionRanks])
		return SendWarningMessage(playerid, "Você não pode demitir essa pessoa.");

	SendGreenMessage(playerid, "Você demitiu %s da sua facção \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
	SendGreenMessage(userid, "%s demitiu você da facção \"%s\".", ReturnName(playerid, 0), Faction_GetName(playerid));
	
	ResetFaction(userid);

	return 1;
}

CMD:promover(playerid, params[])
{
	new
		userid,
		rankid;

	if(PlayerData[playerid][pFaction] == -1)
		return SendWarningMessage(playerid, "Você não faz parte de nenhuma facção.");

	if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
		return SendWarningMessage(playerid, "Você precisa ser pelo menos rank %s (%d) para poder promover alguém.", FactionRanks[PlayerData[playerid][pFaction]][FactionData[PlayerData[playerid][pFaction]][factionRanks]], FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if(sscanf(params, "ud", userid, rankid))
		return SendSyntaxMessage(playerid, "/promover [id/nome] [(1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se promover.");

	if(PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
		return SendWarningMessage(playerid, "O jogador que você está tentando promover não é da sua facção.");

	if(rankid < 0 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
		return SendWarningMessage(playerid, "Nível de promoção inválido. Use de 1 à %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	PlayerData[userid][pFactionRank] = rankid;

	SendGreenMessage(playerid, "Você promoveu %s para %s (%d).", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
	SendGreenMessage(userid, "%s promoveu você para %s (%d).", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);

	return 1;
}

CMD:cofre(playerid)
{
	new id = -1, item;

	if((id = Vault_Nearest(playerid)) != -1)
	{
		if(VaultData[id][vaultFactionID] == PlayerData[playerid][pFactionID])
		{
			for(new i = 0; i < MAX_VAULT_WEAPON; i++) if(VaultData[id][vaultWeapon][i])
			{
				item++;
			}
			Dialog_Show(playerid, MenuCofre, DIALOG_STYLE_LIST, "Cofre da facção", "Gerenciar dinheiro\nGerenciar drogas\nGerenciar armas (%d/20)", "Selecionar", "Cancelar", item);
		}
		else SendWarningMessage(playerid, "Você não tem acesso a esse cofre.");
	}
	else return SendWarningMessage(playerid, "Você não está próximo de um cofre.");
	return 1;
}

CMD:armas(playerid)
{
	new id = -1;

	if((id = WH_Nearest(playerid)) != -1)
	{
		if(WhData[id][whFactionID] == PlayerData[playerid][pFactionID])
		{
			Dialog_Show(playerid, MenuArmas, DIALOG_STYLE_LIST, "Montagem de armas", "Gerenciar gunparts\nMontar arma", "Selecionar", "Cancelar");
		}
		else SendWarningMessage(playerid, "Você não tem acesso a montagem de armas.");
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao armazém de armas.");
	return 1;
}

CMD:fac(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Apenas facção policial possui um chat informal.");

	if(factionid == -1)
		return SendWarningMessage(playerid, "Você não faz parte de uma facção.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/fac [texto]");

	SendFactionMessage(factionid, 0x6699FFAA, "** %s %s: %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:repararveiculo(playerid, params[]) //Police, Medic, GOV
{
	new carroid = Vehicle_Inside(playerid);

	if(carroid == INVALID_VEHICLE_ID)
		return SendWarningMessage(playerid, "Você não está dentro de um veículo ou este é um veículo inválido.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendWarningMessage(playerid, "Você precisa estar dentro de um veículo.");		

	if(VehicleData[carroid][vehicleFaction] != PlayerData[playerid][pFactionID])
		return SendWarningMessage(playerid, "Você tem autorização para reparar esse veículo.");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendWarningMessage(playerid, "Você precisa ser o motorista do veículo.");

	if(PlayerData[playerid][pFixVehicle])
		return SendWarningMessage(playerid, "Você já solicitou um reparo no seu veículo, aguarde.");

	if(GetFactionType(playerid) == FACTION_POLICE)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1560.3861, -1694.6595, 5.8970))
			return SendWarningMessage(playerid, "Você não está no ponto de reparo da sua HQ.");		

		SendGreenMessage(playerid, "Reparando o veículo %s (ID: %d)...", ReturnVehicleModelName(VehicleData[carroid][vehicleModel]), GetPlayerVehicleID(playerid));

		PlayerData[playerid][pFixVehicleTimer] = SetTimerEx("_RepairVehicle", 12000, false, "ddd", playerid, carroid, 0);

		PlayerData[playerid][pFixVehicle] = true;
		SetPlayerFreezed(playerid, true);
	}
	else if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2480.4985,2356.7217,4.2109) || GetPlayerVirtualWorld(playerid) != 498)
			return SendWarningMessage(playerid, "Você não está no ponto de reparo da sua HQ.");		

		SendGreenMessage(playerid, "Reparando o veículo %s (ID: %d)...", ReturnVehicleModelName(VehicleData[carroid][vehicleModel]), GetPlayerVehicleID(playerid));

		PlayerData[playerid][pFixVehicleTimer] = SetTimerEx("_RepairVehicle", 12000, false, "ddd", playerid, carroid, 0);

		PlayerData[playerid][pFixVehicle] = true;
		SetPlayerFreezed(playerid, true);
	}

	return 1;
}

// ------------ GOVERNO --------------

CMD:tdepositar(playerid, params[])
{
	new id = -1;

	if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == ENTRANCE_TYPE_CITYHALL)
	{
		new amount;

		if(GetFactionType(playerid) != FACTION_GOV)
			return SendWarningMessage(playerid, "Você não faz parte do governo.");

		if(sscanf(params, "d", amount))
			return SendSyntaxMessage(playerid, "/tdepositar [quantia] (Saldo: %d)", FormatNumber(gov_TaxVault));

		if(amount < 1 || amount > GetScriptedMoney(playerid))
			return SendWarningMessage(playerid, "Valor especificado inválido.");

		if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
			return SendWarningMessage(playerid, "Você precisa ser pelo menos rank %s (%d).", FactionRanks[PlayerData[playerid][pFaction]][FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2], FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

		Tax_AddMoney(amount);

		GiveScriptedMoney(playerid, -amount);

		SendGreenMessage(playerid, "Você depositou %s no cofre do governo. (Saldo: %d)", FormatNumber(amount), FormatNumber(gov_TaxVault));
		
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) depositou %s no cofre do governo.", ReturnName(playerid, 0), playerid, FormatNumber(amount));
	}
	else
	{
		SendWarningMessage(playerid, "Você não está na prefeitura.");
	}

	return 1;
}

CMD:tsacar(playerid, params[])
{
	new id = -1;

	if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == ENTRANCE_TYPE_CITYHALL)
	{
		new amount;

		if(GetFactionType(playerid) != FACTION_GOV)
			return SendWarningMessage(playerid, "Você não faz parte do governo.");

		if(sscanf(params, "d", amount))
			return SendSyntaxMessage(playerid, "/tsacar [quantia] (Saldo: %d)", FormatNumber(gov_TaxVault));

		if(amount < 1 || amount > gov_TaxVault)
			return SendWarningMessage(playerid, "Valor especificado inválido.");

		if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
			return SendWarningMessage(playerid, "Você precisa ser pelo menos rank %s (%d).", FactionRanks[PlayerData[playerid][pFaction]][FactionData[PlayerData[playerid][pFaction]][factionRanks]], FactionData[PlayerData[playerid][pFaction]][factionRanks]);

		Tax_AddMoney(-amount);

		GiveScriptedMoney(playerid, amount);
		
		SendGreenMessage(playerid, "Você sacou %s do cofre do governo. (Saldo: %d)", FormatNumber(amount), FormatNumber(gov_TaxVault));
		
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) sacou %s do cofre do governo.", ReturnName(playerid, 0), playerid, FormatNumber(amount));
	}
	else
	{
		SendWarningMessage(playerid, "Você nao está na prefeitura.");
	}
	return 1;
}

CMD:verificarestado(playerid)
{
	new id = -1;

	if((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == ENTRANCE_TYPE_CITYHALL) 
	{
		if(GetFactionType(playerid) != FACTION_GOV)
			return SendWarningMessage(playerid, "Você não faz parte do governo.");

		if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
			return SendWarningMessage(playerid, "Apenas o governador e vice-governador podem acessar a situação atual do estado de San Andreas.");

		/*if(!IsPlayerInRangeOfPoint(playerid, 2.0, 0.0, 0.0, 0.0))
			return SendWarningMessage(playerid, "Você não está próximo ao centro de operações da prefeitura de Los Santos.");*/

		Dialog_Show(playerid, VerifyState, DIALOG_STYLE_TABLIST_HEADERS, "Situação atual do estado", "Serviço público\nCaixas eletrônicos públicos", "Verificar", "Cancelar");
	}
	else 
	{
		SendWarningMessage(playerid, "Você não está no interior da prefeitura de Los Santos.");
	}

	return 1;
}

// ------------ POLICIA --------------
//MDC No Módulo.

CMD:callsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(VehicleData[vehicleid][vehicleCallsign])
	{
		if(IsValidDynamic3DTextLabel(VehicleData[vehicleid][vehicleCallsignLabel]))
			DestroyDynamic3DTextLabel(VehicleData[vehicleid][vehicleCallsignLabel]);

		VehicleData[vehicleid][vehicleCallsign] = false;

		SendGreenMessage(playerid, "Callsign do veículo removido.");

		return 1;
	}

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendWarningMessage(playerid, "Você não está em nenhum veículo.");

	if(!IsACruiser(vehicleid))
		return SendWarningMessage(playerid, "Você não está dentro de um veículo permitido.");

	if(VehicleData[vehicleid][vehicleFaction] != PlayerData[playerid][pFactionID])
		return SendWarningMessage(playerid, "Você não está dentro de um veículo da sua corporação.");

	if(GetPlayerVirtualWorld(playerid) != 0)
		return SendWarningMessage(playerid, "Você precisa sair da garagem para adicionar o callsign.");

	new string[32];

	if(sscanf(params, "s[32]", string))
		return SendSyntaxMessage(playerid, "/callsign [sign]");	

	if(!VehicleData[vehicleid][vehicleCallsign])
	{
		VehicleData[vehicleid][vehicleCallsign] = true;
		VehicleData[vehicleid][vehicleCallsignLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, 0.0, -2.8, 0.0, 10.0, INVALID_PLAYER_ID, vehicleid, 1, GetPlayerVirtualWorld(playerid));
		SendGreenMessage(playerid, "Você adicionou o callsign \"%s\" neste veículo.", string);
	}
	return 1;
}

CMD:algemar(playerid, params[])
{
	new userid;

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/algemar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se algemar.");

	if(GetFactionType(userid) == FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não pode algemar um membro da força policial.");

	if(!IsPlayerNearPlayer(playerid, userid, 1.5))
		return SendWarningMessage(playerid, "Você precisa estar perto deste jogador.");

	if(GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
		return SendWarningMessage(playerid, "Você não pode algemar o jogador nessas circunstancias.");

	if(PlayerData[userid][pCuffed])
		return SendWarningMessage(playerid, "Esse jogador já está algemado.");

	if(PlayerData[userid][pState] == PLAYER_STATE_WOUNDED || PlayerData[userid][pState] == PLAYER_STATE_DEAD)
		return SendWarningMessage(playerid, "Você não pode algemar um jogador gravemente ferido ou morto.");

	if(IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(userid))
		return SendWarningMessage(playerid, "Você ou o outro jogador precisa estar fora do veículo.");

	if(PlayerData[userid][pCarrying])
		Carga_UnsetAttach(userid);

	PlayerData[userid][pCuffed] = 1;
	SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

	ShowPlayerFooter(userid, "Você foi ~r~algemado.");

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s algema %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:desalgemar(playerid, params[])
{
	new userid;

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/desalgemar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se desalgemar.");

	if(!IsPlayerNearPlayer(playerid, userid, 1.5))
		return SendWarningMessage(playerid, "Você precisa estar perto deste jogador.");

	if(!PlayerData[userid][pCuffed])
		return SendWarningMessage(playerid, "Esse jogador já está desalgemado.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendWarningMessage(playerid, "Você precisa estar fora do veículo.");

	PlayerData[userid][pCuffed] = 0;
	SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	ShowPlayerFooter(userid, "Você foi ~g~desalgemado.");

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s desalgema %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:arrastar(playerid, params[])
{
	new userid;

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/arrastar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se arrastar.");

	if(!IsPlayerNearPlayer(playerid, userid, 1.5))
		return SendWarningMessage(playerid, "Você precisa estar perto deste jogador.");

	if(!PlayerData[userid][pCuffed])
		return SendWarningMessage(playerid, "Esse jogador não está algemado.");

	if(PlayerData[userid][pState] == PLAYER_STATE_WOUNDED || PlayerData[userid][pState] == PLAYER_STATE_DEAD)
		return SendWarningMessage(playerid, "Você não pode arrastar um jogador gravemente ferido ou morto.");

	if(PlayerData[userid][pDragged])
	{
		PlayerData[userid][pDragged] = 0;
		PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

		KillTimer(PlayerData[userid][pDragTimer]);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s para de arrastar %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		PlayerData[userid][pDragged] = 1;
		PlayerData[userid][pDraggedBy] = playerid;

		PlayerData[userid][pDragTimer] = SetTimerEx("DragUpdate", 100, true, "dd", playerid, userid);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s começa a arrastar %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

CMD:deter(playerid, params[])
{
	new userid, vehicleid = GetNearestVehicle(playerid);

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/deter [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se deter.");

	if(!IsPlayerNearPlayer(playerid, userid, 2.0))
		return SendWarningMessage(playerid, "Você precisa estar perto deste jogador.");

	if(!PlayerData[userid][pCuffed])
		return SendWarningMessage(playerid, "Esse jogador não está algemado.");

	if(vehicleid == INVALID_VEHICLE_ID)
	    return SendWarningMessage(playerid, "Você não está próximo de nenhum veículo.");

	if(GetVehicleMaxSeats(vehicleid) < 2)
	    return SendWarningMessage(playerid, "Você não pode deter essa pessoa nesse veículo.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendWarningMessage(playerid, "Você precisa estar fora do veículo.");

	if(IsPlayerInVehicle(userid, vehicleid))
	{
		SetPlayerFreezed(playerid, false);

		AC_RemovePlayerFromVehicle(userid);
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s abre a porta e retira %s de dentro do veículo.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		new seatid = GetAvailableSeat(vehicleid, 2);

		if(seatid == -1)
			return SendWarningMessage(playerid, "Não há espaço nos bancos traseiros deste veículo.");

		ShowPlayerFooter(userid, "~Você foi ~r~detido.");

		StopDragging(userid);
		AC_PutPlayerInVehicle(userid, vehicleid, seatid);

		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s abre a porta e coloca %s dentro do veículo.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

CMD:m(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(m)egafone [texto]");

	if(strlen(params) > 64)
	{
		SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "[Megafone] %s: %.64s", ReturnName(playerid, 0), params);
		SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "...%s", params[64]);
	}
	else
	{
		SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "[Megafone] %s: %s", ReturnName(playerid, 0), params);
	}

	return 1;
}
alias:m("megaphone");

CMD:gov(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_MEDIC)
		return SendWarningMessage(playerid, "Você não faz parte de uma organização governamental.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/gov [texto]");

	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		SendClientMessageEx(i, FactionData[PlayerData[playerid][pFaction]][factionColor], "|__________ %s __________|", Faction_GetName(playerid));
		if(strlen(params) > 64)
		{
			SendClientMessageEx(i, COLOR_WHITE, "%.64s", params);
			SendClientMessageEx(i, COLOR_WHITE, "...%s", params[64]);
		}
		else
		{
			SendClientMessageEx(i, COLOR_WHITE, "%s", params);
		}
	}
	return 1;
}

CMD:multar(playerid, params[])
{
	new userid, price, reason[64];

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(sscanf(params, "uds[64]", userid, price, reason))
		return SendSyntaxMessage(playerid, "/multar [id/nome] [preço] [motivo]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
		return SendWarningMessage(playerid, "Esse jogador está desconectado ou você não está próximo a ele.");

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode escrever uma multa para si mesmo.");

	if(price < 1 || price > 1000)
		return SendWarningMessage(playerid, "O preço da multa não pode ser menor que $1 e maior que $1,000.");

	new id = Ticket_Add(userid, ReturnName(playerid), price, reason);

	if(id != -1)
	{
		SendGreenMessage(playerid, "Você escreveu uma multa para %s no valor de %s pelo motivo: %s", ReturnName(userid, 0), FormatNumber(price), reason);
		SendGreenMessage(userid, "%s escreveu uma multa para você no valor de %s pelo motivo: %s", ReturnName(playerid, 0), FormatNumber(price), reason);

		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s aplica uma multa em %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		SendWarningMessage(playerid, "Essa pessoa já está com a lista de multas cheia (%d).", MAX_PLAYER_TICKETS);
	}
	return 1;
}

CMD:apreenderveiculo(playerid, params[])
{
	new vehid, price, reason[64], query[364];

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1545.2993, -1609.5826, 13.3825))
		return SendWarningMessage(playerid, "Você não está no local de apreensão de veículos na sua HQ.");

	if(sscanf(params, "dds[64]", vehid, price, reason))
		return SendSyntaxMessage(playerid, "/apreenderveiculo [veiculo id] [preço] [motivo]");

	if(!IsValidVehicle(vehid) || !IsPlayerNearVehicle(playerid, vehid, 6.0))
		return SendWarningMessage(playerid, "Você não está próximo ao veículo informado.");

	if(VehicleData[vehid][vehicleFaction] >= 1 || VehicleData[vehid][vehicleJob] >= 1)
		return SendWarningMessage(playerid, "Você não pode apreender este tipo de veículo.");

	if(price < 1)
		return SendWarningMessage(playerid, "Digite um valor válido para dar procedimento a apreensão.");

	SendGreenMessage(playerid, "Você apreendeu o veículo %s(%s) por %s e pelo motivo \"%s\".", ReturnVehicleModelName(VehicleData[vehid][vehicleModel]), VehicleData[vehid][vehiclePlate], FormatNumber(price), reason);
	SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "** HQ: %s %s apreendeu o veículo %s com a placa de registro: %s.", Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnVehicleModelName(VehicleData[vehid][vehicleModel]), VehicleData[vehid][vehiclePlate]);

	mysql_format(this, query, sizeof(query), "INSERT INTO `carrosapreendidos` (`created_at`, `vehicle_id`, `officer`, `reason`, `price`, `model`, `plate`, `owner_id`) VALUES ('%e', '%d', '%e', '%e', '%d', '%e', '%e', '%d')",
		ReturnDate(),
		VehicleData[vehid][vehicleID],
		ReturnName(playerid),
		reason, price,
		ReturnVehicleModelName(VehicleData[vehid][vehicleModel]),
		VehicleData[vehid][vehiclePlate],
		VehicleData[vehid][vehicleOwnerID]);

	mysql_tquery(this, query);

	VehicleData[vehid][vehicleParked] = 2;
	Vehicle_Save(vehid);
	Vehicle_Destroy(vehid);

	return 1;
}

CMD:retirar(playerid, params[])
{
	new userid, string[128];

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/retirar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 3.0))
		return SendWarningMessage(playerid, "Esse jogador está desconectado ou você não está próximo a ele.");

	if(GetWeaponCount(userid) > 0)
		strcat(string, "Retirar Armas\n");

	if(Inventory_HasItem(userid, "Marijuana") || Inventory_HasItem(userid, "Cocaína") || Inventory_HasItem(userid, "LSD"))
		strcat(string, "Retirar Drogas\n");

	if(Inventory_HasItem(userid, "Gunparts"))
		strcat(string, "Retirar Partes de Armas\n");

	if(Inventory_HasItem(userid, "Rádio Portátil"))
		strcat(string, "Retirar Rádio Portátil");

	if(!strlen(string))
		return SendWarningMessage(playerid, "Não há itens com pessoa que você possa confiscar.");

	PlayerData[playerid][pTakeItems] = userid;
	Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Retirar Item", string, "Retirar", "Cancelar");
	return 1;
}

CMD:arrombarporta(playerid, params[])
{
	new id = -1;

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(GetPVarInt(playerid, "ArrombarPorta") == 1)
		return SendWarningMessage(playerid, "Você já está tentando arrombar a uma porta.");

	if((id = House_Nearest(playerid)) != -1)
	{
		if(HouseData[id][houseBreakDoor])
			return SendWarningMessage(playerid, "Já existe uma tentiva de arrombamento na porta dessa casa.");

		if(!HouseData[id][houseLocked])
			return SendWarningMessage(playerid, "Esta casa já está destrancada.");

		ShowPlayerFooter(playerid, "Tentando ~r~arrombar a porta~w~ desta casa.");
		ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0, 0);

		SetPVarInt(playerid, "ArrombarPorta", 1);
		HouseData[id][houseBreakDoor] = true;

		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s está tentando arrombar a porta da casa.", ReturnName(playerid, 0));
		SetTimerEx("ArrombarPortaCasa", 1500, false, "dd", playerid, id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo da porta da casa.");
	return 1;
}

CMD:prender(playerid, params[])
{
	new userid, time, id;

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(sscanf(params, "ud", userid, time))
		return SendSyntaxMessage(playerid, "/prender [id/nome] [minutos]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
		return SendWarningMessage(playerid, "Esse jogador está desconectado ou você não está próximo a ele.");

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode prender a si mesmo.");

	if(GetFactionType(userid) == FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não pode prender um membro da força policial.");

	if(time < 1 || time > 600)
		return SendWarningMessage(playerid, "O tempo não pode ser menor que 1 e maior que 600 minutos.");

	if(!IsPlayerNearArrest(playerid))
		return SendWarningMessage(playerid, "Você não está próximo ao ponto de prisão.");

	id = Arrest_Nearest(playerid);

	PlayerData[userid][pJailed] = PlayerData[playerid][pEntrance];
	PlayerData[userid][pJailTime] = time*60;

	SendGreenMessage(userid, "Você foi preso pelo oficial %s por %d minuto(s).", ReturnName(playerid, 0), time);

	ResetarEstatisticas(userid);

	SendPlayerToJail(userid, ArrestData[id][arrestType]);

	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraw][5]);

	new entranceid = GetEntranceByID(PlayerData[playerid][pEntrance]);

	SendFactionMessageEx(FACTION_POLICE, COLOR_WARNING, "** HQ: %s %s prendeu %s por %d minuto(s) no(a) %s.", Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), time, EntranceData[entranceid][entranceName]);

	return 1;
}

CMD:procurar(playerid, params[])
{
	new userid;

	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/procurar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 3.0))
		return SendWarningMessage(playerid, "Esse jogador está desconectado ou você não está próximo a ele.");

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode procurar itens ilegais em si mesmo.");

	if(GetFactionType(userid) == FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não pode procurar por itens ilegais em um membro da força policial.");

	SendClientMessageEx(playerid, COLOR_GREEN, "|_____ Itens de %s _____|", ReturnName(userid, 0));

	SendClientMessageEx(playerid, COLOR_WHITE, "* Dinheiro: %s", FormatNumber(GetScriptedMoney(userid)));

	if(Inventory_HasItem(userid, "Celular"))
		SendClientMessageEx(playerid, COLOR_WHITE, "* Celular (#%d)", PlayerData[userid][pCellphone]);

	if(Inventory_HasItem(userid, "Rádio Portátil"))
		SendClientMessageEx(playerid, COLOR_WHITE, "* Rádio Portátil [S:1 CH:%d - S:2 CH:%d - S:3 CH:%d - S:4 CH:%d]", PlayerData[userid][pRadioSlot][0], PlayerData[userid][pRadioSlot][1], PlayerData[userid][pRadioSlot][2], PlayerData[userid][pRadioSlot][3]);

	if(Inventory_HasItem(userid, "Marijuana"))
		SendClientMessageEx(playerid, COLOR_WARNING, "* Marijuana (%d)", Inventory_Count(userid, "Marijuana"));
	if(Inventory_HasItem(userid, "Cocaína"))
		SendClientMessageEx(playerid, COLOR_WARNING, "* Cocaína (%d)", Inventory_Count(userid, "Cocaína"));
	if(Inventory_HasItem(userid, "LSD"))
		SendClientMessageEx(playerid, COLOR_WARNING, "* LSD (%d)", Inventory_Count(userid, "LSD"));

	if(Inventory_HasItem(userid, "Gunparts"))
		SendClientMessageEx(playerid, COLOR_WARNING, "* Gunparts (%d)", Inventory_Count(userid, "Gunparts"));

	if(Inventory_HasItem(userid, "Boombox"))
		SendClientMessageEx(playerid, COLOR_WHITE, "* Boombox (%d)", Inventory_Count(userid, "Boombox"));

	for(new i = 0; i < 13; i ++)
	{
		if(!PlayerData[userid][pWeapon][i]) continue;
		SendClientMessageEx(playerid, COLOR_WARNING, "* %s (%d)", ReturnWeaponName(PlayerData[userid][pWeapon][i]), PlayerData[userid][pAmmo][i]);
	}

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s começa a procurar por itens ilegais em %s.", ReturnName(playerid, 0), ReturnName(userid, 0));

	return 1;
}

CMD:crb(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(RoadBlock_GetCount(playerid) >= 10)
		return SendWarningMessage(playerid, "Você só pode colocar dez bloqueios simultâneos.");

	if(GetPlayerInterior(playerid) != 0 && GetPlayerVirtualWorld(playerid) != 0)
		return SendWarningMessage(playerid, "Você não pode colocar uma barreira aqui.");

	static string[64 * sizeof(g_aRoadBlocks)];

	if(string[0] == EOS)
	{
		for(new i = 0; i < sizeof(g_aRoadBlocks); i++)
		{
			format(string, sizeof(string), "%s%d(%f, %f, %f, %f)\t%s\n", string, g_aRoadBlocks[i][e_roadItem], g_aRoadBlocks[i][e_roadRotX], g_aRoadBlocks[i][e_roadRotY], g_aRoadBlocks[i][e_roadRotZ], g_aRoadBlocks[i][e_roadZoom], FixASCII(g_aRoadBlocks[i][e_roadName]));
		}
	}

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_PREVIEW_MODEL, "Barreiras policiais", string, "Selecionar", "Fechar");

	return 1;
}

CMD:rrb(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	new id = -1;

	if((id = RoadBlock_Nearest(playerid)) != -1)
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s remove o bloqueio que estava no chão.", ReturnName(playerid, 0));
		RoadBlock_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo de um de seus bloqueios.");

	return 1;
}

CMD:rallrb(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(!RoadBlock_GetCount(playerid))
		return SendWarningMessage(playerid, "Você não colocou nenhum bloqueio.");

	foreach(new i : Barrier) if(RoadData[i][roadCreated] && RoadData[i][roadPlayer] == playerid)
	{
		RoadBlock_Delete(i);
	}
	SendFactionMessage(PlayerData[playerid][pFaction], FactionData[PlayerData[playerid][pFaction]][factionColor], "** %s removeu todos os seus bloqueios.", ReturnName(playerid, 0));

	return 1;
}

CMD:bb(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendWarningMessage(playerid, "Você não pode fazer isso agora.");

	if(GetWeapon(playerid) != WEAPON_SHOTGUN)
		return SendWarningMessage(playerid, "Você não está com a shotgun em mãos.");

	if(!PlayerData[playerid][pBeanBag])
	{
		PlayerData[playerid][pBeanBag] = 1;

		SendServerMessage(playerid, "Os tiros da sua shotgun surtirá o efeito 'beanbag' a partir de agora.");
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s altera para a sua Beanbag Shotgun.", ReturnName(playerid, 0));
	}
	else
	{
		PlayerData[playerid][pBeanBag] = 0;

		SendServerMessage(playerid, "Os tiros da sua shotgun surtirá o efeito 'dano normal' a partir de agora.");
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s altera para a sua Normal Shotgun.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:cela(playerid)
{
	if(GetFactionType(playerid) != FACTION_POLICE)
		return SendWarningMessage(playerid, "Você não faz parte da polícia.");

	if(!PlayerData[playerid][pOnDuty])
		return SendWarningMessage(playerid, "Você não está em serviço.");

	for(new i = 0; i < sizeof(PrisionCell); i++)
	{
		if(IsPlayerNearDynamicObject(playerid, PrisionCell[i], 2.0))
		{
			if(!StatusPrisionCell[i])
			{
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s usa a sua chave a abre a porta da cela.", ReturnName(playerid, 0));
				MoveDynamicObject(PrisionCell[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
				StatusPrisionCell[i] = true;
			}
			else
			{
				SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s usa a sua chave a fecha a porta da cela.", ReturnName(playerid, 0));
				MoveDynamicObject(PrisionCell[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
				StatusPrisionCell[i] = false;
			}
			return 1;
		}
	}

	SendWarningMessage(playerid, "Você não está próximo de uma cela.");
	return 1;
}

// ------------ MÉDICOS -----------------

CMD:curar(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1395.1921, -23.0422, 1002.0010))
	{
		if(GetScriptedMoney(playerid) < 250)
			return SendWarningMessage(playerid, "Você não possui $250 em mãos.");

		SetScriptedHealth(playerid, 100.0);
		PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 25 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 25);
		PlayerData[playerid][pHungry] = (PlayerData[playerid][pHungry] + 10 >= 100) ? (100) : (PlayerData[playerid][pHungry] + 10);

		GiveScriptedMoney(playerid, -250);
		Damage_Clear(playerid);
		SendGreenMessage(playerid, "Você recebeu os devidos tratamentos.");
	}
	else
	{
		if(GetFactionType(playerid) != FACTION_MEDIC)
			return SendWarningMessage(playerid, "Você precisar estar em um hospital.");

		if(!PlayerData[playerid][pOnDuty])
			return SendWarningMessage(playerid, "Você não está em serviço.");

		new userid;

		if(sscanf(params, "u", userid))
			return SendSyntaxMessage(playerid, "/curar [id/nome]");

		if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK && !IsPlayerNearPlayer(playerid, userid, 2.5))
			return SendWarningMessage(playerid, "Você não está ajoelhado e/ou perto do jogador.");

		if(PlayerData[playerid][pState] == PLAYER_STATE_ALIVE)
			return SendWarningMessage(playerid, "Esse jogador não precisa de socorro.");

		if(PlayerData[playerid][pState] == PLAYER_STATE_DEAD)
			return SendWarningMessage(playerid, "Esse jogador está morto, não há como curar.");

		if(PlayerData[userid][pCare] != INVALID_PLAYER_ID)
			return SendWarningMessage(playerid, "Esse jogador já está recebendo atendimento médico.");

		ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0, 1);
		ApplyAnimation(userid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);

		PlayerData[userid][pCare] = playerid;
		PlayerData[userid][pCareTime] = 20;

		SendGreenMessage(userid, "%s está realizando os primeiros socorros em você.", ReturnName(playerid, 0));

		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s começa os preparativos de primeiros socorros em %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	

	return 1;
}

// ------------ CRIMINOSOS --------------

CMD:amarrar(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_GANGSTER && GetFactionType(playerid) != FACTION_CARTEL && GetFactionType(playerid) != FACTION_MOTOCLUB)
		return SendWarningMessage(playerid, "Você não faz parte de uma facção criminosa.");

	if(!PlayerData[playerid][pIllegalDuty])
		return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/amarrar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se amarrar.");

	if(!IsPlayerNearPlayer(playerid, userid, 1.5))
		return SendWarningMessage(playerid, "Você precisa estar perto deste jogador.");

	if(GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
		return SendWarningMessage(playerid, "Você não pode amarrar o jogador nessas circunstancias.");

	if(PlayerData[userid][pTied])
		return SendWarningMessage(playerid, "Esse jogador já está amarrado.");

	if(PlayerData[playerid][pCarrying])
		Carga_UnsetAttach(playerid);

	PlayerData[userid][pTied] = 1;
	SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

	ShowPlayerFooter(userid, "Você foi ~r~amarrado.");

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s amarra %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:desamarrar(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_GANGSTER && GetFactionType(playerid) != FACTION_CARTEL && GetFactionType(playerid) != FACTION_MOTOCLUB)
		return SendWarningMessage(playerid, "Você não faz parte de uma facção criminosa.");

	if(!PlayerData[playerid][pIllegalDuty])
		return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/desamarrar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode se desamarrar.");

	if(!IsPlayerNearPlayer(playerid, userid, 1.5))
		return SendWarningMessage(playerid, "Você precisa estar perto deste jogador.");

	if(!PlayerData[userid][pTied])
		return SendWarningMessage(playerid, "Esse jogador já não está desamarrado.");

	PlayerData[userid][pTied] = 0;
	SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	ShowPlayerFooter(userid, "Você foi ~g~desamarrado.");

	SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s desamarra %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:assaltar(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_GANGSTER && GetFactionType(playerid) != FACTION_CARTEL && GetFactionType(playerid) != FACTION_MOTOCLUB)
		return SendWarningMessage(playerid, "Você não faz parte de uma facção criminosa.");

	if(!PlayerData[playerid][pIllegalDuty])
		return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/assaltar [id/nome]");

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	if(!IsPlayerNearPlayer(playerid, userid, 1.5))
		return SendWarningMessage(playerid, "Você precisa estar próximo desta pessoa.");

	if(PlayerData[userid][pRobPlayer] != INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, "Essa pessoa já está sendo assaltada por alguém.");

	PlayerData[userid][pRobPlayer] = playerid;
	SetPVarInt(playerid, "Rob_OfferTime", gettime() + 180);

	SendGreenMessage(userid, "%s anunciou um assaltou contra você, para se render digite (/aceitar assalto).", ReturnName(playerid, 0));
	SendGreenMessage(playerid, "Você iniciou uma tentativa de assalto em %s.", ReturnName(userid, 0));

	return 1;
}

/* Sistema de roubos dinâmicos */
CMD:roubar(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_GANGSTER && GetFactionType(playerid) != FACTION_CARTEL && GetFactionType(playerid) != FACTION_MOTOCLUB)
		return SendWarningMessage(playerid, "Você não faz parte de uma facção criminosa.");

	if(!PlayerData[playerid][pIllegalDuty])
		return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

	new option[16];

	if(sscanf(params, "s[16]", option)) 
	{
		SendSyntaxMessage(playerid, "/roubar [ação]");
		return SendFormatMessage(playerid, COLOR_YELLOW, "Ações", "atm");
	}

	if(!strcmp(option, "atm")) 
	{
		new id = -1;

		if((id = ATM_Nearest(playerid)) != -1) 
		{
		//todo: definir aparatos para inicio de roubo;; explosivo, pé de cabra, hacking, etc...
			if(ATMData[id][atmRobbed])
				return SendWarningMessage(playerid, "Não é possível executar essa ação agora.");

			if(ATMData[id][atmBeingRobbed])
				return SendWarningMessage(playerid, "Já existe uma tentativa de roubo nesse caixa eletrônico.");

			new randomtime = randomEx(38, 64);

			ATMData[id][atmBeingRobbed] = 1;

			PlayerData[playerid][pRobbing] = ROBBING_ATM;
			PlayerData[playerid][pRobbingID] = id;
			PlayerData[playerid][pRobbingTime] = SetTimerEx("OnPlayerFinishedRobbing", 1000 * randomtime, false, "d", playerid);

			SetPlayerFreezed(playerid, true);
			ShowPlayerFooter(playerid, "~y~Roubo iniciado, voce foi congelado.");

			SendNearbyMessage(playerid, 38.0, COLOR_PURPLE, "** O caixa eletrônico dispara um alarme sonoro de média distância.");
			SendGreenMessage(playerid, "Você iniciou um roubo no caixa eletrônico (%d segundos). Para cancelar digite: /cancelarroubo.", randomtime);

			SendFactionMessageEx(FACTION_POLICE, COLOR_WARNING, "** ALERTA AUTOMÁTICO: Tentativa de roubo registrada em um caixa eletrônico na região de %s.", GetPlayerLocation(playerid));
		}
		else
		{
			SendWarningMessage(playerid, "Você não está próximo de um caixa eletrônico.");
		}
	}
	else 
	{
		SendWarningMessage(playerid, "Ação inválida.");
	}
	return 1;
}

CMD:cancelarroubo(playerid)
{
	if(GetFactionType(playerid) != FACTION_GANGSTER && GetFactionType(playerid) != FACTION_CARTEL && GetFactionType(playerid) != FACTION_MOTOCLUB)
		return SendWarningMessage(playerid, "Você não faz parte de uma facção criminosa.");

	if(!PlayerData[playerid][pIllegalDuty])
		return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

	if(!PlayerData[playerid][pRobbing])
		return SendWarningMessage(playerid, "Você não está roubando.");

	ResetPlayerRob(playerid);
	SendGreenMessage(playerid, "Você cancelou a sua ação de roubo.");

	return 1;
}

//--GANGSTERS--

CMD:venderdroga(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_GANGSTER)
		return SendWarningMessage(playerid, "Você não é um gangster.");

	if(!PlayerData[playerid][pIllegalDuty])
		return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

	new string[16], userid, amount, price;

	if(sscanf(params, "us[16]dd", string, userid, amount, price))
	{
		SendSyntaxMessage(playerid, "/venderdroga [id/nome] [tipo] [quantidade] [valor]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "Tipos", "marijuana, cocaína, lsd");
	}

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode vender droga para si mesmo.");

	if(!IsPlayerNearPlayer(playerid, userid, 3.0))
		return SendWarningMessage(playerid, "Você precisa estar perto deste jogador.");

	if(price < 1)
		return SendWarningMessage(playerid, "O preço que você informou não pode ser menor que $1.");

	if(!strcmp(string, "marijuana", true))
	{
		if(Inventory_Count(playerid, "Marijuana") < amount)
			return SendWarningMessage(playerid, "Você não possui essa quantia de marijuana no seu inventário.");

		PlayerData[userid][pDrugSeller] = playerid;
		SetPVarInt(userid, "Drug_Type", 1);
		SetPVarInt(userid, "Drug_Amount", amount);
		SetPVarInt(userid, "Drug_Price", price);
		SetPVarInt(userid, "Drug_OfferTime", gettime() + 30);

		SendGreenMessage(playerid, "Você ofereceu marijuana para %s, quantidade %d, preço %s.", ReturnName(userid, 0), amount, FormatNumber(price));
		SendGreenMessage(userid, "%s ofereceu %d marijuana para você por %s (para comprar digite \"/aceitar droga\").", ReturnName(playerid, 0), amount, FormatNumber(price));
	}
	else if(!strcmp(string, "cocaína", true))
	{
		if(Inventory_Count(playerid, "Cocaína") < amount)
			return SendWarningMessage(playerid, "Você não possui essa quantia de cocaína no seu inventário.");

		PlayerData[userid][pDrugSeller] = playerid;
		SetPVarInt(userid, "Drug_Type", 2);
		SetPVarInt(userid, "Drug_Amount", amount);
		SetPVarInt(userid, "Drug_Price", price);
		SetPVarInt(userid, "Drug_OfferTime", gettime() + 30);

		SendGreenMessage(playerid, "Você ofereceu cocaína para %s, quantidade %d, preço %s.", ReturnName(userid, 0), amount, FormatNumber(price));
		SendGreenMessage(userid, "%s ofereceu %d cocaína para você por %s (para comprar digite \"/aceitar droga\").", ReturnName(playerid, 0), amount, FormatNumber(price));
	}
	else if(!strcmp(string, "lsd", true))
	{
		if(Inventory_Count(playerid, "LSD") < amount)
			return SendWarningMessage(playerid, "Você não possui essa quantia de lsd no seu inventário.");

		PlayerData[userid][pDrugSeller] = playerid;
		SetPVarInt(userid, "Drug_Type", 3);
		SetPVarInt(userid, "Drug_Amount", amount);
		SetPVarInt(userid, "Drug_Price", price);
		SetPVarInt(userid, "Drug_OfferTime", gettime() + 30);

		SendGreenMessage(playerid, "Você ofereceu lsd para %s, quantidade %d, preço %s.", ReturnName(userid, 0), amount, FormatNumber(price));
		SendGreenMessage(userid, "%s ofereceu %d lsd para você por %s (para comprar digite \"/aceitar droga\").", ReturnName(playerid, 0), amount, FormatNumber(price));
	}

	return 1;
}

CMD:venderarma(playerid, params[])
{
	if(GetFactionType(playerid) != FACTION_GANGSTER)
		return SendWarningMessage(playerid, "Você não é um gangster.");

	if(!PlayerData[playerid][pIllegalDuty])
		return SendWarningMessage(playerid, "Você não está com a roupa da sua facção.");

	new userid, price;

	if(sscanf(params, "ud", userid, price))
		return SendSyntaxMessage(playerid, "/venderarma [playerid] [preço]");

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode vender arma para si mesmo.");

	if(userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 2.5))
		return SendWarningMessage(playerid, "Esse jogador não está próximo a você ou está desconectado.");

	new weaponid = GetWeapon(playerid), ammo = GetAmmo(playerid);

	if(!weaponid)
		return SendWarningMessage(playerid, "Você não está com nenhuma arma em mãos.");

	if(weaponid == 24)
	{
		PlayerData[userid][pWeaponSeller] = playerid;
		SetPVarInt(userid, "Weapon_ID", weaponid);
		SetPVarInt(userid, "Weapon_Ammo", ammo);
		SetPVarInt(userid, "Weapon_Price", price);
		SetPVarInt(userid, "Weapon_OfferTime", gettime() + 30);

		SendGreenMessage(playerid, "Você ofereceu um(a) %s com %d de munição para %s por %s.", ReturnWeaponName(weaponid), ammo, ReturnName(userid, 0), FormatNumber(price));
		SendGreenMessage(userid, "%s ofereceu um(a) %s com %d de munição para você por %s (para comprar digite \"/aceitar arma\").", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ammo, FormatNumber(price));
	}	
	else
		SendWarningMessage(playerid, "Você só pode vender arma de pequeno porte (exemplo: desert eagle).");

	return 1;
}

// ========================================================== COMANDOS DOS ADMINISTRADORES ===================================================== //


// ==-------------- TESTER -------------------==
CMD:acmd(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < ADMIN_Moderator) 
		return SendWarningMessage(playerid, AdminError);

	new level[12];

	if(sscanf(params, "s[16]", level))
	{
		SendSyntaxMessage(playerid, "/acmd [level]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "LEVEL", "moderator, gm1, gm2, gm3, headstaff, leadstaff, management");
	}

	if(!strcmp(level, "moderator"))
	{	
		if(PlayerData[playerid][pAdmin] < ADMIN_Moderator)
			return SendWarningMessage(playerid, "Você não permissão de visualizar os comandos administrativo de um Moderator.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/aa, /checarafk, /jetpack, /atrabalho, /kick, /ir, /trazer, /enviar, /tapa, /spec(tv)");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/spy, /listatv, /anuncio, /(des)calar, /arv, /asv, /abv, /(des)congelar, /desbugar");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/spawnplayer, /soslist, /ar, /rr, /proximo, /checarveiculos, /checarveiculo");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/checarpropriedades, /checarpropriedade, /checararmas, /iniciargg, /addgg, /finalizargg");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/teleportar, /mutarpm, /ultimoatirador, /reviver, /saciar, /checarmascara");
		
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "gm1"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_GameAdmin1)
			return SendWarningMessage(playerid, "Você não permissão de visualizar os comandos administrativo de um Game Admin 1.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/banir, /baniroff, /setarvida, /ajail, /ajailoff, /setarhora, /verip, /aplicaraviso");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/aplicaravisoff, /setarinterior, /setarworld, /setarclima, /listarclimas, /setaremprego");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/achatvip, /aremovercallsign, /aremoverboombox");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "gm2"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_GameAdmin2)
			return SendWarningMessage(playerid, "Você não permissão de visualizar os comandos administrativo de um Game Admin 2.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/setarskin, /rac, /aac, /trazerveiculo, /desbanir, /criarrefundo, /verificarrefundos");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "gm3"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_GameAdmin3)
			return SendWarningMessage(playerid, "Você não permissão de visualizar os comandos administrativo de um Game Admin 3.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/punir, /retirarpunicao, /resetardinheiro, /editar");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "headstaff"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_HeadStaff)
			return SendWarningMessage(playerid, "Você não permissão de visualizar os comandos administrativo de um Head Staff.");
		
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/retirararmas, /darlicencas, /retirarlicencas, /setarprime, /retirarprime, /acmd itens");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/paycheckduplo, /ahide, /editarpedagios");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "leadstaff"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Você não permissão de visualizar os comandos administrativo de um Lead Staff.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/motd, /gmx, /limparinventario, /interiorlist, /daradmin, /checarlog, /checarip, /editaranticheat");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/shutdown");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Dynamic: /acmd indústria, /acmd empresa, /acmd pump, /acmd teleporte, /acmd casa");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Dynamic: /acmd atm, /acmd objeto, /acmd radar, /acmd facção, /acmd prisão");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Dynamic: /acmd cofre, /acmd weaponhouse, /acmd veículo, /acmd câmera, /acmd portão");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Dynamic: /acmd lixeira, /acmd desmanche, /acmd bueiro, /acmd torre, /acmd complexo");
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Dynamic: /acmd entrada");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "management"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_Management)
			return SendWarningMessage(playerid, "Você não permissão de visualizar os comandos administrativo de um Management.");
		
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/retiraradmin, /paycheck, /ainvisivel");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "itens"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_HeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
		
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/setaritem, /itemlist, /spawnitem, /setarquantidade, /deletaritem");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "indústria"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarindustria, /deletarindustria, /editarindustria");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "empresa"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarempresa, /deletarempresa, /editarempresa");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "pump"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarpump, /deletarpump");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "teleporte"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarteleporte, /deletarteleporte");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "casa"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarcasa, /deletarcasa, /editarcasa");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "atm"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criaratm, /deletaratm");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "objeto"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarobjeto, /deletarobjeto, /editarobjeto, /infoobjetos");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "radar"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarradar, /deletarradar");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "facção"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarfaccao, /deletarfaccao, /editarfaccao, /darlider, /setarfaccao, /setarrank");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "prisão"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarpp, /deletarpp");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "cofre"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarcofre, /deletarcofre");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "weaponhouse"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarwh, /deletarwh");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "veículo"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarveiculo, /salvarveiculo, /deletarveiculo");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "câmera"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarcamera, /deletarcamera");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "portão"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarportao, /deletarportao, /editarportao");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "lixeira"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarlixeira, /deletarlixera");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "desmanche"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criardesmanche, /deletardesmanche, /editardesmanche");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "bueiro"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarbueiro, /deletarbueiro");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "torre"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");
	
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criartorre, /deletartorre, /editartorre");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "complexo"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarcomplexo, /deletarcomplexo, /editarcomplexo");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else if(!strcmp(level, "entrada"))
	{
		if(PlayerData[playerid][pAdmin] < ADMIN_LeadStaff)
			return SendWarningMessage(playerid, "Parâmetro inválido.");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "/criarentrada, /deletarentrada, /editarentrada");

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "______________________________________");
	}
	else
		SendWarningMessage(playerid, "Parâmetro inválido.");

	return 1;
}

CMD:checarafk(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < ADMIN_Moderator) 
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/checarafk [id/nome]");

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	if(gettime() - PlayerData[userid][pLastUpdate] < 15)
		return SendWarningMessage(playerid, "Esse personagem não está AFK.");

	SendWarningMessage(playerid, "%s (ID: %d) está AFK por %d minuto(s).", ReturnName(userid, 0), userid, (gettime() - PlayerData[userid][pLastUpdate]) / 60);

	return 1;
}

CMD:jetpack(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
		return SendWarningMessage(playerid, "Você já está equipado com um jetpack.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	SendAdminAction(playerid, "Você pegou um Jetpack.");

	return 1;
}

CMD:atrabalho(playerid)
{
	if(PlayerData[playerid][pAdmin] < ADMIN_Moderator) 
		return SendWarningMessage(playerid, AdminError);

	if(!PlayerData[playerid][pAdminStatus])
	{
		PlayerData[playerid][pAdminStatus] = true;

		SetPlayerColorEx(playerid, COLOR_ADMIN);

		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) está agora em modo administrativo.", ReturnName(playerid, 0), playerid);
	}
	else
	{
		PlayerData[playerid][pAdminStatus] = false;

		if(PlayerData[playerid][pOnDuty])
			SetFactionColor(playerid);
		else
			SetPlayerColorEx(playerid, COLOR_WHITE);
		
		
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) está agora em modo jogo.", ReturnName(playerid, 0), playerid);
	}

	return 1;
}

CMD:kick(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid, reason[64];

	if(sscanf(params, "us[64]", userid, reason))
		return SendSyntaxMessage(playerid, "/kick [id/nome] [motivo]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não pode kickar um administrador superior.");

	SendNearbyMessage(userid, 10.0, COLOR_WHITE, "* Administrador %s kickou %s do servidor pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);

	foreach(new i : Player) if(PlayerData[i][pLogged])
		SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s kickou %s do servidor pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);

	KickEx(userid);

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) foi kickado pelo administrador %s (uid: %d) pelo motivo: %s", FormatFullTime(), ReturnName(userid), PlayerData[playerid][pID], ReturnName(playerid), PlayerData[playerid][pID], reason);
	return 1;
}

CMD:ir(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid, type[24], onde[64], id;

	if(sscanf(params,"u",userid))
	{
		SendSyntaxMessage(playerid, "/ir [playerid ou nome]");
		SendFormatMessage(playerid, COLOR_ORANGE, "Nomes", "casa, empresa, industria, objeto, complexo, entrada, torre, pos, veiculo");
		return 1;
	}

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
	{
		if(sscanf(params, "s[24]S()[32]", type, onde))
		{
			SendSyntaxMessage(playerid, "/ir [tipo] [id real]");
			SendFormatMessage(playerid, COLOR_ORANGE, "NOMES", "casa, empresa, industria, objeto");
			return 1;
		}

		if(!strcmp(type, "casa", true))
		{
			if(sscanf(onde, "d", id))
				return SendSyntaxMessage(playerid, "/ir casa [id real]");

			if((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
				return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

			AC_SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
			SetPlayerInterior(playerid, HouseData[id][houseExtInterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseExtVW]);

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = HouseData[id][houseComplex];

			SendAdminAction(playerid, "Você teleportou até a casa ID: %d.", id);
			return 1;
		}
		else if(!strcmp(type, "empresa", true))
		{
			if(sscanf(onde, "d", id))
				return SendSyntaxMessage(playerid, "/ir empresa [id real]");

			if((id < 0 || id >= MAX_BUSINESS) || !BusinessData[id][businessExists])
				return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

			AC_SetPlayerPos(playerid, BusinessData[id][businessX], BusinessData[id][businessY], BusinessData[id][businessZ]);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SendAdminAction(playerid, "Você teleportou até a empresa ID: %d.", id);
			return 1;
		}
		else if(!strcmp(type, "industria", true))
		{
			if(sscanf(onde, "d", id))
				return SendSyntaxMessage(playerid, "/ir industria [id real]");

			if((id < 0 || id >= MAX_INDUSTRY) || !IndustryData[id][industryExists])
				return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

			AC_SetPlayerPos(playerid, IndustryData[id][industryX], IndustryData[id][industryY], IndustryData[id][industryZ]);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SendGreenMessage(playerid, "Você foi teleportado até a indústria ID: %d.", id);
			return 1;
		}
		else if(!strcmp(type, "objeto", true))
		{
			if(sscanf(onde, "d", id))
				return SendSyntaxMessage(playerid, "/ir objeto [id real]");

			if((id < 0 || id >= MAX_OBJECTDATA) || !ObjectData[id][objectExists])
				return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

			AC_SetPlayerPos(playerid, ObjectData[id][objectPos][0], ObjectData[id][objectPos][1], ObjectData[id][objectPos][2]+2.5);
			SetPlayerVirtualWorld(playerid, ObjectData[id][objectWorld]);
			SetPlayerInterior(playerid, ObjectData[id][objectInterior]);

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SendAdminAction(playerid, "Você teleportou até o centro do objeto ID: %d.", id);
			return 1;
		}
		else if(!strcmp(type, "complexo", true))
		{
			if(sscanf(onde, "d", id))
				return SendSyntaxMessage(playerid, "/ir complexo [id real]");

			if((id < 0 || id > MAX_COMPLEX) || !ComplexData[id][complexExists])
				return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

			AC_SetPlayerPos(playerid, ComplexData[id][complexX], ComplexData[id][complexY], ComplexData[id][complexZ]);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SendAdminAction(playerid, "Você teleportou até o complexo ID: %d.", id);
			return 1;
		}
		else if(!strcmp(type, "entrada", true))
		{
			if(sscanf(onde, "d", id))
				return SendSyntaxMessage(playerid, "/ir entrada [id real]");

			if((id < 0 || id > MAX_ENTRANCES) || !EntranceData[id][entranceExists])
				return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

			AC_SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SendAdminAction(playerid, "Você teleportou até a entrada ID: %d.", id);
			return 1;
		}
		else if(!strcmp(type, "pos", true))
		{
			new Float:gPos[3];

			if(sscanf(onde, "p<,>fff", gPos[0], gPos[1], gPos[2]))
				return SendSyntaxMessage(playerid, "/ir pos [X] [Y] [Z]");
		
			AC_SetPlayerPos(playerid, gPos[0], gPos[1], gPos[2]);

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SendAdminAction(playerid, "Sua posição foi alterada para: X %.4f, Y %.4f, Z %.4f.", gPos[0], gPos[1], gPos[2]);
			return 1;
		}
		else if(!strcmp(type, "veiculo", true))
		{
			if(sscanf(onde, "d", id))
				return SendSyntaxMessage(playerid, "/ir veiculo [id real]");

			if(!IsValidVehicle(id))
				return SendWarningMessage(playerid, "Veículo ID informado é inválido.");

			new Float:x, Float:y, Float:z;

			GetVehiclePos(id, x, y, z);
			AC_SetPlayerPos(playerid, x, y + 2, z + 1);
			SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(id));

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SendAdminAction(playerid, "Você teleportou até o veículo ID: %d.", id);
			return 1;
		}
		else if(!strcmp(type, "torre", true))
		{
			if(sscanf(onde, "d", id))
				return SendSyntaxMessage(playerid, "/ir torre [id real]");

			if((id < 0 || id >= MAX_TOWERS) || !TowerData[id][towerExists])
				return SendWarningMessage(playerid, "Não existe uma Torre ID com o valor informado (%d).", id);

			SetPlayerPos(playerid, TowerData[id][towerX] - 1.0, TowerData[id][towerY] - 1.0, TowerData[id][towerZ] + 1.0);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			PlayerData[playerid][pEntrance] = -1;
			PlayerData[playerid][pHouse] = -1;
			PlayerData[playerid][pBusiness] = -1;
			PlayerData[playerid][pComplex] = -1;

			SendAdminAction(playerid, "Você teleportou até a torre ID: %d.", id);
			return 1;
		}
 		else return SendWarningMessage(playerid, JogadorOff);
	}

	if(!PlayerData[userid][pLogged])
		return SendWarningMessage(playerid, "Você não pode ir até um jogador sem ele ter feito o login.");

	if(SendPlayerToPlayer(playerid, userid))
	{
		SendAdminAction(playerid, "Você teleportou até %s.", ReturnName(userid, 0));
	}
	else
	{
		SendWarningMessage(playerid, "Esse jogador está impossibilitado de receber esta função.");
	}

	return 1;
}

CMD:trazer(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/trazer [playerid ou todos]");   	

	if(userid == INVALID_PLAYER_ID)
	{
		new string[6];

		if(sscanf(params, "s[6]", string))
			return SendSyntaxMessage(playerid, "/trazer [playerid ou todos]");

		if(!strcmp(string, "todos", true))
		{
			foreach(new i : Player) if(PlayerData[i][pLogged])
			{
				SendPlayerToPlayer(i, playerid);
				SendAdminAction(i, "Você foi teleportado pelo administrador %s.", ReturnName(playerid, 0));
			}
			SendAdminAction(playerid, "Você trouxe todos do servidor até a sua posição atual.");
			return 1;
		}
		else return SendWarningMessage(playerid, JogadorOff);    	
	}

	if(!PlayerData[userid][pLogged])
		return SendWarningMessage(playerid, "Você não pode trazer um jogador sem ele ter feito o login.");

	if(SendPlayerToPlayer(userid, playerid))
	{
		SendAdminAction(playerid, "Você trouxe %s até a sua posição.", ReturnName(userid, 0));
	}
	else
	{
		SendWarningMessage(playerid, "Esse jogador está impossibilitado de receber esta função.");
	}
	return 1;
}

CMD:enviar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new playerA, playerB;

	if(sscanf(params, "uu", playerA, playerB))
		return SendSyntaxMessage(playerid, "/enviar [id (A)] [para o id (B)]");

	if(!IsPlayerConnected(playerA) || playerA == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, "(A). Jogador não está conectado.");

	if(!IsPlayerConnected(playerB) || playerB == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, "(B). Jogador não está conectado.");

	if(!PlayerData[playerA][pLogged] || !PlayerData[playerB][pLogged])
		return SendWarningMessage(playerid, "Você não pode enviar um jogador até outro sem ele ou ambos terem feito o login.");

	if(playerB == playerA)
		return SendWarningMessage(playerid, "Você não fazer essa ação.");

	if(SendPlayerToPlayer(playerA, playerB))
	{
		SendAdminAction(playerid, "Você enviou %s até a posição de %s.", ReturnName(playerA, 0), ReturnName(playerB, 0));
	}
	else
	{
		SendWarningMessage(playerid, "Esse jogador está impossibilitado de receber esta função.");
	}

	return 1;
}

CMD:tapa(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid, Float:strength;

	if(sscanf(params, "uf", userid, strength))
		return SendSyntaxMessage(playerid, "/tapa [id/nome] [força]");

	if(strength >= 200.0)
		return SendWarningMessage(playerid, "A força do tapa não deve ser superior a 200.");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	new Float:pos[3];

	GetPlayerPos(userid, pos[0], pos[1], pos[2]);
	AC_SetPlayerPos(userid, pos[0], pos[1], pos[2] + strength);
	PlayerPlaySound(userid, userid, pos[0], pos[1], pos[2] + strength);

	SendAdminAction(playerid, "Você deu um tapa em %s.", ReturnName(userid, 0));
	
	if(userid != playerid)
	{
		SendAdminAction(userid, "Você recebeu um tapa de %s.", ReturnName(playerid, 0));
		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) deu um tapa no jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);
	}

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) deu um tapa no jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}

CMD:tv(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	if(!isnull(params) && !strcmp(params, "off", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
			return SendWarningMessage(playerid, "Você não está assistindo ninguém.");

		PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
		PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);

		PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;

		SetPlayerToSpawn(playerid);

		return SendGreenMessage(playerid, "Você não está mais no modo spectator.");
	}

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/tv [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(playerid == userid)
		return SendWarningMessage(playerid, "Você não pode assistir a si mesmo.");

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não tem autorização para assistir este jogador.");

	SetPlayerInterior(playerid, GetPlayerInterior(userid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userid));

	TogglePlayerSpectating(playerid, 1);

	if(IsPlayerInAnyVehicle(userid))
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));
	else
		PlayerSpectatePlayer(playerid, userid);

	SendGreenMessage(playerid, "Você está assistindo o jogador %s (ID: %d).", ReturnName(userid, 0), userid);
	PlayerData[playerid][pSpectator] = userid;

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) começou a espiar o jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}
alias:tv("spec");

CMD:spy(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);
	
	if(!isnull(params) && !strcmp(params, "off", true))
	{
		if(PlayerData[playerid][pSpy] == INVALID_PLAYER_ID)
			return SendWarningMessage(playerid, "Você não está espiando ninguém.");

		PlayerData[playerid][pSpy] = INVALID_PLAYER_ID;

		return SendGreenMessage(playerid, "Você não está mais no modo espião.");
	}

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/spy [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(playerid == userid)
		return SendWarningMessage(playerid, "Você não pode espiar a si mesmo.");

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não tem autorização para dar spy neste jogador.");

	SendGreenMessage(playerid, "Você está espiando o jogador %s (ID: %d).", ReturnName(userid, 0), userid);

	PlayerData[playerid][pSpy] = userid;

	return 1;
}

CMD:listatv(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);
	
	new count = 0;

	SendClientMessage(playerid, COLOR_GREEN, "Lista dos administradores no modo TV/SPY:");

	if(PlayerData[playerid][pAdmin] < ADMIN_HeadStaff)
	{
		foreach(new i : Player)
		{
			if(PlayerData[i][pLogged] && PlayerData[i][pAdmin] < ADMIN_HeadStaff && PlayerData[i][pSpectator] != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "%s (ID: %d) está assistindo %s (ID: %d).", ReturnName(i, 0), i, ReturnName(PlayerData[i][pSpectator], 0), PlayerData[i][pSpectator]);
				count++;
			}
			if(PlayerData[i][pLogged] && PlayerData[i][pAdmin] < ADMIN_HeadStaff && PlayerData[i][pSpy] != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "%s (ID: %d) está espiando %s (ID: %d).", ReturnName(i, 0), i, ReturnName(PlayerData[i][pSpy], 0), PlayerData[i][pSpy]);
				count++;
			}
		}
	}
	else
	{
		foreach(new i : Player)
		{
			if(PlayerData[i][pLogged] && PlayerData[i][pSpectator] != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "%s (ID: %d) está assistindo %s (ID: %d).", ReturnName(i, 0), i, ReturnName(PlayerData[i][pSpectator], 0), PlayerData[i][pSpectator]);
				count++;
			}
			if(PlayerData[i][pLogged] && PlayerData[i][pSpy] != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "%s (ID: %d) está espiando %s (ID: %d).", ReturnName(i, 0), i, ReturnName(PlayerData[i][pSpy], 0), PlayerData[i][pSpy]);
				count++;
			}
		}
	}

	if(!count)
		return SendClientMessage(playerid, COLOR_GREY, "* Nenhum administrador está de TV/SPY no momento.");

	return 1;
}
alias:listatv("listaspec", "listaspy");

CMD:anuncio(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);
		
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(an)unciar [texto]");

	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		SendClientMessageEx(i, COLOR_YELLOW, "|__________ Anúncio Administrativo __________|");

		if(strlen(params) > 64)
		{
			SendClientMessageEx(i, COLOR_WHITE, "%s: %.64s", ReturnName(playerid, 0), params);
			SendClientMessageEx(i, COLOR_WHITE, "...%s", params[64]);
		}
		else
		{
			SendClientMessageEx(i, COLOR_WHITE, "%s: %s", ReturnName(playerid, 0), params);
		}
	}

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) anunciou a mensagem para todos: %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], params);

	return 1;
}
alias:anuncio("an");

CMD:calar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);
	
	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/(des)calar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	PlayerData[playerid][pMuted] = PlayerData[playerid][pMuted] ? false : true;

	if(userid != playerid)
		SendAdminAction(userid, "Você foi %s pelo administrador %s.", PlayerData[userid][pMuted] ? "calado" : "descalado", ReturnName(playerid, 0));

	SendAdminAction(playerid, "Você %s %s.", PlayerData[userid][pMuted] ? "calou" : "descalou", ReturnName(userid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) %s o jogador %s (ID: %d).", ReturnName(playerid, 0), playerid, PlayerData[userid][pMuted] ? "calou" : "descalou", ReturnName(userid, 0), userid);


	return 1;
}
alias:calar("descalar");

CMD:arv(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new carid;

	if(sscanf(params, "d", carid))
		return SendSyntaxMessage(playerid, "/arv [carro id]");

	if(!IsValidVehicle(carid))
		return SendWarningMessage(playerid, "ID do Veículo é inválido.");

	AC_RepairVehicle(carid);
	AC_SetVehicleHealth(carid, VehicleData[carid][vehicleMaxHealth]);

	SendAdminAction(playerid, "Você reparou o veículo ID: %d.", carid);
	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) reparou o veículo ID: %d (%s).", ReturnName(playerid, 0), playerid, carid, ReturnVehicleModelName(VehicleData[carid][vehicleModel]));

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) reparou o veículo %s (uid %d, fac %d, job %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID], VehicleData[carid][vehicleFaction], VehicleData[carid][vehicleJob]);	
	
	return 1;
}

CMD:asv(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new carid, factionid;

	if(sscanf(params, "d", carid))
		return SendSyntaxMessage(playerid, "/asv [carro id]");

	if(!IsValidVehicle(carid))
		return SendWarningMessage(playerid, "ID do Veículo é inválido.");

	if(VehicleData[carid][vehicleFaction] >= 1)
	{
		factionid = GetFactionByID(VehicleData[carid][vehicleFaction]);

		SetVehicleToRespawn(carid);

		SendAdminAction(playerid, "Você deu respawn no veículo ID: %d.", carid);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) deu respawn no veículo ID: %d (%s) da facção %s.", ReturnName(playerid, 0), playerid, carid, ReturnVehicleModelName(VehicleData[carid][vehicleModel]), FactionData[factionid][factionName]);

		return 1;
	}

	if(VehicleData[carid][vehicleJob] >= 1)
	{
		SetVehicleToRespawn(carid);

		SendAdminAction(playerid, "Você deu respawn no veículo ID: %d.", carid);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) deu respawn no veículo ID: %d (%s) do emprego %s.", ReturnName(playerid, 0), playerid, carid, ReturnVehicleModelName(VehicleData[carid][vehicleModel]), ReturnJobName(VehicleData[carid][vehicleJob]));

		return 1; 
	}

	VehicleData[carid][vehicleParked] = 0;
	Vehicle_Save(carid);
	Vehicle_Destroy(carid);

	SendAdminAction(playerid, "Você despawnou o veículo ID: %d.", carid);
	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) despawnou o veículo ID: %d (%s).", ReturnName(playerid, 0), playerid, carid, ReturnVehicleModelName(VehicleData[carid][vehicleModel]));

	return 1;
}

CMD:abv(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new carid;

	if(sscanf(params, "d", carid))
		return SendSyntaxMessage(playerid, "/abv [carro id]");

	if(!IsValidVehicle(carid))
		return SendWarningMessage(playerid, "ID do Veículo é inválido.");

	VehicleData[carid][vehicleFuel] = Fuel_GetQuantity(carid);
	
	SendAdminAction(playerid, "Você abasteceu o veículo ID: %d.", carid);
	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) abasteceu o veículo ID: %d (%s).", ReturnName(playerid, 0), playerid, carid, ReturnVehicleModelName(VehicleData[carid][vehicleModel]));

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) abasteceu o veículo %s (uid %d, fac %d, job %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnVehicleModelName(VehicleData[carid][vehicleModel]), VehicleData[carid][vehicleID], VehicleData[carid][vehicleFaction], VehicleData[carid][vehicleJob]);	

	return 1;
}

CMD:congelar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);
	
	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/(des)congelar [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	SetPlayerFreezed(userid, PlayerData[playerid][pFreezed] ? false : true);

	if(userid != playerid)
		SendAdminAction(userid, "Você foi %s pelo administrador %s.", PlayerData[userid][pMuted] ? "congelado" : "descongelado", ReturnName(playerid, 0));

	SendAdminAction(playerid, "Você %s %s.", PlayerData[userid][pMuted] ? "congelou" : "descongelou", ReturnName(userid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) %s o jogador %s (ID: %d).", ReturnName(playerid, 0), playerid, PlayerData[userid][pMuted] ? "congelou" : "descongelou", ReturnName(userid, 0), userid);

	return 1;
}
alias:congelar("descongelar");

CMD:desbugar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid)) 
		return SendSyntaxMessage(playerid, "/desbugar [id/nome]");

	if(!IsPlayerConnected(userid)) 
		return SendWarningMessage(playerid, JogadorOff);

	SetPlayerFreezed(userid, false);
	SetCameraBehindPlayer(userid);
	DesbugarJogador[userid][sSincronizando] = 1;
	DesbugarJogador[userid][sMundoVirtual] = GetPlayerVirtualWorld(userid);
	DesbugarJogador[userid][sInterior] = GetPlayerInterior(userid);
	GetPlayerArmour(userid, DesbugarJogador[userid][sColete]);
	GetPlayerHealth(userid, DesbugarJogador[userid][sVida]);
	GetPlayerFacingAngle(userid, DesbugarJogador[userid][sAngulo]);
	GetPlayerPos(userid, DesbugarJogador[userid][sPosX], DesbugarJogador[userid][sPosY], DesbugarJogador[userid][sPosZ]);
	for(new i = 1; i < 13; i++)
	{
		GetPlayerWeaponData(userid, i, DesbugarJogador[userid][sArmas][i], DesbugarJogador[userid][sMunicao][i]);
	}
	SetPlayerToSpawn(userid);
	if(IsPlayerInAnyVehicle(userid))
	{
		DesbugarJogador[userid][sNoVeiculo] = 1;
		DesbugarJogador[userid][sIDCarro] = GetPlayerVehicleID(userid);
	}
	SetTimerEx("Sincronizar_Jogador", 500, false, "d", userid);

	SendAdminAction(playerid, "Você desbugou %s.", ReturnName(userid, 0));

	if(userid != playerid)
		SendAdminAction(userid, "Você foi desbugado pelo administrador %s.", ReturnName(playerid, 0));
	
	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) desbugou o jogador %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);
	return 1;
}

CMD:spawnplayer(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);
	
	new userid;
	
	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/spawnplayer [id/nome]");
	
	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);
	
	SetPlayerToSpawn(userid);

	if(userid != playerid)
		SendAdminAction(userid, "Você foi enviado para o spawn pelo administrador %s.", ReturnName(playerid, 0));
	
	SendAdminAction(playerid, "Você enviou %s para o spawn.", ReturnName(userid, 0));
	
	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) enviou %s (ID: %d) para o seu spawn.", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);
	
	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) deu spawn no jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}

CMD:reportlist(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new count, text[160];

	foreach(new i : Reports)
	{
		if(!ReportData[i][rExists])
			continue;

		format(text, sizeof(text), "%s (%s)", ReportData[i][rText], GetDuration(gettime() - ReportData[i][rGetTime]));

		if(strlen(text) > 64)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "[SOS ID %d] %s (ID: %d): %.64s", i, ReturnName(ReportData[i][rPlayer], 0), ReportData[i][rPlayer], text);
			SendClientMessageEx(playerid, COLOR_WHITE, "...%s", text[64]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "[SOS ID %d] %s (ID: %d): %s", i, ReturnName(ReportData[i][rPlayer], 0), ReportData[i][rPlayer], text);
		}
		
		count++;
	}

	if(!count)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Nenhum pedido de ajuda/report registrado até o momento.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREEN, "Use \"/ar SOS ID\" ou \"/rr SOS ID\" para aceitar ou recusar o pedido de ajuda.");
	}
	
	return 1;
}
alias:reportlist("relatorios", "listasos");

CMD:ar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new reportid, answer[128];

	if(sscanf(params, "ds[128]", reportid, answer))
		return SendSyntaxMessage(playerid, "/ar [report id] [resposta] (use /soslist para ver a lista)");

	if((reportid < 0 || reportid > MAX_REPORTS))
		return SendWarningMessage(playerid, "Report ID inválido. Use de 0 à %d.", MAX_REPORTS);

	if(!ReportData[reportid][rExists])
		return SendWarningMessage(playerid, "Este report ID é inexistente ou já foi atendimento por um outro administrador.");

	SendAdminAction(playerid, "Você aceitou report ID: %d.", reportid);
	SendAdminAction(ReportData[reportid][rPlayer], "%s aceitou o seu pedido de ajuda.", ReturnName(playerid, 0));

	SendClientMessage(playerid, COLOR_WARNING, "Sua pergunta:");
	if(strlen(ReportData[reportid][rText]) > 64)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "%.64s", ReportData[reportid][rText]);
		SendClientMessageEx(playerid, COLOR_GREY, "...%s", ReportData[reportid][rText][64]);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "%s", ReportData[reportid][rText]);
	}

	new sendpm[132];
	format(sendpm, sizeof(sendpm), "%d %s", ReportData[reportid][rPlayer], answer);
	callcmd::pm(playerid, sendpm);

	SendDiscordMessage(Discord_SosLog, "**AdminAlert: %s (ID: %d) aceitou o report (ID: %d) do %s (ID: %d).**", ReturnName(playerid, 0), playerid, reportid, ReturnName(ReportData[reportid][rPlayer], 0), ReportData[reportid][rPlayer]);
	SendDiscordMessage(Discord_SosLog, "**Pergunta do jogador:** %s", ReportData[reportid][rText]);
	SendDiscordMessage(Discord_SosLog, "**Resposta do administrador:** %s", answer);

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) aceitou o report (ID: %d) de %s (ID: %d).", ReturnName(playerid, 0), playerid, reportid, ReturnName(ReportData[reportid][rPlayer], 0), ReportData[reportid][rPlayer]);
	
	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) aceitou o sos (ID: %d) do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], reportid, ReturnName(ReportData[reportid][rPlayer]), PlayerData[ReportData[reportid][rPlayer]][pID]);

	Report_Remove(reportid);

	return 1;
}
alias:ar("aceitarsos", "aceitarreport");

CMD:rr(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/rr [report id] (use /soslist para ver a lista)");

	new reportid = strval(params);

	if((reportid < 0 || reportid > MAX_REPORTS))
		return SendWarningMessage(playerid, "Report ID inválido. Use de 0 à %d.", MAX_REPORTS);

	if(!ReportData[reportid][rExists])
		return SendWarningMessage(playerid, "Este report ID é inexistente ou já foi atendimento por um outro administrador.");

	SendAdminAction(playerid, "Você rejeitou report ID: %d.", reportid);
	SendAdminAction(ReportData[reportid][rPlayer], "%s rejeitou o seu pedido de ajuda.", ReturnName(playerid, 0));

	SendDiscordMessage(Discord_SosLog, "**AdminAlert: %s (ID: %d) rejeitou o report (ID: %d) do %s (ID: %d).**", ReturnName(playerid, 0), playerid, reportid, ReturnName(ReportData[reportid][rPlayer], 0), ReportData[reportid][rPlayer]);
	SendDiscordMessage(Discord_SosLog, "**Pergunta do jogador:** %s", ReportData[reportid][rText]);
	
	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) rejeitou o report (ID: %d) de %s (ID: %d).", ReturnName(playerid, 0), playerid, reportid, ReturnName(ReportData[reportid][rPlayer], 0), ReportData[reportid][rPlayer]);

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) rejeitou o sos (ID: %d) do %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], reportid, ReturnName(ReportData[reportid][rPlayer]), PlayerData[ReportData[reportid][rPlayer]][pID]);

	Report_Remove(reportid);

	return 1;
}
alias:rr("rejeitarsos", "rejeitarreport");

CMD:proximo(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID)
	{
		SendGreenMessage(playerid, "Você está próximo do veículo %s (ID: %d e uid: %d).", ReturnVehicleModelName(VehicleData[id][vehicleModel]), id, VehicleData[id][vehicleID]);
	}

	if((id = WH_Nearest(playerid)) != -1)
	{
		new facid = GetFactionByID(WhData[id][whFactionID]);
		SendGreenMessage(playerid, "Você está próximo da Weapon House (ID: %d e uid: %d) da facção: %s (ID: %d, uid: %d).", id, WhData[id][whID], FactionData[facid][factionName], facid, FactionData[facid][factionID]);
	}

	if((id = Vault_Nearest(playerid)) != -1)
	{
		new facid = GetFactionByID(VaultData[id][vaultFactionID]);
		SendGreenMessage(playerid, "Você está próximo do Vault (ID: %d e uid: %d) da facção: %s (ID: %d, uid: %d).", id, VaultData[id][vaultID], FactionData[facid][factionName], facid, FactionData[facid][factionID]);
	}

	if((id = RoadBlock_Nearest(playerid)) != -1)
	{
		new userid = RoadData[id][roadPlayer];
		SendGreenMessage(playerid, "Você está próximo do Bloqueio (ID: %d) pertencente a %s (ID: %d)", id, ReturnName(userid, 0), userid);
	}

	if((id = Gate_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo do Portão (ID: %d e uid: %d).", id, GateData[id][gateID]);
	}

	if((id = Pump_Nearest(playerid)) != -1)
	{
		new bizid = GetBusinessByID(PumpData[id][pumpBusinessID]);
		SendGreenMessage(playerid, "Você está próximo da Bomba de Combustível (ID: %d e uid: %d) pertencente", id, PumpData[id][pumpID]);
		SendGreenMessage(playerid, "...a empresa %s (ID: %d, uid: %d e Dono: %s).", BusinessData[bizid][businessName], bizid, BusinessData[bizid][businessID], BusinessData[bizid][businessOwnerName]);
	}

	if((id = Industry_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo da Indústria %s (ID: %d e uid: %d).", IndustryData[id][industryName], id, IndustryData[id][industryID]);
	}

	if((id = TrashCan_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo da Lata de Lixo (ID: %d e uid: %d).", id, TrashData[id][trashID]);
	}

	if((id = Chopshop_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo do Ponto de Desmanche (ID: %d e uid: %d).", id, ChopshopData[id][chopshopID]);
	}

	if((id = Sewer_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo do Bueiro %s (ID: %d e uid: %d).", SewerData[id][sewerName], id, SewerData[id][sewerID]);
	}

	if((id = Business_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo da Empresa %s (ID: %d e uid: %d) pertencente a %s (uid: %d).", BusinessData[id][businessName], id, BusinessData[id][businessID], BusinessData[id][businessOwnerName], BusinessData[id][businessOwnerID]);
	}

	if((id = Item_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo do Item %s (ID: %d e uid: %d).", DroppedItems[id][droppedItem], id, DroppedItems[id][droppedID]);
	}

	if((id = Entrance_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo da Entrada %s (ID: %d e uid: %d).", EntranceData[id][entranceName], id, EntranceData[id][entranceID]);
	}

	if((id = House_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo da Casa %s (ID: %d e uid: %d) pertencente a %s (uid: %d).", HouseData[id][houseAddress], id, HouseData[id][houseID], HouseData[id][houseOwnerName], HouseData[id][houseOwner]);
	}

	if((id = Camera_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo da Câmera de Segurança (ID: %d e uid: %d).", id, CameraData[id][cameraID]);
	}

	if((id = ATM_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo do Caixa Eletrônico[ATM] (ID: %d e uid: %d).", id, ATMData[id][atmID]);
	}

	if((id = Speed_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo do Radar (ID: %d e uid: %d).", id, SpeedData[id][speedID]);
	}

	if((id = Arrest_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo de Ponto de Prisão (ID: %d e uid: %d).", id, ArrestData[id][arrestID]);
	}

	if((id = Tower_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo da Torre de Celular (%s) (ID: %d e uid: %d).", TowerData[id][towerName], id, TowerData[id][towerID]);
	}

	if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID)
	{
		SendGreenMessage(playerid, "Você está próximo da Boombox pertencente a %s (ID: %d).", ReturnName(id, 0), id);
	}

	if((id = Complex_Nearest(playerid)) != -1)
	{
		SendGreenMessage(playerid, "Você está próximo do Complexo %s (ID: %d e uid: %d).", ComplexData[id][complexName], id, ComplexData[id][complexID]);
	}

	return 1;
}

CMD:checarveiculos(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/checarveiculos [id/nome]");

	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	SendClientMessageEx(playerid, COLOR_GREEN, "|____ Lista dos veículos de %s ____|", ReturnName(userid, 0));

	new query[43];

	mysql_format(this, query, sizeof(query), "SELECT * FROM carros WHERE ID = '%d'", PlayerData[userid][pID]);
	mysql_tquery(this, query, "VehicleAdminListText", "d", playerid);
	
	return 1;
}

CMD:checarveiculo(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new id;

	if(sscanf(params, "d", id))
		return SendSyntaxMessage(playerid, "/checarveiculo [id real]");

	if((id < 0 || id >= MAX_VEHICLES) || !IsValidVehicle(id))
		return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

	sz_MiscString[0] = 0;

	SendClientMessage(playerid, COLOR_GREEN, "|__________ Informações do Veículo __________|");
	SendClientMessageEx(playerid, COLOR_GREY, "Registro único: %d", VehicleData[id][vehicleID]);
	SendClientMessageEx(playerid, COLOR_GREY, "Registro real: %d", id);
	SendClientMessageEx(playerid, COLOR_GREY, "Dono: %s (uid: %d) - Placa: %s", VehicleData[id][vehicleOwnerName], VehicleData[id][vehicleOwnerID], VehicleData[id][vehiclePlate]);
	SendClientMessageEx(playerid, COLOR_GREY, "Modelo: %s", ReturnVehicleModelName(VehicleData[id][vehicleModel]));

	for(new w = 0; w < Car_TrunkWeaponSlots(VehicleData[id][vehicleModel]); w++)
	{
		format(sz_MiscString, sizeof(sz_MiscString), "%sS:%d W:%d A:%d|", sz_MiscString, w + 1, VehicleData[id][vehicleWeapon][w], VehicleData[id][vehicleAmmo][w]);
	}

	if(strlen(sz_MiscString) > 85)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Armas (portamalas): %.85s", sz_MiscString);
		SendClientMessageEx(playerid, COLOR_GREY, "...%s", sz_MiscString[85]);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Armas (portamalas): %s", (!strlen(sz_MiscString)) ? ("Nenhuma arma encontrada") : (sz_MiscString));	
	}

	SendClientMessageEx(playerid, COLOR_GREY, "Arma (portaluvas): S:1 W:%d A:%d", VehicleData[id][vehicleInteriorWeapon], VehicleData[id][vehicleInteriorAmmo]);

	return 1;
}

CMD:checarpropriedades(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid, count = 0;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/checarpropriedades [id/nome]");

	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	SendClientMessageEx(playerid, COLOR_GREEN, "|____ Lista de propriedades de %s ____|", ReturnName(userid, 0));

	foreach(new i : Houses)
	{
		if(House_IsOwner(userid, i))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "(ID Real: %d | ID Único: %d) Casa, endereço: %s", i, HouseData[i][houseID], HouseData[i][houseAddress]);
			count++;
		}
	}

	foreach(new i : Business)
	{
		if(Business_IsOwner(userid, i))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "(ID Real: %d | ID Único: %d) Empresa: %s | %s", i, BusinessData[i][businessID], BusinessData[i][businessName], Business_GetType(i));
			count++;
		}
	}

	if(count == 0)
		return SendClientMessage(playerid, COLOR_GREY, "* Este jogador não possui uma empresa ou casa.");

	return 1;
}

CMD:checarpropriedade(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new option[16], moreoption[30];

	if(sscanf(params, "s[16]S()[30]", option, moreoption))
	{
		SendSyntaxMessage(playerid, "/checarpropriedade [opção]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "OPÇÕES", "casa, empresa");
	}

	if(!strcmp(option, "casa"))
	{
		new id;

		if(sscanf(moreoption, "d", id))
			return SendSyntaxMessage(playerid, "/checarpropriedade casa [id real]");

		if((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
			return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

		sz_MiscString[0] = 0;

		SendClientMessage(playerid, COLOR_GREEN, "|__________ Informações de Propriedade (Casa) __________|");
		SendClientMessageEx(playerid, COLOR_GREY, "Registro único: %d", HouseData[id][houseID]);
		SendClientMessageEx(playerid, COLOR_GREY, "Registro real: %d", id);
		SendClientMessageEx(playerid, COLOR_GREY, "Endereço: %s", HouseData[id][houseAddress]);
		SendClientMessageEx(playerid, COLOR_GREY, "Dono: %s (uid: %d)", ReturnNameByID(HouseData[id][houseOwner]), HouseData[id][houseOwner]);
		SendClientMessageEx(playerid, COLOR_GREY, "Cofre: %s", FormatNumber(HouseData[id][houseMoney]));

		for(new w = 0; w < MAX_HOUSES_WEAPON; w++)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%sS:%d W:%d A:%d|", sz_MiscString, w + 1, HouseData[id][houseWeapon][w], HouseData[id][houseAmmo][w]);
		}

		if(strlen(sz_MiscString) > 85)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Armazenamento de armas: %.85s", sz_MiscString);
			SendClientMessageEx(playerid, COLOR_GREY, "...%s", sz_MiscString[85]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Armazenamento de armas: %s", (!strlen(sz_MiscString)) ? ("Nenhuma arma encontrada") : (sz_MiscString));
		}

	}
	else if(!strcmp(option, "empresa"))
	{
		new id;

		if(sscanf(moreoption, "d", id))
			return SendSyntaxMessage(playerid, "/checarpropriedade empresa [id real]");

		if((id < 0 || id >= MAX_BUSINESS) || !BusinessData[id][businessExists])
			return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

		SendClientMessage(playerid, COLOR_GREEN, "|__________ Informações de Propriedade (Empresa) __________|");
		SendClientMessageEx(playerid, COLOR_GREY, "Registro único: %d", BusinessData[id][businessID]);
		SendClientMessageEx(playerid, COLOR_GREY, "Registro real: %d", id);
		SendClientMessageEx(playerid, COLOR_GREY, "Empresa: %s - Tipo: %s", BusinessData[id][businessName], Business_GetType(BusinessData[id][businessType]));
		SendClientMessageEx(playerid, COLOR_GREY, "Dono: %s (uid: %d)", ReturnNameByID(BusinessData[id][businessOwnerID]), BusinessData[id][businessOwnerID]);
		SendClientMessageEx(playerid, COLOR_GREY, "Estoque atual: %d", BusinessData[id][businessStock]);
	}
	else
	{
		SendWarningMessage(playerid, "Opção informada é inexistente.");
	}

	return 1;
}

CMD:checararmas(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
	{
		return SendSyntaxMessage(playerid, "/checararmas [id/nome]");
	}

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
	{
		return SendWarningMessage(playerid, JogadorOff);
	}

	SendClientMessageEx(playerid, COLOR_GREEN, "Armas de %s:", ReturnName(userid, 0));

	new weaponid, ammo, count;

	for(new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, weaponid, ammo);

		if(weaponid > 0)
		{
			SendClientMessageEx(playerid, COLOR_WARNING, "* %s (Munição: %d)", ReturnWeaponName(weaponid), ammo);

			count++;
		}
	}

	if(!count)
	{
		SendClientMessage(playerid, COLOR_GREY, "* Nenhuma arma encontrada.");
	}

	return 1;
}

CMD:iniciargg(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new factiontype;

	if(sscanf(params, "d", factiontype))
	{
		SendSyntaxMessage(playerid, "/iniciargg [faction type]");
		SendClientMessage(playerid, COLOR_ORANGE, "TIPOS DE FACÇÃO: {FFFFFF}Gangster(1), Motoclube(2) e Cartél(3).");
		return 1;
	}

	if(factiontype == 1)
	{
		if(War_Gangsters)
			return SendWarningMessage(playerid, "Já existe uma guerra entre os gangsters, use /finalizargg 1 para poder criar outra.");

		foreach(new i : Factions) if(FactionData[i][factionType] == FACTION_GANGSTER)
		{
			War_Kills[i] = 0;
			War_Members[i] = 0;
		}

		War_Gangsters = true;
		War_GangstersTime = gettime() + 3600;

		SendGreenMessage(playerid, "Você iniciou a guerra entres os gangsters, agora use /addgg [fac id] (veja em /facs).");
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) iniciou uma guerra entre os gangsters.", ReturnName(playerid, 0), playerid);
	}
	else if(factiontype == 2)
	{
		if(War_Motoclub)
			return SendWarningMessage(playerid, "Já existe uma guerra entre os motoclubes, use /finalizargg 2 para poder criar outra.");

		foreach(new i : Factions) if(FactionData[i][factionType] == FACTION_MOTOCLUB)
		{
			War_Kills[i] = 0;
			War_Members[i] = 0;
		}

		War_Motoclub = true;
		War_MotoclubTime = gettime() + 3600;

		SendGreenMessage(playerid, "Você iniciou a guerra entres os motoclubes, agora use /addgg [fac id] (veja em /facs).");
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) iniciou uma guerra entre os motoclubes.", ReturnName(playerid, 0), playerid);
	}
	else if(factiontype == 3)
	{
		if(War_Cartel)
			return SendWarningMessage(playerid, "Já existe uma guerra entre os cartéis, use /finalizargg 2 para poder criar outra.");

		foreach(new i : Factions) if(FactionData[i][factionType] == FACTION_CARTEL)
		{
			War_Kills[i] = 0;
			War_Members[i] = 0;
		}

		War_Cartel = true;
		War_CartelTime = gettime() + 3600;

		SendGreenMessage(playerid, "Você iniciou a guerra entres os cartéis, agora use /addgg [fac id] (veja em /facs).");
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) iniciou uma guerra entre os cartéis.", ReturnName(playerid, 0), playerid);
	}
	else return SendWarningMessage(playerid, "O tipo da facção informado é inválido.");

	return 1;
}

CMD:addgg(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new facid, count = 0;

	if(sscanf(params, "d", facid))
		return SendSyntaxMessage(playerid, "/addgg [fac id] (veja em /facs)");

	if(!FactionData[facid][factionExists])
		return SendWarningMessage(playerid, "Essa facção não existe, confira os IDs em /facs.");

	if(FactionData[facid][factionType] == FACTION_POLICE || FactionData[facid][factionType] == FACTION_GOV || FactionData[facid][factionType] == FACTION_MEDIC)
		return SendWarningMessage(playerid, "Organizações governamentais não estão autorizadas a participar guerras.");

	if(FactionData[facid][factionType] == FACTION_GANGSTER)
	{
		if(War_Gangsters)
		{
			foreach(new i : Player)
			{
				if(PlayerData[i][pFaction] == facid && PlayerData[i][pLogged] && PlayerData[i][pIllegalDuty])
				{
					PlayerData[i][pInWar] = true;
					SetPlayerColorEx(i, FactionData[PlayerData[i][pFaction]][factionColor]);
					SendClientMessage(i, COLOR_RP2, "Atenção: a guerra foi iniciada e a sua facção é participante.");
					SendClientMessage(i, COLOR_RP1, "Reuna-se com o resto dos membros e elimine a facção inimiga.");
					count++;
				}
			}
			War_Members[facid] = count;
			War_GangstersTeams++;
			SendGreenMessage(playerid, "Você adicionou a facção %s na guerra entre os gangsters.", FactionData[facid][factionName]);
		}
		else
			SendWarningMessage(playerid, "Não existe uma guerra ativa entre os gangsters no momento.");
	}
	else if(FactionData[facid][factionType] == FACTION_MOTOCLUB)
	{
		if(War_Motoclub)
		{
			foreach(new i : Player)
			{
				if(PlayerData[i][pFaction] == facid && PlayerData[i][pLogged] && PlayerData[i][pIllegalDuty])
				{
					PlayerData[i][pInWar] = true;
					SetPlayerColorEx(i, FactionData[PlayerData[i][pFaction]][factionColor]);
					SendClientMessage(i, COLOR_RP2, "Atenção: a guerra foi iniciada e a sua facção é participante.");
					SendClientMessage(i, COLOR_RP1, "Reuna-se com o resto dos membros e elimine a facção inimiga.");
					count++;
				}
			}
			War_Members[facid] = count;
			War_MotoclubTeams++;
			SendGreenMessage(playerid, "Você adicionou a facção %s na guerra entre os motoclubes.", FactionData[facid][factionName]);
		}
		else
			SendWarningMessage(playerid, "Não existe uma guerra ativa entre os motoclubes no momento.");
	}

	else if(FactionData[facid][factionType] == FACTION_CARTEL)
	{
		if(War_Cartel)
		{
			foreach(new i : Player)
			{
				if(PlayerData[i][pFaction] == facid && PlayerData[i][pLogged] && PlayerData[i][pIllegalDuty])
				{
					PlayerData[i][pInWar] = true;
					SetPlayerColorEx(i, FactionData[PlayerData[i][pFaction]][factionColor]);
					SendClientMessage(i, COLOR_RP2, "Atenção: a guerra foi iniciada e a sua facção é participante.");
					SendClientMessage(i, COLOR_RP1, "Reuna-se com o resto dos membros e elimine a facção inimiga.");
					count++;
				}
			}
			War_Members[facid] = count;
			War_CartelTeams++;
			SendGreenMessage(playerid, "Você adicionou a facção %s na guerra entre os gangsters.", FactionData[facid][factionName]);
		}
		else
			SendWarningMessage(playerid, "Não existe uma guerra ativa entre os cartéis no momento.");
	}
	return 1;
}

CMD:finalizargg(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new factiontype;

	if(sscanf(params, "d", factiontype))
	{
		SendSyntaxMessage(playerid, "/finalizargg [faction type]");
		SendClientMessage(playerid, COLOR_ORANGE, "TIPOS DE FACÇÃO: {FFFFFF}Gangster(1), Motoclube(2) e Cartél(3).");
		return 1;
	}

	if(factiontype == 1)
	{
		if(!War_Gangsters)
			return SendWarningMessage(playerid, "Não existe uma guerra entre os gangsters, use /iniciargg 1 para poder criar.");

		War_Gangsters = false;

		SendGreenMessage(playerid, "Você finalizou a guerra entres os gangsters.");
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) finalizou uma guerra entre os gangsters.", ReturnName(playerid, 0), playerid);

		FinalizarGuerra(FACTION_GANGSTER);

		foreach(new i : Player) if(PlayerData[i][pFaction] != -1)
		{
			if(FactionData[PlayerData[i][pFaction]][factionType] == FACTION_GANGSTER && PlayerData[i][pInWar])
			{
				PlayerData[i][pInWar] = false;
				SetPlayerColorEx(i, COLOR_WHITE);
				SendClientMessage(i, COLOR_RP2, "Atenção: a guerra foi finalizada.");
			}
		}
	}	
	else if(factiontype == 2)
	{
		if(!War_Motoclub)
			return SendWarningMessage(playerid, "Não existe uma guerra entre os motoclubes, use /iniciargg 2 para poder criar.");

		War_Motoclub = false;

		SendGreenMessage(playerid, "Você finalizou a guerra entres os motoclubes.");
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) finalizou uma guerra entre os motoclubes.", ReturnName(playerid, 0), playerid);

		FinalizarGuerra(FACTION_MOTOCLUB);

		foreach(new i : Player) if(PlayerData[i][pFaction] != -1)
		{
			if(FactionData[PlayerData[i][pFaction]][factionType] == FACTION_MOTOCLUB && PlayerData[i][pInWar])
			{
				PlayerData[i][pInWar] = false;
				SetPlayerColorEx(i, COLOR_WHITE);
				SendClientMessage(i, COLOR_RP2, "Atenção: a guerra foi finalizada.");
			}
		}
	}
	else if(factiontype == 3)
	{
		if(!War_Cartel)
			return SendWarningMessage(playerid, "Não existe uma guerra entre os cartéis, use /iniciargg 2 para poder criar.");

		War_Cartel = false;

		SendGreenMessage(playerid, "Você finalizou a guerra entres os cartéis.");
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) finalizou uma guerra entre os cartéis.", ReturnName(playerid, 0), playerid);

		FinalizarGuerra(FACTION_CARTEL);

		foreach(new i : Player) if(PlayerData[i][pFaction] != -1)
		{
			if(FactionData[PlayerData[i][pFaction]][factionType] == FACTION_CARTEL && PlayerData[i][pInWar])
			{
				PlayerData[i][pInWar] = false;
				SetPlayerColorEx(i, COLOR_WHITE);
				SendClientMessage(i, COLOR_RP2, "Atenção: a guerra foi finalizada.");
			}
		}
	}
	else return SendWarningMessage(playerid, "O tipo da facção informado é inválido.");

	return 1;
}

CMD:teleportar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	Teleport_Show(playerid, 1);

	return 1;
}
alias:teleportar("teleporte", "teleportes", "tele");

CMD:mutarpm(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid, time, reason[64];

	if(sscanf(params, "uds[64]", userid, time, reason))
		return SendSyntaxMessage(playerid, "/mutarpm [id/nome] [tempo em segundos] [motivo]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não mutar um administrador superior.");

	PlayerData[userid][pPMMuted] = time;

	if(userid != playerid)
		SendAdminAction(userid, "Você foi bloqueado de usar o '/pm' pelo administrador %s por %d segundo(s), motivo: %s", ReturnName(playerid, 0), time, reason);
	
	SendAdminAction(playerid, "Você bloqueou %s de usar o '/pm' por %d segundos(s) pelo motivo: %s", ReturnName(userid, 0), time, reason);

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) bloqueou o uso do '/pm' de %s (ID: %d) por %d segundo(s) pelo motivo: %s", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid, time, reason);

	return 1;
}

CMD:ultimoatirador(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/ultimoatirador [id/nome]");

	if(PlayerData[userid][pLastDamage][0] == -1)
		return SendWarningMessage(playerid, "%s (ID: %d) ainda não recebeu dano desde o login no servidor.", ReturnName(userid), userid);

	new shootername[24];
	format(shootername, sizeof(shootername), ReturnNameByID(PlayerData[userid][pLastDamage][0]));

	if(PlayerIsOnline(shootername))
	{	
		return SendServerMessage(playerid, "%s (ID: %d) recebeu dano do %s (ID: %d) (%s).", ReturnName(userid), userid, shootername, GetPlayerID(shootername), GetDuration(gettime() - PlayerData[userid][pLastDamage][1]));
	}

	SendServerMessage(playerid, "%s (ID: %d) recebeu dano do %s (ID: OFF-LINE) (%s).", ReturnName(userid), userid, shootername, GetDuration(gettime() - PlayerData[userid][pLastDamage][1]));

	return 1;
}

CMD:reviver(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/reviver [id/nome]");

	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(PlayerData[userid][pState] == PLAYER_STATE_ALIVE)
		return SendWarningMessage(playerid, "Esse jogador não está gravemente ferido ou morto.");

	PlayerData[userid][pState] = PLAYER_STATE_ALIVE;
	PlayerData[userid][pDeathTime] = 0;
	SetPlayerFreezed(userid, false);
	ClearAnimations(userid);
	ApplyAnimation(userid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	SetScriptedHealth(userid, 100);
	SetPlayerWeaponSkills(userid, true);
	Damage_Clear(userid);

	SendAdminAction(playerid, "Você reviveu %s.", ReturnName(userid, 0));
	
	if(userid != playerid)
		SendAdminAction(userid, "Você foi revivido pelo administrador %s.", ReturnName(playerid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) reviveu %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid), userid);

	return 1;
}
alias:reviver("milagre", "ressucitar");

CMD:saciar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/saciar [id/nome]");

	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	PlayerData[userid][pThirst] = 100;
	PlayerData[userid][pThirstTime] = 0;
	PlayerData[userid][pHungry] = 100;
	PlayerData[userid][pHungryTime] = 0;

	SendAdminAction(playerid, "Você saciou a fome e sede de %s.", ReturnName(userid, 0));
	
	if(userid != playerid)
		SendAdminAction(userid, "Você teve sua fome e sede saciada pelo administrador %s.", ReturnName(playerid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) saciou a fome e sede de %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);

	return 1;
}
alias:saciar("encherfome", "enchersede");

CMD:checarmascara(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	new maskid;

	if(sscanf(params, "d", maskid))
		return SendSyntaxMessage(playerid, "/checarmascara [máscara id]");

	if(maskid < 1)
		return SendWarningMessage(playerid, "Digite um ID válido.");

	foreach(new i : Player) if(IsPlayerConnected(i) && PlayerData[i][pLogged])
	{
		if(maskid == MaskData[i][maskNumber])
		{
			SendGreenMessage(playerid, "* Máscara ID: #%d - Jogador: %s (ID: %d) - Comprada em: %s.", MaskData[i][maskNumber], ReturnName(i, 0), MaskData[i][maskBought]);
			return 1;
		}
	}

	new query[85];

	mysql_format(this, query, sizeof(query), "SELECT * FROM mascaras_atuais WHERE maskNumber = '%d'", maskNumber);
	mysql_tquery(this, query, "CheckPlayerMask", "dd", playerid, maskid);

	return 1;
}

/*CMD:(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Moderator))
		return SendWarningMessage(playerid, AdminError);

	return 1;
}*/

// ==-------------- ADMIN 1 -------------------==

CMD:banir(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new userid, reason[128], time;

	if(sscanf(params, "uds[128]", userid, time, reason))
		return SendSyntaxMessage(playerid, "/ban(ir) [id/nome] [tempo em dias(0 = perma)] [motivo]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não pode banir um administrador superior.");

	SendNearbyMessage(userid, 10.0, COLOR_WHITE, "* Administrador %s baniu %s pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);

	BanPlayer(userid, reason, ReturnName(playerid), time);	

	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		if(time > 0)
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s baniu %s por %d dia(s) pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), time, reason);
		else
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s baniu %s pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	}

	return 1;
}
alias:banir("ban");

CMD:baniroff(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new username[MAX_PLAYER_NAME], reason[64], time;

	if(sscanf(params, "s[24]ds[64]", username, time, reason))
		return SendSyntaxMessage(playerid, "/baniroff [nome completo] [tempo em dias(0 = perma)] [motivo]");

	if(!IsValidRoleplayName(username))
		return SendWarningMessage(playerid, "Formato do nome inválido, use: Nome_Sobrenome.");

	if(PlayerIsOnline(username))
	{
		new string[72 + 1];
		format(string, sizeof(string), "%d %d %s", GetPlayerID(username), time, reason);
		callcmd::banir(playerid, string);
		return 1;
	}

	new query[90];

	mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Name = '%e' AND `AdminLevel` < %d", username, PlayerData[playerid][pAdmin]);
	mysql_tquery(this, query, "SearchPlayerForBan", "dssd", playerid, reason, username, time);

	return 1;
}
alias:baniroff("banoff");

CMD:setarvida(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new userid, Float:health;

	if(sscanf(params, "uf", userid, health))
		return SendSyntaxMessage(playerid, "/setarvida [id/nome] [vida]");

	if(!IsPlayerConnected(userid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	SetScriptedHealth(userid, health);

	SendAdminAction(playerid, "Você alterou a vida de %s para %.1f.", ReturnName(userid, 0), health);

	if(userid != playerid)
		SendAdminAction(userid, "Você teve a sua vida alterada para %.1f pelo administrador %s.", ReturnName(playerid, 0), health);

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou a vida de %s (ID: %d) para %.1f.", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid, health);

	return 1;
}

CMD:ajail(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new userid, time, reason[64];

	if(sscanf(params, "uds[64]", userid, time, reason))
		return SendSyntaxMessage(playerid, "/ajail [id/nome] [tempo em minutos] [motivo]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não pode prender um administrador superior.");

	if(!PlayerData[userid][pJailed] && !time)
		return SendWarningMessage(playerid, "Jogador ID informado não está preso.");

	ResetarEstatisticas(userid);

	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraw][5]);

	PlayerData[userid][pJailTime] = time * 60;
	PlayerData[userid][pJailed] = 1;

	PlayerData[userid][pEntrance] = -1;
	PlayerData[userid][pHouse] = -1;
	PlayerData[userid][pBusiness] = -1;
	PlayerData[userid][pComplex] = -1;

	if(!time)
	{
		SendNearbyMessage(userid, 10.0, COLOR_WHITE, "* Administrador %s libertou %s do ajail pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);

		SendAdminAction(playerid, "Você libertou %s do ajail pelo motivo: %s", ReturnName(userid, 0), reason);
		
		if(userid != playerid)
			SendAdminAction(userid, "Você foi libertado do ajail pelo administrador %s e motivo: %s", ReturnName(playerid, 0), reason);

		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s libertou %s do ajail pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
		}

		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) libertou o jogador %s (uid: %d) da prisão administrativa.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);
	}
	else
	{
		SendNearbyMessage(userid, 10.0, COLOR_WHITE, "* Administrador %s prendeu %s por %d minuto(s) pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), time, reason);

		SendAdminAction(playerid, "Você prendeu %s por %d minuto(s) pelo motivo: %s", ReturnName(userid, 0), time, reason);
		
		if(userid != playerid)
			SendAdminAction(userid, "Você foi preso pelo administrador %s por %d minuto(s) e motivo: %s", ReturnName(playerid, 0), time, reason);

		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s prendeu %s no ajail por %d minuto(s) pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), time, reason);
		}

		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) prendeu o jogador %s (uid: %d) na prisão administrativa por %d minutos pelo motivo: %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], time, reason);
	}

	SetPlayerInJail(userid);

	return 1;
}

CMD:ajailoff(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);
	
	new name[MAX_PLAYER_NAME], minutes, reason[64];

	if(sscanf(params, "s[24]ds[64]", name, minutes, reason))
		return SendSyntaxMessage(playerid, "/ajailoff [nome completo] [tempo] [motivo]");

	if(!IsValidRoleplayName(name))
		return SendWarningMessage(playerid, "Formato do nome inválido, use: Nome_Sobrenome.");

	if(PlayerIsOnline(name))
	{
		new string[72 + 1];
		format(string, sizeof(string), "%d %d %s", GetPlayerID(name), minutes, reason);
		callcmd::ajail(playerid, string);
		return 1;
	}

	new query[128];

	mysql_format(this, query, sizeof(query), "UPDATE `players` SET `Arrested` = '1', `ArrestTime` = '%d' WHERE `AdminLevel` < %d AND `Name`= '%e'", (minutes * 60), PlayerData[playerid][pAdmin], name);
	mysql_tquery(this, query, "OnJailAccount", "dsds", playerid, name, minutes, reason);

	return 1;
}

CMD:setarhora(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);
	
	new hour, minute;

	if(sscanf(params, "dd", hour, minute))
		return SendSyntaxMessage(playerid, "/setarhora [hora(0-23)] [minuto(0-59)]");

	if(hour < 0 || hour > 23)
		return SendWarningMessage(playerid, "MODO CORRETO: /setarhora [hora(0-23)] [minuto(0-59)]");

	if(!(0 <= minute <= 59))
		return SendWarningMessage(playerid, "MODO CORRETO: /setarhora [hora(0-23)] [minuto(0-59)]");

	foreach(new i : Player)
		SetPlayerTime(i, hour, minute);

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) setou o tempo do servidor para %d horas e %d minutos.", ReturnName(playerid, 0), playerid, hour, minute);

	return 1;
}

CMD:verip(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new userid, ip[16];

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/verip [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não pode ver o IP de um administrador superior.");

	GetPlayerIp(userid, ip, sizeof(ip));

	SendClientMessageEx(playerid, COLOR_ORANGE, "IP-INFO:{FFFFFF} %s está conectado no servidor com o IP %s.", ReturnName(userid, 0), ip);

	return 1;
}

CMD:aplicaraviso(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new userid, reason[64];

	if(sscanf(params, "us[64]", userid, reason))
		return SendSyntaxMessage(playerid, "/aplicaraviso [id/nome] [motivo]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
		return SendWarningMessage(playerid, "Você não pode aplicar um aviso em um administrador superior.");

	PlayerData[userid][pWarns]++;

	if(PlayerData[userid][pWarns] == 1)
		format(PlayerData[playerid][pWarn1], 64, reason);
	else if(PlayerData[userid][pWarns] == 2)
		format(PlayerData[playerid][pWarn2], 64, reason);

	if(userid != playerid)
		SendAdminAction(userid, "Você recebeu um aviso do administrador %s pelo motivo: %s", ReturnName(playerid, 0), reason);
	
	SendAdminAction(playerid, "Você aplicou um aviso em %s pelo motivo: %s", ReturnName(userid, 0), reason);

	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) aplicou um aviso no jogador %s (uid: %d) pelo motivo: %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], reason);

	if(PlayerData[userid][pWarns] >= 3)
	{
		PlayerData[userid][pWarns] = 0;
		PlayerData[userid][pWarn1] = EOS;
		PlayerData[userid][pWarn2] = EOS;

		BanPlayer(userid, reason, ReturnName(playerid), 15);

		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s baniu %s (terceiro aviso) por 15 dia(s) pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
		}
	}
	else
	{
		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s aplicou um aviso em %s pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
		}
	}

	return 1;
}

CMD:aplicaravisooff(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new username[MAX_PLAYER_NAME], reason[64];

	if(sscanf(params, "s[24]s[64]", username, reason))
		return SendSyntaxMessage(playerid, "/aplicaravisoff [nome completo] [motivo]");

	if(!IsValidRoleplayName(username))
		return SendWarningMessage(playerid, "Formato do nome inválido, use: Nome_Sobrenome.");

	if(PlayerIsOnline(username))
	{
		new string[68 + 1];
		format(string, sizeof(string), "%d %s", GetPlayerID(username), reason);
		callcmd::aplicaraviso(playerid, string);
		return 1;
	}

	new query[85];

	mysql_format(this, query, sizeof(query), "SELECT * FROM players WHERE Name = '%e' AND AdminLevel < %d", username, PlayerData[playerid][pAdmin]);
	mysql_tquery(this, query, "OnWarnAccount", "dss", playerid, username, reason);

	return 1;
}

CMD:setarinterior(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new userid, interiorid;

	if(sscanf(params, "ud", userid, interiorid))
		return SendSyntaxMessage(playerid, "/setarinterior [id/nome] [interior id]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	SetPlayerInterior(userid, interiorid);

	SendAdminAction(playerid, "Você alterou o Interior de %s para o ID: %d.", ReturnName(userid, 0), interiorid);
	
	if(userid != playerid)
		SendAdminAction(userid, "Você teve seu Interior alterado pelo administrador %s para o ID: %d.", ReturnName(playerid, 0), interiorid);

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) setou o interior ID: %d em %s (ID: %d).", ReturnName(playerid, 0), playerid, interiorid, ReturnName(userid, 0), userid);

	return 1;
}

CMD:setarworld(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new userid, vwid;

	if(sscanf(params, "ud", userid, vwid))
		return SendSyntaxMessage(playerid, "/setarworld [id/nome] [world id]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	SetPlayerVirtualWorld(userid, vwid);

	SendAdminAction(playerid, "Você alterou o Virtual World de %s para o ID: %d.", ReturnName(userid, 0), vwid);
	
	if(userid != playerid)
		SendAdminAction(userid, "Você teve seu Virtual World alterado pelo administrador %s para o ID: %d.", ReturnName(playerid, 0), vwid);

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) setou o virtual world ID: %d em %s (ID: %d).", ReturnName(playerid, 0), playerid, vwid, ReturnName(userid, 0), userid);

	return 1;
}

CMD:setarclima(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new weatherid;

	if(sscanf(params, "d", weatherid))
		return SendSyntaxMessage(playerid, "/setarclima [weather id] (Veja a lista em /listarclimas)");

	SetWeather(weatherid);

	SendAdminAction(playerid, "Você alterou o clima do servidor para o ID: %d.", weatherid);

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou o clima do servidor para %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnWeatherName(weatherid), weatherid);

	return 1;
}

CMD:listarclimas(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	static string[640];

	if(string[0] == EOS)
	{
		format(string, sizeof(string), "{FFFFFF}");

		for(new i = 0; i < sizeof(g_aWeatherName); i++)
		{
			format(string, sizeof(string), "%s%d. %s\n", string, g_aWeatherName[i][s_W_ID], g_aWeatherName[i][s_W_Name]);
		}
	}

	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Lista dos climas disponíveis:", string, "Okay", "");

	return 1;
}

CMD:setaremprego(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new userid, jobid;

	if(sscanf(params, "ud", userid, jobid))
		return SendSyntaxMessage(playerid, "/setaremprego [id/nome] [emprego id]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(jobid < 0 || jobid > sizeof(g_aJobs))
		return SendWarningMessage(playerid, "Número do emprego é inválido, consulte em: /jobs.");

	PlayerData[userid][pJob] = jobid;

	SendAdminAction(playerid, "Você alterou o emprego de %s para %s.", ReturnName(userid, 0), ReturnJobName(PlayerData[userid][pJob]));
	
	if(userid != playerid)
		SendAdminAction(userid, "Você teve seu emprego alterado para %s pelo administrador %s.", ReturnJobName(PlayerData[userid][pJob]), ReturnName(playerid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) setou o emprego \"%s\" em %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnJobName(PlayerData[userid][pJob]), ReturnName(userid, 0), userid);

 	return 1;
}

CMD:achatvip(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	if(serverchatVIP)
	{
		if(isnull(params))
			return SendSyntaxMessage(playerid, "/achatvip [motivo]");

		serverchatVIP = false;

		foreach(new i : Player) if(PlayerData[i][pLogged] && (PlayerData[i][pVip] || PlayerData[i][pAdmin]))
		{
			SendClientMessageEx(i, COLOR_WARNING, "CHATPRIME: %s bloqueou o chat pelo motivo: %s", ReturnName(playerid, 0), params);
		}
	}
	else
	{
		serverchatVIP = true;

		foreach(new i : Player) if(PlayerData[i][pLogged] && (PlayerData[i][pVip] || PlayerData[i][pAdmin]))
		{
			SendClientMessageEx(i, COLOR_WARNING, "CHATPRIME: %s ativou o chat.", ReturnName(playerid, 0));
		}

	}

	return 1;
}

CMD:aremovercallsign(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	new vehicleid;

	if(sscanf(params, "d", vehicleid))
		return SendSyntaxMessage(playerid, "/aremovercallsign [vehicle id (/dl)]");

	if(!IsValidVehicle(vehicleid))
		return SendWarningMessage(playerid, "Veículo ID informado é inválido.");

	if(IsValidDynamic3DTextLabel(VehicleData[vehicleid][vehicleCallsignLabel]))
		DestroyDynamic3DTextLabel(VehicleData[vehicleid][vehicleCallsignLabel]);

	VehicleData[vehicleid][vehicleCallsign] = false;

	SendAdminAction(playerid, "Você removeu o callsign do veículo %s (ID: %d).", ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) removeu o callsign do veículo %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnVehicleModelName(GetVehicleModel(vehicleid)), vehicleid);
	
	return 1;
}

/*CMD:(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin1))
		return SendWarningMessage(playerid, AdminError);

	return 1;
}*/

// ==-------------- ADMIN 2 -------------------==

CMD:setarskin(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin2))
		return SendWarningMessage(playerid, AdminError);
	
	new userid, skinid;

	if(sscanf(params, "ud", userid, skinid))
		return SendSyntaxMessage(playerid, "/setarskin [id/nome] [skin id]");

	if(!IsValidSkin(skinid) && !IsValid03DLSkin(skinid))
		return SendWarningMessage(playerid, "Skin ID é inválido, consulte em %s/skins", SERVER_SITE);

	PlayerData[userid][pSkin] = skinid;
	SetPlayerSkin(userid, skinid);

	SendAdminAction(playerid, "Você alterou o Skin de %s para o ID: %d.", ReturnName(userid, 0), skinid);
	
	if(userid != playerid)
		SendAdminAction(userid, "Você teve seu Skin alterado para o ID: %d pelo administrador %s.", skinid, ReturnName(playerid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) setou skin ID: %d em %s (ID: %d).", ReturnName(playerid, 0), playerid, skinid, ReturnName(userid), userid);

	return 1;
}

CMD:rac(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin2))
		return SendWarningMessage(playerid, AdminError);
 
	DespawnVehicles();

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) forçou um RAC no servidor.", ReturnName(playerid, 0), playerid);

	return 1;
}

CMD:aac(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin2))
		return SendWarningMessage(playerid, AdminError);
	
	foreach(new i : Vehicles) if(IsValidVehicle(i))
		VehicleData[i][vehicleFuel] = Fuel_GetQuantity(i);
	
	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s abasteceu todos os veículos spawnados do servidor.", ReturnName(playerid, 0));
	}	

	SendAdminAction(playerid, "Você abasteceu todos os veículos do servidor.");
	return 1;
}

CMD:trazerveiculo(playerid, params[])
{	
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin2))
		return SendWarningMessage(playerid, AdminError);
	
	new Float:x, Float:y, Float:z, vehicleid;

	if(sscanf(params, "d", vehicleid)) return SendSyntaxMessage(playerid, "/trazerveiculo [id do /dl]");

	if(!IsValidVehicle(vehicleid))
		return SendWarningMessage(playerid, "O ID do veículo informado é inválido.");
	
	GetPlayerPos(playerid, x, y, z);
	
	AC_SetVehiclePos(vehicleid, x + 1, y + 4, z + 1);
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

	SendAdminAction(playerid, "Você trouxe o veículo ID: %d até a sua posição.", vehicleid);

	return 1;
}

CMD:desbanir(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin2))
		return SendWarningMessage(playerid, AdminError);
	
	new Conta[30];
	
	if(sscanf(params, "s[30]", Conta)) 
		return SendSyntaxMessage(playerid, "/desbanir [Nome Conta]");

	if(!IsValidRoleplayName(Conta))
		return SendWarningMessage(playerid, "Nome inválido, use o formato: Nome_Sobrenome");

	new query[64];

	mysql_format(this, query, sizeof(query), "SELECT * FROM player_banned WHERE Name = '%e'", Conta);
	mysql_tquery(this, query, "OnPlayerUnban", "ds", playerid, Conta);
	return 1;
}

CMD:criarrefundo(playerid)
{
	if(!GetPlayerAdmin(playerid, 3))
		return SendWarningMessage(playerid, "Você não possui acesso administrativo suficiente ou não está em modo trabalho.");

	Dialog_Show(playerid, Refund_Create, DIALOG_STYLE_LIST, "Selecione o tipo do refundo:", "Dinheiro\nArma\nVeículo\nDroga (LSD)\nDroga (Cocaína)\nDroga (Marijuana)\nGunpart", "Selecionar", "Cancelar");

	//reset:
	DeletePVar(playerid, "VAR_Refund_Type");
	DeletePVar(playerid, "VAR_Refund_Player");
	DeletePVar(playerid, "VAR_Refund_WeaponID");
	DeletePVar(playerid, "VAR_Refund_Ammo");
	DeletePVar(playerid, "VAR_Refund_Model");
	DeletePVar(playerid, "VAR_Refund_Quantity");

	return 1;
}

CMD:verificarrefundos(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, 3))
		return SendWarningMessage(playerid, "Você não possui acesso administrativo suficiente ou não está em modo trabalho.");

	new name[24];

	if(sscanf(params, "s[24]", name))
		return SendSyntaxMessage(playerid, "/verificarrefundos [nome completo]");

	if(!IsValidRoleplayName(name))
		return SendWarningMessage(playerid, "Nome inválido, utilize o formato: Nome_Sobrenome.");

	new query[88+24];

	mysql_format(this, query, sizeof(query), "SELECT * FROM refunds WHERE refundOwnerID = (SELECT UserID FROM players WHERE Name = '%e')", name);
	mysql_tquery(this, query, "AdminCheckPlayerRefund", "ds", playerid, name);

	return 1;
}

/*CMD:blacklist(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin2))
		return SendWarningMessage(playerid, AdminError);

	new userid, reason[64];

	if(sscanf(params, "us[64]", userid, reason))
		return SendSyntaxMessage(playerid, "/blacklist [id/nome] [motivo]");

	if(!IsPlayerConnected(userid))
		return SendClientMessage(playerid, COLOR_WARNING, JogadorOff);

	Blacklist_Add(userid, playerid, reason, PlayerIP(userid)); //terminar blacklist

	foreach(new i : Player) if(PlayerData[i][pLogged])
		SendClientMessageEx(i, COLOR_WARNING, "ADMCND: %s adicionou o(a) %s na Blacklist (%s).", ReturnName(playerid), ReturnName(userid), reason);

	return 1;
}*/

/*CMD:(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin2))
		return SendWarningMessage(playerid, AdminError);

	return 1;
}*/

// ==-------------- ADMIN 3 -------------------==
CMD:punir(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin3))
		return SendWarningMessage(playerid, AdminError);

	new userid, time, type[16], reason[64];

	if(sscanf(params, "us[16]ds[64]", userid, type, time, reason))
	{
		SendSyntaxMessage(playerid, "/punir [id/nome] [tipo] [tempo em dias] [motivo]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "furniture, veiculo, dinheiro");
	}

	if(!IsPlayerConnected(playerid) || userid == INVALID_PLAYER_ID)
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode punir a si mesmo.");

	new unixtime = (time * 86400) + gettime(), dia, mes, ano, hora, minuto, segundo;

	TimestampToDate(unixtime, ano, mes, dia, hora, minuto, segundo);

	if(!strcmp(type, "furniture", true))
	{
		PlayerData[userid][pBlockFurniture] = unixtime;

		SendAdminAction(playerid, "Você bloqueou %s de comprar mobília até o dia %d/%d/%d, %02d:%02d:%02d", ReturnName(userid, 0), dia, mes, ano, hora, minuto, segundo);
		SendClientMessageEx(playerid, COLOR_WHITE, "...pelo motivo: %s", reason);

		SendAdminAction(userid, "Administrador %s bloqueou você de comprar mobília até o dia %d/%d/%d, %02d:%02d:%02d", ReturnName(playerid, 0), dia, mes, ano, hora, minuto, segundo);
		SendClientMessageEx(userid, COLOR_WHITE, "...pelo motivo: %s", reason);

		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s bloqueou %s de comprar mobília pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
		}

		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) aplicou uma punição de Furniture no jogador %s (uid: %d) até o dia %d/%d/%d %02d:%02d:%02d pelo motivo: %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], dia, mes, ano, hora, minuto, segundo, reason);
	}
	else if(!strcmp(type, "veiculo", true))
	{
		PlayerData[userid][pBlockBuyVehicle] = unixtime;

		SendAdminAction(playerid, "Você bloqueou %s de comprar veículos até o dia %d/%d/%d, %02d:%02d:%02d", ReturnName(userid, 0), dia, mes, ano, hora, minuto, segundo);
		SendClientMessageEx(playerid, COLOR_WHITE, "...pelo motivo: %s", reason);

		SendAdminAction(userid, "Administrador %s bloqueou você de comprar veículos até o dia %d/%d/%d, %02d:%02d:%02d", ReturnName(playerid, 0), dia, mes, ano, hora, minuto, segundo);
		SendClientMessageEx(userid, COLOR_WHITE, "...pelo motivo: %s", reason);

		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s bloqueou %s de comprar veículos pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
		}

		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) aplicou uma punição de Veículo no jogador %s (uid: %d) até o dia %d/%d/%d %02d:%02d:%02d pelo motivo: %s", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], dia, mes, ano, hora, minuto, segundo, reason);
	}
	else if(!strcmp(type, "dinheiro", true))
	{
		PlayerData[userid][pBlockMoney] = unixtime;

		new nowmoney;

		nowmoney = GetScriptedMoney(userid) + PlayerData[userid][pBank] + PlayerData[userid][pSavings];

		GiveScriptedMoney(userid, - GetScriptedMoney(userid));
		PlayerData[userid][pBank] = 0;
		PlayerData[userid][pSavings] = 0;

		if(nowmoney)
			PlayerData[userid][pMoneyBlocked] += nowmoney;

		SendAdminAction(playerid, "Você bloqueou o dinheiro atual de %s até o dia %d/%d/%d, %02d:%02d:%02d", ReturnName(userid, 0), dia, mes, ano, hora, minuto, segundo);
		SendClientMessageEx(playerid, COLOR_WHITE, "...pelo motivo: %s", reason);

		SendAdminAction(userid, "Administrador %s bloqueou o seu dinheiro atual até o dia %d/%d/%d, %02d:%02d:%02d", ReturnName(playerid, 0), dia, mes, ano, hora, minuto, segundo);
		SendClientMessageEx(userid, COLOR_WHITE, "...pelo motivo: %s", reason);

		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s bloqueou o dinheiro atual de %s pelo motivo: %s", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
		}

		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) aplicou uma punição de Dinheiro (%s) no jogador %s (uid: %d) até o dia %d/%d/%d %02d:%02d:%02d pelo motivo: %s", FormatFullTime(), ReturnName(playerid), FormatNumber(nowmoney), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], dia, mes, ano, hora, minuto, segundo, reason);
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro inválido.");
	}

	return 1;
}

CMD:retirarpunicao(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin3))
		return SendWarningMessage(playerid, AdminError);

	new userid, type[32];

	if(sscanf(params, "us[32]", userid, type))
	{
		SendSyntaxMessage(playerid, "/retirarpunicao [id/nome] [tipo]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "furniture, veiculo, dinheiro");
	}

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(userid == playerid)
		return SendWarningMessage(playerid, "Você não pode retirar a sua própria punição.");

	if(!strcmp(type, "furniture", true))
	{
		if(gettime() > PlayerData[userid][pBlockFurniture])
			return SendWarningMessage(playerid, "Esse jogador não está com uma punição de comprar furniture em andamento.");

		SendAdminAction(playerid, "Você retirou a punição de comprar furniture do %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrador %s retirou a sua punição de comprar furniture.", ReturnName(playerid, 0));

		PlayerData[userid][pBlockFurniture] = 0;

		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) retirou a punição de comprar furniture do %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);

		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) removeu a punição de Furniture do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);
	}
	else if(!strcmp(type, "veiculo", true))
	{
		if(gettime() > PlayerData[userid][pBlockBuyVehicle])
			return SendWarningMessage(playerid, "Esse jogador não está com uma punição de comprar veículos em andamento.");

		SendAdminAction(playerid, "Você retirou a punição de comprar veículos do %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrador %s retirou a sua punição de comprar veículos.", ReturnName(playerid, 0));

		PlayerData[userid][pBlockBuyVehicle] = 0;

		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) retirou a punição de comprar veículos do  %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);
	
		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) removeu a punição de Veículo do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);
	}
	else if(!strcmp(type, "dinheiro", true))
	{
		if(gettime() > PlayerData[userid][pBlockMoney])
			return SendWarningMessage(playerid, "Esse jogador não está com uma punição de dinheiro em andamento.");

		if(PlayerData[userid][pMoneyBlocked])
		{
			GiveBankMoney(userid, PlayerData[userid][pMoneyBlocked]);
		}

		SendAdminAction(playerid, "Você retirou a punição de dinheiro do %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrador %s retirou a sua punição de dinheiro bloqueado, o valor foi transferido para", ReturnName(playerid, 0));
		SendClientMessageEx(userid, COLOR_WHITE, "...a sua conta bancária. (%s)", FormatNumber(PlayerData[userid][pMoneyBlocked]));

		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) removeu a punição de Dinheiro (%s) do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], FormatNumber(PlayerData[userid][pMoneyBlocked]), ReturnName(userid), PlayerData[userid][pID]);

		PlayerData[userid][pMoneyBlocked] = 0;
		PlayerData[userid][pBlockMoney] = 0;

		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) retirou a punição de Dinheiro Bloqueado do %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro inválido.");
	}

	return 1;
}

CMD:resetardinheiro(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin3))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/resetardinheiro [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	PlayerData[playerid][pMoney] = 0;
	ResetPlayerMoney(userid);

	SendAdminAction(playerid, "Você resetou todo o dinheiro em mãos de %s.", ReturnName(userid, 0));

	if(userid != playerid)
		SendAdminAction(userid, "Você teve o seu dinheiro em mãos resetado pelo administrador %s.", ReturnName(userid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) resetou o dinheiro em mãos de %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);

	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) resetou o dinheiro em mãos do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}

CMD:editar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin3))
		return SendWarningMessage(playerid, AdminError);

	new userid, option[16], level[5];

	if(sscanf(params, "us[16]S()[5]", userid, option, level))
	{
		SendSyntaxMessage(playerid, "/editar [id/nome] [opção]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "OPÇÃO", "nível, tc, avisos");
	}

	if(!strcmp(option, "nível"))
	{
		new p_level;

		if(sscanf(level, "d", p_level))
			return SendSyntaxMessage(playerid, "/editar %d %s [nível]", userid, option);

		PlayerData[userid][pLevel] = p_level;
		SetPlayerScore(userid, p_level);

		SendAdminAction(playerid, "Você alterou o nível de %s para %d.", ReturnName(userid, 0), p_level);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou o nível do %s (ID: %d) para %d.", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid, p_level);

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) alterou o level do %s (uid: %d) para %d.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], p_level);
		
		if(userid != playerid)
			Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) alterou o level do %s (uid: %d) para %d.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], p_level);
	}
	else if(!strcmp(option, "tc"))
	{
		new tc;

		if(sscanf(level, "d", tc))
			return SendSyntaxMessage(playerid, "/editar %d %s [tempo conectado]", userid, option);

		PlayerData[userid][pTimePlayed] = tc;

		SendAdminAction(playerid, "Você alterou o tempo conectado de %s para %d.", ReturnName(userid, 0), tc);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou o tempo conectado do %s (ID: %d) para %d.", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid, tc);

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) alterou o tempo conectado do %s (uid: %d) para %d.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], tc);
		
		if(userid != playerid)
			Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) alterou o tempo conectado do %s (uid: %d) para %d.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], tc);
	}
	else if(!strcmp(option, "avisos"))
	{
		new warns;

		if(sscanf(level, "d", warns))
			return SendSyntaxMessage(playerid, "/editar %d %s [avisos]", userid, option);

		PlayerData[playerid][pWarns] = warns;

		SendAdminAction(playerid, "Você alterou a quantidade de avisos de %s para %d.", ReturnName(userid, 0), warns);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou os avisos do %s (ID: %d) para %d.", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid, warns);

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) alterou os avisos do %s (uid: %d) para %d.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], warns);
		
		if(userid != playerid)
			Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) alterou os avisos do %s (uid: %d) para %d.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID], warns);
	}
	else
		SendWarningMessage(playerid, "Parâmetro inválido.");

	return 1;
}

/*CMD:(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_GameAdmin3))
		return SendWarningMessage(playerid, AdminError);

	return 1;
}*/
// ==-------------- HeadStaff -------------------==

CMD:retirararmas(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/retirararmas [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	ResetWeapons(userid);

	SendAdminAction(playerid, "Você removeu as armas de %s.", ReturnName(userid, 0));
	
	if(userid != playerid)
		SendAdminAction(userid, "Você teve suas armas removidas pelo administrador %s.", ReturnName(playerid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) removeu as armas de %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);

	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) resetou as armas do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}

CMD:darlicencas(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/darlicencas [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	PlayerData[userid][pFlyLicense] = 1;
	PlayerData[userid][pBoatLicense] = 1;
	PlayerData[userid][pCarLicense] = 1;

	SendAdminAction(playerid, "Você registrou todas as licenças para %s.", ReturnName(userid, 0));
	
	if(userid != playerid)
		SendAdminAction(userid, "Você recebeu o registro de todas as licenças do administrador %s.", ReturnName(playerid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) deu todas as licenças para %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);

	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) setou todas as licenças no jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}

CMD:retirarlicencas(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/retirarlicencas [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	PlayerData[userid][pFlyLicense] = 0;
	PlayerData[userid][pBoatLicense] = 0;
	PlayerData[userid][pCarLicense] = 0;

	SendAdminAction(playerid, "Você removeu as licenças de %s.", ReturnName(userid, 0));
	
	if(userid != playerid)
		SendAdminAction(userid, "Você teve suas licenças removidas pelo administrador %s.", ReturnName(playerid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) retirou as licenças de %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);

	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) resetou todas as licenças do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}

CMD:setarprime(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid, type;

	if(sscanf(params, "ud", userid, type))
		return SendSyntaxMessage(playerid, "/setarprime [id/nome] [tipo prime]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(!(1 <= type <= 3))
		return SendWarningMessage(playerid, "Tipo inválido, use: 1 (bronze), 2 (prata) e 3 (ouro).");

	PlayerData[userid][pVip] = type;
	PlayerData[userid][pVipTime] = (30 * 86400) + gettime();
	SetPlayerBenefits(userid);

	new query[90];

	mysql_format(this, query, sizeof(query), "UPDATE players SET VipLevel = '%d', VipTime = '%d' WHERE UserID = '%d'",
		PlayerData[userid][pVip], PlayerData[userid][pVipTime], PlayerData[userid][pID]);
	mysql_tquery(this, query);

	SendAdminAction(playerid, "Você setou Prime %s em %s.", Prime_GetType(type), ReturnName(userid, 0));
	
	if(userid != playerid)
		SendAdminAction(userid, "Você recebeu o status de Prime %s pelo administrador %s.", Prime_GetType(type), ReturnName(playerid, 0));

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) setou Prime (%s) para %s (ID: %d).", ReturnName(playerid, 0), playerid, Prime_GetType(type), ReturnName(userid, 0), userid);

	Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) adicionou o status Prime %s para o jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], Prime_GetType(type), ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}

CMD:retirarprime(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/retirarprime [id/nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(!PlayerData[userid][pVip])
		return SendWarningMessage(playerid, "Esse jogador não é Prime.");

	PlayerData[userid][pVip] = 0;
	PlayerData[userid][pVipTime] = 0;

	new query[80];

	mysql_format(this, query, sizeof(query), "UPDATE players SET VipLevel = '0', VipTime = '0' WHERE UserID = '%d'", PlayerData[userid][pID]);
	mysql_tquery(this, query);

	SendAdminAction(playerid, "Você retirou o status Prime de %s.", ReturnName(userid, 0));

	if(userid != playerid)
	{
		SendAdminAction(userid, "Você teve seu status Prime retirado pelo administrador %s.", ReturnName(playerid, 0));
		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) resetou o status Prime do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);
	}

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) removeu o Prime de %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);
	
	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resetou o status Prime do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);

	return 1;
}

CMD:setaritem(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new userid, item[32], amount;

	if(sscanf(params, "uds[32]", userid, amount, item))
		return SendSyntaxMessage(playerid, "/setaritem [ID/Nome] [quantidade] [item nome]");

	for(new i = 0; i < sizeof(g_aInventoryItems); i++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
	{
		Inventory_Set(userid, g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryModel], amount);
		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) setou o item \"%s\" (%d unidades) no inventário do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], item, amount, ReturnName(userid), PlayerData[userid][pID]);
		
		if(userid != playerid)
		{
			Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) setou o item \"%s\" (%d unidades) no inventário do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], item, amount, ReturnName(userid), PlayerData[userid][pID]);
			SendAdminAction(userid, "Você recebeu o item \"%s\" com %d unidade(s) do administrador %s.", item, amount, ReturnName(playerid, 0));
		}
		
		return SendAdminAction(playerid, "Você setou o item \"%s\" com %d unidade(s) para %s.", item, amount, ReturnName(userid, 0));
	}

	SendWarningMessage(playerid, "Nome do item inválido (use /itemlist para ver a lista).");
	return 1;
}

CMD:itemlist(playerid, params[])
{
	sz_MiscString[0] = 0;

	if(!strlen(sz_MiscString))
	{
		for(new i = 0; i < sizeof(g_aInventoryItems); i++)
		{
			format(sz_MiscString, sizeof(sz_MiscString), "%s%s\n", sz_MiscString, g_aInventoryItems[i][e_InventoryItem]);
		}
	}
	return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Lista dos Itens", sz_MiscString, "Fechar", "");
}

CMD:spawnitem(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/spawnitem [item name] (/itemlist para ver a lista)");

	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	GetXYInFrontOfPlayer(playerid, x, y, 1);

	for(new i = 0; i < sizeof(g_aInventoryItems); i++) if(!strcmp(g_aInventoryItems[i][e_InventoryItem], params, true))
	{
		if(strfind(g_aInventoryItems[i][e_InventoryItem], "item único", true) != -1)
			return SendWarningMessage(playerid, "Itens únicos não podem ser spawnados a mundo aberto, direcione-o para um jogador em específico.");

		new id = DropItem(g_aInventoryItems[i][e_InventoryItem], "Admin", g_aInventoryItems[i][e_InventoryModel], 1, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

		if(id == -1)
			return SendWarningMessage(playerid, "O servidor já atingiu o limite máximo de itens dropados.");

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) deu spawn no item \"%s\" nas proximidades de %s.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], g_aInventoryItems[i][e_InventoryItem], GetLocation(x, y, z));
		SendAdminAction(playerid, "Você deu spawn em um(a) \"%s\" (use /setarquantidade para setar a quantidade do item dropado).", g_aInventoryItems[i][e_InventoryItem]);
		return 1;
	}
	SendWarningMessage(playerid, "Nome do item inválido (use /itemlist para ver a lista).");
	return 1;
}

CMD:setarquantidade(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1, amount;

	if((id = Item_Nearest(playerid)) == -1)
		return SendWarningMessage(playerid, "Não há nenhum item dropado perto de você.");

	if(sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/setarquantidade [quantia]");

	if(amount < 1)
		return SendWarningMessage(playerid, "A quantidade especificada não pode ser menor que 1.");

	Item_SetQuantity(id, amount);
	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) alterou a quantidade do item dropado \"%s\" para %d.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], DroppedItems[id][droppedItem], amount);
	SendAdminAction(playerid, "Você setou a quantidade do item dropado \"%s\" para %d.", DroppedItems[id][droppedItem], amount);
	return 1;
}

CMD:deletaritem(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Item_Nearest(playerid)) == -1)
		return SendWarningMessage(playerid, "Não há nenhum item dropado perto de você.");

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) deletou o item dropado \"%s\".", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], DroppedItems[id][droppedItem]);
	SendAdminAction(playerid, "Você deletou o item dropado \"%s\".", DroppedItems[id][droppedItem]);
	Item_Delete(id);
	return 1;
}

CMD:paycheckduplo(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);

	if(!doubleExp)
	{
		SetDoubleXP(true);

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) ativou o paycheck duplo.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID]);

		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s ativou o paycheck duplo do servidor.", ReturnName(playerid, 0));
		}
	}
	else
	{
		SetDoubleXP(false);

		Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) desativou o paycheck duplo.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID]);

		foreach(new i : Player) if(PlayerData[i][pLogged])
		{
			SendClientMessageEx(i, COLOR_WARNING, "AdmCmd: %s desativou o paycheck duplo do servidor.", ReturnName(playerid, 0));
		}
	}

	return 1;
}

CMD:ahide(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new query[65];

	if(PlayerData[playerid][pAdminHide])
	{
		PlayerData[playerid][pAdminHide] = 0;
		SendAdminAction(playerid, "Você alterou para o modo: visível na lista de administradores (/admins).");

		mysql_format(this, query, sizeof(query), "UPDATE players SET AdminHide = 0 WHERE UserID = '%d'", PlayerData[playerid][pID]);		
	}
	else
	{
		PlayerData[playerid][pAdminHide] = 1;
		SendAdminAction(playerid, "Você alterou para o modo: invisível na lista de administradores (/admins).");

		mysql_format(this, query, sizeof(query), "UPDATE players SET AdminHide = 1 WHERE UserID = '%d'", PlayerData[playerid][pID]);	
	}

	mysql_tquery(this, query);

	return 1;
}

/*CMD:(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_HeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	return 1;
}*/
// ==-------------- DONO -------------------==

CMD:motd(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new text[128], query[177];

	if(sscanf(params, "s[128]", text))
		return SendSyntaxMessage(playerid, "/motd [mensagem] (use 0 para remover)");

	if(!strcmp(text, "0", true))
	{
		mysql_tquery(this, "UPDATE server_config SET active = '0' WHERE entry_id = '1'");
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) desativou a mensagem do dia(motd) do servidor.", ReturnName(playerid, 0), playerid);
	}
	else
	{
		mysql_format(this, query, sizeof(query), "UPDATE server_config SET active = '1', text = '%e' WHERE entry_id = '1'", text);
		mysql_tquery(this, query);

		SendAdminAction(playerid, "Nova mensagem do dia (MOTD) alterada com sucesso.", text);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou a mensagem do dia(motd) do servidor.", ReturnName(playerid, 0), playerid);
	}

	return 1;
}

CMD:gmx(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	if(strcmp(params, "confirmar", true) || isnull(params))
	{
		SendSyntaxMessage(playerid, "/gmx [confirmar]");
		return SendClientMessage(playerid, COLOR_GREY, "O GMX será executado após o salvamento de todos os sistemas do servidor.");
	}

	if(serverGMX)
		return SendWarningMessage(playerid, "Já existe um GMX em andamento, não há como cancelar.");

	serverGMX = true;

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) reiniciou o servidor.", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID]);

	Save_All();

	return 1;
}

CMD:shutdown(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new time;

	if(sscanf(params, "d", time))
		return SendSyntaxMessage(playerid, "/shutdown [tempo em minutos]");

	if(time < 2 || time > 10)
		return SendWarningMessage(playerid, "Não exceda os limites, mínimo 2 e máximo 10.");

	if(serverShutdown)
		return SendWarningMessage(playerid, "Já existe um Shutdown em andamento, caso queira acelerar pode usar o /gmx.");

	serverShutdown = true;
	serverShutdownTime = time * 60;

	SendRconCommand("password DeRrUbAnDoOsErVeRxDzInHo");

	new servername[32];
	format(servername, sizeof(servername), "%.20s | Shutdown", SERVER_HOSTNAME);
	SendRconCommand(servername);

	foreach(new i : Player)
		SendClientMessageEx(playerid, COLOR_WARNING, "AdmCmd: Server shutdown irá ocorrer em %d %s, vá para um local seguro.", time, time > 1 ? "minutos" : "minuto");

	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) iniciou um server shutdown de %d %s.", time, time > 1 ? "minutos" : "minuto");

	return 1;
}

CMD:criarindustria(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new section, id;

	if(sscanf(params, "d", section))
	{
		SendSyntaxMessage(playerid, "/criarindustria [seção] USE O ID DA SEÇÃO.");
		SendClientMessage(playerid, COLOR_ORANGE, "SEÇÃO: {FFFFFF}Petroleiro (1), Fazenda (2), Metalúrgica (3), Comida (4), Roupas (5) e Eletrônicos (6).");
		return 1;
	}

	id = Industry_Create(playerid, section);

	if(id == -1)
		return SendWarningMessage(playerid, "A quantia de indústrias no servidor chegou ao seu limite.");

	SendAdminAction(playerid, "Indústria ID: %d criada com sucesso.", id);

	return 1;
}

CMD:deletarindustria(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Industry_Nearest(playerid)) != -1)
	{
		Industry_Delete(id);

		SendAdminAction(playerid, "Indústria ID: %d deletada com sucesso.", id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma indústria.");

	return 1;
}

CMD:editarindustria(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	if(Industry_Nearest(playerid) != -1)
	{
		Dialog_Show(playerid, IndustryEdit, DIALOG_STYLE_LIST, "Qual opção você deseja editar?", "Nome\nProdutos (venda)\nProdutos (compra)", "Selecionar", "Cancelar");
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma indústria.");

	return 1;
}

CMD:criarempresa(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new type, value;

	if(sscanf(params, "dd", type, value))
	{
		SendSyntaxMessage(playerid, "/criarempresa [tipo] [preço]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "Posto de combustível(1), Mercadinho 24/7(2), Restaurante(3) e Roupas(4)");
	}

	if(type < 1 || type > 4)
		return SendWarningMessage(playerid, "Tipo da empresa é inválido.");

	if(!value)
		return SendWarningMessage(playerid, "É necessário colocar um valor.");

	new id = -1;

	id = Business_Create(playerid, type, value);

	if(id == -1)
		return SendWarningMessage(playerid, "A quantia de empresas no servidor chegou ao seu limite (%d).", MAX_BUSINESS);

	return 1;
}

CMD:deletarempresa(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Business_Nearest(playerid)) != -1)
	{
		Business_Delete(id);

		SendAdminAction(playerid, "Empresa ID: %d deletada com sucesso.", id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo ao pickup de uma empresa.");

	return 1;
}

CMD:editarempresa(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	if(Business_Nearest(playerid) != -1)
	{
		Dialog_Show(playerid, BusinessEdit, DIALOG_STYLE_LIST, "Qual opção você deseja editar?", "Alterar nome\nAlterar dono\nAlterar valores do cofre\nAlterar preço dos produtos\nAlterar produtos", "Selecionar", "Cancelar");
	}
	else
	{
		new id, option[16];

		if(sscanf(params, "ds[16]", id, option))
		{
			SendSyntaxMessage(playerid, "/editarempresa [id real] [opção]");
			return SendFormatMessage(playerid, COLOR_ORANGE, "OPÇÕES", "posição");
		}

		if((id < 0 || id >= MAX_BUSINESS) && !BusinessData[id][businessExists])
			return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

		if(!strcmp(option, "posição"))
		{
			new Float:pX, Float:pY, Float:pZ;
			GetPlayerPos(playerid, pX, pY, pZ);

			BusinessData[id][businessX] = pX;
			BusinessData[id][businessY] = pY;
			BusinessData[id][businessZ] = pZ;

			Business_Save(id);
			Business_Refresh(id);

			SendAdminAction(playerid, "Você alterou a posição da empresa %s (ID: %d).", BusinessData[id][businessName], id);
		}
		else
		{
			SendWarningMessage(playerid, "Parâmetro inválido ou você não está próximo ao pickup de uma empresa.");
		}	
	}
	return 1;
}

CMD:criarpump(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new bizid, id;

	if(sscanf(params, "d", bizid))
		return SendSyntaxMessage(playerid, "/criarpump [empresa id]");

	if(!BusinessData[bizid][businessExists])
		return SendWarningMessage(playerid, "Empresa informada é inválida, confira em /proximo o ID.");

	if(!BusinessData[bizid][businessFuel])
		return SendWarningMessage(playerid, "A empresa informada não é do tipo: posto de combustível.");

	id = Pump_Create(playerid, bizid);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de pumps criados.");

	SendAdminAction(playerid, "Pump ID: %d criado com sucesso.", id);

	return 1;
}

CMD:deletarpump(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id;

	if((id = Pump_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Pump ID: %d deletado com sucesso.", id);
		Pump_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo a um pump (bomba de combustível).");

	return 1;
}

CMD:limparinventario(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/limparinventario [ID/Nome]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	Inventory_Clear(userid);

	SendAdminAction(playerid, "Você limpou o inventário de %s (ID: %d).", ReturnName(userid, 0), userid);
	Log_Write(PlayerData[playerid][pID], "[%s] %s (uid: %d) resetou o inventário do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);
	
	if(userid != playerid)
	{
		SendAdminAction(userid, "Você teve seu inventário resetado pelo administrador %s.", ReturnName(playerid, 0));
		Log_Write(PlayerData[userid][pID], "[%s] %s (uid: %d) resetou o inventário do jogador %s (uid: %d).", FormatFullTime(), ReturnName(playerid), PlayerData[playerid][pID], ReturnName(userid), PlayerData[userid][pID]);
	}

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) limpou o inventário de %s (ID: %d).", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid);

	return 1;
}

CMD:criarteleporte(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new string[128], id;

	if(sscanf(params, "s[128]", string))
		return SendSyntaxMessage(playerid, "/criarteleporte [nome]");

	id = Teleport_Create(playerid, string);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de teleportes criados.");

	SendAdminAction(playerid, "Teleporte \"%s\" criado com sucesso.", string);

	return 1;
}

CMD:deletarteleporte(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
		
	new id;

	if(sscanf(params, "d", id))
	{
		SendSyntaxMessage(playerid, "/deletarteleporte [id real]");
		return SendServerMessage(playerid, "O ID para deletar aparece em parêntesis, exemplo: 1. Local (ID Real)");
	}

	if(!TeleportData[id][teleportExists])
		return SendWarningMessage(playerid, "Teleporte ID inválido.");

	SendAdminAction(playerid, "Teleporte \"%s\" deletado com sucesso.", TeleportData[id][teleportDesc]);

	Teleport_Delete(id);

	return 1;
}

CMD:interiorlist(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	HouseInterior_Show(playerid, 1);

	return 1;
}

CMD:criarcasa(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new price, id, address[32];

	if(sscanf(params, "ds[32]", price, address))
		return SendSyntaxMessage(playerid, "/criarcasa [preço] [endereço]");

	foreach(new i : Houses) if(HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], address, true))
		return SendWarningMessage(playerid, "O endereço \"%s\" já está sendo usado. (Casa ID: %d).", address, i);

	id = House_Create(playerid, address, price);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de casas criadas.");

	SendAdminAction(playerid, "Você criou com sucesso a casa ID: %d.", id);
	return 1;
}

CMD:deletarcasa(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id = -1;

	if((id = House_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso a casa ID: %d.", id);
		House_Delete(id, playerid);
	}
	else return SendWarningMessage(playerid, "Você não está próximo de nenhuma casa.");
	return 1;
}

CMD:editarcasa(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id, type[24], string[128];

	if(sscanf(params, "ds[24]S()[128]", id, type, string))
	{
		SendSyntaxMessage(playerid, "/editarcasas [id real] [tipo]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "interior, preco, endereco, dono, saida");
	}

	if(House_Nearest(playerid) == id)
	{
		if(!strcmp(type, "interior", true))
		{
			new typeint;
			if(sscanf(string, "d", typeint))
				return SendSyntaxMessage(playerid, "/editarcasa interior [interiorid]");

			if(typeint < 0 || typeint >= sizeof(arrHouseInteriors))
				return SendWarningMessage(playerid, "O ID do interior deve ser entre 0 e %d.", sizeof(arrHouseInteriors) - 1);

			HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
			HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
			HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
			HouseData[id][houseInt][3] = 0.0;
			HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];

			HouseData[id][houseVW] = 2000 + HouseData[id][houseID];

			foreach(new i : Player)
			{
				if(House_Inside(i) == id)
				{
					AC_SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
					SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

					SetPlayerInterior(i, HouseData[id][houseInterior]);
					SetCameraBehindPlayer(i);
				}
			}
			House_Save(id);
			SendAdminAction(playerid, "Você alterou o interior da casa ID: %d(%s) para %d (%s).", id, HouseData[id][houseAddress], typeint, arrHouseInteriors[typeint][eHouseIntName]);
		}
		else if(!strcmp(type, "preco", true))
		{
			new price;

			if(sscanf(string, "d", price))
				return SendSyntaxMessage(playerid, "/editarcasa preco [novo preco]");
			
			HouseData[id][housePrice] = price;

			House_Refresh(id);
			House_Save(id);

			SendAdminAction(playerid, "Você alterou o preço da casa ID: %d(%s) para %s.", id, HouseData[id][houseAddress], FormatNumber(price));
		}
		else if(!strcmp(type, "endereco", true))
		{
			new endereco[32];

			if(sscanf(string, "s[32]", endereco))
				return SendSyntaxMessage(playerid, "/editarcasa endereco [novo endereço]");

			if(strlen(endereco) < 3)
				return SendWarningMessage(playerid, "O endereço não pode ser menor que 3 caracteres.");

			foreach(new i : Houses)if(HouseData[i][houseExists])
			{
				if(!strcmp(HouseData[i][houseAddress], endereco, true))
					return SendWarningMessage(playerid, "O endereço \"%s\" já está sendo usado. (Casa ID: %d).", endereco, i);
			}
			
			format(HouseData[id][houseAddress], 32, endereco);

			House_Refresh(id);
			House_Save(id);

			SendAdminAction(playerid, "Você alterou o endereço da casa ID: %d para \"%s\".", id, HouseData[id][houseAddress]);
		}
		else if(!strcmp(type, "dono", true))
		{
			new novodono;

			if(sscanf(string, "d", novodono))
				return SendSyntaxMessage(playerid, "/editarcasa dono [id do novo dono] (use -1 para remover)");

			if(novodono == -1)
			{
				if(HouseData[id][houseOwner] == 0)
					return SendWarningMessage(playerid, "Essa casa não possui um dono para ser removido.");

				HouseData[id][houseOwner] = 0;
				format(HouseData[id][houseOwnerName], 24, "O estado");
				SendAdminAction(playerid, "Você removeu o dono da casa ID: %d.", id);
			}
			else
			{
				if(!IsPlayerConnected(novodono))
					return SendWarningMessage(playerid, JogadorOff);

				if(!IsPlayerNearPlayer(playerid, novodono, 4.0))
					return SendWarningMessage(playerid, "O novo dono precisa estar perto de você.");

				if(House_GetCount(novodono) >= MAX_CASAS_JOGADOR)
					return SendWarningMessage(playerid, "Esse jogador já possui o máximo de casas compradas.");

				HouseData[id][houseOwner] = PlayerData[novodono][pID];
				format(HouseData[id][houseOwnerName], 24, ReturnName(novodono));

				SendAdminAction(playerid, "Você alterou o dono da casa ID: %d.", id);
			}
			House_Refresh(id);
			House_Save(id);
		}
	}
	else
	{
		if(!strcmp(type, "saida", true))
		{
			new Float:x, Float:y, Float:z, Float:angle;
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);

			HouseData[id][houseInt][0] = x;
			HouseData[id][houseInt][1] = y;
			HouseData[id][houseInt][2] = z;
			HouseData[id][houseInt][3] = angle;
			HouseData[id][houseInterior] = GetPlayerInterior(playerid);
			HouseData[id][houseVW] = GetPlayerVirtualWorld(playerid);

			SendAdminAction(playerid, "Você alterou o interior da casa ID: %d para este local.", id);
		}
		else return SendWarningMessage(playerid, "Você não está próximo da entrada da casa informada.");
	}
	return 1;
}

CMD:criaratm(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id = -1;

	id = ATM_Create(playerid);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de ATMs criados.");

	SendAdminAction(playerid, "Você criou com sucesso um ATM ID: %d.", id);
	return 1;
}

CMD:deletaratm(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id = -1;

	if((id = ATM_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso o ATM ID: %d.", id);
		ATM_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo de nenhum ATM.");
	return 1;
}

CMD:criarobjeto(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new modelid;

	if(sscanf(params, "d", modelid))
		return SendSyntaxMessage(playerid, "/criarobjeto [modelid]");

	new id = -1;

	id = Object_Create(playerid, modelid);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de objetos criados.");

	SendAdminAction(playerid, "Você criou com sucesso um objeto ID: %d.", id);
	return 1;
}

CMD:editarobjeto(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id;

	if(sscanf(params, "d", id))
		return SendSyntaxMessage(playerid, "/editarobjeto [id real]");

	if(!(0 <= id <= MAX_OBJECTDATA))
		return SendWarningMessage(playerid, "ID informado é inválido ou superior a %d.", MAX_OBJECTDATA);

	if(!ObjectData[id][objectExists])
		return SendWarningMessage(playerid, "Esse objeto ID: %d não existe.", id);

	if(Object_Nearest(playerid, id) == -1)
		return SendWarningMessage(playerid, "Você não está próximo do objeto.");

	PlayerData[playerid][pSelectedSlot] = id;

	Dialog_Show(playerid, ObjectMenu, DIALOG_STYLE_LIST, sprintf("Gerenciando objeto ID: %d", id), "Posição\nClonar\nEditar materiais\nDesbugar", "Selecionar", "Cancelar");

	return 1;
}

CMD:infoobjetos(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	if(!MostrandoTextsObjeto[playerid])
	{
		ShowObjectInfo(playerid);
		SendAdminAction(playerid, "Informações adicionadas no centro dos objetos editáveis em um radio de 50m.");
		MostrandoTextsObjeto[playerid] = true;
	}
	else
	{
		HideObjectInfo(playerid);
		SendAdminAction(playerid, "Você ocultou as informações dos objetos.");
		MostrandoTextsObjeto[playerid] = false;
	}

	return 1;
}

CMD:deletarobjeto(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id;

	if(sscanf(params, "d", id))
		return SendSyntaxMessage(playerid, "/deletarobjeto [id real]");

	if(!(0 <= id <= MAX_OBJECTDATA))
		return SendWarningMessage(playerid, "ID informado é inválido ou superior a %d.", MAX_OBJECTDATA);

	if(!ObjectData[id][objectExists])
		return SendWarningMessage(playerid, "Esse objeto ID: %d não existe.", id);

	if(ObjectData[id][objectEditing])
		return SendWarningMessage(playerid, "Esse objeto está sendo editado por alguém.");

	if(Object_Nearest(playerid, id) == -1)
		return SendWarningMessage(playerid, "Você não está próximo do objeto.");

	SendAdminAction(playerid, "Você deletou com sucesso o objeto ID: %d.", id);
	Object_Delete(id);

	return 1;
}

CMD:criarradar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new Float:limit, Float:range, id;

	if(sscanf(params, "ff", limit, range))
		return SendSyntaxMessage(playerid, "/criarradar [limite velocidade] [distancia] (distancia padrão: 30)");

	if(limit < 5.0 || limit > 150.0)
		return SendWarningMessage(playerid, "O limite de velocidade não pode ser menor que 5 e maior que 150.");

	if(range < 5.0 || range > 50.0)
		return SendWarningMessage(playerid, "A distância não pode ser menor que 5 e maior de 50.");

	if(Speed_Nearest(playerid) != -1)
		return SendWarningMessage(playerid, "Já existe um radar neste raio.");

	id = Speed_Create(playerid, limit, range);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de radares criados.");

	SendAdminAction(playerid, "Você criou com sucesso o radar ID: %d.", id);
	return 1;
}

CMD:deletarradar(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Speed_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso o radar ID: %d.", id);
		Speed_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está perto de nenhum radar.");
	return 1;
}

CMD:criarfaccao(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1, type, name[64];

	if(sscanf(params, "ds[64]", type, name)) 
	{
		SendSyntaxMessage(playerid, "/criarfaccao [tipo] [nome]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "Governo(1), Polícia(2), Médico(3), Gangster(4), Motoclube(5) e Cartél(6).");
	}

	if(type < 1 || type > 6)
		return SendWarningMessage(playerid, "Tipo inválido, use os tipos de 1 à 6.");

	id = Faction_Create(name, type);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiou o máximo de facções criadas.");

	SendAdminAction(playerid, "Você criou com sucesso a facção ID: %d.", id);
	return 1;
}

CMD:deletarfaccao(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id;

	if(sscanf(params, "d", id))
		return SendSyntaxMessage(playerid, "/deletarfaccao [id real] (veja o id em /facs)");

	if((id < 0 || id > MAX_FACTIONS) || !FactionData[id][factionExists])
		return SendWarningMessage(playerid, "Essa facção ID é inválida.");

	Faction_Delete(id);
	SendAdminAction(playerid, "Você deletou com sucesso a facção ID: %d.", id);
	return 1;
}

CMD:editarfaccao(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id, type[24], string[128];

	if(sscanf(params, "ds[24]S()[128]", id, type, string))
	{
		SendClientMessage(playerid, COLOR_GREY, "/editarfaccao [id real] [tipo] (veja o id em /facs)");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "nome, cor, tipofac, modelos, locker, ranks, maxranks, spawn, paycheck");
	}

	if((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
		return SendWarningMessage(playerid, "Essa facção ID é inválida.");

	if(!strcmp(type, "nome", true))
	{
		new name[64];
		if(sscanf(string, "s[64]", name))
			return SendSyntaxMessage(playerid, "/editarfaccao nome [novonome]");

		format(FactionData[id][factionName], 64, name);

		Faction_Save(id);
		SendFactionAlert(COLOR_WARNING, "AdmCmd: %s ajustou o nome da facção ID: %d para \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if(!strcmp(type, "cor", true))
	{
		new color;
		if(sscanf(string, "h", color))
			return SendSyntaxMessage(playerid, "/editarfaccao cor [hexcolor]");

		FactionData[id][factionColor] = color;
		Faction_Update(id);

		Faction_Save(id);
		SendFactionAlert(FactionData[id][factionColor], "AdmCmd: %s ajustou a cor da facção ID: %d.", ReturnName(playerid, 0), id);
	}
	else if(!strcmp(type, "tipofac", true))
	{
		new typeint;
		if(sscanf(string, "d", typeint))
			return SendSyntaxMessage(playerid, "/editarfaccao tipofac [novotipo]");

		if(typeint < 1 || typeint > 5)
			return SendWarningMessage(playerid, "Tipo inválido, USE 1: GOV | 2: Polícia | 3: Médico |  4: Gangster | 5: Motoclube | 6: Cartel");

		FactionData[id][factionType] = typeint;

		Faction_Save(id);
		SendFactionAlert(COLOR_WARNING, "AdmCmd: %s alterou o tipo da facção ID: %d para %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if(!strcmp(type, "modelos", true))
	{
		new skins[28];

		for(new i = 0; i < sizeof(skins); i++)
			skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

		PlayerData[playerid][pFactionEdit] = id;
		ShowModelSelectionMenu(playerid, "Skins da facção", MODEL_SELECTION_SKINS, skins, sizeof(skins), -16.0, 0.0, -55.0);
	}
	else if(!strcmp(type, "locker", true))
	{
		PlayerData[playerid][pFactionEdit] = id;
		Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Locker da facção", "Setar posição\nDeletar\nArmas do locker", "Selecionar", "Cancelar");
	}
	else if(!strcmp(type, "ranks", true))
	{
		Faction_ShowRanks(playerid, id);
	}
	else if(!strcmp(type, "maxranks", true))
	{
		new ranks;
		if(sscanf(string, "d", ranks))
			return SendSyntaxMessage(playerid, "/editarfaccao maxranks [1-15]");

		if(ranks < 1 || ranks > 15)
			return SendWarningMessage(playerid, "A quantidade de rank especificada não pode ser menor que 1 e maior que 15.");

		FactionData[id][factionRanks] = ranks;

		Faction_Save(id);
		SendFactionAlert(COLOR_WARNING, "AdmCmd: %s alterou a quantidade de máximo de ranks da facção ID: %d para %d.", ReturnName(playerid, 0), id, ranks);
	}
	else if(!strcmp(type, "spawn", true))
	{
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);

		FactionData[id][factionSpawn][0] = X;
		FactionData[id][factionSpawn][1] = Y;
		FactionData[id][factionSpawn][2] = Z;
		FactionData[id][factionSpawnIntVW][0] = GetPlayerInterior(playerid);
		FactionData[id][factionSpawnIntVW][1] = GetPlayerVirtualWorld(playerid);
		FactionData[id][factionSpawnIntVW][2] = PlayerData[playerid][pEntrance];

		Faction_Save(id);
		SendAdminAction(playerid, "Você mudou o local do nascimento da facção ID: %d para esta posição.", id);
	}
	else if(!strcmp(type, "paycheck", true))
	{
		Faction_ShowPaycheck(playerid, id);
	}
	return 1;
}

CMD:darlider(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid, id;

	if(sscanf(params, "ud", userid, id))
		return SendSyntaxMessage(playerid, "/darlider [id/nome] [fac id(-1 para remover)]");

	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if((id < 0 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
		return SendWarningMessage(playerid, "ID da facção é inválido.");

	if(id == -1)
	{		
		SendAdminAction(playerid, "Você removeu %s de líder da facção: \"%s\".", ReturnName(userid, 0), FactionData[PlayerData[playerid][pFaction]][factionName]);
		
		if(userid != playerid)
			SendAdminAction(userid, "Você foi removido de líder da facção pelo administrador %s.", ReturnName(playerid, 0));
		
		ResetFaction(userid);
	}
	else
	{
		PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];
		SetFaction(userid, id);

		SendAdminAction(playerid, "Você colocou %s de líder da facção \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
		
		if(userid != playerid)
			SendAdminAction(userid, "Você foi colocado de líder da facção \"%s\" pelo administrador %s.", FactionData[id][factionName], ReturnName(playerid, 0));
	}
	return 1;
}

CMD:setarfaccao(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid, id;

	if(sscanf(params, "ud", userid, id))
		return SendSyntaxMessage(playerid, "/setarfaccao [id/nome] [fac id(-1 para remover)]");

	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if((id < 0 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
		return SendWarningMessage(playerid, "ID da facção é inválido.");

	if(id == -1)
	{
		ResetFaction(userid);

		SendAdminAction(playerid, "Você removeu %s da facção ID: %d.", ReturnName(userid, 0), id);
		
		if(userid != playerid)
			SendAdminAction(userid, "Você foi removido da facção pelo administrador %s.", ReturnName(playerid, 0));
	}
	else
	{
		PlayerData[userid][pFactionRank] = 1;
		SetFaction(userid, id);

		SendAdminAction(playerid, "Você colocou %s na facção \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
		
		if(userid != playerid)
			SendAdminAction(userid, "Você foi colocado na facção \"%s\" pelo administrador %s.", FactionData[id][factionName], ReturnName(playerid, 0));
	}
	return 1;
}

CMD:setarrank(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid, rank, factionid;

	if(sscanf(params, "ud", userid, rank))
		return SendSyntaxMessage(playerid, "/setarrank [id/nome] [rank id]");

	if(!IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if((factionid = PlayerData[userid][pFaction]) == -1)
		return SendWarningMessage(playerid, "Esse jogador não faz parte de uma facção.");

	if((rank < 0 || rank > FactionData[factionid][factionRanks]))
		return SendWarningMessage(playerid, "Valor do rank é inválido.");

	PlayerData[userid][pFactionRank] = rank;

	SendAdminAction(playerid, "Você setou o rank de %s para %d.", ReturnName(userid, 0), rank);
	
	if(userid != playerid)
		SendAdminAction(userid, "Você teve seu rank da facção alterado para %d pelo administrador %s.", rank, ReturnName(playerid, 0));

	return 1;
}

CMD:criarpp(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1, Float:x, Float:y, Float:z, type;

	if(sscanf(params, "d", type))
	{
		SendSyntaxMessage(playerid, "/criarpp [tipo]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "1: Pequenas delegacias e 2: SACF");
	}

	GetPlayerPos(playerid, x, y, z);

	id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), type);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de pontos de prisão criados.");

	SendAdminAction(playerid, "Você criou com sucesso o ponto de prisão ID: %d.", id);
	return 1;
}

CMD:deletarpp(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Arrest_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso o ponto de prisão ID: %d.", id);
		Arrest_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está perto de nenhum ponto de prisão.");
	return 1;
}

CMD:criarcofre(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new facid, Float:x, Float:y, Float:z;

	if(sscanf(params, "d", facid))
		return SendSyntaxMessage(playerid, "/criarcofre [facção id] (veja em /facs)");

	if(!FactionData[facid][factionExists] || facid > MAX_FACTIONS)
		return SendWarningMessage(playerid, "Essa facção não existe, confira em /facs.");

	GetPlayerPos(playerid, x, y, z);
	GetXYInFrontOfPlayer(playerid, x, y, 2.0);

	new cofreid = Vault_Create(playerid, facid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	if(cofreid == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de cofres de facções criados.");

	SendAdminAction(playerid, "Você criou com sucesso o cofre ID: %d para a facção %d.", cofreid, facid);
	return 1;
}

CMD:deletarcofre(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Vault_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso o cofre ID: %d.", id);
		Vault_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo de nenhum cofre.");
	return 1;
}

CMD:criarwh(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new facid, Float:x, Float:y, Float:z;

	if(sscanf(params, "d", facid))
		return SendSyntaxMessage(playerid, "/criarwh [facção id] (veja em /facs)");

	if(!FactionData[facid][factionExists] || facid > MAX_FACTIONS)
		return SendWarningMessage(playerid, "Essa facção não existe, confira em /facs.");

	GetPlayerPos(playerid, x, y, z);

	new whid = WH_Create(facid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	if(whid == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de wh de facções criados.");

	SendAdminAction(playerid, "Você criou com sucesso a wh ID: %d para a facção %d.", whid, facid);
	return 1;
}

CMD:deletarwh(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = WH_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso a wh ID: %d.", id);
		WH_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo de nenhuma wh.");
	return 1;
}

CMD:criarveiculo(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new model, color1, color2, Float:carhealth, carsiren;

	if(sscanf(params, "dddfd", model, color1, color2, carhealth, carsiren))
	{
		SendSyntaxMessage(playerid, "/criarveiculo [modelo] [cor1] [cor2] [car health] [siren 0/1]");
		return 1;
	}

	if(PlayerData[playerid][pEditingCar])
		return SendWarningMessage(playerid, "Você já está configurando um carro, termine para poder criar outro.");

	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(color1 < 0 || color1 > 255 || color2 < 0 || color2 > 255)
		return SendWarningMessage(playerid, "O valor informado para a cor é inválido. (0 à 255)");

	if(model < 400 || model > 611)
		return SendWarningMessage(playerid, "O valor informado para o modelo é inválido. (400 à 611)");

	if(carhealth < 1000.0)
		return SendWarningMessage(playerid, "O valor informado para a lataria é inferior ao mínimo. (1000.0)");

	if(!(0 <= carsiren <= 1))
		return SendWarningMessage(playerid, "Valor inválido para a sirene, use 0 ou 1.");

	PlayerData[playerid][pCreateCar] = CreateVehicle(model, x, y, z, a, color1, color2, -1, carsiren);
	PlayerData[playerid][pColor1Car] = color1;
	PlayerData[playerid][pColor2Car] = color2;
	PlayerData[playerid][pHealthCar] = carhealth;
	PlayerData[playerid][pEditingCar] = true;
	PlayerData[playerid][pCarSiren] = carsiren;

	SetEngineStatus(PlayerData[playerid][pCreateCar], true);

	VehicleData[PlayerData[playerid][pCreateCar]][vehicleFuel] = Fuel_GetQuantity(PlayerData[playerid][pCreateCar]);

	LinkVehicleToInterior(PlayerData[playerid][pCreateCar], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(PlayerData[playerid][pCreateCar], GetPlayerVirtualWorld(playerid));

	AC_PutPlayerInVehicle(playerid, PlayerData[playerid][pCreateCar], 0);

	return 1;
}

CMD:salvarveiculo(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new option[10], id;

	if(sscanf(params, "s[10]d", option, id))
	{
		SendSyntaxMessage(playerid, "/salvarveiculo [tipo] [tipo id]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "faction, job");
	}

	if(!strcmp(option, "faction", true))
	{
		if(FactionData[id][factionExists])
		{
			if(PlayerData[playerid][pEditingCar] && IsPlayerInVehicle(playerid, PlayerData[playerid][pCreateCar]))
			{
				new Float:x, Float:y, Float:z, Float:angle;

				GetVehiclePos(PlayerData[playerid][pCreateCar], x, y, z);
				GetVehicleZAngle(PlayerData[playerid][pCreateCar], angle);

				new carid = Vehicle_Create(playerid, GetVehicleModel(PlayerData[playerid][pCreateCar]), x, y, z, angle, PlayerData[playerid][pHealthCar], id, -1, PlayerData[playerid][pCarSiren]);

				if(carid == -1)
				{
					PlayerData[playerid][pEditingCar] = false;
					DestroyVehicle(PlayerData[playerid][pCreateCar]);
					SendWarningMessage(playerid, "Não foi possível criar o veículo para a facção, o servidor já está no limite. (%d)", MAX_VEHICLES);
					SendWarningMessage(playerid, "Tire uma SS (F8) e envie para algum developer.");
					return 1;
				}

				SendAdminAction(playerid, "Veículo salvo para a facção ID: %d.", id);
			}
			else
			{
				SendWarningMessage(playerid, "Você não está dentro de um veículo criado por você.");
			}
		}
		else
		{
			SendWarningMessage(playerid, "Facção inexistente ou id inválido, confira em: /facs");
		}
	}
	else if(!strcmp(option, "job", true))
	{
		if(id < 1 || id > sizeof(g_aJobs))
			return SendWarningMessage(playerid, "Emprego ID inválido, confira em /jobs");

		if(PlayerData[playerid][pEditingCar] && IsPlayerInVehicle(playerid, PlayerData[playerid][pCreateCar]))
		{
			new Float:x, Float:y, Float:z, Float:angle;

			GetVehiclePos(PlayerData[playerid][pCreateCar], x, y, z);
			GetVehicleZAngle(PlayerData[playerid][pCreateCar], angle);

			new carid = Vehicle_Create(playerid, GetVehicleModel(PlayerData[playerid][pCreateCar]), x, y, z, angle, PlayerData[playerid][pHealthCar], -1, id, PlayerData[playerid][pCarSiren]);

			if(carid == -1)
			{
				PlayerData[playerid][pEditingCar] = false;
				DestroyVehicle(PlayerData[playerid][pCreateCar]);
				SendWarningMessage(playerid, "Não foi possível criar o veículo para o emprego, o servidor já está no limite. (%d)", MAX_VEHICLES);
				SendWarningMessage(playerid, "Tire uma SS (F8) e envie para algum developer.");
				return 1;
			}

			SendAdminAction(playerid, "Veículo salvo para o emprego ID: %d.", id);
		}
		else
		{
			SendWarningMessage(playerid, "Você não está dentro de um veículo criado por você.");
		}
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro informado é inválido.");
	}

	return 1;
}

CMD:deletarveiculo(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id;

	if(sscanf(params, "d", id))
	{
		if((id = Vehicle_Nearest(playerid)) != INVALID_VEHICLE_ID && VehicleData[id][vehicleParkedVW] == GetPlayerVirtualWorld(playerid))
		{
			if(VehicleData[id][vehicleFaction] >= 1 || VehicleData[id][vehicleJob] >= 1)
			{				
				VehicleData[id][vehicleFaction] = 0;
				VehicleData[id][vehicleJob] = -1;
				VehicleData[id][vehicleParked] = 0;

				Vehicle_Remove(id);
				Vehicle_Destroy(id);

				SendAdminAction(playerid, "Você deletou o veículo ID: %d.", id);
			}
			else
			{
				SendSyntaxMessage(playerid, "/deletarveiculo [id]");
			}
		}
		else SendWarningMessage(playerid, "Você não está próximo a um veículo.");

		return 1;
	}

	if(IsValidVehicle(id))
	{
		if(VehicleData[id][vehicleFaction] >= 1 || VehicleData[id][vehicleJob] >= 1)
			return SendWarningMessage(playerid, "Use o comando sem parâmetro para deletar um veículo sem dono.");

		if(!(0 <= id <= MAX_VEHICLES))
			return SendWarningMessage(playerid, "ID inválido ou superior ao limite máximo (%d).", MAX_VEHICLES);

		new query[65];

		mysql_format(this, query, sizeof(query), "DELETE FROM `carrosapreendidos` WHERE `vehicle_id` = '%d'", VehicleData[id][vehicleID]);
		mysql_tquery(this, query);

		Vehicle_Remove(id);

		foreach(new i : Player)
		{
			if(PlayerData[i][pID] == VehicleData[id][vehicleOwnerID])
			{
				SendServerMessage(i, "Administrador %s deletou o seu veículo %s (%s).", ReturnName(playerid, 0), ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehiclePlate]);
				break;
			}
		}
		VehicleData[id][vehicleParked] = 0;
		Vehicle_Destroy(id);

		VehicleData[id][vehicleFaction] = 0;
		VehicleData[id][vehicleJob] = -1;

		SendAdminAction(playerid, "Você deletou o veículo %s do %s.", ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehicleOwnerName]);

		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) deletou o veículo %s pertencente a %s.", ReturnName(playerid, 0), playerid, ReturnVehicleModelName(VehicleData[id][vehicleModel]), VehicleData[id][vehicleOwnerName]);
	}
	else
	{
		SendWarningMessage(playerid, "ID informado é inválido ou inexistente.");
	}

	return 1;
}

CMD:criarcamera(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	if(Camera_Nearest(playerid) != -1)
		return SendWarningMessage(playerid, "Você não pode criar uma câmera perto de outra.");

	new id = -1;

	id = Camera_Create(playerid);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de Câmeras criadas.");

	SendAdminAction(playerid, "Você criou com sucesso uma câmera ID: %d.", id);
	return 1;
}

CMD:deletarcamera(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id = -1;

	if((id = Camera_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso a câmera ID: %d.", id);
		Camera_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo de nenhuma câmera.");
	return 1;
}

CMD:criarportao(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new modelid;

	if(sscanf(params, "d", modelid))
		return SendSyntaxMessage(playerid, "/criarportao [modelid]");

	new id = -1;

	id = Gate_Create(playerid, modelid);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de portões criados.");

	SendAdminAction(playerid, "Você criou com sucesso o portão ID: %d.", id);
	return 1;
}

CMD:deletarportao(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id = -1;

	if((id = Gate_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso o portão ID: %d.", id);
		Gate_Delete(id);
	}
	else return SendWarningMessage(playerid, "Você não está próximo de nenhum portão.");
	return 1;
}

CMD:editarportao(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);
	
	new id = -1;

	if((id = Gate_Nearest(playerid)) != -1)
	{
		new option[16], text[64];

		if(sscanf(params, "s[16]S()[64]", option, text))
		{
			SendSyntaxMessage(playerid, "/editarportao [nome]");
			SendClientMessage(playerid, COLOR_ORANGE, "NOMES: {FFFFFF}posicao, senha, velocidade");
			return 1;
		}

		if(!strcmp(option, "posicao", true))
		{
			SendGreenMessage(playerid, "Escolha a nova posição para o portão fechado. LEMBRANDO QUE se você cancelar a edição");
			SendGreenMessage(playerid, "...o objeto será destruído.");			

			PlayerData[playerid][pEditingMode] = 7;
			PlayerData[playerid][pSelectedSlot] = id;

			EditDynamicObject(playerid, GateData[id][gateObject]);
		}
		else if(!strcmp(option, "senha", true))
		{
			new pass;

			if(sscanf(text, "d", pass))
				return SendSyntaxMessage(playerid, "/editarportao senha [senha] (0 para remover a senha)");

			if((pass < 100000 && pass != 0) || pass > 999999)
				return SendWarningMessage(playerid, "A senha deve conter até 6 digitos no máximo.");

			GateData[id][gatePassword] = pass;

			if(!pass)
				SendAdminAction(playerid, "Senha do portão ID: %d removida com sucesso.", id);
			else
				SendAdminAction(playerid, "Senha do portão ID: %d alterada para \"%d\" com sucesso.", id, pass);			

			Gate_Save(id);
		}
		else if(!strcmp(option, "velocidade", true))
		{
			new Float:speed;

			if(sscanf(text, "f", speed))
				return SendSyntaxMessage(playerid, "/editarportao velocidade [velocidade de movimento]");

			if(speed < 0.0 || speed > 10.0)
				return SendWarningMessage(playerid, "Valor especificado inválido, use de 0.0 à 10.0.");

			GateData[id][gateSpeed] = speed;

			SendAdminAction(playerid, "Velocidade do portão ID: %d alterada para %.1f.", id, speed);

			Gate_Save(id);
		}
	}
	else return SendWarningMessage(playerid, "Você não está próximo de nenhum portão.");
	
	return 1;
}

CMD:checarip(playerid, params[])
{	
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new ip[16], query[128];

	if(sscanf(params, "s[16]", ip))
		return SendSyntaxMessage(playerid, "/checarip [ip]");

	mysql_format(this, query, sizeof(query), "SELECT * FROM `players` WHERE `LastIP` = '%e'", ip);
	mysql_tquery(this, query, "OnAdminCheckIP", "ds", playerid, ip);

	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Checar IP", "Encontrando últimas contas logada no IP %s...", "Fechar", "", ip);

	return 1;
}

CMD:editaranticheat(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new count;

	sz_MiscString[0] = 0;

	format(sz_MiscString, sizeof(sz_MiscString), "Proteção\tStatus\n");

	for(new i = 0; i < sizeof(ServerAC); i++)
	{
		switch(ServerAC[i][acAction])
		{
			case AC_WARN: format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t{00FF00}Avisar no painel\n", sz_MiscString, ServerAC[i][acName]);
			case AC_KICK: format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t{FFAA00}Kickar jogador\n", sz_MiscString, ServerAC[i][acName]);
			case AC_BAN: format(sz_MiscString, sizeof(sz_MiscString), "%s%s\t{FF0000}Banir jogador\n", sz_MiscString, ServerAC[i][acName]);
		}
		ListedOptions[playerid][count++] = i;
	}

	Dialog_Show(playerid, EditAnticheat, DIALOG_STYLE_TABLIST_HEADERS, "Anticheat do servidor:", sz_MiscString, "Editar", "Cancelar");

    return 1;
}

CMD:criarlixeira(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id, type;

	if(sscanf(params, "d", type))
	{
		SendSyntaxMessage(playerid, "/criarlixeira [tipo]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "TIPOS", "1: Pequena e 2: Grande.");
	}

	id = TrashCan_Create(playerid, type);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de lixeiras criadas.");

	SendAdminAction(playerid, "Lixeira ID: %d criada com sucesso.", id);

	return 1;
}

CMD:deletarlixeira(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = TrashCan_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Lixeira ID: %d deletada com sucesso.", id);

		TrashCan_Delete(id);		
	}
	else
	{
		SendWarningMessage(playerid, "Você não está próximo de uma lixeira.");
	}

	return 1;
}

CMD:criardesmanche(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id;

	id = Chopshop_Create(playerid);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de desmanches criados.");

	SendAdminAction(playerid, "Desmanche ID: %d criado com sucesso.", id);

	return 1;
}

CMD:deletardesmanche(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Chopshop_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Desmanche ID: %d deletado com sucesso.", id);

		Chopshop_Delete(id);
	}
	else
	{
		SendWarningMessage(playerid, "Você não está próximo de um desmanche.");
	}

	return 1;
}

CMD:editardesmanche(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id = -1;

	if((id = Chopshop_Nearest(playerid)) != -1)
	{
		new string[480];
		for(new i = 0; i < 15; i++)
		{
			format(string, sizeof(string), "%s%d. %s\n", string, i + 1, ReturnVehicleModelName(ChopshopData[id][chopshopCarWanted][i]));
		}

		Dialog_Show(playerid, EditChopshop, DIALOG_STYLE_LIST, "Editar desmanche:", string, "Editar", "Cancelar");
	}
	else
	{
		SendWarningMessage(playerid, "Você não está próximo de um desmanche.");
	}

	return 1;
}

CMD:daradmin(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new userid, adminlevel, query[128];

	if(sscanf(params, "ud", userid, adminlevel))
		return SendSyntaxMessage(playerid, "/daradmin [id/nome] [admin level(1-7)]");

	if(userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendWarningMessage(playerid, JogadorOff);

	if(!adminlevel)
		return SendWarningMessage(playerid, "Para fazer a exclusão de um membro da administração, use /retiraradmin.");

	if(PlayerData[playerid][pAdmin] < ADMIN_Management && adminlevel >= ADMIN_LeadStaff)
		return SendWarningMessage(playerid, "Você não tem autorização para adicionar um jogador neste cargo.");

	if(adminlevel > ADMIN_HeadStaff && adminlevel != ADMIN_LeadStaff && ADMIN_Management)
		return SendWarningMessage(playerid, "Nível administrativo inválido! Válidos: 1, 2, 3, 4, 5, 1000, 1337.");

	PlayerData[userid][pAdmin] = adminlevel;

	SendAdminAction(playerid, "Você %s %s para o nível %d de administrador.", adminlevel > PlayerData[userid][pAdmin] ? "promoveu" : "rebaixou", ReturnName(userid, 0), adminlevel);
	
	if(userid != playerid)
		SendAdminAction(userid, "Você foi %s para o nível %d de administrador por %s.", adminlevel > PlayerData[userid][pAdmin] ? "promovido" : "rebaixado", adminlevel, ReturnName(playerid, 0));

	mysql_format(this, query, sizeof(query), "UPDATE `players` SET `AdminLevel` = '%d' WHERE `Name` = '%e'", adminlevel, ReturnName(userid));
	mysql_tquery(this, query);

	return 1;
}

CMD:criarbueiro(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new name[32];

	if(sscanf(params, "s[32]", name))
		return SendSyntaxMessage(playerid, "/criarbueiro [nome]");

	foreach(new i : Sewer) if(SewerData[i][sewerExists] && !strcmp(SewerData[i][sewerName], name, true))
	{
		SendWarningMessage(playerid, "Este nome \"%s\" já está sendo usado.", name);
		return 1;
	}

	new id;

	id = Sewer_Create(playerid, name);

	if(id == -1)
		return SendWarningMessage(playerid, "A quantia de bueiros no servidor chegou ao seu limite.");

	SendAdminAction(playerid, "Bueiro ID: %d: \"%s\" criado com sucesso.", id, name);

	return 1;
}

CMD:deletarbueiro(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id;

	if((id = Sewer_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Bueiro ID: %d deletado com sucesso.", id);
		Sewer_Delete(id);
	}
	else
	{
		SendWarningMessage(playerid, "Você não está próximo a um bueiro.");
	}

	return 1;
}

CMD:checarlog(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new playername[24];

	if(sscanf(params, "s[24]", playername))
		return SendSyntaxMessage(playerid, "/checarlog [nome_completo]");

	if(!IsValidRoleplayName(playername))
		return SendWarningMessage(playerid, "Nome informado não segue o padrão Nome_Sobrenome.");

	new id = ReturnIDByName(playername);

	if(id != -1) 
	{
		ShowPlayerLog(playerid, id, 1);
		SetPVarInt(playerid, "Log_Player_ID", id);
	}
	else 
	{
		SendWarningMessage(playerid, "Nenhum resultado para o jogador: \"%s\".", playername);
	}

	return 1;
}

CMD:criartorre(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new towername[64];

	if(sscanf(params, "s[64]", towername))
		return SendSyntaxMessage(playerid, "/criartorre [nome]");

	if(strlen(towername) < 3)
		return SendWarningMessage(playerid, "O nome da torre deve ser maior que 3 caracteres.");

	new id;

	id = Tower_Create(playerid, towername);

	if(id == -1)
		return SendWarningMessage(playerid, "Não foi possível criar uma torre de celular.");

	SendAdminAction(playerid, "Torre de Celular ID: %d criada com sucesso.", id);

	return 1;
}

CMD:editartorre(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new towerid, option[16], idx[64];

	if(sscanf(params, "ds[16]S()[64]", towerid, option, idx))
	{
		SendSyntaxMessage(playerid, "/editartorre [torre id] [opção]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "OPÇÃO", "nome, sinal");
	}

	if((towerid < 0 || towerid >= MAX_TOWERS) || !TowerData[towerid][towerExists])
		return SendWarningMessage(playerid, "Torre ID: %d é inválida ou ultrapassa o limite máximo (%d).", towerid, MAX_TOWERS);

	if(!strcmp(option, "nome"))
	{
		if(strlen(idx) < 3)
			return SendSyntaxMessage(playerid, "/editartorre %d %s [nome]", towerid, option);

		SendAdminAction(playerid, "Você alterou o nome da torre ID: %d para \"%s\".", towerid, idx);

		format(TowerData[towerid][towerName], 64, idx);
		Tower_Save(towerid);
	}
	else if(!strcmp(option, "sinal"))
	{
		new Float:signal;

		if(sscanf(idx, "f", signal))
			return SendSyntaxMessage(playerid, "/editartorre %d %s [potência do sinal]", towerid, option);

		SendAdminAction(playerid, "Você alterou o sinal da torre \"%s\" de %.1f para %.1f.", TowerData[towerid][towerName], TowerData[towerid][towerSignal], signal);

		TowerData[towerid][towerSignal] = signal;
		Tower_Save(towerid);
	}
	else
	{
		SendWarningMessage(playerid, "Parâmetro inválido.");
	}

	return 1;
}

CMD:deletartorre(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id;

	if((id = Tower_Nearest(playerid)) != -1)
	{
		Tower_Delete(id);
		SendAdminAction(playerid, "Torre de Celular ID: %d deletada com sucesso.", id);
	}
	else
	{
		SendWarningMessage(playerid, "Você não está próxmo de uma torre de celular.");
	}

	return 1;
}

CMD:criarcomplexo(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new name[64];

	if(sscanf(params, "s[64]", name))
		return SendSyntaxMessage(playerid, "/criarcomplexo [nome]");

	if(strlen(name) > 64)
		return SendWarningMessage(playerid, "Não exceda o limite máximo de caracteres.");

	foreach(new i : Complex) if(!strcmp(ComplexData[i][complexName], name, true))
		return SendWarningMessage(playerid, "Já existe um complexo com esse nome \"%s\'.", name);

	new id = Complex_Create(playerid, name);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de complexos criados.");

	SendAdminAction(playerid, "Você criou com sucesso o complexo ID: %d.", id);

	return 1;
}

CMD:deletarcomplexo(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id;

	if((id = Complex_Nearest(playerid)) != -1)
	{
		SendAdminAction(playerid, "Você deletou com sucesso o complexo ID: %d.", id);
		Complex_Delete(playerid, id);
	}
	else
		SendWarningMessage(playerid, "Você não está próximo ao pickup de um complexo.");

	return 1;
}

CMD:editarcomplexo(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id, option[16], moreoption[64];

	if(sscanf(params, "ds[16]S()[64]", id, option, moreoption))
	{
		SendSyntaxMessage(playerid, "/editartorre [id real] [opção]");
		return SendFormatMessage(playerid, COLOR_ORANGE, "OPÇÃO", "nome, trancar, saida");
	}

	if((id < 0 || id > MAX_COMPLEX) || !ComplexData[id][complexExists])
		return SendWarningMessage(playerid, "ID informado (%d) é inválido.");

	if(!strcmp(option, "nome"))
	{
		new name[64];

		if(sscanf(moreoption, "s[64]", name))
			return SendSyntaxMessage(playerid, "/editarcomplexo nome [novo nome]");

		if(strlen(name) > 64)
			return SendWarningMessage(playerid, "Não exceda o limite de 64 caracteres.");

		format(ComplexData[id][complexName], 64, name);

		Complex_Refresh(id);
		Complex_Save(id);

		SendAdminAction(playerid, "Você alterou o nome do complexo ID: %d para: %s.", id, name);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou o nome do Complexo ID: %d para %s.", ReturnName(playerid, 0), playerid, id, name);
	}
	else if(!strcmp(option, "trancar"))
	{
		ComplexData[id][complexLocked] = ComplexData[id][complexLocked] ? 0 : 1;

		Complex_Save(id);

		SendAdminAction(playerid, "Você %s o complexo ID: %d.", ComplexData[id][complexLocked] ? "trancou" : "destrancou", id);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) %s o Complexo ID: %d.", ReturnName(playerid, 0), playerid, ComplexData[id][complexLocked] ? "trancou" : "destrancou", id);
	}
	else if(!strcmp(option, "saida"))
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		ComplexData[id][complexIntX] = x;
		ComplexData[id][complexIntY] = y;
		ComplexData[id][complexIntZ] = z;

		ComplexData[id][complexInterior] = GetPlayerInterior(playerid);
		ComplexData[id][complexVW] = GetPlayerVirtualWorld(playerid);

		Complex_Save(id);

		SendAdminAction(playerid, "Você alterou o Interior do complexo ID: %d.", id);
		SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) alterou o Interior do Complexo ID: %d.", ReturnName(playerid, 0), playerid, id);
	}
	else
		SendWarningMessage(playerid, "Parâmetro inválido.");


	return 1;
}

CMD:criarentrada(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new entrancename[128];

	if(sscanf(params, "s[128]", entrancename))
		return SendSyntaxMessage(playerid, "/criarentrada [nome da entrada]");

	if(strlen(entrancename) > 128)
		return SendSyntaxMessage(playerid, "Limite excedido (128 caracteres).");

	new id;

	id = Entrance_Create(playerid, entrancename);

	if(id == -1)
		return SendWarningMessage(playerid, "O servidor já atingiu o máximo de entradas criadas.");

	SendAdminAction(playerid, "Você criou a entrada \"%s\" ID: %d com sucesso.", entrancename, id);
	SendServerMessage(playerid, "Para editar esta entrada utilize o comando: /editarentrada.");

	return 1;
}

CMD:deletarentrada(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id;

	if((id = Entrance_Nearest(playerid)) != -1)
	{
		Entrance_Delete(id);
		SendAdminAction(playerid, "Você deletou com sucesso a entrada ID: %d.", id);
	}
	else
		SendWarningMessage(playerid, "Você não próximo ao pickup de uma entrada.");

	return 1;
}

CMD:editarentrada(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	new id, option[12], moreoption[128];

	if(sscanf(params, "ds[12]S()[128]", id, option, moreoption))
	{
		SendSyntaxMessage(playerid, "/editarentrada [id] [opção]");
		return SendFormatMessage(playerid, COLOR_YELLOW, "OPÇÃO", "nome, tipo, saida");
	}

	if(id < 0 || id > MAX_ENTRANCES || !EntranceData[id][entranceExists])
		return SendWarningMessage(playerid, "ID informado (%d) é inválido.", id);

	if(!strcmp(option, "nome"))
	{
		new name[128];

		if(sscanf(moreoption, "s[128]", name))
			return SendSyntaxMessage(playerid, "/editarentrada %d nome [novo nome]", id);

		if(strlen(name) > 128)
			return SendWarningMessage(playerid, "Limite excedido (128 caracteres).");

		format(EntranceData[id][entranceName], 128, name);

		SendAdminAction(playerid, "Você alterou o nome da entrada ID: %d para \"%s\".", id, name);

		Entrance_Save(id);
	}
	else if(!strcmp(option, "tipo"))
	{
		new type;

		if(sscanf(moreoption, "d", type))
		{
			SendSyntaxMessage(playerid, "/editarentrada %d tipo [tipo id]", id);
			SendFormatMessage(playerid, COLOR_YELLOW, "TIPOS ID", "Bank (1), CityHall (2), Gym (3), DMV (4), Police Department (5), Hospital (6)");
			return 1;
		}

		new typename[18];

		switch(type)
		{
			case ENTRANCE_TYPE_BANK: typename = "Bank";
			case ENTRANCE_TYPE_CITYHALL: typename = "City Hall";
			case ENTRANCE_TYPE_GYM: typename = "Gym";
			case ENTRANCE_TYPE_DMV: typename = "DMV";
			case ENTRANCE_TYPE_POLICE: typename = "Police Department";
			case ENTRANCE_TYPE_HOSPITAL: typename = "Hospital";
		}

		EntranceData[id][entranceType] = type;

		SendAdminAction(playerid, "Você alterou o tipo da entrada ID: %d para \"%s\".", id, typename);

		Entrance_Save(id);
	}
	else if(!strcmp(option, "saida"))
	{
		new Float:x, Float:y, Float:z;

		if(GetPlayerPos(playerid, x, y, z))
		{
			EntranceData[id][entranceExit][0] = x;
			EntranceData[id][entranceExit][1] = y;
			EntranceData[id][entranceExit][2] = z;
			EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);
			EntranceData[id][entranceVW] = GetPlayerVirtualWorld(playerid);

			SendAdminAction(playerid, "Você alterou a saída da entrada ID: %d para esta posição.", id);
			
			Entrance_Save(id);
		}
	}
	else
		SendWarningMessage(playerid, "Parâmetro inválido.");

	return 1;
}

/*CMD:(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_LeadStaff))
		return SendWarningMessage(playerid, AdminError);

	return 1;
}*/

// ==-------------- FUNDADOR SCRIPTER -------------------==

CMD:retiraradmin(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Management))
		return SendWarningMessage(playerid, AdminError);
	
	new NomeAdmin[24];

	if(sscanf(params, "s[24]", NomeAdmin)) 
		return SendSyntaxMessage(playerid, "/retiraradmin [Nome]");

	new query[82];

	mysql_format(this, query, sizeof(query), "SELECT * FROM `players` WHERE `Name` = '%e' AND AdminLevel > 0", NomeAdmin);
	mysql_tquery(this, query, "RemovePlayerAdmin", "ds", playerid, NomeAdmin);  
	
	return 1;
}

CMD:paycheck(playerid)
{
	if(!GetPlayerAdmin(playerid, ADMIN_Management))
		return SendWarningMessage(playerid, AdminError);

	foreach(new i : Player) if(PlayerData[i][pLogged])
	{
		PlayerPaycheck(i);
	}

	SendAdminMessage(COLOR_WARNING, "AdminAlert: %s (ID: %d) usou o comando /paycheck.", ReturnName(playerid, 0), playerid);
	
	return 1;
}

CMD:ainvisivel(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Management))
		return SendWarningMessage(playerid, AdminError);
	
	if(!IsPlayerInvisible(playerid))
	{
		SendAdminAction(playerid, "Você está invisível a partir de agora.");
		TogglePlayerInvisibility(playerid, true);
	}	
	else
	{
		SendAdminAction(playerid, "Você voltou a ser visível.");
		TogglePlayerInvisibility(playerid, false);
	}

	return 1;
}

/*CMD:(playerid, params[])
{
	if(!GetPlayerAdmin(playerid, ADMIN_Management))
		return SendWarningMessage(playerid, AdminError);

	return 1;
}*/
// ==-------------- OUTROS COMANDOS ADMINS -------------------==

CMD:pegaradmin(playerid)
{
	if(!strcmp(PlayerIP(playerid), "xx", true) || !strcmp(PlayerIP(playerid), "127.0.0.1", true))
	{
		PlayerData[playerid][pAdmin] = ADMIN_Management;
		SendServerMessage(playerid, "Admin nível máximo adicionado no seu personagem.");
	}
	else
	{
		SendWarningMessage(playerid, AdminError);
	}
	return 1;
}

#include "./modules/marketsystem.pwn"
#include "./modules/questsystem.pwn"
//#include "./modules/halloween.pwn"
#include "./modules/tollbooth.pwn"
#include "./modules/phone.pwn"
#include "./modules/mdcsystem.pwn"

/*CMD:fixtexturasname(playerid)
{
	mysql_tquery(this, "SELECT * FROM objetostextura", "FixObjectTextures", "d", playerid);
	mysql_tquery(this, "SELECT * FROM mobiliastextura", "FixFurnitureTextures", "d", playerid);

	return 1;
}

this::FixObjectTextures(playerid)
{
	new total, feitos, rows, tid, ttxd[64], tname[64], bool:found, query[155], tnickname[64];
	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureID", tid);
		cache_get_value_name(i, "textureTXD", ttxd, 64);
		cache_get_value_name(i, "textureName", tname, 64);

		for(new x = 0, xs = sizeof(g_aTextures); x < xs; x++)
		{
			if(!strcmp(g_aTextures[x][ltTXD], ttxd) && !strcmp(g_aTextures[x][ltTName], tname))
			{
				format(tnickname, 64, g_aTextures[x][ltName]);
				found = true;
				feitos++;
			}
		}

		if(!found)
		{
			mysql_format(this, query, sizeof(query), "UPDATE objetostextura SET textureNickName = 'Textura Removida' WHERE textureID = '%d'", tid);
			mysql_tquery(this, query);
		}
		else
		{
			mysql_format(this, query, sizeof(query), "UPDATE objetostextura SET textureNickName = '%e' WHERE textureID = '%d'", tnickname, tid);
			mysql_tquery(this, query);
			found = false;
		}
		total++;
	}

	SendClientMessageEx(playerid, -1, "OBJETOS: %d encontrados, %d adicionados e %d desconhecidos.", total, feitos, total-feitos);

	return 1;
}

this::FixFurnitureTextures(playerid)
{
	new total, feitos, rows, tid, ttxd[64], tname[64], bool:found, query[155], tnickname[64];
	cache_get_row_count(rows);

	for(new i = 0; i < rows; i++)
	{
		cache_get_value_name_int(i, "textureID", tid);
		cache_get_value_name(i, "textureTXD", ttxd, 64);
		cache_get_value_name(i, "textureName", tname, 64);

		for(new x = 0, xs = sizeof(g_aTextures); x < xs; x++)
		{
			if(!strcmp(g_aTextures[x][ltTXD], ttxd) && !strcmp(g_aTextures[x][ltTName], tname))
			{
				format(tnickname, 64, g_aTextures[x][ltName]);
				found = true;
				feitos++;
			}
		}

		if(!found)
		{
			mysql_format(this, query, sizeof(query), "UPDATE mobiliastextura SET textureNickName = 'Textura Removida' WHERE textureID = '%d'", tid);
			mysql_tquery(this, query);
		}
		else
		{
			mysql_format(this, query, sizeof(query), "UPDATE mobiliastextura SET textureNickName = '%e' WHERE textureID = '%d'", tnickname, tid);
			mysql_tquery(this, query);
			found = false;
		}
		total++;
	}

	SendClientMessageEx(playerid, -1, "MOBILIAS: %d encontrados, %d adicionados e %d desconhecidos.", total, feitos, total-feitos);

	return 1;
}*/

CMD:debug(playerid)
{
	if(PlayerData[playerid][pAdmin] < ADMIN_Management)
		return SendWarningMessage(playerid, "Apenas developers possuem acesso a este comando.");

	//Entradas
	SendClientMessageEx(playerid, -1, "B: %d - H: %d - E: %d - C: %d", PlayerData[playerid][pBusiness], PlayerData[playerid][pHouse], PlayerData[playerid][pEntrance], PlayerData[playerid][pComplex]);
	
	return 1;
}